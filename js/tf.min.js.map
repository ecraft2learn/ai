{"version":3,"file":"tf.min.js","sources":["../node_modules/@tensorflow/tfjs-core/src/environment.ts","../node_modules/@tensorflow/tfjs-core/src/kernel_registry.ts","../node_modules/@tensorflow/tfjs-core/src/util.ts","../node_modules/@tensorflow/tfjs-core/src/profiler.ts","../node_modules/@tensorflow/tfjs-core/src/tensor_format.ts","../node_modules/@tensorflow/tfjs-core/src/tensor.ts","../node_modules/@tensorflow/tfjs-core/src/types.ts","../node_modules/@tensorflow/tfjs-core/src/tensor_util.ts","../node_modules/@tensorflow/tfjs-core/src/engine.ts","../node_modules/@tensorflow/tfjs-core/src/tape.ts","../node_modules/@tensorflow/tfjs-core/src/device_util.ts","../node_modules/@tensorflow/tfjs-core/src/flags.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/canvas_util.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/tex_util.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/webgl_util.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/flags_webgl.ts","../node_modules/@tensorflow/tfjs-core/src/globals.ts","../node_modules/@tensorflow/tfjs-core/src/log.ts","../node_modules/@tensorflow/tfjs-core/src/tensor_util_env.ts","../node_modules/@tensorflow/tfjs-core/src/ops/axis_util.ts","../node_modules/@tensorflow/tfjs-core/src/ops/concat_util.ts","../node_modules/@tensorflow/tfjs-core/src/ops/operation.ts","../node_modules/@tensorflow/tfjs-core/src/ops/complex_ops.ts","../node_modules/@tensorflow/tfjs-core/src/ops/tensor_ops.ts","../node_modules/@tensorflow/tfjs-core/src/ops/concat_split.ts","../node_modules/@tensorflow/tfjs-core/node_modules/seedrandom/lib/alea.js","../node_modules/@tensorflow/tfjs-core/node_modules/seedrandom/lib/xor128.js","../node_modules/@tensorflow/tfjs-core/node_modules/seedrandom/lib/xorwow.js","../node_modules/@tensorflow/tfjs-core/node_modules/seedrandom/lib/xorshift7.js","../node_modules/@tensorflow/tfjs-core/node_modules/seedrandom/lib/xor4096.js","../node_modules/@tensorflow/tfjs-core/node_modules/seedrandom/lib/tychei.js","../node_modules/@tensorflow/tfjs-core/node_modules/seedrandom/seedrandom.js","../node_modules/@tensorflow/tfjs-core/node_modules/seedrandom/index.js","../node_modules/@tensorflow/tfjs-core/src/ops/rand.ts","../node_modules/@tensorflow/tfjs-core/src/ops/array_ops.ts","../node_modules/@tensorflow/tfjs-core/src/ops/array_ops_util.ts","../node_modules/@tensorflow/tfjs-core/src/ops/gather_nd_util.ts","../node_modules/@tensorflow/tfjs-core/src/ops/reduce_util.ts","../node_modules/@tensorflow/tfjs-core/src/ops/scatter_nd_util.ts","../node_modules/@tensorflow/tfjs-core/src/ops/slice_util.ts","../node_modules/@tensorflow/tfjs-core/src/gradients.ts","../node_modules/@tensorflow/tfjs-core/src/ops/softmax.ts","../node_modules/@tensorflow/tfjs-core/src/backends/backend.ts","../node_modules/@tensorflow/tfjs-core/src/ops/broadcast_util.ts","../node_modules/@tensorflow/tfjs-core/src/ops/conv_util.ts","../node_modules/@tensorflow/tfjs-core/src/backends/backend_util.ts","../node_modules/@tensorflow/tfjs-core/src/backends/complex_util.ts","../node_modules/@tensorflow/tfjs-core/src/backends/array_util.ts","../node_modules/@tensorflow/tfjs-core/src/backends/non_max_suppression_impl.ts","../node_modules/@tensorflow/tfjs-core/src/backends/split_shared.ts","../node_modules/@tensorflow/tfjs-core/src/backends/tile_impl.ts","../node_modules/@tensorflow/tfjs-core/src/backends/topk_impl.ts","../node_modules/@tensorflow/tfjs-core/src/backends/where_impl.ts","../node_modules/@tensorflow/tfjs-core/src/backends/packing_util.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/glsl_version.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/shader_compiler_util.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/shader_compiler.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/binaryop_complex_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/binaryop_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/binaryop_packed_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/clip_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/clip_packed_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/concat_packed_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/conv_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/conv_gpu_depthwise.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/conv_packed_gpu_depthwise.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/cumsum_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/depth_to_space_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/fft_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/fill_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/gpgpu_util.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/gpgpu_context.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/gpgpu_math.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/mulmat_packed_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/multinomial_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/pool_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/scatter_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/slice_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/slice_packed_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/texture_manager.ts","../node_modules/@tensorflow/tfjs-core/src/ops/selu_util.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/unaryop_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/unaryop_packed_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/backend_webgl.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/encode_float_packed_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/encode_float_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/strided_slice_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/reverse_packed_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/reverse_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/concat_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/batchnorm_packed_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/batchnorm_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/lrn_packed_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/lrn_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/lrn_grad_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/tile_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/pad_packed_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/pad_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/transpose_packed_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/transpose_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/gather_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/reduce_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/argminmax_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/argminmax_packed_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/ops/segment_util.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/segment_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/select_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/addn_packed_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/addn_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/complex_abs_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/im2col_packed_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/conv_backprop_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/conv_backprop_gpu_depthwise.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/max_pool_backprop_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/avg_pool_backprop_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/resize_bilinear_packed_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/resize_bilinear_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/resize_bilinear_backprop_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/resize_nearest_neighbor_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/resize_nearest_neighbor_backprop_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/onehot_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/diag_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/crop_and_resize_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/gather_nd_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/unpack_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/pack_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/reshape_packed_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/decode_matrix_packed_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/decode_matrix_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/encode_matrix_packed_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/encode_matrix_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/ops/square_grad.ts","../node_modules/@tensorflow/tfjs-core/src/ops/square.ts","../node_modules/@tensorflow/tfjs-core/src/ops/unary_ops.ts","../node_modules/@tensorflow/tfjs-core/src/ops/batchnorm.ts","../node_modules/@tensorflow/tfjs-core/src/ops/logical_ops.ts","../node_modules/@tensorflow/tfjs-core/src/ops/binary_ops.ts","../node_modules/@tensorflow/tfjs-core/src/ops/compare.ts","../node_modules/@tensorflow/tfjs-core/src/ops/segment_ops.ts","../node_modules/@tensorflow/tfjs-core/src/ops/boolean_mask.ts","../node_modules/@tensorflow/tfjs-core/src/ops/conv.ts","../node_modules/@tensorflow/tfjs-core/src/ops/matmul.ts","../node_modules/@tensorflow/tfjs-core/src/ops/reverse.ts","../node_modules/@tensorflow/tfjs-core/src/ops/pool.ts","../node_modules/@tensorflow/tfjs-core/src/ops/slice.ts","../node_modules/@tensorflow/tfjs-core/src/ops/reduction_ops.ts","../node_modules/@tensorflow/tfjs-core/src/ops/relu_ops.ts","../node_modules/@tensorflow/tfjs-core/src/ops/transpose.ts","../node_modules/@tensorflow/tfjs-core/src/ops/lrn.ts","../node_modules/@tensorflow/tfjs-core/src/ops/norm.ts","../node_modules/@tensorflow/tfjs-core/src/ops/lstm.ts","../node_modules/@tensorflow/tfjs-core/src/ops/moving_average.ts","../node_modules/@tensorflow/tfjs-core/src/ops/strided_slice.ts","../node_modules/@tensorflow/tfjs-core/src/ops/topk.ts","../node_modules/@tensorflow/tfjs-core/src/ops/scatter_nd.ts","../node_modules/@tensorflow/tfjs-core/src/ops/spectral_ops.ts","../node_modules/@tensorflow/tfjs-core/src/ops/sparse_to_dense.ts","../node_modules/@tensorflow/tfjs-core/src/ops/sparse_to_dense_util.ts","../node_modules/@tensorflow/tfjs-core/src/ops/gather_nd.ts","../node_modules/@tensorflow/tfjs-core/src/ops/diag.ts","../node_modules/@tensorflow/tfjs-core/src/ops/dropout.ts","../node_modules/@tensorflow/tfjs-core/src/ops/dropout_util.ts","../node_modules/@tensorflow/tfjs-core/src/ops/signal_ops.ts","../node_modules/@tensorflow/tfjs-core/src/ops/in_top_k.ts","../node_modules/@tensorflow/tfjs-core/src/ops/loss_ops.ts","../node_modules/@tensorflow/tfjs-core/src/ops/linalg_ops.ts","../node_modules/@tensorflow/tfjs-core/src/ops/image_ops.ts","../node_modules/@tensorflow/tfjs-core/src/ops/fused_util.ts","../node_modules/@tensorflow/tfjs-core/src/ops/fused_ops.ts","../node_modules/@tensorflow/tfjs-core/src/backends/cpu/cpu_util.ts","../node_modules/@tensorflow/tfjs-core/src/backends/cpu/backend_cpu.ts","../node_modules/@tensorflow/tfjs-core/src/ops/erf_util.ts","../node_modules/@tensorflow/tfjs-core/src/backends/cpu/square.ts","../node_modules/@tensorflow/tfjs-core/src/backends/cpu/non_max_suppression_v5.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/square.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/from_pixels_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/fromPixels.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/from_pixels_packed_gpu.ts","../node_modules/@tensorflow/tfjs-core/src/backends/webgl/non_max_suppression_v5.ts","../node_modules/@tensorflow/tfjs-core/src/platforms/platform_browser.ts","../node_modules/@tensorflow/tfjs-core/src/platforms/platform_node.ts","../node_modules/@tensorflow/tfjs-core/src/io/types.ts","../node_modules/@tensorflow/tfjs-core/src/io/io_utils.ts","../node_modules/@tensorflow/tfjs-core/src/io/router_registry.ts","../node_modules/@tensorflow/tfjs-core/src/io/model_management.ts","../node_modules/@tensorflow/tfjs-core/src/io/indexed_db.ts","../node_modules/@tensorflow/tfjs-core/src/io/local_storage.ts","../node_modules/@tensorflow/tfjs-core/src/io/browser_files.ts","../node_modules/@tensorflow/tfjs-core/src/io/progress.ts","../node_modules/@tensorflow/tfjs-core/src/io/weights_loader.ts","../node_modules/@tensorflow/tfjs-core/src/io/http.ts","../node_modules/@tensorflow/tfjs-core/src/io/passthrough.ts","../node_modules/@tensorflow/tfjs-core/src/ops/confusion_matrix.ts","../node_modules/@tensorflow/tfjs-core/src/ops/browser.ts","../node_modules/@tensorflow/tfjs-core/src/serialization.ts","../node_modules/@tensorflow/tfjs-core/src/test_util.ts","../node_modules/@tensorflow/tfjs-core/src/webgl.ts","../node_modules/@tensorflow/tfjs-core/src/optimizers/optimizer.ts","../node_modules/@tensorflow/tfjs-core/src/optimizers/adadelta_optimizer.ts","../node_modules/@tensorflow/tfjs-core/src/optimizers/adagrad_optimizer.ts","../node_modules/@tensorflow/tfjs-core/src/optimizers/adam_optimizer.ts","../node_modules/@tensorflow/tfjs-core/src/optimizers/adamax_optimizer.ts","../node_modules/@tensorflow/tfjs-core/src/optimizers/sgd_optimizer.ts","../node_modules/@tensorflow/tfjs-core/src/optimizers/momentum_optimizer.ts","../node_modules/@tensorflow/tfjs-core/src/optimizers/rmsprop_optimizer.ts","../node_modules/@tensorflow/tfjs-core/src/optimizers/optimizer_constructors.ts","../node_modules/@tensorflow/tfjs-core/src/train.ts","../node_modules/@tensorflow/tfjs-core/src/browser_util.ts","../node_modules/@tensorflow/tfjs-core/src/index.ts","../node_modules/@tensorflow/tfjs-layers/src/backend/common.ts","../node_modules/@tensorflow/tfjs-layers/src/errors.ts","../node_modules/@tensorflow/tfjs-layers/src/utils/generic_utils.ts","../node_modules/@tensorflow/tfjs-layers/src/constraints.ts","../node_modules/@tensorflow/tfjs-layers/src/exports_constraints.ts","../node_modules/@tensorflow/tfjs-layers/src/keras_format/common.ts","../node_modules/@tensorflow/tfjs-layers/src/common.ts","../node_modules/@tensorflow/tfjs-layers/src/utils/math_utils.ts","../node_modules/@tensorflow/tfjs-layers/src/backend/tfjs_backend.ts","../node_modules/@tensorflow/tfjs-layers/src/keras_format/initializer_config.ts","../node_modules/@tensorflow/tfjs-layers/src/initializers.ts","../node_modules/@tensorflow/tfjs-layers/src/exports_initializers.ts","../node_modules/@tensorflow/tfjs-layers/src/backend/state.ts","../node_modules/@tensorflow/tfjs-layers/src/utils/types_utils.ts","../node_modules/@tensorflow/tfjs-layers/src/utils/variable_utils.ts","../node_modules/@tensorflow/tfjs-layers/src/variables.ts","../node_modules/@tensorflow/tfjs-layers/src/engine/topology.ts","../node_modules/@tensorflow/tfjs-layers/src/base_callbacks.ts","../node_modules/@tensorflow/tfjs-layers/src/engine/input_layer.ts","../node_modules/@tensorflow/tfjs-layers/src/logs.ts","../node_modules/@tensorflow/tfjs-layers/src/layers/serialization.ts","../node_modules/@tensorflow/tfjs-layers/src/losses.ts","../node_modules/@tensorflow/tfjs-layers/src/metrics.ts","../node_modules/@tensorflow/tfjs-layers/src/user_defined_metadata.ts","../node_modules/@tensorflow/tfjs-layers/src/utils/layer_utils.ts","../node_modules/@tensorflow/tfjs-layers/src/utils/serialization_utils.ts","../node_modules/@tensorflow/tfjs-layers/src/engine/executor.ts","../node_modules/@tensorflow/tfjs-layers/src/engine/training_utils.ts","../node_modules/@tensorflow/tfjs-layers/src/engine/training_dataset.ts","../node_modules/@tensorflow/tfjs-layers/src/engine/training_tensors.ts","../node_modules/@tensorflow/tfjs-layers/src/engine/training.ts","../node_modules/@tensorflow/tfjs-layers/src/optimizers.ts","../node_modules/@tensorflow/tfjs-layers/src/engine/container.ts","../node_modules/@tensorflow/tfjs-layers/src/models.ts","../node_modules/@tensorflow/tfjs-layers/src/exports.ts","../node_modules/@tensorflow/tfjs-layers/src/activations.ts","../node_modules/@tensorflow/tfjs-layers/src/regularizers.ts","../node_modules/@tensorflow/tfjs-layers/src/layers/advanced_activations.ts","../node_modules/@tensorflow/tfjs-layers/src/utils/conv_utils.ts","../node_modules/@tensorflow/tfjs-layers/src/layers/convolutional.ts","../node_modules/@tensorflow/tfjs-layers/src/layers/convolutional_depthwise.ts","../node_modules/@tensorflow/tfjs-layers/src/layers/core.ts","../node_modules/@tensorflow/tfjs-layers/src/layers/embeddings.ts","../node_modules/@tensorflow/tfjs-layers/src/layers/merge.ts","../node_modules/@tensorflow/tfjs-layers/src/layers/noise.ts","../node_modules/@tensorflow/tfjs-layers/src/layers/normalization.ts","../node_modules/@tensorflow/tfjs-layers/src/layers/padding.ts","../node_modules/@tensorflow/tfjs-layers/src/layers/pooling.ts","../node_modules/@tensorflow/tfjs-layers/src/layers/recurrent.ts","../node_modules/@tensorflow/tfjs-layers/src/layers/wrappers.ts","../node_modules/@tensorflow/tfjs-layers/src/exports_layers.ts","../node_modules/@tensorflow/tfjs-layers/src/exports_metrics.ts","../node_modules/@tensorflow/tfjs-layers/src/exports_regularizers.ts","../node_modules/@tensorflow/tfjs-layers/src/callbacks.ts","../node_modules/@tensorflow/tfjs-converter/src/data/compiled_api.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/custom_op/register.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/executors/utils.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/op_list/arithmetic.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/op_list/basic_math.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/op_list/control.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/op_list/convolution.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/op_list/creation.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/op_list/dynamic.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/op_list/evaluation.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/op_list/graph.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/op_list/image.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/op_list/logical.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/op_list/matrices.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/op_list/normalization.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/op_list/reduction.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/op_list/slice_join.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/op_list/spectral.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/op_list/transformation.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/operation_mapper.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/custom_op/node_value_impl.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/executors/arithmetic_executor.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/executors/basic_math_executor.ts","../node_modules/@tensorflow/tfjs-converter/src/executor/tensor_array.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/executors/convolution_executor.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/executors/creation_executor.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/executors/evaluation_executor.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/executors/graph_executor.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/executors/image_executor.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/executors/logical_executor.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/executors/matrices_executor.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/executors/normalization_executor.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/executors/reduction_executor.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/executors/slice_join_executor.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/executors/spectral_executor.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/executors/transformation_executor.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/operation_executor.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/executors/control_executor.ts","../node_modules/@tensorflow/tfjs-converter/src/operations/executors/dynamic_executor.ts","../node_modules/@tensorflow/tfjs-converter/src/executor/execution_context.ts","../node_modules/@tensorflow/tfjs-converter/src/executor/model_analysis.ts","../node_modules/@tensorflow/tfjs-converter/src/executor/graph_executor.ts","../node_modules/@tensorflow/tfjs-converter/src/executor/graph_model.ts","../node_modules/@tensorflow/tfjs-data/node_modules/seedrandom/lib/alea.js","../node_modules/@tensorflow/tfjs-data/node_modules/seedrandom/lib/xor128.js","../node_modules/@tensorflow/tfjs-data/node_modules/seedrandom/lib/xorwow.js","../node_modules/@tensorflow/tfjs-data/node_modules/seedrandom/lib/xorshift7.js","../node_modules/@tensorflow/tfjs-data/node_modules/seedrandom/lib/xor4096.js","../node_modules/@tensorflow/tfjs-data/node_modules/seedrandom/lib/tychei.js","../node_modules/@tensorflow/tfjs-data/node_modules/seedrandom/seedrandom.js","../node_modules/@tensorflow/tfjs-data/node_modules/seedrandom/index.js","../node_modules/@tensorflow/tfjs-data/src/util/deep_map.ts","../node_modules/@tensorflow/tfjs-data/src/util/deep_clone.ts","../node_modules/@tensorflow/tfjs-data/src/util/ring_buffer.ts","../node_modules/@tensorflow/tfjs-data/src/util/growing_ring_buffer.ts","../node_modules/@tensorflow/tfjs-data/src/iterators/lazy_iterator.ts","../node_modules/@tensorflow/tfjs-data/src/dataset.ts","../node_modules/@tensorflow/tfjs-data/src/datasets/text_line_dataset.ts","../node_modules/@tensorflow/tfjs-data/src/datasets/csv_dataset.ts","../node_modules/@tensorflow/tfjs-data/src/iterators/microphone_iterator.ts","../node_modules/@tensorflow/tfjs-data/src/iterators/webcam_iterator.ts","../node_modules/@tensorflow/tfjs-data/src/datasource.ts","../node_modules/@tensorflow/tfjs-data/src/iterators/string_iterator.ts","../node_modules/@tensorflow/tfjs-data/src/iterators/byte_chunk_iterator.ts","../node_modules/@tensorflow/tfjs-data/src/iterators/file_chunk_iterator.ts","../node_modules/@tensorflow/tfjs-data/src/iterators/url_chunk_iterator.ts","../node_modules/@tensorflow/tfjs-data/src/util/source_util.ts","../node_modules/@tensorflow/tfjs-data/src/sources/file_data_source.ts","../node_modules/@tensorflow/tfjs-data/src/sources/url_data_source.ts","../node_modules/@tensorflow/tfjs-data/src/readers.ts","../node_modules/@tensorflow/tfjs-data/src/version.ts","../src/index.ts","../node_modules/@tensorflow/tfjs-core/src/version.ts","../node_modules/@tensorflow/tfjs-layers/src/version.ts","../node_modules/@tensorflow/tfjs-converter/src/version.ts","../src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Platform} from './platforms/platform';\n\n// Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.\nconst TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';\n\ntype FlagValue = number|boolean;\nexport type Flags = {\n  [featureName: string]: FlagValue\n};\nexport type FlagRegistryEntry = {\n  evaluationFn: () => FlagValue;\n  setHook?: (value: FlagValue) => void;\n};\n\n/**\n * The environment contains evaluated flags as well as the registered platform.\n * This is always used as a global singleton and can be retrieved with\n * `tf.env()`.\n */\n/** @doc {heading: 'Environment'} */\nexport class Environment {\n  private flags: Flags = {};\n  private flagRegistry: {[flagName: string]: FlagRegistryEntry} = {};\n\n  private urlFlags: Flags = {};\n\n  platformName: string;\n  platform: Platform;\n\n  // tslint:disable-next-line: no-any\n  constructor(public global: any) {\n    this.populateURLFlags();\n  }\n\n  setPlatform(platformName: string, platform: Platform) {\n    if (this.platform != null) {\n      console.warn(\n          `Platform ${this.platformName} has already been set. ` +\n          `Overwriting the platform with ${platform}.`);\n    }\n    this.platformName = platformName;\n    this.platform = platform;\n  }\n\n  registerFlag(\n      flagName: string, evaluationFn: () => FlagValue,\n      setHook?: (value: FlagValue) => void) {\n    this.flagRegistry[flagName] = {evaluationFn, setHook};\n\n    // Override the flag value from the URL. This has to happen here because the\n    // environment is initialized before flags get registered.\n    if (this.urlFlags[flagName] != null) {\n      const flagValue = this.urlFlags[flagName];\n      console.warn(\n          `Setting feature override from URL ${flagName}: ${flagValue}.`);\n      this.set(flagName, flagValue);\n    }\n  }\n\n  get(flagName: string): FlagValue {\n    if (flagName in this.flags) {\n      return this.flags[flagName];\n    }\n\n    this.flags[flagName] = this.evaluateFlag(flagName);\n\n    return this.flags[flagName];\n  }\n\n  getNumber(flagName: string): number {\n    return this.get(flagName) as number;\n  }\n\n  getBool(flagName: string): boolean {\n    return this.get(flagName) as boolean;\n  }\n\n  getFlags(): Flags {\n    return this.flags;\n  }\n  // For backwards compatibility.\n  get features(): Flags {\n    return this.flags;\n  }\n\n  set(flagName: string, value: FlagValue): void {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(\n          `Cannot set flag ${flagName} as it has not been registered.`);\n    }\n    this.flags[flagName] = value;\n    if (this.flagRegistry[flagName].setHook != null) {\n      this.flagRegistry[flagName].setHook(value);\n    }\n  }\n\n  private evaluateFlag(flagName: string): FlagValue {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(\n          `Cannot evaluate flag '${flagName}': no evaluation function found.`);\n    }\n    return this.flagRegistry[flagName].evaluationFn();\n  }\n\n  setFlags(flags: Flags) {\n    this.flags = Object.assign({}, flags);\n  }\n\n  reset() {\n    this.flags = {};\n    this.urlFlags = {};\n    this.populateURLFlags();\n  }\n\n  private populateURLFlags(): void {\n    if (typeof this.global === 'undefined' ||\n        typeof this.global.location === 'undefined' ||\n        typeof this.global.location.search === 'undefined') {\n      return;\n    }\n\n    const urlParams = getQueryParams(this.global.location.search);\n    if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {\n      const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');\n      keyValues.forEach(keyValue => {\n        const [key, value] = keyValue.split(':') as [string, string];\n        this.urlFlags[key] = parseValue(key, value);\n      });\n    }\n  }\n}\n\nexport function getQueryParams(queryString: string): {[key: string]: string} {\n  const params = {};\n  queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t) => {\n    decodeParam(params, t[0], t[1]);\n    return t.join('=');\n  });\n  return params;\n}\n\nfunction decodeParam(\n    params: {[key: string]: string}, name: string, value?: string) {\n  params[decodeURIComponent(name)] = decodeURIComponent(value || '');\n}\n\nfunction parseValue(flagName: string, value: string): FlagValue {\n  value = value.toLowerCase();\n  if (value === 'true' || value === 'false') {\n    return value === 'true';\n  } else if (`${+ value}` === value) {\n    return +value;\n  }\n  throw new Error(\n      `Could not parse value flag value ${value} for flag ${flagName}.`);\n}\n\n/**\n * Returns the current environment (a global singleton).\n *\n * The environment object contains the evaluated feature values as well as the\n * active platform.\n */\n/** @doc {heading: 'Environment'} */\nexport function env() {\n  return ENV;\n}\n\nexport let ENV: Environment = null;\nexport function setEnvironmentGlobal(environment: Environment) {\n  ENV = environment;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from './tensor';\nimport {DataType, RecursiveArray} from './types';\n\nconst kernelRegistry: Map<string, KernelConfig> = new Map();\nconst gradRegistry: Map<string, GradConfig> = new Map();\n\nexport type DataId = object;\n\ntype AttributeValue =\n    number|number[]|boolean|boolean[]|string|string[]|NamedAttrMap;\n\n/** These are extra non-tensor/primitive params passed to kernel functions. */\nexport type Attribute = AttributeValue|RecursiveArray<AttributeValue>;\n\n/** Specifies the code to run when executing a kernel. */\nexport type KernelFunc = (params: {\n  inputs: NamedTensorInfoMap,\n  backend: {},\n  attrs?: NamedAttrMap,\n}) => TensorInfo|TensorInfo[];\n\n/** The function to run when computing a gradient during backprop. */\nexport type GradFunc = (dy: Tensor|Tensor[], saved: Tensor[]) =>\n    ({[inputName: string]: () => Tensor});\n\n/** Function that gets called after the backend initializes. */\nexport type KernelSetupFunc = (backend: {}) => void;\n/** Function that gets called right before the backend is disposed. */\nexport type KernelDisposeFunc = KernelSetupFunc;\n\n/** Config object for registering a kernel in the global registry. */\nexport interface KernelConfig {\n  kernelName: string;\n  backendName: string;\n  kernelFunc: KernelFunc;\n  setupFunc?: KernelSetupFunc;\n  disposeFunc?: KernelDisposeFunc;\n}\n\n/** Config object for registering a gradient in the global registry. */\nexport interface GradConfig {\n  kernelName: string;\n  gradFunc: GradFunc;\n}\n\n/** Holds metadata for a given tensor. */\nexport interface TensorInfo {\n  dataId: DataId;\n  shape: number[];\n  dtype: DataType;\n}\n\nexport interface NamedTensorInfoMap {\n  [name: string]: TensorInfo;\n}\n\nexport interface NamedAttrMap {\n  [name: string]: Attribute;\n}\n\n/**\n * Returns the kernel function (code) associated with the provided names.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n */\nexport function getKernel(\n    kernelName: string, backendName: string): KernelConfig {\n  const key = makeKey(kernelName, backendName);\n  return kernelRegistry.get(key);\n}\n\n/**\n * Returns the registered gradient info associated with the provided kernel.\n * @param kernelName The official TF kernel name.\n */\nexport function getGradient(kernelName: string): GradConfig {\n  return gradRegistry.get(kernelName);\n}\n\nexport function getKernelsForBackend(backendName: string): KernelConfig[] {\n  const it = kernelRegistry.entries();\n  const result: KernelConfig[] = [];\n\n  while (true) {\n    const {done, value} = it.next();\n    if (done) {\n      break;\n    }\n    const [key, config] = value;\n    const [backend, ] = key.split('_');\n    if (backend === backendName) {\n      result.push(config);\n    }\n  }\n  return result;\n}\n\n/**\n * Registers the function (forward pass) for the kernel in a global registry.\n *\n * @param config A config object with the following properties:\n * - `kernelName` The official name of the kernel.\n * - `backendName` The official name of the backend.\n * - `kernelFunc` The function to run during the forward pass of the kernel.\n * - `setupFunc` Optional. Gets called once, after the backend initializes.\n * - `disposeFunc` Optional. Gets called once, right before the backend is\n * disposed.\n */\nexport function registerKernel(config: KernelConfig) {\n  const {kernelName, backendName} = config;\n  const key = makeKey(kernelName, backendName);\n  if (kernelRegistry.has(key)) {\n    throw new Error(\n        `The kernel '${kernelName}' for backend ` +\n        `'${backendName}' is already registered`);\n  }\n  kernelRegistry.set(key, config);\n}\n\n/**\n * Registers a gradient function for a given kernel in the global registry,\n * to be used during the back-propagation of that kernel.\n *\n * @param config An object with the following properties:\n * - `kernelName` The name of the kernel that the gradient function is for.\n * - `gradFunc` The function to run during back-propagation.\n */\nexport function registerGradient(config: GradConfig) {\n  const {kernelName} = config;\n  if (gradRegistry.has(kernelName)) {\n    console.warn(`Overriding the gradient for '${kernelName}'`);\n  }\n  gradRegistry.set(kernelName, config);\n}\n\n/**\n * Removes the kernel function from the registry.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n *\n */\nexport function unregisterKernel(\n    kernelName: string, backendName: string): void {\n  const key = makeKey(kernelName, backendName);\n  if (!kernelRegistry.has(key)) {\n    throw new Error(\n        `The kernel '${kernelName}' for backend ` +\n        `'${backendName}' is not registered`);\n  }\n  kernelRegistry.delete(key);\n}\n\n/** Removes the registered gradient from the global registry. */\nexport function unregisterGradient(kernelName: string): void {\n  if (!gradRegistry.has(kernelName)) {\n    throw new Error(\n        `The gradient '${kernelName}' for backend is not registered`);\n  }\n  gradRegistry.delete(kernelName);\n}\n\nfunction makeKey(kernelName: string, backendName: string) {\n  return `${backendName}_${kernelName}`;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from './environment';\n\nimport {DataType, DataTypeMap, FlatVector, NumericDataType, RecursiveArray, TensorLike, TypedArray} from './types';\n\n/**\n * Shuffles the array in-place using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1, 2, 3, 4, 5];\n * tf.util.shuffle(a);\n * console.log(a);\n * ```\n *\n * @param array The array to shuffle in-place.\n */\n/** @doc {heading: 'Util', namespace: 'util'} */\n// tslint:disable-next-line:no-any\nexport function shuffle(array: any[]|Uint32Array|Int32Array|\n                        Float32Array): void {\n  let counter = array.length;\n  let temp = 0;\n  let index = 0;\n  // While there are elements in the array\n  while (counter > 0) {\n    // Pick a random index\n    index = (Math.random() * counter) | 0;\n    // Decrease counter by 1\n    counter--;\n    // And swap the last element with it\n    temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n}\n\n/** Clamps a value to a specified range. */\nexport function clamp(min: number, x: number, max: number): number {\n  return Math.max(min, Math.min(x, max));\n}\n\nexport function nearestLargerEven(val: number): number {\n  return val % 2 === 0 ? val : val + 1;\n}\n\nexport function sum(arr: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n\n/**\n * Returns a sample from a uniform [a, b) distribution.\n *\n * @param a The minimum support (inclusive).\n * @param b The maximum support (exclusive).\n * @return A pseudorandom number on the half-open interval [a,b).\n */\nexport function randUniform(a: number, b: number) {\n  const r = Math.random();\n  return (b * r) + (1 - r) * a;\n}\n\n/** Returns the squared Euclidean distance between two vectors. */\nexport function distSquared(a: FlatVector, b: FlatVector): number {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    const diff = Number(a[i]) - Number(b[i]);\n    result += diff * diff;\n  }\n  return result;\n}\n\n/**\n * Asserts that the expression is true. Otherwise throws an error with the\n * provided message.\n *\n * ```js\n * const x = 2;\n * tf.util.assert(x === 2, 'x is not 2');\n * ```\n *\n * @param expr The expression to assert (as a boolean).\n * @param msg A function that returns the message to report when throwing an\n *     error. We use a function for performance reasons.\n */\n/** @doc {heading: 'Util', namespace: 'util'} */\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport function assertShapesMatch(\n    shapeA: number[], shapeB: number[], errorMessagePrefix = ''): void {\n  assert(\n      arraysEqual(shapeA, shapeB),\n      () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n}\n\nexport function assertNonNull(a: TensorLike): void {\n  assert(\n      a != null,\n      () => `The input to the tensor constructor must be a non-null value.`);\n}\n\n// NOTE: We explicitly type out what T extends instead of any so that\n// util.flatten on a nested array of number doesn't try to infer T as a\n// number[][], causing us to explicitly type util.flatten<number>().\n/**\n *  Flattens an arbitrarily nested array.\n *\n * ```js\n * const a = [[1, 2], [3, 4], [5, [6, [7]]]];\n * const flat = tf.util.flatten(a);\n * console.log(flat);\n * ```\n *\n *  @param arr The nested array to flatten.\n *  @param result The destination array which holds the elements.\n *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults\n *      to false.\n */\n/** @doc {heading: 'Util', namespace: 'util'} */\nexport function\nflatten<T extends number|boolean|string|Promise<number>|TypedArray>(\n    arr: T|RecursiveArray<T>, result: T[] = [], skipTypedArray = false): T[] {\n  if (result == null) {\n    result = [];\n  }\n  if (Array.isArray(arr) || isTypedArray(arr) && !skipTypedArray) {\n    for (let i = 0; i < arr.length; ++i) {\n      flatten(arr[i], result, skipTypedArray);\n    }\n  } else {\n    result.push(arr as T);\n  }\n  return result;\n}\n\n/**\n * Returns the size (number of elements) of the tensor given its shape.\n *\n * ```js\n * const shape = [3, 4, 2];\n * const size = tf.util.sizeFromShape(shape);\n * console.log(size);\n * ```\n */\n/** @doc {heading: 'Util', namespace: 'util'} */\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\n\nexport function isScalarShape(shape: number[]): boolean {\n  return shape.length === 0;\n}\n\nexport function arraysEqual(n1: FlatVector, n2: FlatVector) {\n  if (n1 === n2) {\n    return true;\n  }\n  if (n1 == null || n2 == null) {\n    return false;\n  }\n\n  if (n1.length !== n2.length) {\n    return false;\n  }\n  for (let i = 0; i < n1.length; i++) {\n    if (n1[i] !== n2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\n\nexport function tanh(x: number): number {\n  // tslint:disable-next-line:no-any\n  if ((Math as any).tanh != null) {\n    // tslint:disable-next-line:no-any\n    return (Math as any).tanh(x);\n  }\n  if (x === Infinity) {\n    return 1;\n  } else if (x === -Infinity) {\n    return -1;\n  } else {\n    const e2x = Math.exp(2 * x);\n    return (e2x - 1) / (e2x + 1);\n  }\n}\n\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\n\n/**\n * Creates a new array with randomized indicies to a given quantity.\n *\n * ```js\n * const randomTen = tf.util.createShuffledIndices(10);\n * console.log(randomTen);\n * ```\n *\n * @param number Quantity of how many shuffled indicies to create.\n */\n/** @doc {heading: 'Util', namespace: 'util'} */\nexport function createShuffledIndices(n: number): Uint32Array {\n  const shuffledIndices = new Uint32Array(n);\n  for (let i = 0; i < n; ++i) {\n    shuffledIndices[i] = i;\n  }\n  shuffle(shuffledIndices);\n  return shuffledIndices;\n}\n\nexport function rightPad(a: string, size: number): string {\n  if (size <= a.length) {\n    return a;\n  }\n  return a + ' '.repeat(size - a.length);\n}\n\nexport function repeatedTry(\n    checkFn: () => boolean, delayFn = (counter: number) => 0,\n    maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Given the full size of the array and a shape that may contain -1 as the\n * implicit dimension, returns the inferred shape where -1 is replaced.\n * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].\n *\n * @param shape The shape, which may contain -1 in some dimension.\n * @param size The full size (number of elements) of the array.\n * @return The inferred shape where -1 is replaced with the inferred size.\n */\nexport function inferFromImplicitShape(\n    shape: number[], size: number): number[] {\n  let shapeProd = 1;\n  let implicitIdx = -1;\n\n  for (let i = 0; i < shape.length; ++i) {\n    if (shape[i] >= 0) {\n      shapeProd *= shape[i];\n    } else if (shape[i] === -1) {\n      if (implicitIdx !== -1) {\n        throw Error(\n            `Shapes can only have 1 implicit size. ` +\n            `Found -1 at dim ${implicitIdx} and dim ${i}`);\n      }\n      implicitIdx = i;\n    } else if (shape[i] < 0) {\n      throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);\n    }\n  }\n\n  if (implicitIdx === -1) {\n    if (size > 0 && size !== shapeProd) {\n      throw Error(`Size(${size}) must match the product of shape ${shape}`);\n    }\n    return shape;\n  }\n\n  if (shapeProd === 0) {\n    throw Error(\n        `Cannot infer the missing size in [${shape}] when ` +\n        `there are 0 elements`);\n  }\n  if (size % shapeProd !== 0) {\n    throw Error(\n        `The implicit shape can't be a fractional number. ` +\n        `Got ${size} / ${shapeProd}`);\n  }\n\n  const newShape = shape.slice();\n  newShape[implicitIdx] = size / shapeProd;\n  return newShape;\n}\n\nexport function parseAxisParam(\n    axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : [].concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () =>\n          `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(ax => isInt(ax)),\n      () => `All values in axis param must be integers but ` +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\n\n/** Reduces the shape by removing all dimensions of shape 1. */\nexport function squeezeShape(shape: number[], axis?: number[]):\n    {newShape: number[], keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ?\n      null :\n      parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(\n            `Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function getTypedArrayFromDType<D extends NumericDataType>(\n    dtype: D, size: number): DataTypeMap[D] {\n  let values = null;\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n  return values as DataTypeMap[D];\n}\n\nexport function getArrayFromDType<D extends DataType>(\n    dtype: D, size: number): DataTypeMap[D] {\n  let values = null;\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else if (dtype === 'string') {\n    values = new Array<'string'>(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n  return values as DataTypeMap[D];\n}\n\nexport function checkConversionForErrors<D extends DataType>(\n    vals: DataTypeMap[D]|number[], dtype: D): void {\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i] as number;\n    if (isNaN(num) || !isFinite(num)) {\n      throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);\n    }\n  }\n}\n\n/** Returns true if the dtype is valid. */\nexport function isValidDtype(dtype: DataType): boolean {\n  return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' ||\n      dtype === 'int32' || dtype === 'string';\n}\n\n/**\n * Returns true if the new type can't encode the old type without loss of\n * precision.\n */\nexport function hasEncodingLoss(oldType: DataType, newType: DataType): boolean {\n  if (newType === 'complex64') {\n    return false;\n  }\n  if (newType === 'float32' && oldType !== 'complex64') {\n    return false;\n  }\n  if (newType === 'int32' && oldType !== 'float32' && oldType !== 'complex64') {\n    return false;\n  }\n  if (newType === 'bool' && oldType === 'bool') {\n    return false;\n  }\n  return true;\n}\n\nexport function isTypedArray(a: {}): a is Float32Array|Int32Array|Uint8Array {\n  return a instanceof Float32Array || a instanceof Int32Array ||\n      a instanceof Uint8Array;\n}\n\nexport function bytesPerElement(dtype: DataType): number {\n  if (dtype === 'float32' || dtype === 'int32') {\n    return 4;\n  } else if (dtype === 'complex64') {\n    return 8;\n  } else if (dtype === 'bool') {\n    return 1;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n\n/**\n * Returns the approximate number of bytes allocated in the string array - 2\n * bytes per character. Computing the exact bytes for a native string in JS is\n * not possible since it depends on the encoding of the html page that serves\n * the website.\n */\nexport function bytesFromStringArray(arr: Uint8Array[]): number {\n  if (arr == null) {\n    return 0;\n  }\n  let bytes = 0;\n  arr.forEach(x => bytes += x.length);\n  return bytes;\n}\n\n/** Returns true if the value is a string. */\nexport function isString(value: {}): value is string {\n  return typeof value === 'string' || value instanceof String;\n}\n\nexport function isBoolean(value: {}): boolean {\n  return typeof value === 'boolean';\n}\n\nexport function isNumber(value: {}): boolean {\n  return typeof value === 'number';\n}\n\nexport function inferDtype(values: TensorLike): DataType {\n  if (Array.isArray(values)) {\n    return inferDtype(values[0]);\n  }\n  if (values instanceof Float32Array) {\n    return 'float32';\n  } else if (values instanceof Int32Array || values instanceof Uint8Array) {\n    return 'int32';\n  } else if (isNumber(values)) {\n    return 'float32';\n  } else if (isString(values)) {\n    return 'string';\n  } else if (isBoolean(values)) {\n    return 'bool';\n  }\n  return 'float32';\n}\n\nexport function isFunction(f: Function) {\n  return !!(f && f.constructor && f.call && f.apply);\n}\n\nexport function nearestDivisor(size: number, start: number): number {\n  for (let i = start; i < size; ++i) {\n    if (size % i === 0) {\n      return i;\n    }\n  }\n  return size;\n}\n\nexport function computeStrides(shape: number[]): number[] {\n  const rank = shape.length;\n  if (rank < 2) {\n    return [];\n  }\n\n  // Last dimension has implicit stride of 1, thus having D-1 (instead of D)\n  // strides.\n  const strides = new Array(rank - 1);\n  strides[rank - 2] = shape[rank - 1];\n  for (let i = rank - 3; i >= 0; --i) {\n    strides[i] = strides[i + 1] * shape[i + 1];\n  }\n  return strides;\n}\n\nexport function toTypedArray(\n    a: TensorLike, dtype: DataType, debugMode: boolean): TypedArray {\n  if (dtype === 'string') {\n    throw new Error('Cannot convert a string[] to a TypedArray');\n  }\n  if (Array.isArray(a)) {\n    a = flatten(a);\n  }\n  if (debugMode) {\n    checkConversionForErrors(a as number[], dtype);\n  }\n  if (noConversionNeeded(a, dtype)) {\n    return a as TypedArray;\n  }\n  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n    return new Float32Array(a as number[]);\n  } else if (dtype === 'int32') {\n    return new Int32Array(a as number[]);\n  } else if (dtype === 'bool') {\n    const bool = new Uint8Array((a as number[]).length);\n    for (let i = 0; i < bool.length; ++i) {\n      if (Math.round((a as number[])[i]) !== 0) {\n        bool[i] = 1;\n      }\n    }\n    return bool;\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n\nfunction createNestedArray(offset: number, shape: number[], a: TypedArray) {\n  const ret = new Array();\n  if (shape.length === 1) {\n    const d = shape[0];\n    for (let i = 0; i < d; i++) {\n      ret[i] = a[offset + i];\n    }\n  } else {\n    const d = shape[0];\n    const rest = shape.slice(1);\n    const len = rest.reduce((acc, c) => acc * c);\n    for (let i = 0; i < d; i++) {\n      ret[i] = createNestedArray(offset + i * len, rest, a);\n    }\n  }\n  return ret;\n}\n\n// Provide a nested array of TypedArray in given shape.\nexport function toNestedArray(shape: number[], a: TypedArray) {\n  if (shape.length === 0) {\n    // Scalar type should return a single number.\n    return a[0];\n  }\n  const size = shape.reduce((acc, c) => acc * c);\n  if (size === 0) {\n    // A tensor with shape zero should be turned into empty list.\n    return [];\n  }\n  if (size !== a.length) {\n    throw new Error(`[${shape}] does not match the input size.`);\n  }\n\n  return createNestedArray(0, shape, a);\n}\n\nfunction noConversionNeeded(a: TensorLike, dtype: DataType): boolean {\n  return (a instanceof Float32Array && dtype === 'float32') ||\n      (a instanceof Int32Array && dtype === 'int32') ||\n      (a instanceof Uint8Array && dtype === 'bool');\n}\n\nexport function makeOnesTypedArray<D extends DataType>(\n    size: number, dtype: D): DataTypeMap[D] {\n  const array = makeZerosTypedArray(size, dtype);\n  for (let i = 0; i < array.length; i++) {\n    array[i] = 1;\n  }\n  return array;\n}\n\nexport function makeZerosTypedArray<D extends DataType>(\n    size: number, dtype: D): DataTypeMap[D] {\n  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n    return new Float32Array(size) as DataTypeMap[D];\n  } else if (dtype === 'int32') {\n    return new Int32Array(size) as DataTypeMap[D];\n  } else if (dtype === 'bool') {\n    return new Uint8Array(size) as DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n\n/**\n * Returns the current high-resolution time in milliseconds relative to an\n * arbitrary time in the past. It works across different platforms (node.js,\n * browsers).\n *\n * ```js\n * console.log(tf.util.now());\n * ```\n */\n/** @doc {heading: 'Util', namespace: 'util'} */\nexport function now(): number {\n  return env().platform.now();\n}\n\nexport function assertNonNegativeIntegerDimensions(shape: number[]) {\n  shape.forEach(dimSize => {\n    assert(\n        Number.isInteger(dimSize) && dimSize >= 0,\n        () =>\n            `Tensor must have a shape comprised of positive integers but got ` +\n            `shape [${shape}].`);\n  });\n}\n\n/**\n * Returns a platform-specific implementation of\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n *\n * If `fetch` is defined on the global object (`window`, `process`, etc.),\n * `tf.util.fetch` returns that function.\n *\n * If not, `tf.util.fetch` returns a platform-specific solution.\n *\n * ```js\n * const resource = await tf.util.fetch('https://unpkg.com/@tensorflow/tfjs');\n * // handle response\n * ```\n */\n/** @doc {heading: 'Util'} */\nexport function fetch(\n    path: string, requestInits?: RequestInit): Promise<Response> {\n  return env().platform.fetch(path, requestInits);\n}\n\n/**\n * Encodes the provided string into bytes using the provided encoding scheme.\n *\n * @param s The string to encode.\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n */\n/** @doc {heading: 'Util'} */\nexport function encodeString(s: string, encoding = 'utf-8'): Uint8Array {\n  encoding = encoding || 'utf-8';\n  return env().platform.encode(s, encoding);\n}\n\n/**\n * Decodes the provided bytes into a string using the provided encoding scheme.\n * @param bytes The bytes to decode.\n *\n * @param encoding The encoding scheme. Defaults to utf-8.\n */\n/** @doc {heading: 'Util'} */\nexport function decodeString(bytes: Uint8Array, encoding = 'utf-8'): string {\n  encoding = encoding || 'utf-8';\n  return env().platform.decode(bytes, encoding);\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendTimer} from './backends/backend';\nimport {Tensor} from './tensor';\nimport {NamedTensorMap} from './tensor_types';\nimport {DataType, DataTypeMap, TypedArray} from './types';\nimport * as util from './util';\n\nexport class Profiler {\n  constructor(private backendTimer: BackendTimer, private logger?: Logger) {\n    if (logger == null) {\n      this.logger = new Logger();\n    }\n  }\n\n  profileKernel(kernelName: string, inputs: NamedTensorMap, f: () => Tensor[]):\n      Tensor[] {\n    let outputs: Tensor[];\n    const holdResultWrapperFn = () => {\n      outputs = f();\n    };\n    const timer = this.backendTimer.time(holdResultWrapperFn);\n\n    outputs.forEach(r => {\n      // Dangling promise here because we don't want to propagate up\n      // asynchronicity.\n      r.data().then(vals => {\n        checkComputationForErrors(vals, r.dtype, kernelName);\n\n        timer.then(timing => {\n          let extraInfo = '';\n          if (timing.getExtraProfileInfo != null) {\n            extraInfo = timing.getExtraProfileInfo();\n          }\n\n          this.logger.logKernelProfile(\n              kernelName, r, vals, timing.kernelMs, inputs, extraInfo);\n        });\n      });\n    });\n\n    return outputs;\n  }\n}\n\nexport function checkComputationForErrors<D extends DataType>(\n    vals: DataTypeMap[D], dtype: D, kernelName: string): boolean {\n  if (dtype !== 'float32') {\n    // Only floating point computations will generate NaN values\n    return false;\n  }\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i] as number;\n    if (isNaN(num) || !isFinite(num)) {\n      // Throwing custom exception so behavior is testable.\n      console.warn(`Found ${num} in the result of '${kernelName}'`);\n      return true;\n    }\n  }\n  return false;\n}\n\nexport class Logger {\n  logKernelProfile(\n      name: string, result: Tensor, vals: TypedArray, timeMs: number,\n      inputs: NamedTensorMap, extraInfo?: string) {\n    const time = util.rightPad(`${timeMs}ms`, 9);\n    const paddedName = util.rightPad(name, 25);\n    const rank = result.rank;\n    const size = result.size;\n    const shape = util.rightPad(result.shape.toString(), 14);\n    let inputShapesDescription = '';\n\n    for (const name in inputs) {\n      const input = inputs[name];\n      // The input might be a non-tensor (e.g HTMLImageElement), in which case\n      // we claim the output shape as input shape.\n      const inputShape = input.shape || result.shape;\n      const inputRank = inputShape.length;\n      inputShapesDescription +=\n          `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;\n    }\n\n    console.log(\n        `%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}\\t%c${\n            inputShapesDescription}\\t%c${extraInfo}`,\n        'font-weight:bold', 'color:red', 'color:blue', 'color: orange',\n        'color: green', 'color: steelblue');\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray} from './types';\nimport {computeStrides, isString, rightPad, sizeFromShape} from './util';\n\n// Maximum number of values before we decide to show ellipsis.\nconst FORMAT_LIMIT_NUM_VALS = 20;\n// Number of first and last values to show when displaying a, b,...,y, z.\nconst FORMAT_NUM_FIRST_LAST_VALS = 3;\n// Number of significant digits to show.\nconst FORMAT_NUM_SIG_DIGITS = 7;\n\nexport function tensorToString(\n    vals: TypedArray|string[], shape: number[], dtype: DataType,\n    verbose: boolean) {\n  const strides = computeStrides(shape);\n  const padPerCol = computeMaxSizePerColumn(vals, shape, dtype, strides);\n  const rank = shape.length;\n  const valsLines = subTensorToString(vals, shape, dtype, strides, padPerCol);\n  const lines = ['Tensor'];\n  if (verbose) {\n    lines.push(`  dtype: ${dtype}`);\n    lines.push(`  rank: ${rank}`);\n    lines.push(`  shape: [${shape}]`);\n    lines.push(`  values:`);\n  }\n  lines.push(valsLines.map(l => '    ' + l).join('\\n'));\n  return lines.join('\\n');\n}\n\nfunction computeMaxSizePerColumn(\n    vals: TypedArray|string[], shape: number[], dtype: DataType,\n    strides: number[]): number[] {\n  const n = sizeFromShape(shape);\n  const numCols = strides[strides.length - 1];\n  const padPerCol = new Array(numCols).fill(0);\n  const rank = shape.length;\n  const valuesOrTuples =\n      dtype === 'complex64' ? createComplexTuples(vals) : vals;\n\n  if (rank > 1) {\n    for (let row = 0; row < n / numCols; row++) {\n      const offset = row * numCols;\n      for (let j = 0; j < numCols; j++) {\n        padPerCol[j] = Math.max(\n            padPerCol[j],\n            valToString(valuesOrTuples[offset + j], 0, dtype).length);\n      }\n    }\n  }\n  return padPerCol;\n}\n\nfunction valToString(\n    val: number|string|[number, number], pad: number, dtype: DataType) {\n  let valStr: string;\n  if (Array.isArray(val)) {\n    valStr = `${parseFloat(val[0].toFixed(FORMAT_NUM_SIG_DIGITS))} + ` +\n        `${parseFloat(val[1].toFixed(FORMAT_NUM_SIG_DIGITS))}j`;\n  } else if (isString(val)) {\n    valStr = `'${val}'`;\n  } else if (dtype === 'bool') {\n    valStr = boolNumToString(val);\n  } else {\n    valStr = parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString();\n  }\n\n  return rightPad(valStr, pad);\n}\n\nfunction boolNumToString(v: number): string {\n  return v === 0 ? 'false' : 'true';\n}\n\nfunction subTensorToString(\n    vals: TypedArray|string[], shape: number[], dtype: DataType,\n    strides: number[], padPerCol: number[], isLast = true): string[] {\n  const storagePerElement = dtype === 'complex64' ? 2 : 1;\n\n  const size = shape[0];\n  const rank = shape.length;\n  if (rank === 0) {\n    if (dtype === 'complex64') {\n      const complexTuple = createComplexTuples(vals);\n      return [valToString(complexTuple[0], 0, dtype)];\n    }\n    if (dtype === 'bool') {\n      return [boolNumToString(vals[0] as number)];\n    }\n    return [vals[0].toString()];\n  }\n\n  if (rank === 1) {\n    if (size > FORMAT_LIMIT_NUM_VALS) {\n      const firstValsSize = FORMAT_NUM_FIRST_LAST_VALS * storagePerElement;\n\n      let firstVals = Array.from<number|string|[number, number]>(\n          vals.slice(0, firstValsSize));\n      let lastVals = Array.from<number|string|[number, number]>(vals.slice(\n          (size - FORMAT_NUM_FIRST_LAST_VALS) * storagePerElement,\n          size * storagePerElement));\n      if (dtype === 'complex64') {\n        firstVals = createComplexTuples(firstVals);\n        lastVals = createComplexTuples(lastVals);\n      }\n      return [\n        '[' +\n        firstVals.map((x, i) => valToString(x, padPerCol[i], dtype))\n            .join(', ') +\n        ', ..., ' +\n        lastVals\n            .map(\n                (x, i) => valToString(\n                    x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i], dtype))\n            .join(', ') +\n        ']'\n      ];\n    }\n    const displayVals: Array<number|string|[number, number]> =\n        dtype === 'complex64' ? createComplexTuples(vals) :\n                                Array.from<number|string>(vals);\n\n    return [\n      '[' +\n      displayVals.map((x, i) => valToString(x, padPerCol[i], dtype))\n          .join(', ') +\n      ']'\n    ];\n  }\n\n  // The array is rank 2 or more.\n  const subshape = shape.slice(1);\n  const substrides = strides.slice(1);\n  const stride = strides[0] * storagePerElement;\n  const lines: string[] = [];\n  if (size > FORMAT_LIMIT_NUM_VALS) {\n    for (let i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++) {\n      const start = i * stride;\n      const end = start + stride;\n      lines.push(...subTensorToString(\n          vals.slice(start, end), subshape, dtype, substrides, padPerCol,\n          false /* isLast */));\n    }\n    lines.push('...');\n    for (let i = size - FORMAT_NUM_FIRST_LAST_VALS; i < size; i++) {\n      const start = i * stride;\n      const end = start + stride;\n      lines.push(...subTensorToString(\n          vals.slice(start, end), subshape, dtype, substrides, padPerCol,\n          i === size - 1 /* isLast */));\n    }\n  } else {\n    for (let i = 0; i < size; i++) {\n      const start = i * stride;\n      const end = start + stride;\n      lines.push(...subTensorToString(\n          vals.slice(start, end), subshape, dtype, substrides, padPerCol,\n          i === size - 1 /* isLast */));\n    }\n  }\n  const sep = rank === 2 ? ',' : '';\n  lines[0] = '[' + lines[0] + sep;\n  for (let i = 1; i < lines.length - 1; i++) {\n    lines[i] = ' ' + lines[i] + sep;\n  }\n  let newLineSep = ',\\n';\n  for (let i = 2; i < rank; i++) {\n    newLineSep += '\\n';\n  }\n  lines[lines.length - 1] =\n      ' ' + lines[lines.length - 1] + ']' + (isLast ? '' : newLineSep);\n  return lines;\n}\n\nfunction createComplexTuples(vals: Array<{}>|\n                             TypedArray): Array<[number, number]> {\n  const complexTuples: Array<[number, number]> = [];\n  for (let i = 0; i < vals.length; i += 2) {\n    complexTuples.push([vals[i], vals[i + 1]] as [number, number]);\n  }\n  return complexTuples;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {tensorToString} from './tensor_format';\nimport {ArrayMap, BackendValues, DataType, DataTypeMap, DataValues, NumericDataType, Rank, ShapeMap, SingleValueMap, TensorLike, TensorLike1D, TensorLike3D, TensorLike4D, TypedArray} from './types';\nimport * as util from './util';\nimport {computeStrides, toNestedArray} from './util';\n\nexport interface TensorData<D extends DataType> {\n  dataId?: DataId;\n  values?: DataTypeMap[D];\n}\n\n// This interface mimics KernelBackend (in backend.ts), which would create a\n// circular dependency if imported.\nexport interface Backend {}\n\n/**\n * A mutable object, similar to `tf.Tensor`, that allows users to set values\n * at locations before converting to an immutable `tf.Tensor`.\n *\n * See `tf.buffer` for creating a tensor buffer.\n */\n/** @doc {heading: 'Tensors', subheading: 'Classes'} */\nexport class TensorBuffer<R extends Rank, D extends DataType = 'float32'> {\n  size: number;\n  shape: ShapeMap[R];\n  strides: number[];\n  values: DataTypeMap[D];\n\n  constructor(shape: ShapeMap[R], public dtype: D, values?: DataTypeMap[D]) {\n    this.shape = shape.slice() as ShapeMap[R];\n    this.size = util.sizeFromShape(shape);\n\n    if (values != null) {\n      const n = values.length;\n      util.assert(\n          n === this.size,\n          () => `Length of values '${n}' does not match the size ` +\n              `inferred by the shape '${this.size}'.`);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `complex64 dtype TensorBuffers are not supported. Please create ` +\n          `a TensorBuffer for the real and imaginary parts separately and ` +\n          `call tf.complex(real, imag).`);\n    }\n    this.values = values || util.getArrayFromDType(dtype, this.size);\n    this.strides = computeStrides(shape);\n  }\n\n  /**\n   * Sets a value in the buffer at a given location.\n   *\n   * @param value The value to set.\n   * @param locs  The location indices.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Creation'} */\n  set(value: SingleValueMap[D], ...locs: number[]): void {\n    if (locs.length === 0) {\n      locs = [0];\n    }\n    util.assert(\n        locs.length === this.rank,\n        () => `The number of provided coordinates (${locs.length}) must ` +\n            `match the rank (${this.rank})`);\n\n    const index = this.locToIndex(locs);\n    this.values[index] = value as number;\n  }\n\n  /**\n   * Returns the value in the buffer at the provided location.\n   *\n   * @param locs The location indices.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Creation'} */\n  get(...locs: number[]): SingleValueMap[D] {\n    if (locs.length === 0) {\n      locs = [0];\n    }\n    let i = 0;\n    for (const loc of locs) {\n      if (loc < 0 || loc >= this.shape[i]) {\n        const msg = `Requested out of range element at ${locs}. ` +\n            `  Buffer shape=${this.shape}`;\n        throw new Error(msg);\n      }\n      i++;\n    }\n    let index = locs[locs.length - 1];\n    for (let i = 0; i < locs.length - 1; ++i) {\n      index += this.strides[i] * locs[i];\n    }\n    return this.values[index] as SingleValueMap[D];\n  }\n\n  locToIndex(locs: number[]): number {\n    if (this.rank === 0) {\n      return 0;\n    } else if (this.rank === 1) {\n      return locs[0];\n    }\n    let index = locs[locs.length - 1];\n    for (let i = 0; i < locs.length - 1; ++i) {\n      index += this.strides[i] * locs[i];\n    }\n    return index;\n  }\n\n  indexToLoc(index: number): number[] {\n    if (this.rank === 0) {\n      return [];\n    } else if (this.rank === 1) {\n      return [index];\n    }\n    const locs: number[] = new Array(this.shape.length);\n    for (let i = 0; i < locs.length - 1; ++i) {\n      locs[i] = Math.floor(index / this.strides[i]);\n      index -= locs[i] * this.strides[i];\n    }\n    locs[locs.length - 1] = index;\n    return locs;\n  }\n\n  get rank() {\n    return this.shape.length;\n  }\n\n  /**\n   * Creates an immutable `tf.Tensor` object from the buffer.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Creation'} */\n  toTensor(): Tensor<R> {\n    return trackerFn().makeTensor(this.values, this.shape, this.dtype) as\n        Tensor<R>;\n  }\n}\n\nexport interface TensorTracker {\n  makeTensor(\n      values: DataValues, shape: number[], dtype: DataType,\n      backend?: Backend): Tensor;\n  makeVariable(\n      initialValue: Tensor, trainable?: boolean, name?: string,\n      dtype?: DataType): Variable;\n  incRef(a: Tensor, backend: Backend): void;\n  disposeTensor(t: Tensor): void;\n  disposeVariable(v: Variable): void;\n  read(dataId: DataId): Promise<BackendValues>;\n  readSync(dataId: DataId): BackendValues;\n}\n\n/**\n * The Tensor class calls into this handler to delegate chaining operations.\n */\nexport interface OpHandler {\n  cast<T extends Tensor>(x: T, dtype: DataType): T;\n  buffer<R extends Rank, D extends DataType>(\n      shape: ShapeMap[R], dtype: D,\n      values?: DataTypeMap[D]): TensorBuffer<R, D>;\n  print<T extends Tensor>(x: T, verbose: boolean): void;\n  reshape<R2 extends Rank>(x: Tensor, shape: ShapeMap[R2]): Tensor<R2>;\n  expandDims<R2 extends Rank>(x: Tensor, axis: number): Tensor<R2>;\n  cumsum<T extends Tensor>(\n      x: Tensor, axis: number, exclusive: boolean, reverse: boolean): T;\n  squeeze<T extends Tensor>(x: Tensor, axis?: number[]): T;\n  clone<T extends Tensor>(x: T): T;\n  oneHot(\n      x: Tensor|TensorLike, depth: number, onValue?: number,\n      offValue?: number): Tensor;\n  tile<T extends Tensor>(x: T, reps: number[]): T;\n  gather<T extends Tensor>(x: T, indices: Tensor|TensorLike, axis: number): T;\n  matMul<T extends Tensor>(\n      a: T, b: T|TensorLike, transposeA: boolean, transposeB: boolean): T;\n  dot(t1: Tensor, t2: Tensor|TensorLike): Tensor;\n  norm(\n      x: Tensor, ord: number|'euclidean'|'fro', axis: number|number[],\n      keepDims: boolean): Tensor;\n  slice<R extends Rank, T extends Tensor<R>>(\n      x: T, begin: number|number[], size?: number|number[]): T;\n  split<T extends Tensor>(\n      x: T, numOrSizeSplits: number[]|number, axis?: number): T[];\n  reverse<T extends Tensor>(x: T, axis?: number|number[]): T;\n  concat<T extends Tensor>(tensors: Array<T|TensorLike>, axis: number): T;\n  stack<T extends Tensor>(tensors: Array<T|TensorLike>, axis: number): Tensor;\n  unstack<T extends Tensor>(value: T, axis: number): Tensor[];\n  pad<T extends Tensor>(\n      x: T, paddings: Array<[number, number]>, constantValue: number): T;\n  batchNorm<R extends Rank>(\n      x: Tensor<R>, mean: Tensor<R>|Tensor1D|TensorLike,\n      variance: Tensor<R>|Tensor1D|TensorLike,\n      offset?: Tensor<R>|Tensor1D|TensorLike,\n      scale?: Tensor<R>|Tensor1D|TensorLike,\n      varianceEpsilon?: number): Tensor<R>;\n  all<T extends Tensor>(x: Tensor, axis: number|number[], keepDims: boolean): T;\n  any<T extends Tensor>(x: Tensor, axis: number|number[], keepDims: boolean): T;\n  logSumExp<T extends Tensor>(\n      x: Tensor, axis: number|number[], keepDims: boolean): T;\n  sum<T extends Tensor>(x: Tensor, axis: number|number[], keepDims: boolean): T;\n  prod<T extends Tensor>(x: Tensor, axis: number|number[], keepDims: boolean):\n      T;\n  mean<T extends Tensor>(x: Tensor, axis: number|number[], keepDims: boolean):\n      T;\n  min<T extends Tensor>(x: Tensor, axis: number|number[], keepDims: boolean): T;\n  max<T extends Tensor>(x: Tensor, axis: number|number[], keepDims: boolean): T;\n  argMin<T extends Tensor>(x: Tensor, axis: number): T;\n  argMax<T extends Tensor>(x: Tensor, axis: number): T;\n  add<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  addStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  atan2<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  sub<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  subStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  pow<T extends Tensor>(base: T, exp: Tensor|TensorLike): T;\n  powStrict<T extends Tensor>(base: T, exp: Tensor|TensorLike): T;\n  mul<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  mulStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  div<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  divNoNan<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  floorDiv<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  divStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  mod<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  modStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  minimum<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  minimumStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  maximum<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  maximumStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  squaredDifference<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  squaredDifferenceStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  transpose<T extends Tensor>(x: T, perm?: number[]): T;\n  logicalNot<T extends Tensor>(x: T): T;\n  logicalAnd<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  logicalOr<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  logicalXor<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  where<T extends Tensor>(condition: Tensor|TensorLike, a: T, b: T|TensorLike):\n      T;\n  notEqual<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  notEqualStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  less<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  lessStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  equal<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  equalStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  lessEqual<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  lessEqualStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  greater<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  greaterStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  greaterEqual<T extends Tensor>(a: Tensor, b: Tensor|TensorLike): T;\n  greaterEqualStrict<T extends Tensor>(a: T, b: T|TensorLike): T;\n  neg<T extends Tensor>(x: T): T;\n  ceil<T extends Tensor>(x: T): T;\n  floor<T extends Tensor>(x: T): T;\n  sign<T extends Tensor>(x: T): T;\n  isNaN<T extends Tensor>(x: T): T;\n  isInf<T extends Tensor>(x: T): T;\n  isFinite<T extends Tensor>(x: T): T;\n  round<T extends Tensor>(x: T): T;\n  exp<T extends Tensor>(x: T): T;\n  expm1<T extends Tensor>(x: T): T;\n  log<T extends Tensor>(x: T): T;\n  log1p<T extends Tensor>(x: T): T;\n  sqrt<T extends Tensor>(x: T): T;\n  rsqrt<T extends Tensor>(x: T): T;\n  square<T extends Tensor>(x: T): T;\n  reciprocal<T extends Tensor>(x: T): T;\n  abs<T extends Tensor>(x: T): T;\n  clipByValue<T extends Tensor>(\n      x: T, clipValueMin: number, clipValueMax: number): T;\n  sigmoid<T extends Tensor>(x: T): T;\n  logSigmoid<T extends Tensor>(x: T): T;\n  softplus<T extends Tensor>(x: T): T;\n  zerosLike<T extends Tensor>(x: T): T;\n  onesLike<T extends Tensor>(x: T): T;\n  sin<T extends Tensor>(x: T): T;\n  cos<T extends Tensor>(x: T): T;\n  tan<T extends Tensor>(x: T): T;\n  asin<T extends Tensor>(x: T): T;\n  acos<T extends Tensor>(x: T): T;\n  atan<T extends Tensor>(x: T): T;\n  sinh<T extends Tensor>(x: T): T;\n  cosh<T extends Tensor>(x: T): T;\n  tanh<T extends Tensor>(x: T): T;\n  asinh<T extends Tensor>(x: T): T;\n  acosh<T extends Tensor>(x: T): T;\n  atanh<T extends Tensor>(x: T): T;\n  erf<T extends Tensor>(x: T): T;\n  step<T extends Tensor>(x: T, alpha: number): T;\n  relu<T extends Tensor>(x: T): T;\n  relu6<T extends Tensor>(x: T): T;\n  elu<T extends Tensor>(x: T): T;\n  selu<T extends Tensor>(x: T): T;\n  leakyRelu<T extends Tensor>(x: T, alpha: number): T;\n  prelu<T extends Tensor>(x: T, alpha: T|TensorLike): T;\n  softmax<T extends Tensor>(logits: T, dim: number): T;\n  logSoftmax<T extends Tensor>(logits: T, axis: number): T;\n  image: {\n    resizeBilinear<T extends Tensor3D|Tensor4D>(\n        images: T, size: [number, number], alignCorners: boolean): T;\n    resizeNearestNeighbor<T extends Tensor3D|Tensor4D>(\n        images: T, size: [number, number], alignCorners: boolean): T;\n  };\n  conv1d<T extends Tensor2D|Tensor3D>(\n      x: T, filter: Tensor3D|TensorLike3D, stride: number,\n      pad: 'valid'|'same'|number, dataFormat: 'NWC'|'NCW', dilation: number,\n      dimRoundingMode?: 'floor'|'round'|'ceil'): T;\n  conv2d<T extends Tensor3D|Tensor4D>(\n      x: T, filter: Tensor4D|TensorLike4D, strides: [number, number]|number,\n      pad: 'valid'|'same'|number, dataFormat: 'NHWC'|'NCHW',\n      dilations: [number, number]|number,\n      dimRoundingMode?: 'floor'|'round'|'ceil'): T;\n  conv2dTranspose<T extends Tensor3D|Tensor4D>(\n      x: T, filter: Tensor4D|TensorLike4D,\n      outputShape: [number, number, number, number]|[number, number, number],\n      strides: [number, number]|number, pad: 'valid'|'same'|number,\n      dimRoundingMode?: 'floor'|'round'|'ceil'): T;\n  depthwiseConv2d<T extends Tensor3D|Tensor4D>(\n      x: T, filter: Tensor4D|TensorLike4D, strides: [number, number]|number,\n      pad: 'valid'|'same'|number, dataFormat: 'NHWC'|'NCHW',\n      dilations: [number, number]|number,\n      dimRoundingMode?: 'floor'|'round'|'ceil'): T;\n  separableConv2d<T extends Tensor3D|Tensor4D>(\n      x: T|TensorLike, depthwiseFilter: Tensor4D|TensorLike4D,\n      pointwiseFilter: Tensor4D|TensorLike, strides: [number, number]|number,\n      pad: 'valid'|'same', dilation: [number, number]|number,\n      dataFormat: 'NHWC'|'NCHW'): T;\n  maxPool<T extends Tensor3D|Tensor4D>(\n      x: T, filterSize: [number, number]|number,\n      strides: [number, number]|number, pad: 'valid'|'same'|number,\n      dimRoundingMode?: 'floor'|'round'|'ceil'): T;\n  avgPool<T extends Tensor3D|Tensor4D>(\n      x: T, filterSize: [number, number]|number,\n      strides: [number, number]|number, pad: 'valid'|'same'|number,\n      dimRoundingMode?: 'floor'|'round'|'ceil'): T;\n  pool<T extends Tensor3D|Tensor4D>(\n      input: T, windowShape: [number, number]|number, poolingType: 'avg'|'max',\n      padding: 'valid'|'same'|number, diationRate?: [number, number]|number,\n      strides?: [number, number]|number): T;\n  localResponseNormalization<T extends Tensor3D|Tensor4D>(\n      x: T, depthRadius: number, bias: number, alpha: number, beta: number): T;\n  unsortedSegmentSum<T extends Tensor>(\n      x: T, segmentIds: Tensor1D|TensorLike1D, numSegments: number): T;\n  batchToSpaceND<T extends Tensor>(\n      x: T, blockShape: number[], crops: number[][]): T;\n  spaceToBatchND<T extends Tensor>(\n      x: T, blockShape: number[], paddings: number[][]): T;\n  topk<T extends Tensor>(x: T, k: number, sorted: boolean):\n      {values: T, indices: T};\n  stridedSlice(\n      x: Tensor, begin: number[], end: number[], strides: number[],\n      beginMask: number, endMask: number, ellipsisMask: number,\n      newAxisMask: number, shrinkAxisMask: number): Tensor;\n  depthToSpace(x: Tensor4D, blockSize: number, dataFormat: string): Tensor4D;\n  spectral: {\n    fft(x: Tensor): Tensor; ifft(x: Tensor): Tensor; rfft(x: Tensor): Tensor;\n    irfft(x: Tensor): Tensor\n  };\n}\n\n// For tracking tensor creation and disposal.\nlet trackerFn: () => TensorTracker = null;\n// Used by chaining methods to call into ops.\nlet opHandler: OpHandler = null;\n// Used to warn about deprecated methods.\nlet deprecationWarningFn: (msg: string) => void = null;\n// This here so that we can use this method on dev branches and keep the\n// functionality at master.\n// tslint:disable-next-line:no-unused-expression\n[deprecationWarningFn];\n\n/**\n * An external consumer can register itself as the tensor tracker. This way\n * the Tensor class can notify the tracker for every tensor created and\n * disposed.\n */\nexport function setTensorTracker(fn: () => TensorTracker) {\n  trackerFn = fn;\n}\n\n/**\n * An external consumer can register itself as the op handler. This way the\n * Tensor class can have chaining methods that call into ops via the op\n * handler.\n */\nexport function setOpHandler(handler: OpHandler) {\n  opHandler = handler;\n}\n\n/**\n * Sets the deprecation warning function to be used by this file. This way the\n * Tensor class can be a leaf but still use the environment.\n */\nexport function setDeprecationWarningFn(fn: (msg: string) => void) {\n  deprecationWarningFn = fn;\n}\n\n/**\n * We wrap data id since we use weak map to avoid memory leaks.\n * Since we have our own memory management, we have a reference counter\n * mapping a tensor to its data, so there is always a pointer (even if that\n * data is otherwise garbage collectable).\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/\n * Global_Objects/WeakMap\n */\nexport type DataId = object;  // object instead of {} to force non-primitive.\n\n/**\n * A `tf.Tensor` object represents an immutable, multidimensional array of\n * numbers that has a shape and a data type.\n *\n * See `tf.tensor` for details on how to create a `tf.Tensor`.\n */\n/** @doc {heading: 'Tensors', subheading: 'Classes'} */\nexport class Tensor<R extends Rank = Rank> {\n  /** Unique id of this tensor. */\n  readonly id: number;\n  /**\n   * Id of the bucket holding the data for this tensor. Multiple arrays can\n   * point to the same bucket (e.g. when calling array.reshape()).\n   */\n  dataId: DataId;\n  /** The shape of the tensor. */\n  readonly shape: ShapeMap[R];\n  /** Number of elements in the tensor. */\n  readonly size: number;\n  /** The data type for the array. */\n  readonly dtype: DataType;\n  /** The rank type for the array (see `Rank` enum). */\n  readonly rankType: R;\n\n  /** Whether this tensor has been globally kept. */\n  kept = false;\n  /** The id of the scope this tensor is being tracked in. */\n  scopeId: number;\n\n  /**\n   * Number of elements to skip in each dimension when indexing. See\n   * https://docs.scipy.org/doc/numpy/reference/generated/\\\n   * numpy.ndarray.strides.html\n   */\n  readonly strides: number[];\n\n  constructor(shape: ShapeMap[R], dtype: DataType, dataId: DataId, id: number) {\n    this.shape = shape.slice() as ShapeMap[R];\n    this.dtype = dtype || 'float32';\n    this.size = util.sizeFromShape(shape);\n    this.strides = computeStrides(shape);\n    this.dataId = dataId;\n    this.id = id;\n    this.rankType = (this.rank < 5 ? this.rank.toString() : 'higher') as R;\n  }\n\n  /** Flatten a Tensor to a 1D array. */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  flatten(): Tensor1D {\n    this.throwIfDisposed();\n    return this.as1D();\n  }\n\n  /** Converts a size-1 `tf.Tensor` to a `tf.Scalar`. */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  asScalar(): Scalar {\n    this.throwIfDisposed();\n    util.assert(this.size === 1, () => 'The array must have only 1 element.');\n    return this.reshape<Rank.R0>([]);\n  }\n\n  /** Converts a `tf.Tensor` to a `tf.Tensor1D`. */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  as1D(): Tensor1D {\n    this.throwIfDisposed();\n    return this.reshape<Rank.R1>([this.size]);\n  }\n\n  /**\n   * Converts a `tf.Tensor` to a `tf.Tensor2D`.\n   *\n   * @param rows Number of rows in `tf.Tensor2D`.\n   * @param columns Number of columns in `tf.Tensor2D`.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  as2D(rows: number, columns: number): Tensor2D {\n    this.throwIfDisposed();\n    return this.reshape<Rank.R2>([rows, columns]);\n  }\n\n  /**\n   * Converts a `tf.Tensor` to a `tf.Tensor3D`.\n   *\n   * @param rows Number of rows in `tf.Tensor3D`.\n   * @param columns Number of columns in `tf.Tensor3D`.\n   * @param depth Depth of `tf.Tensor3D`.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  as3D(rows: number, columns: number, depth: number): Tensor3D {\n    this.throwIfDisposed();\n    return this.reshape<Rank.R3>([rows, columns, depth]);\n  }\n\n  /**\n   * Converts a `tf.Tensor` to a `tf.Tensor4D`.\n   *\n   * @param rows Number of rows in `tf.Tensor4D`.\n   * @param columns Number of columns in `tf.Tensor4D`.\n   * @param depth Depth of `tf.Tensor4D`.\n   * @param depth2 4th dimension of `tf.Tensor4D`.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  as4D(rows: number, columns: number, depth: number, depth2: number): Tensor4D {\n    this.throwIfDisposed();\n    return this.reshape<Rank.R4>([rows, columns, depth, depth2]);\n  }\n\n  /**\n   * Converts a `tf.Tensor` to a `tf.Tensor5D`.\n   *\n   * @param rows Number of rows in `tf.Tensor5D`.\n   * @param columns Number of columns in `tf.Tensor5D`.\n   * @param depth Depth of `tf.Tensor5D`.\n   * @param depth2 4th dimension of `tf.Tensor5D`.\n   * @param depth3 5th dimension of 'tf.Tensor5D'\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  as5D(\n      rows: number, columns: number, depth: number, depth2: number,\n      depth3: number): Tensor5D {\n    this.throwIfDisposed();\n    return this.reshape<Rank.R5>([rows, columns, depth, depth2, depth3]);\n  }\n\n  /**\n   * Casts a `tf.Tensor` to a specified dtype.\n   *\n   * @param dtype Data-type to cast the tensor to.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  asType<T extends this>(this: T, dtype: DataType): T {\n    this.throwIfDisposed();\n    return opHandler.cast(this, dtype);\n  }\n\n  get rank(): number {\n    return this.shape.length;\n  }\n\n  /**\n   * Returns a promise of `tf.TensorBuffer` that holds the underlying data.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  async buffer<D extends DataType = 'float32'>(): Promise<TensorBuffer<R, D>> {\n    const vals = await this.data<D>();\n    return opHandler.buffer(this.shape, this.dtype as D, vals);\n  }\n\n  /** Returns a `tf.TensorBuffer` that holds the underlying data. */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  bufferSync<D extends DataType = 'float32'>(): TensorBuffer<R, D> {\n    return opHandler.buffer(this.shape, this.dtype as D, this.dataSync());\n  }\n\n  /**\n   * Returns the tensor data as a nested array. The transfer of data is done\n   * asynchronously.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  async array(): Promise<ArrayMap[R]> {\n    const vals = await this.data();\n    return toNestedArray(this.shape, vals) as ArrayMap[R];\n  }\n\n  /**\n   * Returns the tensor data as a nested array. The transfer of data is done\n   * synchronously.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  arraySync(): ArrayMap[R] {\n    return toNestedArray(this.shape, this.dataSync()) as ArrayMap[R];\n  }\n\n  /**\n   * Asynchronously downloads the values from the `tf.Tensor`. Returns a\n   * promise of `TypedArray` that resolves when the computation has finished.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  async data<D extends DataType = NumericDataType>(): Promise<DataTypeMap[D]> {\n    this.throwIfDisposed();\n    const data = trackerFn().read(this.dataId);\n    if (this.dtype === 'string') {\n      const bytes = await data as Uint8Array[];\n      try {\n        return bytes.map(b => util.decodeString(b)) as DataTypeMap[D];\n      } catch {\n        throw new Error(\n            'Failed to decode the string bytes into utf-8. ' +\n            'To get the original bytes, call tensor.bytes().');\n      }\n    }\n    return data as Promise<DataTypeMap[D]>;\n  }\n\n  /**\n   * Synchronously downloads the values from the `tf.Tensor`. This blocks the\n   * UI thread until the values are ready, which can cause performance issues.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  dataSync<D extends DataType = NumericDataType>(): DataTypeMap[D] {\n    this.throwIfDisposed();\n    const data = trackerFn().readSync(this.dataId);\n    if (this.dtype === 'string') {\n      try {\n        return (data as Uint8Array[]).map(b => util.decodeString(b)) as\n            DataTypeMap[D];\n      } catch {\n        throw new Error(\n            'Failed to decode the string bytes into utf-8. ' +\n            'To get the original bytes, call tensor.bytes().');\n      }\n    }\n    return data as DataTypeMap[D];\n  }\n\n  /** Returns the underlying bytes of the tensor's data. */\n  async bytes(): Promise<Uint8Array[]|Uint8Array> {\n    this.throwIfDisposed();\n    const data = await trackerFn().read(this.dataId);\n    if (this.dtype === 'string') {\n      return data as Uint8Array[];\n    } else {\n      return new Uint8Array((data as TypedArray).buffer);\n    }\n  }\n\n  /**\n   * Disposes `tf.Tensor` from memory.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    trackerFn().disposeTensor(this);\n    this.isDisposedInternal = true;\n  }\n\n  protected isDisposedInternal = false;\n  get isDisposed(): boolean {\n    return this.isDisposedInternal;\n  }\n\n  private throwIfDisposed() {\n    if (this.isDisposed) {\n      throw new Error(`Tensor is disposed.`);\n    }\n  }\n\n  /** Casts the array to type `float32` */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  toFloat<T extends this>(this: T): T {\n    return this.asType('float32');\n  }\n\n  /** Casts the array to type `int32` */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  toInt() {\n    return this.asType('int32');\n  }\n\n  /** Casts the array to type `bool` */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  toBool() {\n    return this.asType('bool');\n  }\n\n  /**\n   * Prints the `tf.Tensor`. See `tf.print` for details.\n   *\n   * @param verbose Whether to print verbose information about the tensor,\n   *    including dtype and size.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  print(verbose = false): void {\n    return opHandler.print(this, verbose);\n  }\n\n  /**\n   * Reshapes the tensor into the provided shape.\n   * See `tf.reshape` for more details.\n   *\n   * @param newShape An array of integers defining the output tensor shape.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  reshape<R2 extends Rank>(newShape: ShapeMap[R2]): Tensor<R2> {\n    this.throwIfDisposed();\n    return opHandler.reshape(this, newShape);\n  }\n\n  /**\n   * Reshapes the tensor into the shape of the provided tensor.\n   *\n   * @param x The tensor of required shape.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  reshapeAs<T extends Tensor>(x: T): T {\n    this.throwIfDisposed();\n    return this.reshape(x.shape) as T;\n  }\n\n  /**\n   * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension\n   * into the tensor's shape. See `tf.expandDims` for details.\n   *\n   * @param axis The dimension index at which to insert shape of 1. Defaults to\n   *     0 (the first dimension).\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  expandDims<R2 extends Rank>(axis = 0): Tensor<R2> {\n    return opHandler.expandDims(this, axis);\n  }\n\n  /**\n   * Returns the cumulative sum of the `tf.Tensor` along `axis`.\n   *\n   * @param axis The axis along which to sum. Optional. Defaults to 0.\n   * @param exclusive Whether to perform exclusive cumulative sum. Defaults to\n   *    false. If set to true then the sum of each tensor entry does not\n   * include its own value, but only the values previous to it along the\n   * specified axis.\n   * @param reverse Whether to sum in the opposite direction. Defaults to\n   *    false.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  cumsum<T extends Tensor>(axis = 0, exclusive = false, reverse = false): T {\n    return opHandler.cumsum(this, axis, exclusive, reverse);\n  }\n\n  /**\n   * Returns a `tf.Tensor` with dimensions of size 1 removed from the shape.\n   * See `tf.squeeze` for more details.\n   *\n   * @param axis A list of numbers. If specified, only squeezes the\n   *    dimensions listed. The dimension index starts at 0. It is an error to\n   *    squeeze a dimension that is not 1.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  squeeze<T extends Tensor>(axis?: number[]): T {\n    this.throwIfDisposed();\n    return opHandler.squeeze(this, axis);\n  }\n\n  /** Returns a copy of the tensor. See `tf.clone` for details. */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  clone<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.clone(this);\n  }\n\n  oneHot(this: Tensor, depth: number, onValue?: number, offValue?: number):\n      Tensor {\n    this.throwIfDisposed();\n    return opHandler.oneHot(this, depth, onValue, offValue);\n  }\n\n  /**\n   * Returns a human-readable description of the tensor. Useful for logging.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  toString(verbose = false): string {\n    const vals = this.dataSync();\n    return tensorToString(vals, this.shape, this.dtype, verbose);\n  }\n\n  // Below is chain API that is not exposed to docs to avoid repetition. To\n  // expose a method, move it above this comment and add @doc and jsdoc.\n\n  tile<T extends this>(this: T, reps: number[]): T {\n    this.throwIfDisposed();\n    return opHandler.tile(this, reps);\n  }\n\n  gather<T extends this>(this: T, indices: Tensor|TensorLike, axis = 0): T {\n    this.throwIfDisposed();\n    return opHandler.gather(this, indices, axis);\n  }\n\n  matMul<T extends Tensor>(\n      this: T, b: T|TensorLike, transposeA = false, transposeB = false): T {\n    this.throwIfDisposed();\n    return opHandler.matMul(this, b, transposeA, transposeB);\n  }\n  dot(b: Tensor|TensorLike): Tensor {\n    this.throwIfDisposed();\n    return opHandler.dot(this, b);\n  }\n  norm(\n      ord: number|'euclidean'|'fro' = 'euclidean', axis: number|number[] = null,\n      keepDims = false): Tensor {\n    this.throwIfDisposed();\n    return opHandler.norm(this, ord, axis, keepDims);\n  }\n  slice<T extends Tensor<R>>(\n      this: T, begin: number|number[], size?: number|number[]): T {\n    this.throwIfDisposed();\n    return opHandler.slice(this, begin, size);\n  }\n  reverse<T extends Tensor>(this: T, axis?: number|number[]): T {\n    this.throwIfDisposed();\n    return opHandler.reverse(this, axis);\n  }\n  concat<T extends Tensor>(this: T, x: T|Array<T|TensorLike>, axis = 0): T {\n    this.throwIfDisposed();\n    if (x instanceof Tensor) {\n      x = [x];\n    }\n    return opHandler.concat([this, ...x], axis);\n  }\n  split<T extends Tensor>(this: T, numOrSizeSplits: number[]|number, axis = 0):\n      T[] {\n    this.throwIfDisposed();\n    return opHandler.split(this, numOrSizeSplits, axis);\n  }\n  stack(x: Tensor, axis = 0): Tensor {\n    return opHandler.stack([this, x], axis);\n  }\n  unstack(axis = 0): Tensor[] {\n    return opHandler.unstack(this, axis);\n  }\n  pad<T extends Tensor>(\n      this: T, paddings: Array<[number, number]>, constantValue = 0): T {\n    return opHandler.pad(this, paddings, constantValue);\n  }\n  /**\n   * @deprecated Use `tf.batchNorm` instead, and note the positional argument\n   *     change of scale, offset, and varianceEpsilon.\n   */\n  batchNormalization(\n      mean: Tensor<R>|Tensor1D|TensorLike,\n      variance: Tensor<R>|Tensor1D|TensorLike, varianceEpsilon = .001,\n      scale?: Tensor<R>|Tensor1D|TensorLike,\n      offset?: Tensor<R>|Tensor1D|TensorLike): Tensor<R> {\n    deprecationWarningFn(\n        'tf.batchNormalization() is going away. ' +\n        'Use tf.batchNorm() instead, and note the positional argument change ' +\n        'of scale, offset, and varianceEpsilon');\n    return this.batchNorm(mean, variance, offset, scale, varianceEpsilon);\n  }\n\n  batchNorm(\n      mean: Tensor<R>|Tensor1D|TensorLike,\n      variance: Tensor<R>|Tensor1D|TensorLike,\n      offset?: Tensor<R>|Tensor1D|TensorLike,\n      scale?: Tensor<R>|Tensor1D|TensorLike,\n      varianceEpsilon = .001,\n      ): Tensor<R> {\n    this.throwIfDisposed();\n    return opHandler.batchNorm(\n        this, mean, variance, offset, scale, varianceEpsilon);\n  }\n  // Reduction ops.\n  all<T extends Tensor>(axis: number|number[] = null, keepDims = false): T {\n    this.throwIfDisposed();\n    return opHandler.all(this, axis, keepDims);\n  }\n  any<T extends Tensor>(axis: number|number[] = null, keepDims = false): T {\n    this.throwIfDisposed();\n    return opHandler.any(this, axis, keepDims);\n  }\n  logSumExp<T extends Tensor>(axis: number|number[] = null, keepDims = false):\n      T {\n    this.throwIfDisposed();\n    return opHandler.logSumExp(this, axis, keepDims);\n  }\n  sum<T extends Tensor>(axis: number|number[] = null, keepDims = false): T {\n    this.throwIfDisposed();\n    return opHandler.sum(this, axis, keepDims);\n  }\n  prod<T extends Tensor>(axis: number|number[] = null, keepDims = false): T {\n    this.throwIfDisposed();\n    return opHandler.prod(this, axis, keepDims);\n  }\n  mean<T extends Tensor>(axis: number|number[] = null, keepDims = false): T {\n    this.throwIfDisposed();\n    return opHandler.mean(this, axis, keepDims);\n  }\n  min<T extends Tensor>(axis: number|number[] = null, keepDims = false): T {\n    this.throwIfDisposed();\n    return opHandler.min(this, axis, keepDims);\n  }\n  max<T extends Tensor>(axis: number|number[] = null, keepDims = false): T {\n    this.throwIfDisposed();\n    return opHandler.max(this, axis, keepDims);\n  }\n  argMin<T extends Tensor>(axis: number = null): T {\n    this.throwIfDisposed();\n    return opHandler.argMin(this, axis);\n  }\n  argMax<T extends Tensor>(axis: number = null): T {\n    this.throwIfDisposed();\n    return opHandler.argMax(this, axis);\n  }\n\n  // Transformations\n  cast<T extends this>(dtype: DataType): T {\n    this.throwIfDisposed();\n    return opHandler.cast(this as T, dtype);\n  }\n\n  // Binary ops.\n\n  add<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.add(this, x);\n  }\n  addStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.addStrict(this, x);\n  }\n  atan2<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.atan2(this, x);\n  }\n  sub<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.sub(this, x);\n  }\n  subStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.subStrict(this, x);\n  }\n  pow<T extends Tensor>(this: T, exp: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.pow(this, exp);\n  }\n  powStrict(exp: Tensor|TensorLike): Tensor<R> {\n    this.throwIfDisposed();\n    return opHandler.powStrict(this, exp);\n  }\n  mul<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.mul(this, x);\n  }\n  mulStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.mulStrict(this, x);\n  }\n  div<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.div(this, x);\n  }\n  divNoNan<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.divNoNan(this, x);\n  }\n  floorDiv<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.floorDiv(this, x);\n  }\n  divStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.divStrict(this, x);\n  }\n  minimum<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.minimum(this, x);\n  }\n  minimumStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.minimumStrict(this, x);\n  }\n  maximum<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.maximum(this, x);\n  }\n  maximumStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.maximumStrict(this, x);\n  }\n  mod<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.mod(this, x);\n  }\n  modStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.modStrict(this, x);\n  }\n  squaredDifference<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.squaredDifference(this, x);\n  }\n  squaredDifferenceStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.squaredDifferenceStrict(this, x);\n  }\n  transpose<T extends Tensor>(this: T, perm?: number[]): T {\n    this.throwIfDisposed();\n    return opHandler.transpose(this, perm);\n  }\n\n  // Compare ops.\n\n  notEqual<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.notEqual(this, x);\n  }\n  notEqualStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.notEqualStrict(this, x);\n  }\n  less<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.less(this, x);\n  }\n  lessStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.lessStrict(this, x);\n  }\n  equal<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.equal(this, x);\n  }\n  equalStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.equalStrict(this, x);\n  }\n  lessEqual<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.lessEqual(this, x);\n  }\n  lessEqualStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.lessEqualStrict(this, x);\n  }\n  greater<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.greater(this, x);\n  }\n  greaterStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.greaterStrict(this, x);\n  }\n  greaterEqual<T extends Tensor>(x: Tensor|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.greaterEqual(this, x);\n  }\n  greaterEqualStrict<T extends this>(this: T, x: T|TensorLike): T {\n    this.throwIfDisposed();\n    return opHandler.greaterEqualStrict(this, x);\n  }\n\n  // Compare ops.\n  logicalAnd(x: Tensor|TensorLike): Tensor {\n    this.throwIfDisposed();\n    return opHandler.logicalAnd(this, x);\n  }\n  logicalOr(x: Tensor|TensorLike): Tensor {\n    this.throwIfDisposed();\n    return opHandler.logicalOr(this, x);\n  }\n  logicalNot<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.logicalNot(this);\n  }\n  logicalXor(x: Tensor|TensorLike): Tensor {\n    this.throwIfDisposed();\n    return opHandler.logicalXor(this, x);\n  }\n  where(condition: Tensor|TensorLike, x: Tensor|TensorLike): Tensor {\n    this.throwIfDisposed();\n    return opHandler.where(condition, this, x);\n  }\n\n  // Unary ops.\n  neg<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.neg(this);\n  }\n  ceil<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.ceil(this);\n  }\n  floor<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.floor(this);\n  }\n  sign<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.sign(this);\n  }\n  isNaN<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.isNaN(this);\n  }\n  isInf<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.isInf(this);\n  }\n  isFinite<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.isFinite(this);\n  }\n  exp<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.exp(this);\n  }\n  expm1<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.expm1(this);\n  }\n  log<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.log(this);\n  }\n  log1p<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.log1p(this);\n  }\n  sqrt<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.sqrt(this);\n  }\n  rsqrt<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.rsqrt(this);\n  }\n  square<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.square(this);\n  }\n  reciprocal<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.reciprocal(this);\n  }\n  abs<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.abs(this);\n  }\n  clipByValue(min: number, max: number): Tensor<R> {\n    this.throwIfDisposed();\n    return opHandler.clipByValue(this, min, max);\n  }\n  relu<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.relu(this);\n  }\n  relu6<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.relu6(this);\n  }\n  elu<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.elu(this);\n  }\n  selu<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.selu(this);\n  }\n  leakyRelu(alpha = 0.2): Tensor<R> {\n    this.throwIfDisposed();\n    return opHandler.leakyRelu(this, alpha);\n  }\n  prelu(alpha: Tensor<R>|TensorLike): Tensor<R> {\n    this.throwIfDisposed();\n    return opHandler.prelu(this, alpha);\n  }\n  sigmoid<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.sigmoid(this);\n  }\n  logSigmoid<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.logSigmoid(this);\n  }\n  softplus<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.softplus(this);\n  }\n  zerosLike<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.zerosLike(this);\n  }\n  onesLike<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.onesLike(this);\n  }\n  sin<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.sin(this);\n  }\n  cos<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.cos(this);\n  }\n  tan<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.tan(this);\n  }\n  asin<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.asin(this);\n  }\n  acos<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.acos(this);\n  }\n  atan<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.atan(this);\n  }\n  sinh<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.sinh(this);\n  }\n  cosh<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.cosh(this);\n  }\n  tanh<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.tanh(this);\n  }\n  asinh<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.asinh(this);\n  }\n  acosh<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.acosh(this);\n  }\n  atanh<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.atanh(this);\n  }\n  erf<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.erf(this);\n  }\n  round<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.round(this);\n  }\n  step<T extends Tensor>(this: T, alpha = 0.0): T {\n    this.throwIfDisposed();\n    return opHandler.step(this, alpha);\n  }\n  softmax<T extends this>(this: T, dim = -1): T {\n    this.throwIfDisposed();\n    return opHandler.softmax(this, dim);\n  }\n  logSoftmax<T extends this>(this: T, axis = -1): T {\n    this.throwIfDisposed();\n    return opHandler.logSoftmax(this, axis);\n  }\n\n  // Image ops.\n  resizeBilinear<T extends Tensor3D|Tensor4D>(\n      this: T, newShape2D: [number, number], alignCorners = false): T {\n    (this as Tensor).throwIfDisposed();\n    return opHandler.image.resizeBilinear(this, newShape2D, alignCorners);\n  }\n\n  resizeNearestNeighbor<T extends Tensor3D|Tensor4D>(\n      this: T, newShape2D: [number, number], alignCorners = false): T {\n    (this as Tensor).throwIfDisposed();\n    return opHandler.image.resizeNearestNeighbor(\n        this, newShape2D, alignCorners);\n  }\n\n  // Convolutions.\n  conv1d<T extends Tensor2D|Tensor3D>(\n      this: T, filter: Tensor3D|TensorLike3D, stride: number,\n      pad: 'valid'|'same'|number, dataFormat: 'NWC'|'NCW' = 'NWC', dilation = 1,\n      dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n    (this as Tensor).throwIfDisposed();\n    return opHandler.conv1d(\n        this, filter, stride, pad, dataFormat, dilation, dimRoundingMode);\n  }\n  conv2d<T extends Tensor3D|Tensor4D>(\n      this: T, filter: Tensor4D|TensorLike4D, strides: [number, number]|number,\n      pad: 'valid'|'same'|number, dataFormat: 'NHWC'|'NCHW' = 'NHWC',\n      dilations: [number, number]|number = [1, 1],\n      dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n    (this as Tensor).throwIfDisposed();\n    return opHandler.conv2d(\n        this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);\n  }\n  conv2dTranspose<T extends Tensor3D|Tensor4D>(\n      this: T, filter: Tensor4D|TensorLike4D,\n      outputShape: [number, number, number, number]|[number, number, number],\n      strides: [number, number]|number, pad: 'valid'|'same'|number,\n      dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n    (this as Tensor).throwIfDisposed();\n    return opHandler.conv2dTranspose(\n        this, filter, outputShape, strides, pad, dimRoundingMode);\n  }\n  depthwiseConv2D<T extends Tensor3D|Tensor4D>(\n      this: T, filter: Tensor4D|TensorLike4D, strides: [number, number]|number,\n      pad: 'valid'|'same'|number, dataFormat: 'NHWC'|'NCHW' = 'NHWC',\n      dilations: [number, number]|number = [1, 1],\n      dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n    (this as Tensor).throwIfDisposed();\n    return opHandler.depthwiseConv2d(\n        this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);\n  }\n\n  separableConv2d<T extends Tensor3D|Tensor4D>(\n      this: T|TensorLike, depthwiseFilter: Tensor4D|TensorLike4D,\n      pointwiseFilter: Tensor4D|TensorLike, strides: [number, number]|number,\n      pad: 'valid'|'same', dilation: [number, number]|number = [1, 1],\n      dataFormat: 'NHWC'|'NCHW' = 'NHWC'): T {\n    (this as Tensor).throwIfDisposed();\n    return opHandler.separableConv2d(\n        this, depthwiseFilter, pointwiseFilter, strides, pad, dilation,\n        dataFormat);\n  }\n\n  // Pooling.\n  avgPool<T extends Tensor3D|Tensor4D>(\n      this: T, filterSize: [number, number]|number,\n      strides: [number, number]|number, pad: 'valid'|'same'|number,\n      dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n    (this as Tensor).throwIfDisposed();\n    return opHandler.avgPool(this, filterSize, strides, pad, dimRoundingMode);\n  }\n  maxPool<T extends Tensor3D|Tensor4D>(\n      this: T, filterSize: [number, number]|number,\n      strides: [number, number]|number, pad: 'valid'|'same'|number,\n      dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n    (this as Tensor).throwIfDisposed();\n    return opHandler.maxPool(this, filterSize, strides, pad, dimRoundingMode);\n  }\n  localResponseNormalization<T extends Tensor3D|Tensor4D>(\n      this: T, radius = 5, bias = 1, alpha = 1, beta = 0.5): T {\n    return opHandler.localResponseNormalization(\n        this, radius, bias, alpha, beta);\n  }\n  pool<T extends Tensor3D|Tensor4D>(\n      this: T, windowShape: [number, number]|number, poolingType: 'max'|'avg',\n      padding: 'valid'|'same'|number, dilationRate?: [number, number]|number,\n      strides?: [number, number]|number): T {\n    (this as Tensor).throwIfDisposed();\n    return opHandler.pool(\n        this, windowShape, poolingType, padding, dilationRate, strides);\n  }\n\n  variable(trainable = true, name?: string, dtype?: DataType): Variable<R> {\n    this.throwIfDisposed();\n    return trackerFn().makeVariable(this, trainable, name, dtype) as\n        Variable<R>;\n  }\n\n  unsortedSegmentSum<T extends Tensor>(\n      this: T, segmentIds: Tensor1D|TensorLike1D, numSegments: number): T {\n    this.throwIfDisposed();\n    return opHandler.unsortedSegmentSum(this, segmentIds, numSegments);\n  }\n\n  batchToSpaceND<T extends Tensor>(\n      this: T, blockShape: number[], crops: number[][]): T {\n    this.throwIfDisposed();\n    return opHandler.batchToSpaceND(this, blockShape, crops);\n  }\n\n  spaceToBatchND<T extends Tensor>(\n      this: T, blockShape: number[], paddings: number[][]): T {\n    this.throwIfDisposed();\n    return opHandler.spaceToBatchND(this, blockShape, paddings);\n  }\n\n  topk<T extends Tensor>(this: T, k = 1, sorted = true):\n      {values: T, indices: T} {\n    this.throwIfDisposed();\n    return opHandler.topk(this, k, sorted);\n  }\n\n  stridedSlice(\n      this: Tensor, begin: number[], end: number[], strides: number[],\n      beginMask = 0, endMask = 0, ellipsisMask = 0, newAxisMask = 0,\n      shrinkAxisMask = 0): Tensor {\n    this.throwIfDisposed();\n    return opHandler.stridedSlice(\n        this, begin, end, strides, beginMask, endMask, ellipsisMask,\n        newAxisMask, shrinkAxisMask);\n  }\n\n  depthToSpace(this: Tensor4D, blockSize: number, dataFormat: 'NHWC'|'NCHW'):\n      Tensor4D {\n    this.throwIfDisposed();\n    return opHandler.depthToSpace(this, blockSize, dataFormat);\n  }\n\n  fft(this: Tensor): Tensor {\n    this.throwIfDisposed();\n    return opHandler.spectral.fft(this);\n  }\n\n  ifft(this: Tensor): Tensor {\n    this.throwIfDisposed();\n    return opHandler.spectral.ifft(this);\n  }\n\n  rfft(this: Tensor): Tensor {\n    this.throwIfDisposed();\n    return opHandler.spectral.rfft(this);\n  }\n\n  irfft(this: Tensor): Tensor {\n    this.throwIfDisposed();\n    return opHandler.spectral.irfft(this);\n  }\n}\nObject.defineProperty(Tensor, Symbol.hasInstance, {\n  value: (instance: Tensor) => {\n    return !!instance && instance.dataId != null && instance.shape != null &&\n        instance.dtype != null;\n  }\n});\n\nexport interface NumericTensor<R extends Rank = Rank> extends Tensor<R> {\n  dtype: NumericDataType;\n  dataSync<D extends DataType = NumericDataType>(): DataTypeMap[D];\n  data<D extends DataType = NumericDataType>(): Promise<DataTypeMap[D]>;\n}\n\nexport interface StringTensor<R extends Rank = Rank> extends Tensor<R> {\n  dtype: 'string';\n  dataSync<D extends DataType = 'string'>(): DataTypeMap[D];\n  data<D extends DataType = 'string'>(): Promise<DataTypeMap[D]>;\n}\n\n/** @doclink Tensor */\nexport type Scalar = Tensor<Rank.R0>;\n/** @doclink Tensor */\nexport type Tensor1D = Tensor<Rank.R1>;\n/** @doclink Tensor */\nexport type Tensor2D = Tensor<Rank.R2>;\n/** @doclink Tensor */\nexport type Tensor3D = Tensor<Rank.R3>;\n/** @doclink Tensor */\nexport type Tensor4D = Tensor<Rank.R4>;\n/** @doclink Tensor */\nexport type Tensor5D = Tensor<Rank.R5>;\n/** @doclink Tensor */\nexport type Tensor6D = Tensor<Rank.R6>;\n\n/**\n * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.\n */\n/** @doc {heading: 'Tensors', subheading: 'Classes'} */\nexport class Variable<R extends Rank = Rank> extends Tensor<R> {\n  name: string;\n\n  constructor(\n      initialValue: Tensor<R>, public trainable: boolean, name: string,\n      tensorId: number) {\n    super(\n        initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);\n    this.name = name;\n  }\n\n  /**\n   * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have\n   * the same shape and dtype as the old `tf.Tensor`.\n   *\n   * @param newValue New tensor to be assigned to this variable.\n   */\n  /** @doc {heading: 'Tensors', subheading: 'Classes'} */\n  assign(newValue: Tensor<R>): void {\n    if (newValue.dtype !== this.dtype) {\n      throw new Error(\n          `dtype of the new value (${newValue.dtype}) and ` +\n          `previous value (${this.dtype}) must match`);\n    }\n    if (!util.arraysEqual(newValue.shape, this.shape)) {\n      throw new Error(\n          `shape of the new value (${newValue.shape}) and ` +\n          `previous value (${this.shape}) must match`);\n    }\n    trackerFn().disposeTensor(this);\n    this.dataId = newValue.dataId;\n    trackerFn().incRef(this, null /* backend */);\n  }\n\n  dispose(): void {\n    trackerFn().disposeVariable(this);\n    this.isDisposedInternal = true;\n  }\n}\n\nObject.defineProperty(Variable, Symbol.hasInstance, {\n  value: (instance: Variable) => {\n    return instance instanceof Tensor && instance.assign != null &&\n        instance.assign instanceof Function;\n  }\n});\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** @docalias number[] */\nexport interface ShapeMap {\n  R0: number[];\n  R1: [number];\n  R2: [number, number];\n  R3: [number, number, number];\n  R4: [number, number, number, number];\n  R5: [number, number, number, number, number];\n  R6: [number, number, number, number, number, number];\n}\n\n/** @docalias number[] */\nexport interface ArrayMap {\n  R0: number;\n  R1: number[];\n  R2: number[][];\n  R3: number[][][];\n  R4: number[][][][];\n  R5: number[][][][][];\n  R6: number[][][][][][];\n}\n\nexport interface DataTypeMap {\n  float32: Float32Array;\n  int32: Int32Array;\n  bool: Uint8Array;\n  complex64: Float32Array;\n  string: string[];\n}\n\nexport interface SingleValueMap {\n  bool: boolean;\n  int32: number;\n  float32: number;\n  complex64: number;\n  string: string;\n}\n\n/** @docalias 'float32'|'int32'|'bool'|'complex64'|'string' */\nexport type DataType = keyof DataTypeMap;\nexport type NumericDataType = 'float32'|'int32'|'bool'|'complex64';\nexport type TypedArray = Float32Array|Int32Array|Uint8Array;\n/** Tensor data used in tensor creation and user-facing API. */\nexport type DataValues = DataTypeMap[DataType];\n/** The underlying tensor data that gets stored in a backend. */\nexport type BackendValues = Float32Array|Int32Array|Uint8Array|Uint8Array[];\n\nexport enum Rank {\n  R0 = 'R0',\n  R1 = 'R1',\n  R2 = 'R2',\n  R3 = 'R3',\n  R4 = 'R4',\n  R5 = 'R5',\n  R6 = 'R6'\n}\n\nexport type FlatVector = boolean[]|number[]|TypedArray;\nexport type RegularArray<T> =\n    T[]|T[][]|T[][][]|T[][][][]|T[][][][][]|T[][][][][][];\n\n// tslint:disable-next-line:no-any\nexport interface RecursiveArray<T extends any> {\n  [index: number]: T|RecursiveArray<T>;\n}\n\n// Looks for upcasting types. Used, for example, in operations with mixed dtype\n// inputs.\nenum UpcastInt32AndMap {\n  'float32' = 'float32',\n  'int32' = 'int32',\n  'bool' = 'int32',\n  'complex64' = 'complex64'\n}\n\nenum UpcastBoolAndMap {\n  'float32' = 'float32',\n  'int32' = 'int32',\n  'bool' = 'bool',\n  'complex64' = 'complex64'\n}\n\nenum UpcastFloat32AndMap {\n  'float32' = 'float32',\n  'int32' = 'float32',\n  'bool' = 'float32',\n  'complex64' = 'complex64'\n}\n\nenum UpcastComplex64AndMap {\n  'float32' = 'complex64',\n  'int32' = 'complex64',\n  'bool' = 'complex64',\n  'complex64' = 'complex64'\n}\n\nconst upcastTypeMap = {\n  'float32': UpcastFloat32AndMap,\n  'int32': UpcastInt32AndMap,\n  'bool': UpcastBoolAndMap,\n  'complex64': UpcastComplex64AndMap\n};\n\nexport function upcastType(typeA: DataType, typeB: DataType): DataType {\n  if (typeA === 'string' || typeB === 'string') {\n    if (typeA === 'string' && typeB === 'string') {\n      return 'string';\n    }\n    throw new Error(`Can not upcast ${typeA} with ${typeB}`);\n  }\n  return upcastTypeMap[typeA][typeB];\n}\n\n/** Returns the output type after summation. */\nexport function sumOutType(type: DataType): DataType {\n  return upcastType(type, 'int32');\n}\n\n/** @docalias TypedArray|Array */\nexport type TensorLike =\n    TypedArray|number|boolean|string|RecursiveArray<number|number[]|TypedArray>|\n    RecursiveArray<boolean>|RecursiveArray<string>|Uint8Array[];\nexport type ScalarLike = number|boolean|string|Uint8Array;\n/** @docalias TypedArray|Array */\nexport type TensorLike1D = TypedArray|number[]|boolean[]|string[]|Uint8Array[];\n/** @docalias TypedArray|Array */\nexport type TensorLike2D = TypedArray|number[]|number[][]|boolean[]|boolean[][]|\n    string[]|string[][]|Uint8Array[]|Uint8Array[][];\n/** @docalias TypedArray|Array */\nexport type TensorLike3D = TypedArray|number[]|number[][][]|boolean[]|\n    boolean[][][]|string[]|string[][][]|Uint8Array[]|Uint8Array[][][];\n/** @docalias TypedArray|Array */\nexport type TensorLike4D = TypedArray|number[]|number[][][][]|boolean[]|\n    boolean[][][][]|string[]|string[][][][]|Uint8Array[]|Uint8Array[][][][];\n/** @docalias TypedArray|Array */\nexport type TensorLike5D =\n    TypedArray|number[]|number[][][][][]|boolean[]|boolean[][][][][]|string[]|\n    string[][][][][]|Uint8Array[]|Uint8Array[][][][][];\n/** @docalias TypedArray|Array */\nexport type TensorLike6D =\n    TypedArray|number[]|number[][][][][][]|boolean[]|boolean[][][][][][]|\n    string[]|string[][][][][][]|Uint8Array[]|Uint8Array[][][][][];\n\n/** Type for representing image dat in Uint8Array type. */\nexport interface PixelData {\n  width: number;\n  height: number;\n  data: Uint8Array;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from './tensor';\nimport {TensorContainer, TensorContainerArray} from './tensor_types';\nimport {upcastType} from './types';\nimport {assert} from './util';\n\nexport function makeTypesMatch<T extends Tensor>(a: T, b: T): [T, T] {\n  if (a.dtype === b.dtype) {\n    return [a, b];\n  }\n  const dtype = upcastType(a.dtype, b.dtype);\n  return [a.cast(dtype), b.cast(dtype)];\n}\n\nexport function assertTypesMatch(a: Tensor, b: Tensor): void {\n  assert(\n      a.dtype === b.dtype,\n      () => `The dtypes of the first(${a.dtype}) and` +\n          ` second(${b.dtype}) input must match`);\n}\n\nexport function isTensorInList(tensor: Tensor, tensorList: Tensor[]): boolean {\n  for (let i = 0; i < tensorList.length; i++) {\n    if (tensorList[i].id === tensor.id) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Extracts any `Tensor`s found within the provided object.\n *\n * @param container an object that may be a `Tensor` or may directly contain\n *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it\n *   is safe to pass any object here, except that `Promise`s are not\n *   supported.\n * @returns An array of `Tensors` found within the passed object. If the\n *   argument is simply a `Tensor', a list containing that `Tensor` is\n *   returned. If the object is not a `Tensor` or does not\n *   contain `Tensors`, an empty list is returned.\n */\nexport function getTensorsInContainer(result: TensorContainer): Tensor[] {\n  const list: Tensor[] = [];\n  const seen = new Set<{}|void>();\n  walkTensorContainer(result, list, seen);\n  return list;\n}\n\nfunction walkTensorContainer(\n    container: TensorContainer, list: Tensor[], seen: Set<{}|void>): void {\n  if (container == null) {\n    return;\n  }\n  if (container instanceof Tensor) {\n    list.push(container);\n    return;\n  }\n  if (!isIterable(container)) {\n    return;\n  }\n  // Iteration over keys works also for arrays.\n  const iterable = container as TensorContainerArray;\n  for (const k in iterable) {\n    const val = iterable[k];\n    if (!seen.has(val)) {\n      seen.add(val);\n      walkTensorContainer(val, list, seen);\n    }\n  }\n}\n\n// tslint:disable-next-line:no-any\nfunction isIterable(obj: any): boolean {\n  return Array.isArray(obj) || typeof obj === 'object';\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendTimingInfo, DataMover, KernelBackend} from './backends/backend';\nimport {Environment, setEnvironmentGlobal} from './environment';\nimport {getGradient, getKernel, getKernelsForBackend, NamedAttrMap, TensorInfo} from './kernel_registry';\nimport {Profiler} from './profiler';\nimport {backpropagateGradients, getFilteredNodesXToY, NamedGradientMap, TapeNode} from './tape';\nimport {DataId, setTensorTracker, Tensor, TensorTracker, Variable} from './tensor';\nimport {GradSaveFunc, NamedTensorMap, NamedVariableMap, TensorContainer} from './tensor_types';\nimport {getTensorsInContainer} from './tensor_util';\nimport {BackendValues, DataType, DataValues} from './types';\nimport * as util from './util';\nimport {bytesFromStringArray, makeOnesTypedArray, now, sizeFromShape} from './util';\n\n/**\n * A function that computes an output. The save function is for saving tensors\n * computed in the forward pass, that we need in the backward pass.\n */\nexport type ForwardFunc<T> = (backend: KernelBackend, save?: GradSaveFunc) => T;\n\n/**\n * @docalias (a: Tensor, b: Tensor,..., save?: Function) => {\n *   value: Tensor,\n *   gradFunc: (dy: Tensor, saved?: NamedTensorMap) => Tensor | Tensor[]\n * }\n */\nexport type CustomGradientFunc<T extends Tensor> =\n    (...inputs: Array<Tensor|GradSaveFunc>) => {\n      value: T;\n      gradFunc: (dy: T, saved: Tensor[]) => Tensor | Tensor[];\n    };\n\nexport type MemoryInfo = {\n  numTensors: number; numDataBuffers: number; numBytes: number;\n  unreliable?: boolean; reasons: string[];\n};\n\ntype KernelProfile = {\n  name: string; bytesAdded: number; totalBytesSnapshot: number;\n  tensorsAdded: number;\n  totalTensorsSnapshot: number;\n  inputShapes: number[][];\n  outputShapes: number[][];\n};\n\nexport type ProfileInfo = {\n  newBytes: number; newTensors: number; peakBytes: number;\n  kernels: KernelProfile[];\n  result: TensorContainer;\n};\n\nexport interface TimingInfo extends BackendTimingInfo {\n  wallMs: number;\n}\n\n/** @docalias Function */\nexport type ScopeFn<T extends TensorContainer> = () => T;\n\ninterface ScopeState {\n  track: Tensor[];\n  name: string;\n  id: number;\n}\n\nclass EngineState {\n  // Public since optimizers will use it.\n  registeredVariables: NamedVariableMap = {};\n\n  nextTapeNodeId = 0;\n  numBytes = 0;\n  numTensors = 0;\n  numStringTensors = 0;\n  numDataBuffers = 0;\n\n  activeTape: TapeNode[];\n  // Number of nested tf.grad() statements when computing higher-order\n  // gradients. E.g. `1` for first-order gradients and `2` for second-order\n  // gradients. Used to track if the tape should be removed after a backprop.\n  gradientDepth = 0;\n  // Number of nested kernel calls. When kernel depth is greater than 1, we turn\n  // off the tape.\n  kernelDepth = 0;\n\n  // Keep Tensors that parallel the tapes.\n  activeScope: ScopeState;\n  scopeStack: ScopeState[] = [];\n  /**\n   * Keeps track of the number of data moves during a kernel execution. We\n   * maintain a stack since kernels can call other kernels, recursively.\n   */\n  numDataMovesStack: number[] = [];\n  nextScopeId = 0;\n\n  tensorInfo = new WeakMap<DataId, {\n    backend: KernelBackend,\n    bytes: number,\n    dtype: DataType,\n    shape: number[],\n    refCount: number\n  }>();\n\n  profiling = false;\n  activeProfile: ProfileInfo =\n      {newBytes: 0, newTensors: 0, peakBytes: 0, kernels: [], result: null};\n\n  dispose() {\n    for (const variableName in this.registeredVariables) {\n      this.registeredVariables[variableName].dispose();\n    }\n  }\n}\n\nexport class Engine implements TensorTracker, DataMover {\n  state: EngineState;\n  backendName: string;\n  registry: {[id: string]: KernelBackend} = {};\n  registryFactory: {\n    [id: string]: {\n      factory: () => KernelBackend | Promise<KernelBackend>,\n      priority: number\n    }\n  } = {};\n\n  private profiler: Profiler;\n  private backendInstance: KernelBackend;\n  private pendingBackendInit: Promise<boolean>;\n  private pendingBackendInitId = 0;\n\n  constructor(public ENV: Environment) {\n    this.state = new EngineState();\n  }\n\n  async ready(): Promise<void> {\n    if (this.pendingBackendInit != null) {\n      return this.pendingBackendInit.then(() => {});\n    }\n    if (this.backendInstance != null) {\n      return;\n    }\n    const sortedBackends = this.getSortedBackends();\n\n    for (let i = 0; i < sortedBackends.length; i++) {\n      const backendName = sortedBackends[i];\n      const success = await this.initializeBackend(backendName).success;\n      if (success) {\n        await this.setBackend(backendName);\n        return;\n      }\n    }\n\n    throw new Error(\n        `Could not initialize any backends, all backend initializations ` +\n        `failed.`);\n  }\n\n  get backend(): KernelBackend {\n    if (this.pendingBackendInit != null) {\n      throw new Error(\n          `Backend '${this.backendName}' has not yet been initialized. Make ` +\n          `sure to await tf.ready() or await tf.setBackend() before calling ` +\n          `other methods`);\n    }\n    if (this.backendInstance == null) {\n      const {name, asyncInit} = this.initializeBackendsAndReturnBest();\n      if (asyncInit) {\n        throw new Error(\n            `The highest priority backend '${name}' has not yet been ` +\n            `initialized. Make sure to await tf.ready() or ` +\n            `await tf.setBackend() before calling other methods`);\n      }\n      this.setBackend(name);\n    }\n    return this.backendInstance;\n  }\n\n  backendNames(): string[] {\n    return Object.keys(this.registryFactory);\n  }\n\n  findBackend(backendName: string): KernelBackend {\n    if (!(backendName in this.registry)) {\n      // If the backend hasn't been initialized but we have a registry entry for\n      // it, initialize it and return it.\n      if (backendName in this.registryFactory) {\n        const {asyncInit} = this.initializeBackend(backendName);\n        if (asyncInit) {\n          // Backend is not ready yet.\n          return null;\n        }\n      } else {\n        return null;\n      }\n    }\n    return this.registry[backendName];\n  }\n\n  findBackendFactory(backendName: string):\n      () => KernelBackend | Promise<KernelBackend> {\n    if (!(backendName in this.registryFactory)) {\n      return null;\n    }\n    return this.registryFactory[backendName].factory;\n  }\n\n  registerBackend(\n      backendName: string,\n      factory: () => KernelBackend | Promise<KernelBackend>,\n      priority = 1): boolean {\n    if (backendName in this.registryFactory) {\n      console.warn(\n          `${backendName} backend was already registered. ` +\n          `Reusing existing backend factory.`);\n      return false;\n    }\n    this.registryFactory[backendName] = {factory, priority};\n    return true;\n  }\n\n  async setBackend(backendName: string): Promise<boolean> {\n    if (this.registryFactory[backendName] == null) {\n      throw new Error(`Backend name '${backendName}' not found in registry`);\n    }\n    this.backendName = backendName;\n    if (this.registry[backendName] == null) {\n      this.backendInstance = null;\n      const {success, asyncInit} = this.initializeBackend(backendName);\n      const result = asyncInit ? await success : success;\n      if (!result) {\n        return false;\n      }\n    }\n    this.backendInstance = this.registry[backendName];\n    this.setupRegisteredKernels();\n    // Reset the profiler.\n    this.profiler = new Profiler(this.backendInstance);\n\n    return true;\n  }\n\n  private setupRegisteredKernels(): void {\n    const kernels = getKernelsForBackend(this.backendName);\n    kernels.forEach(kernel => {\n      if (kernel.setupFunc != null) {\n        kernel.setupFunc(this.backendInstance);\n      }\n    });\n  }\n\n  private disposeRegisteredKernels(backendName: string): void {\n    const kernels = getKernelsForBackend(backendName);\n    kernels.forEach(kernel => {\n      if (kernel.disposeFunc != null) {\n        kernel.disposeFunc(this.registry[backendName]);\n      }\n    });\n  }\n\n  /**\n   * Initializes a backend by looking up the backend name in the factory\n   * registry and calling the factory method. Returns a boolean representing\n   * whether the initialization of the backend suceeded. Throws an error if\n   * there is no backend in the factory registry.\n   */\n  private initializeBackend(backendName: string):\n      {success: boolean|Promise<boolean>, asyncInit: boolean} {\n    const registryFactoryEntry = this.registryFactory[backendName];\n    if (registryFactoryEntry == null) {\n      throw new Error(\n          `Cannot initialize backend ${backendName}, no registration found.`);\n    }\n\n    try {\n      const backend = registryFactoryEntry.factory();\n      // Test if the factory returns a promise.\n      if (Promise.resolve(backend) === backend) {\n        const promiseId = ++this.pendingBackendInitId;\n        const success =\n            backend\n                .then(backendInstance => {\n                  // Outdated promise. Another backend was set in the meantime.\n                  if (promiseId < this.pendingBackendInitId) {\n                    return false;\n                  }\n                  this.registry[backendName] = backendInstance;\n                  this.pendingBackendInit = null;\n                  return true;\n                })\n                .catch(err => {\n                  // Outdated promise. Another backend was set in the meantime.\n                  if (promiseId < this.pendingBackendInitId) {\n                    return false;\n                  }\n                  this.pendingBackendInit = null;\n                  console.warn(\n                      `Initialization of backend ${backendName} failed`);\n                  console.warn(err.stack || err.message);\n                  return false;\n                });\n        this.pendingBackendInit = success;\n        return {success, asyncInit: true};\n      } else {\n        this.registry[backendName] = backend as KernelBackend;\n        return {success: true, asyncInit: false};\n      }\n    } catch (err) {\n      console.warn(`Initialization of backend ${backendName} failed`);\n      console.warn(err.stack || err.message);\n      return {success: false, asyncInit: false};\n    }\n  }\n\n  removeBackend(backendName: string): void {\n    if (!(backendName in this.registryFactory)) {\n      throw new Error(`${backendName} backend not found in registry`);\n    }\n    if (this.backendName === backendName && this.pendingBackendInit != null) {\n      // There is a pending promise of the backend we want to remove. Make it\n      // obsolete.\n      this.pendingBackendInitId++;\n    }\n\n    if (backendName in this.registry) {\n      this.disposeRegisteredKernels(backendName);\n      this.registry[backendName].dispose();\n      delete this.registry[backendName];\n    }\n\n    delete this.registryFactory[backendName];\n\n    // Unset the backend if it is active.\n    if (this.backendName === backendName) {\n      this.pendingBackendInit = null;\n      this.backendName = null;\n      this.backendInstance = null;\n    }\n  }\n\n  private getSortedBackends(): string[] {\n    if (Object.keys(this.registryFactory).length === 0) {\n      throw new Error('No backend found in registry.');\n    }\n    return Object.keys(this.registryFactory).sort((a: string, b: string) => {\n      // Highest priority comes first.\n      return this.registryFactory[b].priority -\n          this.registryFactory[a].priority;\n    });\n  }\n\n  private initializeBackendsAndReturnBest():\n      {name: string, asyncInit: boolean} {\n    const sortedBackends = this.getSortedBackends();\n\n    for (let i = 0; i < sortedBackends.length; i++) {\n      const backendName = sortedBackends[i];\n      const {success, asyncInit} = this.initializeBackend(backendName);\n      if (asyncInit || success) {\n        return {name: backendName, asyncInit};\n      }\n    }\n    throw new Error(\n        `Could not initialize any backends, all backend initializations ` +\n        `failed.`);\n  }\n\n  moveData(destBackend: KernelBackend, dataId: DataId) {\n    const info = this.state.tensorInfo.get(dataId);\n    const srcBackend = info.backend;\n    const values = this.readSync(dataId);\n    // Delete the tensor from the old backend and move it to the new\n    // backend.\n    srcBackend.disposeData(dataId);\n    info.backend = destBackend;\n    destBackend.move(dataId, values, info.shape, info.dtype);\n    if (this.shouldCheckForMemLeaks()) {\n      // Track the number of moves during a kernel execution to correctly\n      // detect memory leaks.\n      this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;\n    }\n  }\n\n  tidy<T extends TensorContainer>(nameOrFn: string|ScopeFn<T>, fn?: ScopeFn<T>):\n      T {\n    let name: string = null;\n    if (fn == null) {\n      // Called with only 1 argument.\n      if (typeof nameOrFn !== 'function') {\n        throw new Error('Please provide a function to tidy()');\n      }\n      fn = nameOrFn;\n    } else {\n      // Called with 2 arguments.\n      if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {\n        throw new Error(\n            'When calling with two arguments, the first argument ' +\n            'to tidy() must be a string');\n      }\n      if (typeof fn !== 'function') {\n        throw new Error(\n            'When calling with two arguments, the 2nd argument ' +\n            'to tidy() must be a function');\n      }\n      name = nameOrFn as string;\n      // TODO(nsthorat,smilkov): Do operation logging and performance\n      // profiling.\n    }\n    let result: T;\n    return this.scopedRun(\n        () => this.startScope(name), () => this.endScope(result), () => {\n          result = fn();\n          if (result instanceof Promise) {\n            console.error('Cannot return a Promise inside of tidy.');\n          }\n          return result;\n        });\n  }\n\n  private scopedRun<T>(start: () => void, end: () => void, f: () => T): T {\n    start();\n    try {\n      const res = f();\n      end();\n      return res;\n    } catch (ex) {\n      end();\n      throw ex;\n    }\n  }\n\n  private static nextTensorId = 0;\n  private nextTensorId(): number {\n    return Engine.nextTensorId++;\n  }\n\n  private static nextVariableId = 0;\n  private nextVariableId(): number {\n    return Engine.nextVariableId++;\n  }\n\n  /**\n   * This method is called instead of the public-facing tensor.clone() when\n   * saving a tensor for backwards pass. It makes sure to add the clone\n   * operation to the tape regardless of being called inside a kernel\n   * execution.\n   *\n   * This method will go away once all kernels are modularized since we won't\n   * need to turn off the tape inside runKernel().\n   */\n  private clone(x: Tensor): Tensor {\n    const y = this.makeTensorFromDataId(x.dataId, x.shape, x.dtype);\n    const inputs = {x};\n    const grad = (dy: Tensor) => ({x: () => dy.toFloat()});\n    const saved: Tensor[] = [];\n    this.addTapeNode(this.state.activeScope.name, inputs, [y], grad, saved);\n    return y;\n  }\n\n  /**\n   * Execute a kernel with the given name and return the output tensor.\n   *\n   * @param kernelName The name of the kernel to execute.\n   * @param inputs A map of input names to tensors.\n   * @param attrs A map of attribute names to their values. An attribute is a\n   *     primitive (non-tensor) input to the kernel.\n   * @param inputsToSave A list of tensors, inputs to save for the backprop\n   *     computation.\n   * @param outputsToSave A list of booleans, specifying which output to save\n   *     for the backprop computation. These are booleans since the output\n   * tensors are not visible to the user.\n   */\n  runKernel(\n      kernelName: string, inputs: NamedTensorMap, attrs: NamedAttrMap,\n      inputsToSave?: Tensor[], outputsToSave?: boolean[]): Tensor|Tensor[] {\n    const forwardFunc: null = null;\n    const backwardsFunc: null = null;\n    // Call runKernel as a stop-gap until we modularize all kernels.\n    // Once we modularize all kernels, we will remove the existing\n    // `runKernelFunc`.\n    return this.runKernelFunc(\n        forwardFunc, inputs, backwardsFunc, kernelName, attrs, inputsToSave,\n        outputsToSave);\n  }\n\n  private shouldCheckForMemLeaks(): boolean {\n    return this.ENV.getBool('IS_TEST');\n  }\n\n  private checkKernelForMemLeak(\n      kernelName: string, numDataIdsBefore: number,\n      outInfos: TensorInfo[]): void {\n    const numDataIdsAfter = this.backend.numDataIds();\n\n    // Count the number of data ids associated with the result of the kernel.\n    let numOutputDataIds = 0;\n    outInfos.forEach(info => {\n      // Complex numbers allocate 3 data ids, one for 'real', one for\n      // 'imaginary', and one for the container that holds the former two.\n      numOutputDataIds += (info.dtype === 'complex64' ? 3 : 1);\n    });\n\n    // Account for the number of moves during kernel execution. A \"data move\"\n    // can happen in the middle of a kernel execution, placing a new (key,value)\n    // pair in the data storage. Since data moves have net zero effect (we\n    // always remove the data from the old backend), we have to cancel them out\n    // when detecting memory leaks.\n    const numMoves =\n        this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];\n    const dataIdsLeaked =\n        numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;\n    if (dataIdsLeaked > 0) {\n      throw new Error(\n          `Backend '${this.backendName}' has an internal memory leak ` +\n          `(${dataIdsLeaked} data ids) after running '${kernelName}'`);\n    }\n  }\n\n  /**\n   * @deprecated Use `runKernel` for newly added kernels. Keep using this method\n   *     only for kernels that are not yet fully modularized.\n   */\n  runKernelFunc<T extends Tensor|Tensor[], I extends NamedTensorMap>(\n      forwardFunc: ForwardFunc<T>, inputs: I,\n      backwardsFunc?: (dy: T, saved: Tensor[]) => {[P in keyof I]: () => I[P]},\n      kernelName?: string, attrs?: NamedAttrMap, inputsToSave: Tensor[] = [],\n      outputsToSave: boolean[] = []): T {\n    let outputs: Tensor[];\n    let saved: Tensor[] = [];\n    const isTapeOn = this.isTapeOn();\n    if (kernelName == null) {\n      kernelName =\n          this.state.activeScope != null ? this.state.activeScope.name : '';\n    }\n    const saveFunc: GradSaveFunc = (tensors) => {\n      // Do not save unless we are recording to the tape. Otherwise it would\n      // cause a mem leak since we would never run backprop, which disposes\n      // the kept tensors.\n      if (!isTapeOn) {\n        return;\n      }\n      saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n    };\n\n    const startingBytecount = this.state.numBytes;\n    const startingNumTensors = this.state.numTensors;\n\n    if (this.shouldCheckForMemLeaks()) {\n      this.state.numDataMovesStack.push(0);\n    }\n\n    let kernelFunc: () => Tensor[];\n    const kernel = getKernel(kernelName, this.backendName);\n    let out: TensorInfo|TensorInfo[];\n    if (kernel != null) {\n      kernelFunc = () => {\n        const numDataIdsBefore = this.backend.numDataIds();\n        out = kernel.kernelFunc({inputs, attrs, backend: this.backend});\n        const outInfos = Array.isArray(out) ? out : [out];\n        if (this.shouldCheckForMemLeaks()) {\n          this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);\n        }\n        const outTensors = outInfos.map(\n            ({dataId, shape, dtype}) =>\n                this.makeTensorFromDataId(dataId, shape, dtype));\n        const outsToSave = outTensors.filter((_, i) => outputsToSave[i]);\n        // Save the inputs and outputs.\n        saveFunc((inputsToSave || []).slice().concat(outsToSave));\n        return outTensors;\n      };\n    } else {\n      kernelFunc = () => {\n        const numDataIdsBefore = this.backend.numDataIds();\n        out = this.tidy(() => forwardFunc(this.backend, saveFunc));\n        const outs = (Array.isArray(out) ? out : [out]) as Tensor[];\n        if (this.shouldCheckForMemLeaks()) {\n          this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outs);\n        }\n        return outs;\n      };\n    }\n\n    // Stop recording to a tape when running a kernel.\n    this.scopedRun(\n        () => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {\n          if (!this.ENV.getBool('DEBUG')) {\n            outputs = kernelFunc();\n          } else {\n            outputs = this.profiler.profileKernel(\n                kernelName, inputs, () => kernelFunc());\n          }\n        });\n\n    if (isTapeOn) {\n      this.addTapeNode(kernelName, inputs, outputs, backwardsFunc, saved);\n    }\n\n    if (this.state.profiling) {\n      this.state.activeProfile.kernels.push({\n        name: kernelName,\n        bytesAdded: this.state.numBytes - startingBytecount,\n        totalBytesSnapshot: this.state.numBytes,\n        tensorsAdded: this.state.numTensors - startingNumTensors,\n        totalTensorsSnapshot: this.state.numTensors,\n        inputShapes: Object.keys(inputs).map(key => inputs[key].shape),\n        outputShapes: outputs.map(item => item.shape)\n      });\n    }\n    return (Array.isArray(out) ? outputs : outputs[0]) as T;\n  }\n\n  /**\n   * Internal method used by public APIs for tensor creation. Makes a new\n   * tensor with the provided shape, dtype and values. It always\n   * creates a new data id and writes the values to the underlying backend.\n   */\n  makeTensor(\n      values: DataValues, shape: number[], dtype: DataType,\n      backend?: KernelBackend): Tensor {\n    if (values == null) {\n      throw new Error('Values passed to engine.makeTensor() are null');\n    }\n    dtype = dtype || 'float32';\n    backend = backend || this.backend;\n    let backendVals = values as BackendValues;\n    if (dtype === 'string' && util.isString(values[0])) {\n      backendVals = (values as string[]).map(d => util.encodeString(d));\n    }\n    const dataId = backend.write(backendVals, shape, dtype);\n    const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n    this.incRef(t, backend);\n\n    // Count bytes for string tensors.\n    if (dtype === 'string') {\n      const info = this.state.tensorInfo.get(dataId);\n      const newBytes = bytesFromStringArray(backendVals as Uint8Array[]);\n      this.state.numBytes += newBytes - info.bytes;\n      info.bytes = newBytes;\n    }\n    return t;\n  }\n\n  /**\n   * Internal method used by backends. Makes a new tensor\n   * that is a wrapper around an existing data id. It doesn't create\n   * a new data id, only increments the ref count used in memory tracking.\n   */\n  makeTensorFromDataId(\n      dataId: DataId, shape: number[], dtype: DataType,\n      backend?: KernelBackend): Tensor {\n    dtype = dtype || 'float32';\n    const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n    this.incRef(t, backend);\n    return t;\n  }\n\n  makeVariable(\n      initialValue: Tensor, trainable = true, name?: string,\n      dtype?: DataType): Variable {\n    name = name || this.nextVariableId().toString();\n    if (dtype != null && dtype !== initialValue.dtype) {\n      initialValue = initialValue.asType(dtype);\n    }\n    const v = new Variable(initialValue, trainable, name, this.nextTensorId());\n    if (this.state.registeredVariables[v.name] != null) {\n      throw new Error(`Variable with name ${v.name} was already registered`);\n    }\n    this.state.registeredVariables[v.name] = v;\n    this.incRef(v, this.backend);\n    return v;\n  }\n\n  incRef(a: Tensor, backend: KernelBackend): void {\n    const refCount = this.state.tensorInfo.has(a.dataId) ?\n        this.state.tensorInfo.get(a.dataId).refCount :\n        0;\n    this.state.numTensors++;\n    if (a.dtype === 'string') {\n      this.state.numStringTensors++;\n    }\n    if (refCount === 0) {\n      this.state.numDataBuffers++;\n\n      // Bytes for complex numbers are counted by their components. Bytes for\n      // string tensors are counted when writing values.\n      let bytes = 0;\n      if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n        bytes = a.size * util.bytesPerElement(a.dtype);\n      }\n      this.state.tensorInfo.set(a.dataId, {\n        backend: backend || this.backend,\n        dtype: a.dtype,\n        shape: a.shape,\n        bytes,\n        refCount: 0\n      });\n      this.state.numBytes += bytes;\n    }\n    this.state.tensorInfo.get(a.dataId).refCount++;\n    if (!(a instanceof Variable)) {\n      this.track(a);\n    }\n  }\n\n  disposeTensor(a: Tensor): void {\n    if (!this.state.tensorInfo.has(a.dataId)) {\n      return;\n    }\n\n    this.state.numTensors--;\n    if (a.dtype === 'string') {\n      this.state.numStringTensors--;\n    }\n    const info = this.state.tensorInfo.get(a.dataId);\n    const refCount = info.refCount;\n    if (refCount <= 1) {\n      // Don't count bytes for complex numbers as they are counted by their\n      // components.\n      if (a.dtype !== 'complex64') {\n        this.state.numBytes -= info.bytes;\n      }\n      this.state.numDataBuffers--;\n      info.backend.disposeData(a.dataId);\n      this.state.tensorInfo.delete(a.dataId);\n    } else {\n      this.state.tensorInfo.get(a.dataId).refCount--;\n    }\n    // TODO(nsthorat): Construct an error and save the stack trace for\n    // debugging when in debug mode. Creating a stack trace is too expensive\n    // to do unconditionally.\n  }\n\n  disposeVariables(): void {\n    for (const varName in this.state.registeredVariables) {\n      const v = this.state.registeredVariables[varName];\n      this.disposeVariable(v);\n    }\n  }\n\n  disposeVariable(v: Variable): void {\n    this.disposeTensor(v);\n    if (this.state.registeredVariables[v.name] != null) {\n      delete this.state.registeredVariables[v.name];\n    }\n  }\n\n  memory(): MemoryInfo {\n    const info = this.backend.memory() as MemoryInfo;\n    info.numTensors = this.state.numTensors;\n    info.numDataBuffers = this.state.numDataBuffers;\n    info.numBytes = this.state.numBytes;\n    if (this.state.numStringTensors > 0) {\n      info.unreliable = true;\n      if (info.reasons == null) {\n        info.reasons = [];\n      }\n      info.reasons.push(\n          'Memory usage by string tensors is approximate ' +\n          '(2 bytes per character)');\n    }\n    return info;\n  }\n\n  async profile(query: () => TensorContainer): Promise<ProfileInfo> {\n    this.state.profiling = true;\n\n    const startBytes = this.state.numBytes;\n    const startNumTensors = this.state.numTensors;\n\n    this.state.activeProfile.kernels = [];\n    this.state.activeProfile.result = query();\n\n    this.state.profiling = false;\n\n    this.state.activeProfile.peakBytes = Math.max(\n        ...this.state.activeProfile.kernels.map(d => d.totalBytesSnapshot));\n    this.state.activeProfile.newBytes = this.state.numBytes - startBytes;\n    this.state.activeProfile.newTensors =\n        this.state.numTensors - startNumTensors;\n    return this.state.activeProfile;\n  }\n\n  isTapeOn(): boolean {\n    return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;\n  }\n\n  private addTapeNode(\n      kernelName: string, inputs: NamedTensorMap, outputs: Tensor[],\n      gradientsFunc: (dy: Tensor|Tensor[], saved: Tensor[]) => NamedGradientMap,\n      saved: Tensor[]): void {\n    const tapeNode: TapeNode =\n        {id: this.state.nextTapeNodeId++, kernelName, inputs, outputs, saved};\n\n    const gradConfig = getGradient(kernelName);\n    if (gradConfig != null) {\n      gradientsFunc = gradConfig.gradFunc;\n    }\n    if (gradientsFunc != null) {\n      tapeNode.gradient = (dys: Tensor[]) => {\n        // TODO(smilkov): To optimize back-prop, pass dys that are not used in\n        // the backprop graph to the user as null instead of zeros\n        dys = dys.map((dy, i) => {\n          if (dy == null) {\n            const output = outputs[i];\n            const vals = util.makeZerosTypedArray(output.size, output.dtype);\n            return this.makeTensor(vals, output.shape, output.dtype);\n          }\n          return dy;\n        });\n        // Grad functions of ops with single outputs expect a dy, while ops\n        // with multiple outputs expect dys (array of dy).\n        return gradientsFunc(dys.length > 1 ? dys : dys[0], saved);\n      };\n    }\n    this.state.activeTape.push(tapeNode);\n  }\n\n  keep<T extends Tensor>(result: T): T {\n    result.kept = true;\n    return result;\n  }\n\n  private startTape() {\n    if (this.state.gradientDepth === 0) {\n      this.state.activeTape = [];\n    }\n    this.state.gradientDepth++;\n  }\n\n  private endTape() {\n    this.state.gradientDepth--;\n  }\n\n  /**\n   * Start a scope. Use this with endScope() to achieve the same functionality\n   * as scope() without the need for a function closure.\n   */\n  startScope(name?: string) {\n    const scopeInfo: ScopeState = {\n      track: [],\n      name: 'unnamed scope',\n      id: this.state.nextScopeId++\n    };\n    if (name) {\n      scopeInfo.name = name;\n    }\n    this.state.scopeStack.push(scopeInfo);\n    this.state.activeScope = scopeInfo;\n  }\n\n  /**\n   * End a scope. Use this with startScope() to achieve the same functionality\n   * as scope() without the need for a function closure.\n   */\n  endScope(result?: TensorContainer) {\n    const tensorsToTrackInParent = getTensorsInContainer(result);\n    const tensorsToTrackInParentSet =\n        new Set(tensorsToTrackInParent.map(t => t.id));\n\n    // Dispose the arrays tracked in this scope.\n    for (let i = 0; i < this.state.activeScope.track.length; i++) {\n      const tensor = this.state.activeScope.track[i];\n      if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {\n        tensor.dispose();\n      }\n    }\n\n    const oldScope = this.state.scopeStack.pop();\n    this.state.activeScope = this.state.scopeStack.length === 0 ?\n        null :\n        this.state.scopeStack[this.state.scopeStack.length - 1];\n\n    // Track the current result in the parent scope.\n    tensorsToTrackInParent.forEach(tensor => {\n      // Only track the tensor if was allocated in the inner scope and is not\n      // globally kept.\n      if (!tensor.kept && tensor.scopeId === oldScope.id) {\n        this.track(tensor);\n      }\n    });\n  }\n\n  /**\n   * Returns gradients of `f` with respect to each of the `xs`. The gradients\n   * returned are of the same length as `xs`, but some might be null if `f`\n   * was not a function of that `x`. It also takes optional dy to multiply the\n   * gradient, which defaults to `1`.\n   */\n  gradients<T extends Tensor>(\n      f: () => T, xs: Tensor[], dy?: T,\n      allowNoGradients = false): {value: T, grads: Tensor[]} {\n    util.assert(\n        xs.length > 0, () => 'gradients() received an empty list of xs.');\n    if (dy != null && dy.dtype !== 'float32') {\n      throw new Error(`dy must have 'float32' dtype, but has '${dy.dtype}'`);\n    }\n\n    const y = this.scopedRun(\n        () => this.startTape(), () => this.endTape(),\n        () => this.tidy('forward', f));\n\n    util.assert(\n        y instanceof Tensor,\n        () => 'The result y returned by f() must be a tensor.');\n    // Filter out the nodes that don't connect x => y.\n    const filteredTape = getFilteredNodesXToY(this.state.activeTape, xs, y);\n    if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {\n      throw new Error(\n          'Cannot compute gradient of y=f(x) with respect to x. Make sure ' +\n          'that the f you passed encloses all operations that lead from x ' +\n          'to y.');\n    }\n\n    return this.tidy('backward', () => {\n      const accumulatedGradientMap: {[tensorId: number]: Tensor} = {};\n      accumulatedGradientMap[y.id] = (dy == null) ? ones(y.shape) : dy;\n\n      // Backprop gradients through the filtered nodes.\n      backpropagateGradients(\n          accumulatedGradientMap, filteredTape,\n          // Pass the tidy function to avoid circular dep with `tape.ts`.\n          f => this.tidy(f as ScopeFn<Tensor>));\n      const grads = xs.map(x => accumulatedGradientMap[x.id]);\n\n      if (this.state.gradientDepth === 0) {\n        // This means that we are not computing higher-order gradients\n        // and can clean up the tape.\n        this.state.activeTape.forEach(node => {\n          for (const tensor of node.saved) {\n            tensor.dispose();\n          }\n        });\n        this.state.activeTape = null;\n      }\n      return {value: y, grads};\n    });\n  }\n\n  customGrad<T extends Tensor>(f: CustomGradientFunc<T>):\n      (...args: Array<Tensor|GradSaveFunc>) => T {\n    util.assert(\n        util.isFunction(f),\n        () => 'The f passed in customGrad(f) must be a function.');\n    return (...inputs: Tensor[]): T => {\n      util.assert(\n          inputs.every(t => t instanceof Tensor),\n          () => 'The args passed in customGrad(f)(x1, x2,...) must all be ' +\n              'tensors');\n\n      let res: {\n        value: T,\n        gradFunc: (dy: T, saved: Tensor[]) => Tensor | Tensor[],\n      };\n      const inputMap: NamedTensorMap = {};\n      inputs.forEach((input, i) => {\n        inputMap[i] = input;\n      });\n      return this.runKernelFunc(\n          (_, save) => {\n            res = f(...[...inputs, save]);\n            util.assert(\n                res.value instanceof Tensor,\n                () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.value` is a tensor');\n            util.assert(\n                util.isFunction(res.gradFunc),\n                () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function.');\n            return res.value;\n          },\n          inputMap,\n          (dy: T, saved: Tensor[]) => {\n            const gradRes = res.gradFunc(dy, saved);\n            const grads: Tensor[] =\n                Array.isArray(gradRes) ? gradRes : [gradRes];\n            util.assert(\n                grads.length === inputs.length,\n                () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function that returns ' +\n                    'the same number of tensors as inputs passed to f(...).');\n            util.assert(\n                grads.every(t => t instanceof Tensor),\n                () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function that returns ' +\n                    'a list of only tensors.');\n            const gradMap: {[key: string]: () => Tensor} = {};\n            grads.forEach((grad, i) => {\n              gradMap[i] = () => grad;\n            });\n            return gradMap;\n          });\n    };\n  }\n\n  readSync(dataId: DataId): BackendValues {\n    // Route the read to the correct backend.\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.readSync(dataId);\n  }\n  read(dataId: DataId): Promise<BackendValues> {\n    // Route the read to the correct backend.\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.read(dataId);\n  }\n\n  async time(query: () => void): Promise<TimingInfo> {\n    const start = now();\n    const timingInfo = await this.backend.time(query) as TimingInfo;\n    timingInfo.wallMs = now() - start;\n    return timingInfo;\n  }\n\n  /**\n   * Tracks a Tensor in the current scope to be automatically cleaned up\n   * when the current scope ends, and returns the value.\n   *\n   * @param result The Tensor to track in the current scope.\n   */\n  private track<T extends Tensor>(result: T): T {\n    if (this.state.activeScope != null) {\n      result.scopeId = this.state.activeScope.id;\n      this.state.activeScope.track.push(result);\n    }\n\n    return result;\n  }\n\n  get registeredVariables(): NamedVariableMap {\n    return this.state.registeredVariables;\n  }\n\n  /**\n   * Resets the engine state. Removes all backends but does not remove\n   * registered backend factories.\n   */\n  reset(): void {\n    // Make any pending promise obsolete.\n    this.pendingBackendInitId++;\n\n    this.state.dispose();\n    this.ENV.reset();\n    this.state = new EngineState();\n\n    for (const backendName in this.registry) {\n      this.disposeRegisteredKernels(backendName);\n      this.registry[backendName].dispose();\n      delete this.registry[backendName];\n    }\n    this.backendName = null;\n    this.backendInstance = null;\n    this.pendingBackendInit = null;\n  }\n}\n\nfunction ones(shape: number[]): Tensor {\n  const values = makeOnesTypedArray(sizeFromShape(shape), 'float32');\n  return ENGINE.makeTensor(values, shape, 'float32');\n}\n\nlet GLOBAL: {_tfengine: Engine};\nfunction getGlobalNamespace(): {_tfengine: Engine} {\n  if (GLOBAL == null) {\n    // tslint:disable-next-line:no-any\n    let ns: any;\n    if (typeof (window) !== 'undefined') {\n      ns = window;\n    } else if (typeof (global) !== 'undefined') {\n      ns = global;\n    } else if (typeof (process) !== 'undefined') {\n      ns = process;\n    } else if (typeof (self) !== 'undefined') {\n      ns = self;\n    } else {\n      throw new Error('Could not find a global object');\n    }\n    GLOBAL = ns;\n  }\n  return GLOBAL;\n}\n\nfunction getOrMakeEngine(): Engine {\n  const ns = getGlobalNamespace();\n  if (ns._tfengine == null) {\n    const environment = new Environment(ns);\n    ns._tfengine = new Engine(environment);\n  }\n  setEnvironmentGlobal(ns._tfengine.ENV);\n\n  // Tell the current tensor interface that the global engine is responsible\n  // for tracking.\n  setTensorTracker(() => ns._tfengine);\n  return ns._tfengine;\n}\n\nexport const ENGINE = getOrMakeEngine();\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from './tensor';\nimport {NamedTensorMap} from './tensor_types';\nimport * as util from './util';\n\nexport interface TapeNode {\n  id: number;\n  kernelName: string;\n  outputs: Tensor[];\n  inputs: NamedTensorMap;\n  // Optional params, defined only for ops with gradient impl.\n  gradient?: (dys: Tensor[]) => NamedGradientMap;\n  saved?: Tensor[];\n}\n\nexport type NamedGradientMap = {\n  [inputName: string]: () => Tensor;\n};\n\n/**\n * Computes a list of TapeNodes that connect x to y, filtering everything else\n * out and preserving the order of the original tape elements.\n *\n * @param tape The tape elements to filter.\n * @param xs The input Tensors.\n * @param y The output Tensor.\n */\nexport function getFilteredNodesXToY(\n    tape: TapeNode[], xs: Tensor[], y: Tensor): TapeNode[] {\n  // Forward pass to compute all the nodes and Tensors that are transitively a\n  // function of x.\n  const tensorsFromX: {[tensorId: number]: boolean} = {};\n  const nodesFromX: {[nodeId: number]: boolean} = {};\n  for (let i = 0; i < xs.length; i++) {\n    tensorsFromX[xs[i].id] = true;\n  }\n\n  for (let i = 0; i < tape.length; i++) {\n    const node = tape[i];\n    const nodeInputs = node.inputs;\n    for (const inputName in nodeInputs) {\n      const input = nodeInputs[inputName];\n\n      let anyInputFromX = false;\n      for (let j = 0; j < xs.length; j++) {\n        if (tensorsFromX[input.id]) {\n          node.outputs.forEach(output => tensorsFromX[output.id] = true);\n          anyInputFromX = true;\n          nodesFromX[node.id] = true;\n          break;\n        }\n      }\n\n      if (anyInputFromX) {\n        break;\n      }\n    }\n  }\n\n  // Backward pass to find all of the nodes and Tensors that lead to y.\n  const tensorsLeadToY: {[tensorId: number]: boolean} = {};\n  tensorsLeadToY[y.id] = true;\n  const nodesToY: {[nodeId: number]: boolean} = {};\n\n  for (let i = tape.length - 1; i >= 0; i--) {\n    const node = tape[i];\n    const nodeInputs = node.inputs;\n\n    // If any of the outputs lead to y, mark all of the inputs as leading to y.\n    for (let j = 0; j < node.outputs.length; j++) {\n      if (tensorsLeadToY[node.outputs[j].id]) {\n        for (const inputName in nodeInputs) {\n          tensorsLeadToY[nodeInputs[inputName].id] = true;\n          nodesToY[node.id] = true;\n        }\n        break;\n      }\n    }\n  }\n\n  // Return the paths that come from x and lead to y.\n  const filteredTape: TapeNode[] = [];\n  for (let i = 0; i < tape.length; i++) {\n    const node = tape[i];\n\n    if (nodesFromX[node.id] && nodesToY[node.id]) {\n      // Prune the inputs from the node that aren't a function of x.\n      const prunedInputs: {[inputName: string]: Tensor} = {};\n      for (const inputName in node.inputs) {\n        const nodeInput = node.inputs[inputName];\n        if (tensorsFromX[nodeInput.id]) {\n          prunedInputs[inputName] = nodeInput;\n        }\n      }\n\n      // Copy the node and overwrite inputsAndArgs to the pruned version.\n      const prunedNode = Object.assign({}, node);\n      prunedNode.inputs = prunedInputs;\n      prunedNode.outputs = node.outputs;\n\n      filteredTape.push(prunedNode);\n    }\n  }\n\n  return filteredTape;\n}\n\n/**\n * Backpropagate gradients through the filtered TapeNodes.\n *\n * @param tensorAccumulatedGradientMap A map of Tensor to its gradient. This map\n * is mutated by this method.\n * @param filteredTape The filtered TapeNodes to backprop through.\n */\nexport function backpropagateGradients(\n    tensorAccumulatedGradientMap: {[tensorId: number]: Tensor},\n    filteredTape: TapeNode[], tidy: (f: Function) => Tensor) {\n  // Walk the tape backward and keep a map of Tensor to its gradient.\n  for (let i = filteredTape.length - 1; i >= 0; i--) {\n    const node = filteredTape[i];\n\n    const dys: Tensor[] = [];\n    node.outputs.forEach(o => {\n      const gradTensor = tensorAccumulatedGradientMap[o.id];\n      if (gradTensor != null) {\n        dys.push(gradTensor);\n      } else {\n        // This particular output is not in the back-propagation subgraph, so it\n        // does not affect the final output, thus we put null for its dy.\n        dys.push(null);\n      }\n    });\n\n    if (node.gradient == null) {\n      throw new Error(\n          `Cannot compute gradient: gradient function not found ` +\n          `for ${node.kernelName}.`);\n    }\n\n    // Backprop dy through this node and accumulate gradients over the inputs.\n    const inputGradients = node.gradient(dys);\n\n    for (const inputName in node.inputs) {\n      if (!(inputName in inputGradients)) {\n        throw new Error(\n            `Cannot backprop through input ${inputName}. ` +\n            `Available gradients found: ${Object.keys(inputGradients)}.`);\n      }\n\n      // Call the gradient function.\n      const dx = tidy(() => inputGradients[inputName]());\n      if (dx.dtype !== 'float32') {\n        throw new Error(\n            `Error in gradient for op ${\n                node.kernelName}. The gradient of input ` +\n            `${inputName} must have 'float32' dtype, but has '${dx.dtype}'`);\n      }\n      const x = node.inputs[inputName];\n      if (!util.arraysEqual(dx.shape, x.shape)) {\n        throw new Error(\n            `Error in gradient for op ${\n                node.kernelName}. The gradient of input ` +\n            `'${inputName}' has shape '${dx.shape}', which does not match ` +\n            `the shape of the input '${x.shape}'`);\n      }\n\n      if (tensorAccumulatedGradientMap[x.id] == null) {\n        tensorAccumulatedGradientMap[x.id] = dx;\n      } else {\n        const curGradient = tensorAccumulatedGradientMap[x.id];\n        tensorAccumulatedGradientMap[x.id] = curGradient.add(dx);\n        curGradient.dispose();\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport function isMobile(): boolean {\n  // tslint:disable-next-line:no-any\n  const a = navigator.userAgent || navigator.vendor || (window as any).opera;\n  // tslint:disable-next-line:max-line-length\n  return /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i\n             .test(a) ||\n      // tslint:disable-next-line:max-line-length\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i\n          .test(a.substr(0, 4));\n}\n\nexport function isBrowser(): boolean {\n  return (typeof window !== 'undefined' && window.document != null) ||\n      //@ts-ignore\n      (typeof WorkerGlobalScope !== 'undefined');\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as device_util from './device_util';\nimport {env} from './environment';\n\nconst ENV = env();\n\n/**\n * This file contains environment-related flag registrations.\n */\n\n/** Whether to enable debug mode. */\nENV.registerFlag('DEBUG', () => false, debugValue => {\n  if (debugValue) {\n    console.warn(\n        'Debugging mode is ON. The output of every math call will ' +\n        'be downloaded to CPU and checked for NaNs. ' +\n        'This significantly impacts performance.');\n  }\n});\n\n/** Whether we are in a browser (as versus, say, node.js) environment. */\nENV.registerFlag('IS_BROWSER', () => device_util.isBrowser());\n\n/** Whether we are in a browser (as versus, say, node.js) environment. */\nENV.registerFlag(\n    'IS_NODE',\n    () => (typeof process !== 'undefined') &&\n        (typeof process.versions !== 'undefined') &&\n        (typeof process.versions.node !== 'undefined'));\n\n/** Whether this browser is Chrome. */\nENV.registerFlag(\n    'IS_CHROME',\n    () => typeof navigator !== 'undefined' && navigator != null &&\n        navigator.userAgent != null && /Chrome/.test(navigator.userAgent) &&\n        /Google Inc/.test(navigator.vendor));\n\n/**\n * True when the environment is \"production\" where we disable safety checks\n * to gain performance.\n */\nENV.registerFlag('PROD', () => false);\n\n/**\n * Whether to do sanity checks when inferring a shape from user-provided\n * values, used when creating a new tensor.\n */\nENV.registerFlag(\n    'TENSORLIKE_CHECK_SHAPE_CONSISTENCY', () => ENV.getBool('DEBUG'));\n\n/** Whether deprecation warnings are enabled. */\nENV.registerFlag('DEPRECATION_WARNINGS_ENABLED', () => true);\n\n/** True if running unit tests. */\nENV.registerFlag('IS_TEST', () => false);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst contexts: {[key: string]: WebGLRenderingContext} = {};\n\nconst WEBGL_ATTRIBUTES: WebGLContextAttributes = {\n  alpha: false,\n  antialias: false,\n  premultipliedAlpha: false,\n  preserveDrawingBuffer: false,\n  depth: false,\n  stencil: false,\n  failIfMajorPerformanceCaveat: true\n};\n\nexport function setWebGLContext(\n    webGLVersion: number, gl: WebGLRenderingContext) {\n  contexts[webGLVersion] = gl;\n}\n\nexport function getWebGLContext(webGLVersion: number): WebGLRenderingContext {\n  if (!(webGLVersion in contexts)) {\n    contexts[webGLVersion] = getWebGLRenderingContext(webGLVersion);\n  }\n  const gl = contexts[webGLVersion];\n  if (gl.isContextLost()) {\n    delete contexts[webGLVersion];\n    return getWebGLContext(webGLVersion);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return contexts[webGLVersion];\n}\n\nfunction createCanvas(webGLVersion: number) {\n  if (typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {\n    return new OffscreenCanvas(300, 150);\n  } else if (typeof document !== 'undefined') {\n    return document.createElement('canvas');\n  } else {\n    throw new Error('Cannot create a canvas in this context');\n  }\n}\n\nfunction getWebGLRenderingContext(webGLVersion: number): WebGLRenderingContext {\n  if (webGLVersion !== 1 && webGLVersion !== 2) {\n    throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n  }\n  const canvas = createCanvas(webGLVersion);\n\n  canvas.addEventListener('webglcontextlost', (ev: Event) => {\n    ev.preventDefault();\n    delete contexts[webGLVersion];\n  }, false);\n  if (webGLVersion === 1) {\n    return (canvas.getContext('webgl', WEBGL_ATTRIBUTES) ||\n            canvas.getContext('experimental-webgl', WEBGL_ATTRIBUTES)) as\n        WebGLRenderingContext;\n  }\n  return canvas.getContext('webgl2', WEBGL_ATTRIBUTES) as WebGLRenderingContext;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '../../environment';\n\nimport {DataId, Tensor} from '../../tensor';\nimport {BackendValues, DataType} from '../../types';\nimport * as util from '../../util';\n\nexport enum PackingScheme {\n  /**\n   * All values in a single texel are densely packed without any constraints.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 4]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   010|011   020|021\n   * -------   -------   -------\n   * 002|003   012|013   022|023\n   *\n   * 100|101   110|111   120|121\n   * -------   -------   -------\n   * 102|103   112|113   122|123\n   *\n   */\n  DENSE,\n\n  /**\n   * Single texels contain only values from the same batch, and from adjacent\n   * rows and columns.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 5]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   */\n  SHARED_BATCH\n}\n\nexport enum TextureUsage {\n  RENDER,\n  UPLOAD,\n  PIXELS,\n  DOWNLOAD\n}\n\nexport enum PhysicalTextureType {\n  UNPACKED_FLOAT16,\n  UNPACKED_FLOAT32,\n  PACKED_4X1_UNSIGNED_BYTE,\n  PACKED_2X2_FLOAT32,\n  PACKED_2X2_FLOAT16\n}\n\nexport interface TextureData {\n  // Required.\n  shape: number[];\n  dtype: DataType;\n\n  // Optional.\n  values?: BackendValues;\n  texture?: WebGLTexture;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensors field. When this is defined, texture will be null.\n  complexTensors?: {real: Tensor, imag: Tensor};\n  /** [rows, columns] shape of the texture. */\n  texShape?: [number, number];\n  usage?: TextureUsage;\n  isPacked?: boolean;\n\n  // Available when the tensor has been sliced.\n  slice?: {\n    // Offset in the 'flat index' space.\n    flatOffset: number;\n    // Used for counting how many sliced tensors point to the same texture.\n    origDataId: DataId;\n  };\n}\n\nexport function getUnpackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns, rows];\n}\n\nexport function getUnpackedArraySizeFromMatrixSize(\n    matrixSize: number, channelsPerTexture: number): number {\n  return matrixSize * channelsPerTexture;\n}\n\nexport function getColorMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns * 4, rows];\n}\n\n/**\n * Get shape for densely packed RGBA texture.\n */\nexport function getDenseTexShape(shape: number[]): [number, number] {\n  const size = util.sizeFromShape(shape);\n  const texelsNeeded = Math.ceil(size / 4);\n  return util.sizeToSquarishShape(texelsNeeded);\n}\n\nexport function getMatrixSizeFromUnpackedArraySize(\n    unpackedSize: number, channelsPerTexture: number): number {\n  if (unpackedSize % channelsPerTexture !== 0) {\n    throw new Error(\n        `unpackedSize (${unpackedSize}) must be a multiple of ` +\n        `${channelsPerTexture}`);\n  }\n  return unpackedSize / channelsPerTexture;\n}\n\nexport function decodeMatrixFromUnpackedColorRGBAArray(\n    unpackedArray: Float32Array, matrix: Float32Array, channels: number) {\n  const requiredSize = unpackedArray.length * channels / 4;\n  if (matrix.length < requiredSize) {\n    throw new Error(\n        `matrix length (${matrix.length}) must be >= ${requiredSize}`);\n  }\n  let dst = 0;\n  for (let src = 0; src < unpackedArray.length; src += 4) {\n    for (let c = 0; c < channels; c++) {\n      matrix[dst++] = unpackedArray[src + c];\n    }\n  }\n}\n\nexport function getPackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [\n    Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n  ];\n}\n\nexport function getPackedRGBAArraySizeFromMatrixShape(\n    rows: number, columns: number): number {\n  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return w * h * 4;\n}\n\nexport interface TextureConfig {\n  internalFormatFloat: number;\n  textureFormatFloat: number;\n  internalFormatPackedHalfFloat: number;\n  internalFormatHalfFloat: number;\n  internalFormatPackedFloat: number;\n\n  // The format to use during a gl.readPixels call.\n  downloadTextureFormat: number;\n  // How many channels need to be unpacked after a gl.readPixels call.\n  downloadUnpackNumChannels: number;\n\n  defaultNumChannels: number;\n  textureTypeHalfFloat: number;\n  textureTypeFloat: number;\n}\n\nexport function getTextureConfig(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension?: any): TextureConfig {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n\n  let internalFormatFloat: number;\n  let internalFormatHalfFloat: number;\n  let internalFormatPackedHalfFloat: number;\n  let internalFormatPackedFloat: number;\n  let textureFormatFloat: number;\n\n  let downloadTextureFormat: number;\n  let downloadUnpackNumChannels: number;\n\n  let defaultNumChannels: number;\n  let textureTypeHalfFloat: number;\n  let textureTypeFloat: number;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    internalFormatFloat = glany.R32F;\n    internalFormatHalfFloat = glany.R16F;\n    internalFormatPackedHalfFloat = glany.RGBA16F;\n    internalFormatPackedFloat = glany.RGBA32F;\n    textureFormatFloat = glany.RED;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 1;\n    textureTypeHalfFloat = glany.HALF_FLOAT;\n    textureTypeFloat = glany.FLOAT;\n  } else {\n    internalFormatFloat = gl.RGBA;\n    internalFormatHalfFloat = gl.RGBA;\n    internalFormatPackedHalfFloat = gl.RGBA;\n    internalFormatPackedFloat = glany.RGBA;\n    textureFormatFloat = gl.RGBA;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 4;\n    textureTypeHalfFloat = textureHalfFloatExtension != null ?\n        textureHalfFloatExtension.HALF_FLOAT_OES :\n        null;\n    textureTypeFloat = gl.FLOAT;\n  }\n  downloadTextureFormat = gl.RGBA;\n\n  return {\n    internalFormatFloat,\n    internalFormatHalfFloat,\n    internalFormatPackedHalfFloat,\n    internalFormatPackedFloat,\n    textureFormatFloat,\n    downloadTextureFormat,\n    downloadUnpackNumChannels,\n    defaultNumChannels,\n    textureTypeHalfFloat,\n    textureTypeFloat\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '../../environment';\n\nimport * as util from '../../util';\n\nimport {getWebGLContext} from './canvas_util';\nimport {getTextureConfig} from './tex_util';\n\nexport function callAndCheck<T>(\n    gl: WebGLRenderingContext, debugMode: boolean, func: () => T): T {\n  const returnValue = func();\n  if (debugMode) {\n    checkWebGLError(gl);\n  }\n  return returnValue;\n}\n\nfunction checkWebGLError(gl: WebGLRenderingContext) {\n  const error = gl.getError();\n  if (error !== gl.NO_ERROR) {\n    throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));\n  }\n}\n\n// https://en.wikipedia.org/wiki/Half-precision_floating-point_format\nconst MIN_FLOAT16 = 5.96e-8;\nconst MAX_FLOAT16 = 65504;\n\nexport function canBeRepresented(num: number): boolean {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 ||\n      (MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16)) {\n    return true;\n  }\n  return false;\n}\n\nexport function getWebGLErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.NO_ERROR:\n      return 'NO_ERROR';\n    case gl.INVALID_ENUM:\n      return 'INVALID_ENUM';\n    case gl.INVALID_VALUE:\n      return 'INVALID_VALUE';\n    case gl.INVALID_OPERATION:\n      return 'INVALID_OPERATION';\n    case gl.INVALID_FRAMEBUFFER_OPERATION:\n      return 'INVALID_FRAMEBUFFER_OPERATION';\n    case gl.OUT_OF_MEMORY:\n      return 'OUT_OF_MEMORY';\n    case gl.CONTEXT_LOST_WEBGL:\n      return 'CONTEXT_LOST_WEBGL';\n    default:\n      return `Unknown error code ${status}`;\n  }\n}\n\nexport function getExtensionOrThrow(\n    gl: WebGLRenderingContext, debug: boolean, extensionName: string): {} {\n  return throwIfNull<{}>(\n      gl, debug, () => gl.getExtension(extensionName),\n      'Extension \"' + extensionName + '\" not supported on this browser.');\n}\n\nexport function createVertexShader(\n    gl: WebGLRenderingContext, debug: boolean,\n    vertexShaderSource: string): WebGLShader {\n  const vertexShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, debug, () => gl.createShader(gl.VERTEX_SHADER),\n      'Unable to create vertex WebGLShader.');\n  callAndCheck(\n      gl, debug, () => gl.shaderSource(vertexShader, vertexShaderSource));\n  callAndCheck(gl, debug, () => gl.compileShader(vertexShader));\n  if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    throw new Error('Failed to compile vertex shader.');\n  }\n  return vertexShader;\n}\n\nexport function createFragmentShader(\n    gl: WebGLRenderingContext, debug: boolean,\n    fragmentShaderSource: string): WebGLShader {\n  const fragmentShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, debug, () => gl.createShader(gl.FRAGMENT_SHADER),\n      'Unable to create fragment WebGLShader.');\n  callAndCheck(\n      gl, debug, () => gl.shaderSource(fragmentShader, fragmentShaderSource));\n  callAndCheck(gl, debug, () => gl.compileShader(fragmentShader));\n  if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {\n    logShaderSourceAndInfoLog(\n        fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));\n    throw new Error('Failed to compile fragment shader.');\n  }\n  return fragmentShader;\n}\n\nconst lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;\nfunction logShaderSourceAndInfoLog(\n    shaderSource: string, shaderInfoLog: string) {\n  const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);\n  if (lineNumberRegexResult == null) {\n    console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);\n    console.log(shaderSource);\n    return;\n  }\n\n  const lineNumber = +lineNumberRegexResult[1];\n\n  const shaderLines = shaderSource.split('\\n');\n  const pad = shaderLines.length.toString().length + 2;\n  const linesWithLineNumbers = shaderLines.map(\n      (line, lineNumber) =>\n          util.rightPad((lineNumber + 1).toString(), pad) + line);\n  let maxLineLength = 0;\n  for (let i = 0; i < linesWithLineNumbers.length; i++) {\n    maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);\n  }\n\n  const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);\n  const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);\n  const afterErrorLines = linesWithLineNumbers.slice(lineNumber);\n\n  console.log(beforeErrorLines.join('\\n'));\n  console.log(shaderInfoLog.split('\\n')[0]);\n  console.log(\n      `%c ${util.rightPad(errorLine[0], maxLineLength)}`,\n      'border:1px solid red; background-color:#e3d2d2; color:#a61717');\n  console.log(afterErrorLines.join('\\n'));\n}\n\nexport function createProgram(\n    gl: WebGLRenderingContext, debug: boolean): WebGLProgram {\n  return throwIfNull<WebGLProgram>(\n      gl, debug, () => gl.createProgram(), 'Unable to create WebGLProgram.');\n}\n\nexport function linkProgram(\n    gl: WebGLRenderingContext, debug: boolean, program: WebGLProgram) {\n  callAndCheck(gl, debug, () => gl.linkProgram(program));\n  if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Failed to link vertex and fragment shaders.');\n  }\n}\n\nexport function validateProgram(\n    gl: WebGLRenderingContext, debug: boolean, program: WebGLProgram) {\n  callAndCheck(gl, debug, () => gl.validateProgram(program));\n  if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Shader program validation failed.');\n  }\n}\n\nexport function createStaticVertexBuffer(\n    gl: WebGLRenderingContext, debug: boolean,\n    data: Float32Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, debug, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, debug, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl, debug, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function createStaticIndexBuffer(\n    gl: WebGLRenderingContext, debug: boolean, data: Uint16Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, debug, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, debug, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl, debug,\n      () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function getNumChannels(): number {\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    return 1;\n  }\n  return 4;\n}\n\nexport function createTexture(\n    gl: WebGLRenderingContext, debug: boolean): WebGLTexture {\n  return throwIfNull<WebGLTexture>(\n      gl, debug, () => gl.createTexture(), 'Unable to create WebGLTexture.');\n}\n\nexport function validateTextureSize(width: number, height: number) {\n  const maxTextureSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if ((width <= 0) || (height <= 0)) {\n    const requested = `[${width}x${height}]`;\n    throw new Error('Requested texture size ' + requested + ' is invalid.');\n  }\n  if ((width > maxTextureSize) || (height > maxTextureSize)) {\n    const requested = `[${width}x${height}]`;\n    const max = `[${maxTextureSize}x${maxTextureSize}]`;\n    throw new Error(\n        'Requested texture size ' + requested +\n        ' greater than WebGL maximum on this browser / GPU ' + max + '.');\n  }\n}\n\nexport function createFramebuffer(\n    gl: WebGLRenderingContext, debug: boolean): WebGLFramebuffer {\n  return throwIfNull<WebGLFramebuffer>(\n      gl, debug, () => gl.createFramebuffer(),\n      'Unable to create WebGLFramebuffer.');\n}\n\nexport function bindVertexBufferToProgramAttribute(\n    gl: WebGLRenderingContext, debug: boolean, program: WebGLProgram,\n    attribute: string, buffer: WebGLBuffer, arrayEntriesPerItem: number,\n    itemStrideInBytes: number, itemOffsetInBytes: number): boolean {\n  const loc = gl.getAttribLocation(program, attribute);\n  if (loc === -1) {\n    // The GPU compiler decided to strip out this attribute because it's unused,\n    // thus no need to bind.\n    return false;\n  }\n  callAndCheck(gl, debug, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl, debug,\n      () => gl.vertexAttribPointer(\n          loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes,\n          itemOffsetInBytes));\n  callAndCheck(gl, debug, () => gl.enableVertexAttribArray(loc));\n  return true;\n}\n\nexport function bindTextureUnit(\n    gl: WebGLRenderingContext, debug: boolean, texture: WebGLTexture,\n    textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, debug, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, debug, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n}\n\nexport function unbindTextureUnit(\n    gl: WebGLRenderingContext, debug: boolean, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, debug, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, debug, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function getProgramUniformLocationOrThrow(\n    gl: WebGLRenderingContext, debug: boolean, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return throwIfNull<WebGLUniformLocation>(\n      gl, debug, () => gl.getUniformLocation(program, uniformName),\n      'uniform \"' + uniformName + '\" not present in program.');\n}\n\nexport function getProgramUniformLocation(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return gl.getUniformLocation(program, uniformName);\n}\n\nexport function bindTextureToProgramUniformSampler(\n    gl: WebGLRenderingContext, debug: boolean, program: WebGLProgram,\n    texture: WebGLTexture, uniformSamplerLocation: WebGLUniformLocation,\n    textureUnit: number) {\n  callAndCheck(\n      gl, debug, () => bindTextureUnit(gl, debug, texture, textureUnit));\n  callAndCheck(\n      gl, debug, () => gl.uniform1i(uniformSamplerLocation, textureUnit));\n}\n\nexport function bindCanvasToFramebuffer(\n    gl: WebGLRenderingContext, debug: boolean) {\n  callAndCheck(gl, debug, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n  callAndCheck(\n      gl, debug, () => gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));\n  callAndCheck(\n      gl, debug, () => gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));\n}\n\nexport function bindColorTextureToFramebuffer(\n    gl: WebGLRenderingContext, debug: boolean, texture: WebGLTexture,\n    framebuffer: WebGLFramebuffer) {\n  callAndCheck(\n      gl, debug, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl, debug,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));\n}\n\nexport function unbindColorTextureFromFramebuffer(\n    gl: WebGLRenderingContext, debug: boolean, framebuffer: WebGLFramebuffer) {\n  callAndCheck(\n      gl, debug, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl, debug,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));\n}\n\nexport function validateFramebuffer(gl: WebGLRenderingContext) {\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  if (status !== gl.FRAMEBUFFER_COMPLETE) {\n    throw new Error(\n        'Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));\n  }\n}\n\nexport function getFramebufferErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n      return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';\n    case gl.FRAMEBUFFER_UNSUPPORTED:\n      return 'FRAMEBUFFER_UNSUPPORTED';\n    default:\n      return `unknown error ${status}`;\n  }\n}\n\nfunction throwIfNull<T>(\n    gl: WebGLRenderingContext, debug: boolean, returnTOrNull: () => T | null,\n    failureMessage: string): T {\n  const tOrNull: T|null = callAndCheck(gl, debug, () => returnTOrNull());\n  if (tOrNull == null) {\n    throw new Error(failureMessage);\n  }\n  return tOrNull;\n}\n\nfunction validateTextureUnit(gl: WebGLRenderingContext, textureUnit: number) {\n  const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;\n  const glTextureUnit = textureUnit + gl.TEXTURE0;\n  if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {\n    const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;\n    throw new Error(`textureUnit must be in ${textureUnitRange}.`);\n  }\n}\n\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return util.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [\n    shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]\n  ];\n}\n\nexport function getShapeAs3D(shape: number[]): [number, number, number] {\n  let shapeAs3D: [number, number, number] = [1, 1, 1];\n  const isScalar = shape.length === 0 || (shape.length === 1 && shape[0] === 1);\n  if (!isScalar) {\n    shapeAs3D =\n        [getBatchDim(shape), ...getRowsCols(shape)] as [number, number, number];\n  }\n  return shapeAs3D;\n}\n\nexport function getTextureShapeFromLogicalShape(\n    logShape: number[], isPacked = false): [number, number] {\n  let maxTexSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if (isPacked) {\n    maxTexSize = maxTexSize * 2;\n\n    // This logic ensures we accurately count the number of packed texels needed\n    // to accommodate the tensor. We can only pack values in the same texel if\n    // they are from adjacent pairs of rows/cols within the same batch. So if a\n    // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n    // fact that the texels containing the third row are half empty.\n    logShape = logShape.map(\n        (d, i) => i >= logShape.length - 2 ?\n            util.nearestLargerEven(logShape[i]) :\n            logShape[i]);\n\n    // Packed texture height is at least 2 (the channel height of a single\n    // texel).\n    if (logShape.length === 1) {\n      logShape = [2, logShape[0]];\n    }\n  }\n\n  // If logical shape is 2, we don't squeeze, since we want to match physical.\n  if (logShape.length !== 2) {\n    const squeezeResult = util.squeezeShape(logShape);\n    logShape = squeezeResult.newShape;\n  }\n\n  let size = util.sizeFromShape(logShape);\n  if (logShape.length <= 1 && size <= maxTexSize) {\n    return [1, size];\n  } else if (\n      logShape.length === 2 && logShape[0] <= maxTexSize &&\n      logShape[1] <= maxTexSize) {\n    return logShape as [number, number];\n  } else if (\n      logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize &&\n      logShape[2] <= maxTexSize) {\n    return [logShape[0] * logShape[1], logShape[2]];\n  } else if (\n      logShape.length === 3 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] <= maxTexSize) {\n    return [logShape[0], logShape[1] * logShape[2]];\n  } else if (\n      logShape.length === 4 &&\n      logShape[0] * logShape[1] * logShape[2] <= maxTexSize &&\n      logShape[3] <= maxTexSize) {\n    return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n  } else if (\n      logShape.length === 4 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {\n    return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n  } else {\n    if (isPacked) {\n      // For packed textures size equals the number of channels required to\n      // accommodate the texture data. However in order to squarify such that\n      // inner dimensions stay even, we rewrite size to equal the number of\n      // texels. Then in the return statement we rehydrate the squarified\n      // dimensions to channel units.\n\n      const batchDim = getBatchDim(logShape);\n      let rows = 2, cols = 2;\n      if (logShape.length) {\n        [rows, cols] = getRowsCols(logShape);\n      }\n      size = batchDim * (rows / 2) * (cols / 2);\n      return util.sizeToSquarishShape(size).map(d => d * 2) as [number, number];\n    }\n    return util.sizeToSquarishShape(size);\n  }\n}\n\nfunction isEven(n: number): boolean {\n  return n % 2 === 0;\n}\n\n/**\n * This determines whether reshaping a packed texture requires rearranging\n * the data within the texture, assuming 2x2 packing.\n */\nexport function isReshapeFree(shape1: number[], shape2: number[]): boolean {\n  shape1 = shape1.slice(-2);\n  shape2 = shape2.slice(-2);\n\n  if (util.arraysEqual(shape1, shape2)) {\n    return true;\n  }\n\n  if (!shape1.length || !shape2.length) {  // One of the shapes is a scalar.\n    return true;\n  }\n\n  if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 ||\n      shape2[1] === 0) {\n    return true;\n  }\n\n  if (shape1.length !== shape2.length) {  // One of the shapes is a vector.\n    const shape1Cols = shape1.slice(-1)[0];\n    const shape2Cols = shape2.slice(-1)[0];\n    if (shape1Cols === shape2Cols) {\n      return true;\n    }\n\n    if (isEven(shape1Cols) && isEven(shape2Cols) &&\n        (shape1[0] === 1 || shape2[0] === 1)) {\n      return true;\n    }\n  }\n  return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);\n}\n\n// We cache webgl params because the environment gets reset between\n// unit tests and we don't want to constantly query the WebGLContext for\n// MAX_TEXTURE_SIZE.\nlet MAX_TEXTURE_SIZE: number;\nlet MAX_TEXTURES_IN_SHADER: number;\n\nexport function getWebGLMaxTextureSize(webGLVersion: number): number {\n  if (MAX_TEXTURE_SIZE == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  }\n  return MAX_TEXTURE_SIZE;\n}\n\nexport function resetMaxTextureSize() {\n  MAX_TEXTURE_SIZE = null;\n}\nexport function resetMaxTexturesInShader() {\n  MAX_TEXTURES_IN_SHADER = null;\n}\n\nexport function getMaxTexturesInShader(webGLVersion: number): number {\n  if (MAX_TEXTURES_IN_SHADER == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  }\n  // We cap at 16 to avoid spurious runtime \"memory exhausted\" error.\n  return Math.min(16, MAX_TEXTURES_IN_SHADER);\n}\n\nexport function getWebGLDisjointQueryTimerVersion(webGLVersion: number):\n    number {\n  if (webGLVersion === 0) {\n    return 0;\n  }\n\n  let queryTimerVersion: number;\n  const gl = getWebGLContext(webGLVersion);\n\n  if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') &&\n      webGLVersion === 2) {\n    queryTimerVersion = 2;\n  } else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {\n    queryTimerVersion = 1;\n  } else {\n    queryTimerVersion = 0;\n  }\n  return queryTimerVersion;\n}\n\nexport function hasExtension(gl: WebGLRenderingContext, extensionName: string) {\n  const ext = gl.getExtension(extensionName);\n  return ext != null;\n}\n\nexport function isWebGLVersionEnabled(webGLVersion: 1|2) {\n  try {\n    const gl = getWebGLContext(webGLVersion);\n    if (gl != null) {\n      return true;\n    }\n  } catch (e) {\n    return false;\n  }\n  return false;\n}\n\nexport function isCapableOfRenderingToFloatTexture(webGLVersion: number):\n    boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n  } else {\n    if (!hasExtension(gl, 'EXT_color_buffer_float')) {\n      return false;\n    }\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\n/**\n * Check if we can download values from a float/half-float texture.\n *\n * Note that for performance reasons we use binding a texture to a framebuffer\n * as a proxy for ability to download float values later using readPixels. The\n * texture params of this texture will not match those in readPixels exactly\n * but if we are unable to bind some kind of float texture to the frameBuffer\n * then we definitely will not be able to read float values from it.\n */\nexport function isDownloadFloatTextureEnabled(webGLVersion: number): boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n    if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {\n      return false;\n    }\n  } else {\n    if (hasExtension(gl, 'EXT_color_buffer_float')) {\n      return createFloatTextureAndBindToFramebuffer(gl);\n    }\n\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {\n      const textureHalfFloatExtension =\n          gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      return createHalfFloatTextureAndBindToFramebuffer(\n          gl, textureHalfFloatExtension);\n    }\n\n    return false;\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\nfunction createFloatTextureAndBindToFramebuffer(gl: WebGLRenderingContext):\n    boolean {\n  const texConfig = getTextureConfig(gl);\n\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nfunction createHalfFloatTextureAndBindToFramebuffer(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension: any): boolean {\n  const texConfig = getTextureConfig(gl, textureHalfFloatExtension);\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nexport function isWebGLFenceEnabled(webGLVersion: number) {\n  if (webGLVersion !== 2) {\n    return false;\n  }\n  const gl = getWebGLContext(webGLVersion);\n\n  // tslint:disable-next-line:no-any\n  const isEnabled = (gl as any).fenceSync != null;\n  return isEnabled;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as device_util from '../../device_util';\nimport {env} from '../../environment';\n\nimport * as webgl_util from './webgl_util';\n\nconst ENV = env();\n\n/**\n * This file contains WebGL-specific flag registrations.\n */\n\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n  if (webgl_util.isWebGLVersionEnabled(2)) {\n    return 2;\n  } else if (webgl_util.isWebGLVersionEnabled(1)) {\n    return 1;\n  }\n  return 0;\n});\n\nENV.registerFlag(\n    'WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the depthwise conv op. */\n// TODO: https://github.com/tensorflow/tfjs/issues/1679\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => false);\n\n/** Whether we will pack binary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack unary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack array ops. */\nENV.registerFlag(\n    'WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack image ops. */\nENV.registerFlag(\n    'WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURE_SIZE',\n    () => webgl_util.getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURES_IN_SHADER',\n    () => webgl_util.getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n  const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n\n  if (webGLVersion === 0) {\n    return 0;\n  }\n  return webgl_util.getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag(\n    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE',\n    () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&\n        !device_util.isMobile());\n\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag(\n    'WEBGL_RENDER_FLOAT32_CAPABLE',\n    () => webgl_util.isCapableOfRenderingToFloatTexture(\n        ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?\n      false :\n      ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag(\n    'WEBGL_DOWNLOAD_FLOAT_ENABLED',\n    () => webgl_util.isDownloadFloatTextureEnabled(\n        ENV.getNumber('WEBGL_VERSION')));\n\n/** Whether the fence API is available. */\nENV.registerFlag(\n    'WEBGL_FENCE_API_ENABLED',\n    () => webgl_util.isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n  // Use uniform uploads only when 32bit floats are supported. In\n  // 16bit\n  // environments there are problems with comparing a 16bit texture value\n  // with a 32bit uniform value.\n  const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n  return useUniforms ? 4 : 0;\n});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelBackend} from './backends/backend';\nimport {ENGINE, Engine, MemoryInfo, ProfileInfo, ScopeFn, TimingInfo} from './engine';\nimport {env} from './environment';\n\nimport {Platform} from './platforms/platform';\nimport {setDeprecationWarningFn, Tensor} from './tensor';\nimport {TensorContainer} from './tensor_types';\nimport {getTensorsInContainer} from './tensor_util';\n\n/**\n * Enables production mode which disables correctness checks in favor of\n * performance.\n */\n/** @doc {heading: 'Environment'} */\nexport function enableProdMode(): void {\n  env().set('PROD', true);\n}\n\n/**\n * Enables debug mode which will log information about all executed kernels:\n * the elapsed time of the kernel execution, as well as the rank, shape, and\n * size of the output tensor.\n *\n * Debug mode will significantly slow down your application as it will\n * download the result of every operation to the CPU. This should not be used in\n * production. Debug mode does not affect the timing information of the kernel\n * execution as we do not measure download time in the kernel execution time.\n *\n * See also: `tf.profile`, `tf.memory`.\n */\n/** @doc {heading: 'Environment'} */\nexport function enableDebugMode(): void {\n  env().set('DEBUG', true);\n}\n\n/** Globally disables deprecation warnings */\nexport function disableDeprecationWarnings(): void {\n  env().set('DEPRECATION_WARNINGS_ENABLED', false);\n  console.warn(`TensorFlow.js deprecation warnings have been disabled.`);\n}\n\n/** Warn users about deprecated functionality. */\nexport function deprecationWarn(msg: string) {\n  if (env().getBool('DEPRECATION_WARNINGS_ENABLED')) {\n    console.warn(\n        msg + ' You can disable deprecation warnings with ' +\n        'tf.disableDeprecationWarnings().');\n  }\n}\nsetDeprecationWarningFn(deprecationWarn);\n\n/**\n * Dispose all variables kept in backend engine.\n */\n/** @doc {heading: 'Environment'} */\nexport function disposeVariables(): void {\n  ENGINE.disposeVariables();\n}\n\n/**\n * It returns the global engine that keeps track of all tensors and backends.\n */\n/** @doc {heading: 'Environment'} */\nexport function engine(): Engine {\n  return ENGINE;\n}\n\n/**\n * Returns memory info at the current time in the program. The result is an\n * object with the following properties:\n *\n * - `numBytes`: Number of bytes allocated (undisposed) at this time.\n * - `numTensors`: Number of unique tensors allocated.\n * - `numDataBuffers`: Number of unique data buffers allocated\n *   (undisposed) at this time, which is ≤ the number of tensors\n *   (e.g. `a.reshape(newShape)` makes a new Tensor that shares the same\n *   data buffer with `a`).\n * - `unreliable`: True if the memory usage is unreliable. See `reasons` when\n *    `unreliable` is true.\n * - `reasons`: `string[]`, reasons why the memory is unreliable, present if\n *    `unreliable` is true.\n *\n * WebGL Properties:\n * - `numBytesInGPU`: Number of bytes allocated (undisposed) in the GPU only at\n *     this time.\n */\n/** @doc {heading: 'Performance', subheading: 'Memory'} */\nexport function memory(): MemoryInfo {\n  return ENGINE.memory();\n}\n\n/**\n * Executes the provided function `f()` and returns a promise that resolves\n * with information about the function's memory use:\n * - `newBytes`: the number of new bytes allocated\n * - `newTensors`: the number of new tensors created\n * - `peakBytes`: the peak number of bytes allocated\n * - `kernels`: an array of objects for each kernel involved that reports\n * their input and output shapes, number of bytes used, and number of new\n * tensors created.\n *\n * ```js\n * const profile = await tf.profile(() => {\n *   const x = tf.tensor1d([1, 2, 3]);\n *   let x2 = x.square();\n *   x2.dispose();\n *   x2 = x.square();\n *   x2.dispose();\n *   return x;\n * });\n *\n * console.log(`newBytes: ${profile.newBytes}`);\n * console.log(`newTensors: ${profile.newTensors}`);\n * console.log(`byte usage over all kernels: ${profile.kernels.map(k =>\n * k.totalBytesSnapshot)}`);\n * ```\n *\n */\n/** @doc {heading: 'Performance', subheading: 'Profile'} */\nexport function profile(f: () => TensorContainer): Promise<ProfileInfo> {\n  return ENGINE.profile(f);\n}\n\n/**\n * Executes the provided function `fn` and after it is executed, cleans up all\n * intermediate tensors allocated by `fn` except those returned by `fn`.\n * `fn` must not return a Promise (async functions not allowed). The returned\n * result can be a complex object.\n *\n * Using this method helps avoid memory leaks. In general, wrap calls to\n * operations in `tf.tidy` for automatic memory cleanup.\n *\n * NOTE: Variables do *not* get cleaned up when inside a tidy(). If you want to\n * dispose variables, please use `tf.disposeVariables` or call dispose()\n * directly on variables.\n *\n * ```js\n * // y = 2 ^ 2 + 1\n * const y = tf.tidy(() => {\n *   // a, b, and one will be cleaned up when the tidy ends.\n *   const one = tf.scalar(1);\n *   const a = tf.scalar(2);\n *   const b = a.square();\n *\n *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);\n *\n *   // The value returned inside the tidy function will return\n *   // through the tidy, in this case to the variable y.\n *   return b.add(one);\n * });\n *\n * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);\n * y.print();\n * ```\n *\n * @param nameOrFn The name of the closure, or the function to execute.\n *     If a name is provided, the 2nd argument should be the function.\n *     If debug mode is on, the timing and the memory usage of the function\n *     will be tracked and displayed on the console using the provided name.\n * @param fn The function to execute.\n */\n/** @doc {heading: 'Performance', subheading: 'Memory'} */\nexport function tidy<T extends TensorContainer>(\n    nameOrFn: string|ScopeFn<T>, fn?: ScopeFn<T>): T {\n  return ENGINE.tidy(nameOrFn, fn);\n}\n\n/**\n * Disposes any `tf.Tensor`s found within the provided object.\n *\n * @param container an object that may be a `tf.Tensor` or may directly\n *     contain `tf.Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. If\n *     the object is not a `tf.Tensor` or does not contain `Tensors`, nothing\n *     happens. In general it is safe to pass any object here, except that\n *     `Promise`s are not supported.\n */\n/** @doc {heading: 'Performance', subheading: 'Memory'} */\nexport function dispose(container: TensorContainer) {\n  const tensors = getTensorsInContainer(container);\n  tensors.forEach(tensor => tensor.dispose());\n}\n\n/**\n * Keeps a `tf.Tensor` generated inside a `tf.tidy` from being disposed\n * automatically.\n *\n * ```js\n * let b;\n * const y = tf.tidy(() => {\n *   const one = tf.scalar(1);\n *   const a = tf.scalar(2);\n *\n *   // b will not be cleaned up by the tidy. a and one will be cleaned up\n *   // when the tidy ends.\n *   b = tf.keep(a.square());\n *\n *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);\n *\n *   // The value returned inside the tidy function will return\n *   // through the tidy, in this case to the variable y.\n *   return b.add(one);\n * });\n *\n * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);\n * console.log('y:');\n * y.print();\n * console.log('b:');\n * b.print();\n * ```\n *\n * @param result The tensor to keep from being disposed.\n */\n/** @doc {heading: 'Performance', subheading: 'Memory'} */\nexport function keep<T extends Tensor>(result: T): T {\n  return ENGINE.keep(result);\n}\n\n/**\n * Executes `f()` and returns a promise that resolves with timing\n * information.\n *\n * The result is an object with the following properties:\n *\n * - `wallMs`: Wall execution time.\n * - `kernelMs`: Kernel execution time, ignoring data transfer.\n * - On `WebGL` The following additional properties exist:\n *   - `uploadWaitMs`: CPU blocking time on texture uploads.\n *   - `downloadWaitMs`: CPU blocking time on texture downloads (readPixels).\n *\n * ```js\n * const x = tf.randomNormal([20, 20]);\n * const time = await tf.time(() => x.matMul(x));\n *\n * console.log(`kernelMs: ${time.kernelMs}, wallTimeMs: ${time.wallMs}`);\n * ```\n *\n * @param f The function to execute and time.\n */\n/** @doc {heading: 'Performance', subheading: 'Timing'} */\nexport function time(f: () => void): Promise<TimingInfo> {\n  return ENGINE.time(f);\n}\n\n/**\n * Sets the backend (cpu, webgl, wasm, etc) responsible for creating tensors and\n * executing operations on those tensors. Returns a promise that resolves\n * to a boolean if the backend initialization was successful.\n *\n * Note this disposes the current backend, if any, as well as any tensors\n * associated with it. A new backend is initialized, even if it is of the\n * same type as the previous one.\n *\n * @param backendName The name of the backend. Currently supports\n *     `'webgl'|'cpu'` in the browser, `'tensorflow'` under node.js\n *     (requires tfjs-node), and `'wasm'` (requires tfjs-backend-wasm).\n */\n/** @doc {heading: 'Backends'} */\nexport function setBackend(backendName: string): Promise<boolean> {\n  return ENGINE.setBackend(backendName);\n}\n\n/**\n * Returns a promise that resolves when the currently selected backend (or the\n * highest priority one) has initialized. Await this promise when you are using\n * a backend that has async initialization.\n */\n/** @doc {heading: 'Backends'} */\nexport function ready(): Promise<void> {\n  return ENGINE.ready();\n}\n\n/**\n * Returns the current backend name (cpu, webgl, etc). The backend is\n * responsible for creating tensors and executing operations on those tensors.\n */\n/** @doc {heading: 'Backends'} */\nexport function getBackend(): string {\n  return ENGINE.backendName;\n}\n\n/**\n * Removes a backend and the registered factory.\n */\n/** @doc {heading: 'Backends'} */\nexport function removeBackend(name: string): void {\n  ENGINE.removeBackend(name);\n}\n\n/**\n * Finds the backend registered under the provided name. Returns null if the\n * name is not in the registry, or the registration hasn't finished yet.\n */\nexport function findBackend(name: string): KernelBackend {\n  return ENGINE.findBackend(name);\n}\n\n/**\n * Finds the backend factory registered under the provided name. Returns a\n * function that produces a new backend when called. Returns null if the name\n * is not in the registry.\n */\nexport function findBackendFactory(name: string): () =>\n    KernelBackend | Promise<KernelBackend> {\n  return ENGINE.findBackendFactory(name);\n}\n\n/**\n * Registers a global backend. The registration should happen when importing\n * a module file (e.g. when importing `backend_webgl.ts`), and is used for\n * modular builds (e.g. custom tfjs bundle with only webgl support).\n *\n * @param factory The backend factory function. When called, it should\n * return a backend instance, or a promise of an instance.\n * @param priority The priority of the backend (higher = more important).\n *     In case multiple backends are registered, the priority is used to find\n *     the best backend. Defaults to 1.\n * @return False if there is already a registered backend under this name, true\n *     if not.\n */\n/** @doc {heading: 'Backends'} */\nexport function registerBackend(\n    name: string, factory: () => KernelBackend | Promise<KernelBackend>,\n    priority = 1): boolean {\n  return ENGINE.registerBackend(name, factory, priority);\n}\n\n/**\n * Gets the current backend. If no backends have been initialized, this will\n * attempt to initialize the best backend. Will throw an error if the highest\n * priority backend has async initialization, in which case, you should call\n * 'await tf.ready()' before running other code.\n */\n/** @doc {heading: 'Backends'} */\nexport function backend(): KernelBackend {\n  return ENGINE.backend;\n}\n\n/**\n * Sets the global platform.\n *\n * @param platformName The name of this platform.\n * @param platform A platform implementation.\n */\nexport function setPlatform(platformName: string, platform: Platform) {\n  env().setPlatform(platformName, platform);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from './environment';\n\nexport function warn(...msg: Array<{}>): void {\n  if (!env().getBool('IS_TEST')) {\n    console.warn(...msg);\n  }\n}\n\nexport function log(...msg: Array<{}>): void {\n  if (!env().getBool('IS_TEST')) {\n    console.log(...msg);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from './engine';\nimport {env} from './environment';\nimport {Tensor} from './tensor';\nimport {DataType, TensorLike} from './types';\nimport {assert, flatten, inferDtype, isTypedArray, toTypedArray} from './util';\n\nexport function inferShape(val: TensorLike, dtype?: DataType): number[] {\n  let firstElem: typeof val = val;\n\n  if (isTypedArray(val)) {\n    return dtype === 'string' ? [] : [val.length];\n  }\n  if (!Array.isArray(val)) {\n    return [];  // Scalar.\n  }\n  const shape: number[] = [];\n\n  while (Array.isArray(firstElem) ||\n         isTypedArray(firstElem) && dtype !== 'string') {\n    shape.push(firstElem.length);\n    firstElem = firstElem[0];\n  }\n  if (Array.isArray(val) &&\n      env().getBool('TENSORLIKE_CHECK_SHAPE_CONSISTENCY')) {\n    deepAssertShapeConsistency(val, shape, []);\n  }\n\n  return shape;\n}\n\nfunction deepAssertShapeConsistency(\n    val: TensorLike, shape: number[], indices: number[]) {\n  indices = indices || [];\n  if (!(Array.isArray(val)) && !isTypedArray(val)) {\n    assert(\n        shape.length === 0,\n        () => `Element arr[${indices.join('][')}] is a primitive, ` +\n            `but should be an array/TypedArray of ${shape[0]} elements`);\n    return;\n  }\n  assert(\n      shape.length > 0,\n      () => `Element arr[${indices.join('][')}] should be a primitive, ` +\n          `but is an array of ${val.length} elements`);\n  assert(\n      val.length === shape[0],\n      () => `Element arr[${indices.join('][')}] should have ${shape[0]} ` +\n          `elements, but has ${val.length} elements`);\n  const subShape = shape.slice(1);\n  for (let i = 0; i < val.length; ++i) {\n    deepAssertShapeConsistency(val[i], subShape, indices.concat(i));\n  }\n}\n\nfunction assertDtype(\n    expectedDtype: DataType|'numeric', actualDType: DataType, argName: string,\n    functionName: string) {\n  if (expectedDtype == null) {\n    return;\n  }\n  if (expectedDtype !== 'numeric' && expectedDtype !== actualDType ||\n      expectedDtype === 'numeric' && actualDType === 'string') {\n    throw new Error(\n        `Argument '${argName}' passed to '${functionName}' must ` +\n        `be ${expectedDtype} tensor, but got ${actualDType} tensor`);\n  }\n}\n\nexport function convertToTensor<T extends Tensor>(\n    x: T|TensorLike, argName: string, functionName: string,\n    parseAsDtype: DataType|'numeric' = 'numeric'): T {\n  if (x instanceof Tensor) {\n    assertDtype(parseAsDtype, x.dtype, argName, functionName);\n    return x;\n  }\n  let inferredDtype = inferDtype(x);\n  // If the user expects a bool/int/float, use that info to update the\n  // inferredDtype when it is not a string.\n  if (inferredDtype !== 'string' &&\n      ['bool', 'int32', 'float32'].indexOf(parseAsDtype) >= 0) {\n    inferredDtype = parseAsDtype as DataType;\n  }\n  assertDtype(parseAsDtype, inferredDtype, argName, functionName);\n\n  if ((x == null) ||\n      (!isTypedArray(x) && !Array.isArray(x) && typeof x !== 'number' &&\n       typeof x !== 'boolean' && typeof x !== 'string')) {\n    const type = x == null ? 'null' : (x as {}).constructor.name;\n    throw new Error(\n        `Argument '${argName}' passed to '${functionName}' must be a ` +\n        `Tensor or TensorLike, but got '${type}'`);\n  }\n  const inferredShape = inferShape(x, inferredDtype);\n  if (!isTypedArray(x) && !Array.isArray(x)) {\n    x = [x] as number[];\n  }\n  const skipTypedArray = true;\n  const values = inferredDtype !== 'string' ?\n      toTypedArray(x, inferredDtype as DataType, env().getBool('DEBUG')) :\n      flatten(x as string[], [], skipTypedArray) as string[];\n  return ENGINE.makeTensor(values, inferredShape, inferredDtype) as T;\n}\n\nexport function convertToTensorArray<T extends Tensor>(\n    arg: Array<T|TensorLike>, argName: string, functionName: string,\n    parseAsDtype: DataType|'numeric' = 'numeric'): T[] {\n  if (!Array.isArray(arg)) {\n    throw new Error(\n        `Argument ${argName} passed to ${functionName} must be a ` +\n        '`Tensor[]` or `TensorLike[]`');\n  }\n  const tensors = arg as T[];\n  return tensors.map(\n      (t, i) => convertToTensor(t, `${argName}[${i}]`, functionName),\n      parseAsDtype);\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as util from '../util';\n\n/**\n * Returns true if the axis specifies the inner most dimensions of the\n * array.\n */\nexport function axesAreInnerMostDims(axes: number[], rank: number): boolean {\n  for (let i = 0; i < axes.length; ++i) {\n    if (axes[axes.length - i - 1] !== rank - 1 - i) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function combineLocations(\n    outputLoc: number[], reduceLoc: number[], axes: number[]): number[] {\n  const rank = outputLoc.length + reduceLoc.length;\n  const loc = [];\n  let outIdx = 0;\n  let reduceIdx = 0;\n    for (let dim = 0; dim < rank; dim++) {\n    if (axes.indexOf(dim) === -1) {\n      loc.push(outputLoc[outIdx++]);\n    } else {\n      loc.push(reduceLoc[reduceIdx++]);\n    }\n  }\n  return loc;\n}\n\nexport function computeOutAndReduceShapes(\n    aShape: number[], axes: number[]): [number[], number[]] {\n  const outShape = [];\n  const rank = aShape.length;\n  for (let dim = 0; dim < rank; dim++) {\n    if (axes.indexOf(dim) === -1) {\n      outShape.push(aShape[dim]);\n    }\n  }\n  const reduceShape = axes.map(dim => aShape[dim]);\n  return [outShape, reduceShape];\n}\n\nexport function expandShapeToKeepDim(\n    shape: number[], axes: number[]): number[] {\n  const reduceSubShape = axes.map(x => 1);\n  return combineLocations(shape, reduceSubShape, axes);\n}\n\nexport function assertAxesAreInnerMostDims(\n    msg: string, axes: number[], rank: number): void {\n  util.assert(\n      axesAreInnerMostDims(axes, rank),\n      () => `${msg} supports only inner-most axes for now. ` +\n          `Got axes ${axes} and rank-${rank} input.`);\n}\n\n/**\n * Returns the axes permutation to be used with `tf.transpose`, if such\n * permutation is necessary. Otherwise it returns null. This method is used by\n * operations that operate only on inner-most axes.\n */\nexport function getAxesPermutation(axes: number[], rank: number): number[]|\n    null {\n  if (axesAreInnerMostDims(axes, rank)) {\n    return null;\n  }\n  const result: number[] = [];\n  for (let i = 0; i < rank; ++i) {\n    if (axes.indexOf(i) === -1) {\n      result.push(i);\n    }\n  }\n  axes.forEach(axis => result.push(axis));\n  return result;\n}\n\n/** Returns the axes permutation that undoes the original permutation. */\nexport function getUndoAxesPermutation(axes: number[]): number[] {\n  return axes.map((axis, i) => [i, axis])\n      .sort((a, b) => a[1] - b[1])\n      .map(x => x[0]);\n}\n\nexport function getInnerMostAxes(numAxes: number, rank: number): number[] {\n  const res: number[] = [];\n  for (let i = rank - numAxes; i < rank; ++i) {\n    res.push(i);\n  }\n  return res;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as util from '../util';\n\nexport function assertParamsConsistent(shapes: number[][], axis: number) {\n  const rank = shapes[0].length;\n  shapes.forEach((shape, i) => {\n    util.assert(\n        shape.length === rank,\n        () =>\n            `Error in concat${rank}D: rank of tensors[${i}] must be the same ` +\n            `as the rank of the rest (${rank})`);\n  });\n\n  util.assert(\n      axis >= 0 && axis < rank,\n      () => `Error in concat${rank}D: axis must be between 0 and ${rank - 1}.`);\n\n  const firstShape = shapes[0];\n  shapes.forEach((shape, i) => {\n    for (let r = 0; r < rank; r++) {\n      util.assert(\n          (r === axis) || (shape[r] === firstShape[r]),\n          () => `Error in concat${rank}D: Shape of tensors[${i}] (${shape}) ` +\n              `does not match the shape of the rest (${firstShape}) ` +\n              `along the non-concatenated axis ${i}.`);\n    }\n  });\n}\n\nexport function computeOutShape(shapes: number[][], axis: number): number[] {\n  const outputShape = shapes[0].slice();\n  for (let i = 1; i < shapes.length; i++) {\n    outputShape[axis] += shapes[i][axis];\n  }\n  return outputShape;\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\n\n/**\n * Used for wrapping functions that perform math operations on\n * Tensors. The function will be wrapped in a named scope that cleans all\n * memory usage after the function is done.\n */\nexport function op<T extends Function>(f: {[name: string]: T}): T {\n  const keys = Object.keys(f);\n  if (keys.length !== 1) {\n    throw new Error(\n        `Please provide an object with a single key ` +\n        `(operation name) mapping to a function. Got an object with ` +\n        `${keys.length} keys.`);\n  }\n\n  let opName = keys[0];\n  const fn = f[opName];\n\n  // Strip the underscore from the end of the function name.\n  if (opName.endsWith('_')) {\n    opName = opName.substring(0, opName.length - 1);\n  }\n\n  // tslint:disable-next-line:no-any\n  const f2 = (...args: any[]) => {\n    ENGINE.startScope(opName);\n    try {\n      const result = fn(...args);\n      if (result instanceof Promise) {\n        console.error('Cannot return a Promise inside of tidy.');\n      }\n      ENGINE.endScope(result);\n      return result;\n    } catch (ex) {\n      ENGINE.endScope(null);\n      throw ex;\n    }\n  };\n  Object.defineProperty(f2, 'name', {value: opName, configurable: true});\n\n  // tslint:disable-next-line:no-any\n  return f2 as any as T;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport {op} from './operation';\n\n/**\n * Converts two real numbers to a complex number.\n *\n * Given a tensor `real` representing the real part of a complex number, and a\n * tensor `imag` representing the imaginary part of a complex number, this\n * operation returns complex numbers elementwise of the form [r0, i0, r1, i1],\n * where r represents the real part and i represents the imag part.\n *\n * The input tensors real and imag must have the same shape.\n *\n * ```js\n * const real = tf.tensor1d([2.25, 3.25]);\n * const imag = tf.tensor1d([4.75, 5.75]);\n * const complex = tf.complex(real, imag);\n *\n * complex.print();\n * ```\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction complex_<T extends Tensor>(real: T|TensorLike, imag: T|TensorLike): T {\n  const $real = convertToTensor(real, 'real', 'complex');\n  const $imag = convertToTensor(imag, 'imag', 'complex');\n  util.assertShapesMatch(\n      $real.shape, $imag.shape,\n      `real and imag shapes, ${$real.shape} and ${$imag.shape}, ` +\n          `must match in call to tf.complex().`);\n\n  return ENGINE.runKernelFunc(\n      backend => backend.complex($real, $imag), {$real, $imag});\n}\n\n/**\n * Returns the real part of a complex (or real) tensor.\n *\n * Given a tensor input, this operation returns a tensor of type float that is\n * the real part of each element in input considered as a complex number.\n *\n * If the input is real, it simply makes a clone.\n *\n * ```js\n * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);\n * tf.real(x).print();\n * ```\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction real_<T extends Tensor>(input: T|TensorLike): T {\n  const $input = convertToTensor(input, 'input', 'real');\n\n  return ENGINE.runKernelFunc(backend => backend.real($input), {$input});\n}\n\n/**\n * Returns the imaginary part of a complex (or real) tensor.\n *\n * Given a tensor input, this operation returns a tensor of type float that is\n * the imaginary part of each element in input considered as a complex number.\n * If input is real, a tensor of all zeros is returned.\n *\n * ```js\n * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);\n * tf.imag(x).print();\n * ```\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction imag_<T extends Tensor>(input: T|TensorLike): T {\n  const $input = convertToTensor(input, 'input', 'imag');\n\n  return ENGINE.runKernelFunc(backend => backend.imag($input), {$input});\n}\n\nexport const complex = op({complex_});\nexport const real = op({real_});\nexport const imag = op({imag_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {env} from '../environment';\n\nimport {Scalar, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, Tensor5D, Tensor6D, Variable} from '../tensor';\nimport {convertToTensor, inferShape} from '../tensor_util_env';\nimport {TensorLike, TensorLike1D, TensorLike2D, TensorLike3D, TensorLike4D, TensorLike5D, TensorLike6D, TypedArray} from '../types';\nimport {DataType, Rank, ShapeMap} from '../types';\nimport {assert, assertNonNegativeIntegerDimensions, assertNonNull, flatten, inferDtype, isTypedArray, makeOnesTypedArray, makeZerosTypedArray, sizeFromShape, toTypedArray} from '../util';\nimport {complex, imag, real} from './complex_ops';\nimport {op} from './operation';\n\n/**\n * Creates a `tf.Tensor` with the provided values, shape and dtype.\n *\n * ```js\n * // Pass an array of values to create a vector.\n * tf.tensor([1, 2, 3, 4]).print();\n * ```\n *\n * ```js\n * // Pass a nested array of values to make a matrix or a higher\n * // dimensional tensor.\n * tf.tensor([[1, 2], [3, 4]]).print();\n * ```\n *\n * ```js\n * // Pass a flat array and specify a shape yourself.\n * tf.tensor([1, 2, 3, 4], [2, 2]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`. If the values are strings,\n *     they will be encoded as utf-8 and kept as `Uint8Array[]`.\n * @param shape The shape of the tensor. Optional. If not provided,\n *   it is inferred from `values`.\n * @param dtype The data type.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction tensor<R extends Rank>(\n    values: TensorLike, shape?: ShapeMap[R], dtype?: DataType): Tensor<R> {\n  const inferredShape = inferShape(values, dtype);\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor<R>;\n}\n\n/** This is shared code across all tensor creation methods. */\nfunction makeTensor(\n    values: TensorLike, shape: number[], inferredShape: number[],\n    dtype?: DataType): Tensor {\n  if (dtype == null) {\n    dtype = inferDtype(values);\n  }\n  if (dtype === 'complex64') {\n    throw new Error(\n        `Cannot construct a complex64 tensor directly. ` +\n        `Please use tf.complex(real, imag).`);\n  }\n  if (!isTypedArray(values) && !Array.isArray(values) &&\n      typeof values !== 'number' && typeof values !== 'boolean' &&\n      typeof values !== 'string') {\n    throw new Error(\n        'values passed to tensor(values) must be a number/boolean/string or ' +\n        'an array of numbers/booleans/strings, or a TypedArray');\n  }\n  if (shape != null) {\n    assertNonNegativeIntegerDimensions(shape);\n\n    const providedSize = sizeFromShape(shape);\n    const inferredSize = sizeFromShape(inferredShape);\n    assert(\n        providedSize === inferredSize,\n        () =>\n            `Based on the provided shape, [${shape}], the tensor should have ` +\n            `${providedSize} values but has ${inferredSize}`);\n\n    for (let i = 0; i < inferredShape.length; ++i) {\n      const inferred = inferredShape[i];\n      const flatDimsDontMatch = i === inferredShape.length - 1 ?\n          inferred !== sizeFromShape(shape.slice(i)) :\n          true;\n      assert(\n          inferredShape[i] === shape[i] || !flatDimsDontMatch,\n          () => `Error creating a new Tensor. Inferred shape ` +\n              `(${inferredShape}) does not match the provided ` +\n              `shape (${shape}). `);\n    }\n  }\n\n  if (!isTypedArray(values) && !Array.isArray(values)) {\n    values = [values] as number[];\n  }\n\n  shape = shape || inferredShape;\n  values = dtype !== 'string' ?\n      toTypedArray(values, dtype, env().getBool('DEBUG')) :\n      flatten(values as string[], [], true) as string[];\n  return ENGINE.makeTensor(values as TypedArray, shape, dtype);\n}\n\n/**\n * Creates rank-0 `tf.Tensor` (scalar) with the provided value and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.scalar` as it makes the code more readable.\n *\n * ```js\n * tf.scalar(3.14).print();\n * ```\n *\n * @param value The value of the scalar.\n * @param dtype The data type.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction scalar(\n    value: number|boolean|string|Uint8Array, dtype?: DataType): Scalar {\n  if (((isTypedArray(value) && dtype !== 'string') || Array.isArray(value)) &&\n      dtype !== 'complex64') {\n    throw new Error(\n        'Error creating a new Scalar: value must be a primitive ' +\n        '(number|boolean|string)');\n  }\n  if (dtype === 'string' && isTypedArray(value) &&\n      !(value instanceof Uint8Array)) {\n    throw new Error(\n        'When making a scalar from encoded string, ' +\n        'the value must be `Uint8Array`.');\n  }\n  const shape: number[] = [];\n  const inferredShape: number[] = [];\n  return makeTensor(value, shape, inferredShape, dtype) as Scalar;\n}\n\n/**\n * Creates rank-1 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor1d` as it makes the code more readable.\n *\n * ```js\n * tf.tensor1d([1, 2, 3]).print();\n * ```\n *\n * @param values The values of the tensor. Can be array of numbers,\n *     or a `TypedArray`.\n * @param dtype The data type.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction tensor1d(values: TensorLike1D, dtype?: DataType): Tensor1D {\n  assertNonNull(values);\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 1) {\n    throw new Error('tensor1d() requires values to be a flat/TypedArray');\n  }\n  const shape: number[] = null;\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor1D;\n}\n\n/**\n * Creates rank-2 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor2d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor2d([[1, 2], [3, 4]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor2d([1, 2, 3, 4], [2, 2]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. If not provided, it is inferred from\n *     `values`.\n * @param dtype The data type.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction tensor2d(\n    values: TensorLike2D, shape?: [number, number],\n    dtype?: DataType): Tensor2D {\n  assertNonNull(values);\n  if (shape != null && shape.length !== 2) {\n    throw new Error('tensor2d() requires shape to have two numbers');\n  }\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 2 && inferredShape.length !== 1) {\n    throw new Error(\n        'tensor2d() requires values to be number[][] or flat/TypedArray');\n  }\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error(\n        'tensor2d() requires shape to be provided when `values` ' +\n        'are a flat/TypedArray');\n  }\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor2D;\n}\n\n/**\n * Creates rank-3 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor3d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor3d([[[1], [2]], [[3], [4]]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor3d([1, 2, 3, 4], [2, 2, 1]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. If not provided,  it is inferred from\n *     `values`.\n * @param dtype The data type.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction tensor3d(\n    values: TensorLike3D, shape?: [number, number, number],\n    dtype?: DataType): Tensor3D {\n  assertNonNull(values);\n  if (shape != null && shape.length !== 3) {\n    throw new Error('tensor3d() requires shape to have three numbers');\n  }\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 3 && inferredShape.length !== 1) {\n    throw new Error(\n        'tensor3d() requires values to be number[][][] or flat/TypedArray');\n  }\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error(\n        'tensor3d() requires shape to be provided when `values` ' +\n        'are a flat array');\n  }\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor3D;\n}\n\n/**\n * Creates rank-4 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor4d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor4d([[[[1], [2]], [[3], [4]]]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. Optional. If not provided,\n *   it is inferred from `values`.\n * @param dtype The data type.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction tensor4d(\n    values: TensorLike4D, shape?: [number, number, number, number],\n    dtype?: DataType): Tensor4D {\n  assertNonNull(values);\n  if (shape != null && shape.length !== 4) {\n    throw new Error('tensor4d() requires shape to have four numbers');\n  }\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 4 && inferredShape.length !== 1) {\n    throw new Error(\n        'tensor4d() requires values to be number[][][][] or flat/TypedArray');\n  }\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error(\n        'tensor4d() requires shape to be provided when `values` ' +\n        'are a flat array');\n  }\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor4D;\n}\n\n/**\n * Creates rank-5 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor5d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor5d([[[[[1], [2]], [[3], [4]]]]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. Optional. If not provided,\n *   it is inferred from `values`.\n * @param dtype The data type.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction tensor5d(\n    values: TensorLike5D, shape?: [number, number, number, number, number],\n    dtype?: DataType): Tensor5D {\n  assertNonNull(values);\n  if (shape != null && shape.length !== 5) {\n    throw new Error('tensor5d() requires shape to have five numbers');\n  }\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 5 && inferredShape.length !== 1) {\n    throw new Error(\n        'tensor5d() requires values to be ' +\n        'number[][][][][] or flat/TypedArray');\n  }\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error(\n        'tensor5d() requires shape to be provided when `values` ' +\n        'are a flat array');\n  }\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor5D;\n}\n\n/**\n * Creates rank-6 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor6d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor6d([[[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor6d([1, 2, 3, 4, 5, 6, 7, 8], [1, 1, 2, 2, 2, 1]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. Optional. If not provided,\n *   it is inferred from `values`.\n * @param dtype The data type.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction tensor6d(\n    values: TensorLike6D,\n    shape?: [number, number, number, number, number, number],\n    dtype?: DataType): Tensor6D {\n  assertNonNull(values);\n  if (shape != null && shape.length !== 6) {\n    throw new Error('tensor6d() requires shape to have six numbers');\n  }\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 6 && inferredShape.length !== 1) {\n    throw new Error(\n        'tensor6d() requires values to be number[][][][][][] or ' +\n        'flat/TypedArray');\n  }\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error(\n        'tensor6d() requires shape to be provided when `values` ' +\n        'are a flat array');\n  }\n  shape = shape ||\n      inferredShape as [number, number, number, number, number, number];\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor6D;\n}\n\n/**\n * Creates a new variable with the provided initial value.\n * ```js\n * const x = tf.variable(tf.tensor([1, 2, 3]));\n * x.assign(tf.tensor([4, 5, 6]));\n *\n * x.print();\n * ```\n *\n * @param initialValue Initial value for the tensor.\n * @param trainable If true, optimizers are allowed to update it.\n * @param name Name of the variable. Defaults to a unique id.\n * @param dtype If set, initialValue will be converted to the given type.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction variable<R extends Rank>(\n    initialValue: Tensor<R>, trainable = true, name?: string,\n    dtype?: DataType): Variable<R> {\n  return ENGINE.makeVariable(initialValue, trainable, name, dtype) as\n      Variable<R>;\n}\n\n/**\n * Creates a `tf.Tensor` with all elements set to 1.\n *\n * ```js\n * tf.ones([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The type of an element in the resulting tensor. Defaults to\n *     'float'.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction ones<R extends Rank>(\n    shape: ShapeMap[R], dtype: DataType = 'float32'): Tensor<R> {\n  if (dtype === 'complex64') {\n    const real = ones(shape, 'float32');\n    const imag = zeros(shape, 'float32');\n    return complex(real, imag);\n  }\n  const values = makeOnesTypedArray(sizeFromShape(shape), dtype);\n  return ENGINE.makeTensor(values, shape, dtype) as Tensor<R>;\n}\n\n/**\n * Creates a `tf.Tensor` with all elements set to 0.\n *\n * ```js\n * tf.zeros([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The type of an element in the resulting tensor. Can\n *     be 'float32', 'int32' or 'bool'. Defaults to 'float'.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction zeros<R extends Rank>(\n    shape: ShapeMap[R], dtype: DataType = 'float32'): Tensor<R> {\n  if (dtype === 'complex64') {\n    const real = zeros(shape, 'float32');\n    const imag = zeros(shape, 'float32');\n    return complex(real, imag);\n  }\n  const values = makeZerosTypedArray(sizeFromShape(shape), dtype);\n  return ENGINE.makeTensor(values, shape, dtype) as Tensor<R>;\n}\n\n/**\n * Creates a `tf.Tensor` filled with a scalar value.\n *\n * ```js\n * tf.fill([2, 2], 4).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param value The scalar value to fill the tensor with.\n * @param dtype The type of an element in the resulting tensor. Defaults to\n * 'float'.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction fill<R extends Rank>(\n    shape: ShapeMap[R], value: number|string, dtype?: DataType): Tensor<R> {\n  return ENGINE.runKernelFunc(backend => backend.fill(shape, value, dtype), {});\n}\n\n/**\n * Creates a `tf.Tensor` with all elements set to 1 with the same shape as the\n * given tensor.\n *\n * ```js\n * const x = tf.tensor([1, 2]);\n * tf.onesLike(x).print();\n * ```\n * @param x A tensor.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction onesLike_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'onesLike');\n  if ($x.dtype === 'complex64') {\n    const r = onesLike(real($x));\n    const i = zerosLike(imag($x));\n    return complex(r, i);\n  }\n  const der = (dy: T, saved: Tensor[]) => ({$x: () => zerosLike(dy)});\n  return ENGINE.runKernelFunc(backend => backend.onesLike($x), {$x}, der) as T;\n}\n\n/**\n * Creates a `tf.Tensor` with all elements set to 0 with the same shape as the\n * given tensor.\n *\n * ```js\n * const x = tf.tensor([1, 2]);\n * tf.zerosLike(x).print();\n * ```\n *\n * @param x The tensor of required shape.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction zerosLike_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'zerosLike');\n  const der = (dy: T, saved: Tensor[]) => ({$x: () => zerosLike(dy)});\n  return ENGINE.runKernelFunc(backend => backend.zerosLike($x), {$x}, der) as T;\n}\n\n/**\n * Return an evenly spaced sequence of numbers over the given interval.\n *\n * ```js\n * tf.linspace(0, 9, 10).print();\n * ```\n * @param start The start value of the sequence.\n * @param stop The end value of the sequence.\n * @param num The number of values to generate.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction linspace(start: number, stop: number, num: number): Tensor1D {\n  if (num <= 0) {\n    throw new Error('The number of values should be positive.');\n  }\n  return ENGINE.runKernelFunc(\n      backend => backend.linspace(start, stop, num), {});\n}\n\n/**\n * Creates a new `tf.Tensor1D` filled with the numbers in the range provided.\n *\n * The tensor is a is half-open interval meaning it includes start, but\n * excludes stop. Decrementing ranges and negative step values are also\n * supported.\n *\n * ```js\n * tf.range(0, 9, 2).print();\n * ```\n *\n * @param start An integer start value\n * @param stop An integer stop value\n * @param step An integer increment (will default to 1 or -1)\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction range(\n    start: number, stop: number, step = 1,\n    dtype: 'float32'|'int32' = 'float32'): Tensor1D {\n  if (step === 0) {\n    throw new Error('Cannot have a step of zero');\n  }\n\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return zeros([0], dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return tensor1d(values, dtype);\n}\n\nexport {\n  fill,\n  linspace,\n  ones,\n  range,\n  scalar,\n  tensor,\n  tensor1d,\n  tensor2d,\n  tensor3d,\n  tensor4d,\n  tensor5d,\n  tensor6d,\n  variable,\n  zeros\n};\n\nexport const onesLike = op({onesLike_});\nexport const zerosLike = op({zerosLike_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D} from '../tensor';\nimport {convertToTensor, convertToTensorArray} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {assert, sizeFromShape} from '../util';\nimport {parseAxisParam} from '../util';\nimport {assertParamsConsistent, computeOutShape} from './concat_util';\nimport {op} from './operation';\nimport {tensor} from './tensor_ops';\n\n/**\n * Concatenates a list of`tf.Tensor1D`s along an axis. See `concat` for details.\n *\n * For example, if:\n * A: shape(3) = |r1, g1, b1|\n * B: shape(2) = |r2, g2|\n * C = tf.concat1d([A, B]) == |r1, g1, b1, r2, g2|\n *\n * @param tensors A list of`tf.Tensor`s to concatenate.\n * @return The concatenated array.\n */\nfunction concat1d_(tensors: Array<Tensor1D|TensorLike>): Tensor1D {\n  return concat(tensors, 0 /* axis */);\n}\n\n/**\n * Concatenates a list of`tf.Tensor2D`s along an axis. See `concat` for details.\n *\n * For example, if:\n * A: shape(2, 3) = | r1, g1, b1 |\n *                  | r2, g2, b2 |\n *\n * B: shape(2, 3) = | r3, g3, b3 |\n *                  | r4, g4, b4 |\n *\n * C = tf.concat2d([A, B], axis)\n *\n * if axis = 0:\n * C: shape(4, 3) = | r1, g1, b1 |\n *                  | r2, g2, b2 |\n *                  | r3, g3, b3 |\n *                  | r4, g4, b4 |\n *\n * if axis = 1:\n * C = shape(2, 6) = | r1, g1, b1, r3, g3, b3 |\n *                   | r2, g2, b2, r4, g4, b4 |\n *\n *\n * @param tensors A list of `tf.Tensor`s to concatenate.\n * @param axis The axis to concatenate along.\n * @return The concatenated array.\n */\nfunction concat2d_(\n    tensors: Array<Tensor2D|TensorLike>, axis: number): Tensor2D {\n  return concat(tensors, axis);\n}\n\n/**\n * Concatenates a list of `tf.Tensor3D`s along an axis.\n * See `concat` for details.\n *\n * For example, if:\n * A: shape(2, 1, 3) = | r1, g1, b1 |\n *                     | r2, g2, b2 |\n *\n * B: shape(2, 1, 3) = | r3, g3, b3 |\n *                     | r4, g4, b4 |\n *\n * C = tf.concat3d([A, B], axis)\n *\n * if axis = 0:\n * C: shape(4, 1, 3) = | r1, g1, b1 |\n *                     | r2, g2, b2 |\n *                     | r3, g3, b3 |\n *                     | r4, g4, b4 |\n *\n * if axis = 1:\n * C: shape(2, 2, 3) = | r1, g1, b1, r3, g3, b3 |\n *                     | r2, g2, b2, r4, g4, b4 |\n *\n * if axis = 2:\n * C = shape(2, 1, 6) = | r1, g1, b1, r3, g3, b3 |\n *                      | r2, g2, b2, r4, g4, b4 |\n *\n * @param tensors A list of`tf.Tensor`s to concatenate.\n * @param axis The axis to concate along.\n * @return The concatenated array.\n */\nfunction concat3d_(\n    tensors: Array<Tensor3D|TensorLike>, axis: number): Tensor3D {\n  return concat(tensors, axis);\n}\n\n/**\n * Concatenates a list of `tf.Tensor4D`s along an axis.\n * See `concat` for details.\n *\n * @param tensors A list of `tf.Tensor`s to concatenate.\n * @param axis The axis to concate along.\n * @return The concatenated array.\n */\nfunction concat4d_(\n    tensors: Array<Tensor4D|TensorLike>, axis: number): Tensor4D {\n  return concat(tensors, axis);\n}\n\n/**\n * Concatenates a list of `tf.Tensor`s along a given axis.\n *\n * The tensors ranks and types must match, and their sizes must match in all\n * dimensions except `axis`.\n *\n * Also available are stricter rank-specific methods that assert that\n * `tensors` are of the given rank:\n *   - `tf.concat1d`\n *   - `tf.concat2d`\n *   - `tf.concat3d`\n *   - `tf.concat4d`\n *\n * Except `tf.concat1d` (which does not have axis param), all methods have\n * same signature as this method.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * a.concat(b).print();  // or a.concat(b)\n * ```\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n * tf.concat([a, b, c]).print();\n * ```\n *\n * ```js\n * const a = tf.tensor2d([[1, 2], [10, 20]]);\n * const b = tf.tensor2d([[3, 4], [30, 40]]);\n * const axis = 1;\n * tf.concat([a, b], axis).print();\n * ```\n * @param tensors A list of tensors to concatenate.\n * @param axis The axis to concate along. Defaults to 0 (the first dim).\n */\n/** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */\nfunction concat_<T extends Tensor>(tensors: Array<T|TensorLike>, axis = 0): T {\n  assert(tensors.length >= 1, () => 'Pass at least one tensor to concat');\n  let $tensors = convertToTensorArray(tensors, 'tensors', 'concat');\n  if ($tensors[0].dtype === 'complex64') {\n    $tensors.forEach(tensor => {\n      if (tensor.dtype !== 'complex64') {\n        throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${tensor.dtype}. `);\n      }\n    });\n  }\n\n  axis = parseAxisParam(axis, $tensors[0].shape)[0];\n  const outShape = computeOutShape($tensors.map(t => t.shape), axis);\n  if (sizeFromShape(outShape) === 0) {\n    return tensor([], outShape) as T;\n  }\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  $tensors = $tensors.filter(t => t.size > 0);\n  if ($tensors.length === 1) {\n    return $tensors[0];\n  }\n\n  const shapes = $tensors.map(t => t.shape);\n  assertParamsConsistent(shapes, axis);\n  const der = (dy: T) => {\n    const sizeSplits = shapes.map(s => s[axis]);\n    const derTensors = split(dy, sizeSplits, axis);\n    return derTensors.map(t => () => t) as {};\n  };\n  const inputs = $tensors as {};\n  const attr = {axis};\n  return ENGINE.runKernelFunc(\n      backend => backend.concat($tensors, axis) as T, inputs, der, 'Concat',\n      attr);\n}\n\n/**\n * Splits a `tf.Tensor` into sub tensors.\n *\n * If `numOrSizeSplits` is a number, splits `x` along dimension `axis`\n * into `numOrSizeSplits` smaller tensors.\n * Requires that `numOrSizeSplits` evenly divides `x.shape[axis]`.\n *\n * If `numOrSizeSplits` is a number array, splits `x` into\n * `numOrSizeSplits.length` pieces. The shape of the `i`-th piece has the\n * same size as `x` except along dimension `axis` where the size is\n * `numOrSizeSplits[i]`.\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [2, 4]);\n * const [a, b] = tf.split(x, 2, 1);\n * a.print();\n * b.print();\n *\n * const [c, d, e] = tf.split(x, [1, 2, 1], 1);\n * c.print();\n * d.print();\n * e.print();\n * ```\n *\n * @param x The input tensor to split.\n * @param numOrSizeSplits Either an integer indicating the number of\n * splits along the axis or an array of integers containing the sizes of\n * each output tensor along the axis. If a number then it must evenly divide\n * `x.shape[axis]`; otherwise the sum of sizes must match `x.shape[axis]`.\n * @param axis The dimension along which to split. Defaults to 0 (the first\n * dim).\n */\n/** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */\nfunction split_<T extends Tensor>(\n    x: T|TensorLike, numOrSizeSplits: number[]|number, axis = 0): T[] {\n  const $x = convertToTensor(x, 'x', 'split');\n\n  axis = parseAxisParam(axis, $x.shape)[0];\n  let splitSizes: number[];\n  if (typeof (numOrSizeSplits) === 'number') {\n    assert(\n        $x.shape[axis] % numOrSizeSplits === 0,\n        () => 'Number of splits must evenly divide the axis.');\n    splitSizes =\n        new Array(numOrSizeSplits).fill($x.shape[axis] / numOrSizeSplits);\n  } else {\n    assert(\n        $x.shape[axis] === numOrSizeSplits.reduce((a, b) => a + b),\n        () => 'The sum of sizes must match the size of the axis dimension.');\n    splitSizes = numOrSizeSplits;\n  }\n  const der = (dy: T[]) => ({$x: () => concat(dy, axis)});\n  return ENGINE.runKernelFunc(\n      backend => backend.split($x, splitSizes, axis), {$x}, der);\n}\n\nexport const concat = op({concat_});\nexport const concat1d = op({concat1d_});\nexport const concat2d = op({concat2d_});\nexport const concat3d = op({concat3d_});\nexport const concat4d = op({concat4d_});\nexport const split = op({split_});\n","// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n\n// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// \n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\n\n(function(global, module, define) {\n\nfunction Alea(seed) {\n  var me = this, mash = Mash();\n\n  me.next = function() {\n    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n    me.s0 = me.s1;\n    me.s1 = me.s2;\n    return me.s2 = t - (me.c = t | 0);\n  };\n\n  // Apply the seeding algorithm from Baagoe.\n  me.c = 1;\n  me.s0 = mash(' ');\n  me.s1 = mash(' ');\n  me.s2 = mash(' ');\n  me.s0 -= mash(seed);\n  if (me.s0 < 0) { me.s0 += 1; }\n  me.s1 -= mash(seed);\n  if (me.s1 < 0) { me.s1 += 1; }\n  me.s2 -= mash(seed);\n  if (me.s2 < 0) { me.s2 += 1; }\n  mash = null;\n}\n\nfunction copy(f, t) {\n  t.c = f.c;\n  t.s0 = f.s0;\n  t.s1 = f.s1;\n  t.s2 = f.s2;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new Alea(seed),\n      state = opts && opts.state,\n      prng = xg.next;\n  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }\n  prng.double = function() {\n    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n  };\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nfunction Mash() {\n  var n = 0xefc8249d;\n\n  var mash = function(data) {\n    data = data.toString();\n    for (var i = 0; i < data.length; i++) {\n      n += data.charCodeAt(i);\n      var h = 0.02519603282416938 * n;\n      n = h >>> 0;\n      h -= n;\n      h *= n;\n      n = h >>> 0;\n      h -= n;\n      n += h * 0x100000000; // 2^32\n    }\n    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n  };\n\n  return mash;\n}\n\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.alea = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n\n  // Set up generator function.\n  me.next = function() {\n    var t = me.x ^ (me.x << 11);\n    me.x = me.y;\n    me.y = me.z;\n    me.z = me.w;\n    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);\n  };\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor128 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var t = (me.x ^ (me.x >>> 2));\n    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;\n    return (me.d = (me.d + 362437 | 0)) +\n       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;\n  };\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n  me.v = 0;\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    if (k == strseed.length) {\n      me.d = me.x << 10 ^ me.x >>> 4;\n    }\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  t.v = f.v;\n  t.d = f.d;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorwow = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorshift7\" algorithm by\n// François Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    // Update xor generator.\n    var X = me.x, i = me.i, t, v, w;\n    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);\n    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);\n    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);\n    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);\n    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);\n    X[i] = v;\n    me.i = (i + 1) & 7;\n    return v;\n  };\n\n  function init(me, seed) {\n    var j, w, X = [];\n\n    if (seed === (seed | 0)) {\n      // Seed state array using a 32-bit integer.\n      w = X[0] = seed;\n    } else {\n      // Seed state using a string.\n      seed = '' + seed;\n      for (j = 0; j < seed.length; ++j) {\n        X[j & 7] = (X[j & 7] << 15) ^\n            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);\n      }\n    }\n    // Enforce an array length of 8, not all zeroes.\n    while (X.length < 8) X.push(0);\n    for (j = 0; j < 8 && X[j] === 0; ++j);\n    if (j == 8) w = X[7] = -1; else w = X[j];\n\n    me.x = X;\n    me.i = 0;\n\n    // Discard an initial 256 values.\n    for (j = 256; j > 0; --j) {\n      me.next();\n    }\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.x = f.x.slice();\n  t.i = f.i;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.x) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorshift7 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n","// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    var w = me.w,\n        X = me.X, i = me.i, t, v;\n    // Update Weyl generator.\n    me.w = w = (w + 0x61c88647) | 0;\n    // Update xor generator.\n    v = X[(i + 34) & 127];\n    t = X[i = ((i + 1) & 127)];\n    v ^= v << 13;\n    t ^= t << 17;\n    v ^= v >>> 15;\n    t ^= t >>> 12;\n    // Update Xor generator array state.\n    v = X[i] = v ^ t;\n    me.i = i;\n    // Result is the combination.\n    return (v + (w ^ (w >>> 16))) | 0;\n  };\n\n  function init(me, seed) {\n    var t, v, i, j, w, X = [], limit = 128;\n    if (seed === (seed | 0)) {\n      // Numeric seeds initialize v, which is used to generates X.\n      v = seed;\n      seed = null;\n    } else {\n      // String seeds are mixed into v and X one character at a time.\n      seed = seed + '\\0';\n      v = 0;\n      limit = Math.max(limit, seed.length);\n    }\n    // Initialize circular array and weyl value.\n    for (i = 0, j = -32; j < limit; ++j) {\n      // Put the unicode characters into the array, and shuffle them.\n      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n      // After 32 shuffles, take v as the starting w value.\n      if (j === 0) w = v;\n      v ^= v << 10;\n      v ^= v >>> 15;\n      v ^= v << 4;\n      v ^= v >>> 13;\n      if (j >= 0) {\n        w = (w + 0x61c88647) | 0;     // Weyl.\n        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.\n        i = (0 == t) ? i + 1 : 0;     // Count zeroes.\n      }\n    }\n    // We have detected all zeroes; make the key nonzero.\n    if (i >= 128) {\n      X[(seed && seed.length || 0) & 127] = -1;\n    }\n    // Run the generator 512 times to further mix the state before using it.\n    // Factoring this as a function slows the main generator, so it is just\n    // unrolled here.  The weyl generator is not advanced while warming up.\n    i = 127;\n    for (j = 4 * 128; j > 0; --j) {\n      v = X[(i + 34) & 127];\n      t = X[i = ((i + 1) & 127)];\n      v ^= v << 13;\n      t ^= t << 17;\n      v ^= v >>> 15;\n      t ^= t >>> 12;\n      X[i] = v ^ t;\n    }\n    // Storing state as object members is faster than using closure variables.\n    me.w = w;\n    me.X = X;\n    me.i = i;\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.i = f.i;\n  t.w = f.w;\n  t.X = f.X.slice();\n  return t;\n};\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.X) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor4096 = impl;\n}\n\n})(\n  this,                                     // window object or global\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n","// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var b = me.b, c = me.c, d = me.d, a = me.a;\n    b = (b << 25) ^ (b >>> 7) ^ c;\n    c = (c - d) | 0;\n    d = (d << 24) ^ (d >>> 8) ^ a;\n    a = (a - b) | 0;\n    me.b = b = (b << 20) ^ (b >>> 12) ^ c;\n    me.c = c = (c - d) | 0;\n    me.d = (d << 16) ^ (c >>> 16) ^ a;\n    return me.a = (a - b) | 0;\n  };\n\n  /* The following is non-inverted tyche, which has better internal\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\n  me.next = function() {\n    var a = me.a, b = me.b, c = me.c, d = me.d;\n    a = (me.a + me.b | 0) >>> 0;\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\n    c = me.c + d | 0;\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\n    me.a = a = a + b | 0;\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n    me.c = c = c + d | 0;\n    b = b ^ c;\n    return me.b = (b << 7 ^ b >>> 25);\n  }\n  */\n\n  me.a = 0;\n  me.b = 0;\n  me.c = 2654435769 | 0;\n  me.d = 1367130551;\n\n  if (seed === Math.floor(seed)) {\n    // Integer seed.\n    me.a = (seed / 0x100000000) | 0;\n    me.b = seed | 0;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 20; k++) {\n    me.b ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.a = f.a;\n  t.b = f.b;\n  t.c = f.c;\n  t.d = f.d;\n  return t;\n};\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.tychei = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","/*\nCopyright 2014 David Bau.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n(function (pool, math) {\n//\n// The following constants are related to IEEE 754 limits.\n//\nvar global = this,\n    width = 256,        // each RC4 output is 0 <= x < 256\n    chunks = 6,         // at least six RC4 outputs for each double\n    digits = 52,        // there are 52 significant digits in a double\n    rngname = 'random', // rngname: name for Math.random and Math.seedrandom\n    startdenom = math.pow(width, chunks),\n    significance = math.pow(2, digits),\n    overflow = significance * 2,\n    mask = width - 1,\n    nodecrypto;         // node.js crypto module, initialized at the bottom.\n\n//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nfunction seedrandom(seed, options, callback) {\n  var key = [];\n  options = (options == true) ? { entropy: true } : (options || {});\n\n  // Flatten the seed string or build one from local entropy if needed.\n  var shortseed = mixkey(flatten(\n    options.entropy ? [seed, tostring(pool)] :\n    (seed == null) ? autoseed() : seed, 3), key);\n\n  // Use the seed to initialize an ARC4 generator.\n  var arc4 = new ARC4(key);\n\n  // This function returns a random double in [0, 1) that contains\n  // randomness in every bit of the mantissa of the IEEE 754 value.\n  var prng = function() {\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\n        x = 0;                          //   and no 'extra last byte'.\n    while (n < significance) {          // Fill up all significant digits by\n      n = (n + x) * width;              //   shifting numerator and\n      d *= width;                       //   denominator and generating a\n      x = arc4.g(1);                    //   new least-significant-byte.\n    }\n    while (n >= overflow) {             // To avoid rounding up, before adding\n      n /= 2;                           //   last byte, shift everything\n      d /= 2;                           //   right using integer math until\n      x >>>= 1;                         //   we have exactly the desired bits.\n    }\n    return (n + x) / d;                 // Form the number within [0, 1).\n  };\n\n  prng.int32 = function() { return arc4.g(4) | 0; }\n  prng.quick = function() { return arc4.g(4) / 0x100000000; }\n  prng.double = prng;\n\n  // Mix the randomness into accumulated entropy.\n  mixkey(tostring(arc4.S), pool);\n\n  // Calling convention: what to return as a function of prng, seed, is_math.\n  return (options.pass || callback ||\n      function(prng, seed, is_math_call, state) {\n        if (state) {\n          // Load the arc4 state from the given state if it has an S array.\n          if (state.S) { copy(state, arc4); }\n          // Only provide the .state method if requested via options.state.\n          prng.state = function() { return copy(arc4, {}); }\n        }\n\n        // If called as a method of Math (Math.seedrandom()), mutate\n        // Math.random because that is how seedrandom.js has worked since v1.0.\n        if (is_math_call) { math[rngname] = prng; return seed; }\n\n        // Otherwise, it is a newer calling convention, so return the\n        // prng directly.\n        else return prng;\n      })(\n  prng,\n  shortseed,\n  'global' in options ? options.global : (this == math),\n  options.state);\n}\nmath['seed' + rngname] = seedrandom;\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\nfunction ARC4(key) {\n  var t, keylen = key.length,\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n\n  // The empty key [] is treated as [0].\n  if (!keylen) { key = [keylen++]; }\n\n  // Set up S using the standard key scheduling algorithm.\n  while (i < width) {\n    s[i] = i++;\n  }\n  for (i = 0; i < width; i++) {\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\n    s[j] = t;\n  }\n\n  // The \"g\" method returns the next (count) outputs as one number.\n  (me.g = function(count) {\n    // Using instance members instead of closure state nearly doubles speed.\n    var t, r = 0,\n        i = me.i, j = me.j, s = me.S;\n    while (count--) {\n      t = s[i = mask & (i + 1)];\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\n    }\n    me.i = i; me.j = j;\n    return r;\n    // For robust unpredictability, the function call below automatically\n    // discards an initial batch of values.  This is called RC4-drop[256].\n    // See http://google.com/search?q=rsa+fluhrer+response&btnI\n  })(width);\n}\n\n//\n// copy()\n// Copies internal state of ARC4 to or from a plain object.\n//\nfunction copy(f, t) {\n  t.i = f.i;\n  t.j = f.j;\n  t.S = f.S.slice();\n  return t;\n};\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\nfunction flatten(obj, depth) {\n  var result = [], typ = (typeof obj), prop;\n  if (depth && typ == 'object') {\n    for (prop in obj) {\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\n    }\n  }\n  return (result.length ? result : typ == 'string' ? obj : obj + '\\0');\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\nfunction mixkey(seed, key) {\n  var stringseed = seed + '', smear, j = 0;\n  while (j < stringseed.length) {\n    key[mask & j] =\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\n  }\n  return tostring(key);\n}\n\n//\n// autoseed()\n// Returns an object for autoseeding, using window.crypto and Node crypto\n// module if available.\n//\nfunction autoseed() {\n  try {\n    var out;\n    if (nodecrypto && (out = nodecrypto.randomBytes)) {\n      // The use of 'out' to remember randomBytes makes tight minified code.\n      out = out(width);\n    } else {\n      out = new Uint8Array(width);\n      (global.crypto || global.msCrypto).getRandomValues(out);\n    }\n    return tostring(out);\n  } catch (e) {\n    var browser = global.navigator,\n        plugins = browser && browser.plugins;\n    return [+new Date, global, plugins, global.screen, tostring(pool)];\n  }\n}\n\n//\n// tostring()\n// Converts an array of charcodes to a string\n//\nfunction tostring(a) {\n  return String.fromCharCode.apply(0, a);\n}\n\n//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to interfere with deterministic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(math.random(), pool);\n\n//\n// Nodejs and AMD support: export the implementation as a module using\n// either convention.\n//\nif ((typeof module) == 'object' && module.exports) {\n  module.exports = seedrandom;\n  // When in node.js, try using crypto package for autoseeding.\n  try {\n    nodecrypto = require('crypto');\n  } catch (ex) {}\n} else if ((typeof define) == 'function' && define.amd) {\n  define(function() { return seedrandom; });\n}\n\n// End anonymous scope, and pass initial values.\n})(\n  [],     // pool: entropy pool starts empty\n  Math    // math: package containing random, pow, and seedrandom\n);\n","// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\nvar alea = require('./lib/alea');\n\n// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\nvar xor128 = require('./lib/xor128');\n\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\nvar xorwow = require('./lib/xorwow');\n\n// xorshift7, by François Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\nvar xorshift7 = require('./lib/xorshift7');\n\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\nvar xor4096 = require('./lib/xor4096');\n\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\nvar tychei = require('./lib/tychei');\n\n// The original ARC4-based prng included in this library.\n// Period: ~2^1600\nvar sr = require('./seedrandom');\n\nsr.alea = alea;\nsr.xor128 = xor128;\nsr.xorwow = xorwow;\nsr.xorshift7 = xorshift7;\nsr.xor4096 = xor4096;\nsr.tychei = tychei;\n\nmodule.exports = sr;\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as seedrandom from 'seedrandom';\n\nexport interface RandomBase {\n  nextValue(): number;\n}\n\nexport interface RandomGamma {\n  nextValue(): number;\n}\n\nexport interface RandNormalDataTypes {\n  float32: Float32Array;\n  int32: Int32Array;\n}\n\nexport interface RandGammaDataTypes {\n  float32: Float32Array;\n  int32: Int32Array;\n}\n\n// https://en.wikipedia.org/wiki/Marsaglia_polar_method\nexport class MPRandGauss implements RandomBase {\n  private mean: number;\n  private stdDev: number;\n  private nextVal: number;\n  private dtype?: keyof RandNormalDataTypes;\n  private truncated?: boolean;\n  private upper?: number;\n  private lower?: number;\n  private random: seedrandom.prng;\n\n  constructor(\n      mean: number, stdDeviation: number, dtype?: keyof RandNormalDataTypes,\n      truncated?: boolean, seed?: number) {\n    this.mean = mean;\n    this.stdDev = stdDeviation;\n    this.dtype = dtype;\n    this.nextVal = NaN;\n    this.truncated = truncated;\n    if (this.truncated) {\n      this.upper = this.mean + this.stdDev * 2;\n      this.lower = this.mean - this.stdDev * 2;\n    }\n    const seedValue = seed ? seed : Math.random();\n    this.random = seedrandom.alea(seedValue.toString());\n  }\n\n  /** Returns next sample from a Gaussian distribution. */\n  public nextValue(): number {\n    if (!isNaN(this.nextVal)) {\n      const value = this.nextVal;\n      this.nextVal = NaN;\n      return value;\n    }\n\n    let resultX: number, resultY: number;\n    let isValid = false;\n    while (!isValid) {\n      let v1: number, v2: number, s: number;\n      do {\n        v1 = 2 * this.random() - 1;\n        v2 = 2 * this.random() - 1;\n        s = v1 * v1 + v2 * v2;\n      } while (s >= 1 || s === 0);\n\n      const mul = Math.sqrt(-2.0 * Math.log(s) / s);\n      resultX = this.mean + this.stdDev * v1 * mul;\n      resultY = this.mean + this.stdDev * v2 * mul;\n\n      if (!this.truncated || this.isValidTruncated(resultX)) {\n        isValid = true;\n      }\n    }\n\n    if (!this.truncated || this.isValidTruncated(resultY)) {\n      this.nextVal = this.convertValue(resultY);\n    }\n    return this.convertValue(resultX);\n  }\n\n  /** Handles proper rounding for non-floating-point numbers. */\n  private convertValue(value: number): number {\n    if (this.dtype == null || this.dtype === 'float32') {\n      return value;\n    }\n    return Math.round(value);\n  }\n\n  /** Returns true if less than 2-standard-deviations from the mean. */\n  private isValidTruncated(value: number): boolean {\n    return value <= this.upper && value >= this.lower;\n  }\n}\n\n// Marsaglia, George, and Wai Wan Tsang. 2000. \"A Simple Method for Generating\n// Gamma Variables.\"\nexport class RandGamma implements RandomGamma {\n  private alpha: number;\n  private beta: number;\n  private d: number;\n  private c: number;\n  private dtype?: keyof RandGammaDataTypes;\n  private randu: seedrandom.prng;\n  private randn: MPRandGauss;\n\n  constructor(\n      alpha: number, beta: number, dtype: keyof RandGammaDataTypes,\n      seed?: number) {\n    this.alpha = alpha;\n    this.beta = 1 / beta;  // convert rate to scale parameter\n    this.dtype = dtype;\n\n    const seedValue = seed ? seed : Math.random();\n    this.randu = seedrandom.alea(seedValue.toString());\n    this.randn = new MPRandGauss(0, 1, dtype, false, this.randu());\n\n    if (alpha < 1) {\n      this.d = alpha + (2 / 3);\n    } else {\n      this.d = alpha - (1 / 3);\n    }\n    this.c = 1 / Math.sqrt(9 * this.d);\n  }\n\n  /** Returns next sample from a gamma distribution. */\n  public nextValue(): number {\n    let x2: number, v0: number, v1: number, x: number, u: number, v: number;\n    while (true) {\n      do {\n        x = this.randn.nextValue();\n        v = 1 + (this.c * x);\n      } while (v <= 0);\n      v *= v * v;\n      x2 = x * x;\n      v0 = 1 - (0.331 * x2 * x2);\n      v1 = (0.5 * x2) + (this.d * (1 - v + Math.log(v)));\n      u = this.randu();\n      if (u < v0 || Math.log(u) < v1) {\n        break;\n      }\n    }\n    v = (1 / this.beta) * this.d * v;\n    if (this.alpha < 1) {\n      v *= Math.pow(this.randu(), 1 / this.alpha);\n    }\n    return this.convertValue(v);\n  }\n  /** Handles proper rounding for non-floating-point numbers. */\n  private convertValue(value: number): number {\n    if (this.dtype === 'float32') {\n      return value;\n    }\n    return Math.round(value);\n  }\n}\n\nexport class UniformRandom implements RandomBase {\n  private min: number;\n  private range: number;\n  private random: seedrandom.prng;\n  private dtype?: keyof RandNormalDataTypes;\n\n  constructor(\n      min = 0, max = 1, dtype?: keyof RandNormalDataTypes,\n      seed?: string|number) {\n    this.min = min;\n    this.range = max - min;\n    this.dtype = dtype;\n    if (seed == null) {\n      seed = Math.random();\n    }\n    if (typeof seed === 'number') {\n      seed = seed.toString();\n    }\n\n    if (!this.canReturnFloat() && this.range <= 1) {\n      throw new Error(\n          `The difference between ${min} - ${max} <= 1 and dtype is not float`);\n    }\n    this.random = seedrandom.alea(seed);\n  }\n\n  /** Handles proper rounding for non floating point numbers. */\n  private canReturnFloat = () =>\n      (this.dtype == null || this.dtype === 'float32');\n\n  private convertValue(value: number): number {\n    if (this.canReturnFloat()) {\n      return value;\n    }\n    return Math.round(value);\n  }\n\n  nextValue() {\n    return this.convertValue(this.min + this.range * this.random());\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, TensorBuffer} from '../tensor';\nimport {convertToTensor, convertToTensorArray} from '../tensor_util_env';\nimport {DataType, DataTypeMap, Rank, ShapeMap, TensorLike, TensorLike4D} from '../types';\nimport * as util from '../util';\nimport {getAxesPermutation, getInnerMostAxes} from './axis_util';\nimport {concat} from './concat_split';\nimport {op} from './operation';\nimport {MPRandGauss, RandGamma, UniformRandom} from './rand';\nimport {zeros, zerosLike} from './tensor_ops';\n\n/**\n * Broadcast an array to a compatible shape NumPy-style.\n *\n * The tensor's shape is compared to the broadcast shape from end to beginning.\n * Ones are prepended to the tensor's shape until is has the same length as\n * the broadcast shape. If input.shape[i]==shape[i], the (i+1)-th axis is\n * already broadcast-compatible. If input.shape[i]==1 and shape[i]==N, then\n * the input tensor is tiled N times along that axis (using tf.tile).\n *\n * @param input The tensor that is to be broadcasted.\n * @param shape The input is to be broadcast to this shape.\n */\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\nfunction broadcastTo_<R extends Rank>(\n    x: Tensor|TensorLike, shape: ShapeMap[R]): Tensor<R> {\n  let input = convertToTensor(x, 'broadcastTo', 'x');\n  const xShape = input.shape;\n\n  if (shape.some(d => !(d > 0) || d % 1 !== 0)) {\n    throw new Error(`broadcastTo(): Invalid broadcast shape [${shape}].`);\n  }\n\n  if (shape.length < input.rank) {\n    throw new Error(`broadcastTo(): shape.length=${shape.length} < input.rank=${\n        input.rank}.`);\n  }\n\n  if (shape.length > input.rank) {\n    const newShape = input.shape.slice();\n    while (newShape.length < shape.length) {\n      newShape.unshift(1);\n    }\n    input = input.reshape(newShape);\n  }\n\n  const reps: number[] = Array.from(shape);\n  for (let i = shape.length - 1; i >= 0; i--) {\n    if (input.shape[i] === shape[i]) {\n      reps[i] = 1;\n    } else if (input.shape[i] !== 1) {\n      throw new Error(\n          `broadcastTo(): [${xShape}] cannot be broadcast to [${shape}].`);\n    }\n  }\n  const axes = reps.map((n, i) => n > 1 ? i : -1).filter(i => i >= 0);\n\n  if (axes.length === 0) {\n    return input.clone() as Tensor<R>;\n  }\n\n  return ENGINE.runKernelFunc(\n             backend => backend.tile(input, reps), {input},\n             (dy: Tensor) =>\n                 ({input: () => dy.sum(axes, /*keepDims=*/true)})) as Tensor<R>;\n}\n\n/**\n * Creates a new tensor with the same values and shape as the specified\n * tensor.\n *\n * ```js\n * const x = tf.tensor([1, 2]);\n *\n * x.clone().print();\n * ```\n *\n * @param x The tensor to clone.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction clone_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'clone', null);\n  const der = (dy: T) => {\n    return {$x: () => dy.toFloat()};\n  };\n  return ENGINE.runKernelFunc(\n      () => ENGINE.makeTensorFromDataId($x.dataId, $x.shape, $x.dtype) as T,\n      {$x}, der);\n}\n\n/**\n * Create an identity matrix.\n *\n * @param numRows Number of rows.\n * @param numColumns Number of columns. Defaults to `numRows`.\n * @param batchShape If provided, will add the batch shape to the beginning\n *   of the shape of the returned `tf.Tensor` by repeating the identity\n *   matrix.\n * @param dtype Data type.\n * @returns Identity matrix of the specified size and data type, possibly\n *   with batch repetition if `batchShape` is specified.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction eye_(\n    numRows: number, numColumns?: number,\n    batchShape?:\n        [\n          number\n        ]|[number,\n           number]|[number, number, number]|[number, number, number, number],\n    dtype: DataType = 'float32'): Tensor2D {\n  if (numColumns == null) {\n    numColumns = numRows;\n  }\n  const buff = buffer([numRows, numColumns], dtype);\n  const n = numRows <= numColumns ? numRows : numColumns;\n  for (let i = 0; i < n; ++i) {\n    buff.set(1, i, i);\n  }\n  const out = buff.toTensor().as2D(numRows, numColumns);\n  if (batchShape == null) {\n    return out;\n  } else {\n    if (batchShape.length === 1) {\n      return tile(expandDims(out, 0), [batchShape[0], 1, 1]);\n    } else if (batchShape.length === 2) {\n      return tile(\n          expandDims(expandDims(out, 0), 0),\n          [batchShape[0], batchShape[1], 1, 1]);\n    } else if (batchShape.length === 3) {\n      return tile(\n          expandDims(expandDims(expandDims(out, 0), 0), 0),\n          [batchShape[0], batchShape[1], batchShape[2], 1, 1]);\n    } else {\n      throw new Error(\n          `eye() currently supports only 1D and 2D ` +\n          // tslint:disable-next-line:no-any\n          `batchShapes, but received ${(batchShape as any).length}D.`);\n    }\n  }\n}\n\n/**\n * Creates a `tf.Tensor` with values sampled from a normal distribution.\n *\n * ```js\n * tf.randomNormal([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param mean The mean of the normal distribution.\n * @param stdDev The standard deviation of the normal distribution.\n * @param dtype The data type of the output.\n * @param seed The seed for the random number generator.\n */\n/** @doc {heading: 'Tensors', subheading: 'Random'} */\nfunction randomNormal_<R extends Rank>(\n    shape: ShapeMap[R], mean = 0, stdDev = 1, dtype?: 'float32'|'int32',\n    seed?: number): Tensor<R> {\n  if (dtype != null && (dtype as DataType) === 'bool') {\n    throw new Error(`Unsupported data type ${dtype}`);\n  }\n  const randGauss =\n      new MPRandGauss(mean, stdDev, dtype, false /* truncated */, seed);\n  const res = buffer(shape, dtype);\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = randGauss.nextValue();\n  }\n  return res.toTensor();\n}\n\n/**\n * Creates a `tf.Tensor` with values sampled from a truncated normal\n * distribution.\n *\n * ```js\n * tf.truncatedNormal([2, 2]).print();\n * ```\n *\n * The generated values follow a normal distribution with specified mean and\n * standard deviation, except that values whose magnitude is more than 2\n * standard deviations from the mean are dropped and re-picked.\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param mean The mean of the normal distribution.\n * @param stdDev The standard deviation of the normal distribution.\n * @param dtype The data type of the output tensor.\n * @param seed The seed for the random number generator.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction truncatedNormal_<R extends Rank>(\n    shape: ShapeMap[R], mean = 0, stdDev = 1, dtype?: 'float32'|'int32',\n    seed?: number): Tensor<R> {\n  if (dtype != null && (dtype as DataType) === 'bool') {\n    throw new Error(`Unsupported data type ${dtype}`);\n  }\n  const randGauss =\n      new MPRandGauss(mean, stdDev, dtype, true /* truncated */, seed);\n  const res = buffer(shape, dtype);\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = randGauss.nextValue();\n  }\n  return res.toTensor();\n}\n\n/**\n * Creates a `tf.Tensor` with values sampled from a gamma distribution.\n *\n * ```js\n * tf.randomGamma([2, 2], 1).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param alpha The shape parameter of the gamma distribution.\n * @param beta The inverse scale parameter of the gamma distribution. Defaults\n *     to 1.\n * @param dtype The data type of the output. Defaults to float32.\n * @param seed The seed for the random number generator.\n */\n/** @doc {heading: 'Tensors', subheading: 'Random'} */\nfunction randomGamma_<R extends Rank>(\n    shape: ShapeMap[R], alpha: number, beta = 1,\n    dtype: 'float32'|'int32' = 'float32', seed?: number): Tensor<R> {\n  if (beta == null) {\n    beta = 1;\n  }\n  if (dtype == null) {\n    dtype = 'float32';\n  }\n  if (dtype !== 'float32' && dtype !== 'int32') {\n    throw new Error(`Unsupported data type ${dtype}`);\n  }\n  const rgamma = new RandGamma(alpha, beta, dtype, seed);\n  const res = buffer(shape, dtype);\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = rgamma.nextValue();\n  }\n  return res.toTensor();\n}\n\n/**\n * Creates a `tf.Tensor` with values sampled from a uniform distribution.\n *\n * The generated values follow a uniform distribution in the range [minval,\n * maxval). The lower bound minval is included in the range, while the upper\n * bound maxval is excluded.\n *\n * ```js\n * tf.randomUniform([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param minval The lower bound on the range of random values to generate.\n *   Defaults to 0.\n * @param maxval The upper bound on the range of random values to generate.\n *   Defaults to 1.\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\n */\n/** @doc {heading: 'Tensors', subheading: 'Random'} */\nfunction randomUniform_<R extends Rank>(\n    shape: ShapeMap[R], minval = 0, maxval = 1, dtype: DataType = 'float32',\n    seed?: number|string): Tensor<R> {\n  const res = buffer(shape, dtype);\n  const random = new UniformRandom(minval, maxval, null, seed);\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = random.nextValue();\n  }\n  return res.toTensor();\n}\n\n/**\n * Creates a `tf.Tensor` with values sampled from a random number generator\n * function defined by the user.\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param randFunction A random number generator function which is called\n * for each element in the output tensor.\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\n */\nfunction rand_<R extends Rank>(\n    shape: ShapeMap[R], randFunction: () => number,\n    dtype?: DataType): Tensor<R> {\n  const size = util.sizeFromShape(shape);\n\n  let values = null;\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n\n  for (let i = 0; i < size; i++) {\n    values[i] = randFunction();\n  }\n  return ENGINE.makeTensor(values, shape, dtype) as Tensor<R>;\n}\n\n/**\n * Creates a `tf.Tensor` with values drawn from a multinomial distribution.\n *\n * ```js\n * const probs = tf.tensor([.75, .25]);\n * tf.multinomial(probs, 3).print();\n * ```\n *\n * @param logits 1D array with unnormalized log-probabilities, or\n *     2D array of shape `[batchSize, numOutcomes]`. See the `normalized`\n *     parameter.\n * @param numSamples Number of samples to draw for each row slice.\n * @param seed The seed number.\n * @param normalized Whether the provided `logits` are normalized true\n *     probabilities (sum to 1). Defaults to false.\n * @return 1D array of shape `[numSamples]`, or 2D array of shape\n *     `[batchSize, numSamples]`, depending on the rank of the input.\n */\n/** @doc {heading: 'Tensors', subheading: 'Random'} */\nfunction multinomial_(\n    logits: Tensor1D|Tensor2D|TensorLike, numSamples: number, seed?: number,\n    normalized = false): Tensor1D|Tensor2D {\n  const $logits = convertToTensor(logits, 'logits', 'multinomial');\n  const numOutcomes = $logits.size;\n  const origRank = $logits.rank;\n  if (numOutcomes < 2) {\n    throw new Error(\n        `Error in multinomial: you need at least 2 outcomes, but got ` +\n        `${numOutcomes}.`);\n  }\n  if (origRank > 2) {\n    throw new Error(`Rank of probabilities must be 1 or 2, but is ${origRank}`);\n  }\n  seed = seed || Math.random();\n  const logits2D = origRank === 1 ? $logits.as2D(1, -1) : $logits as Tensor2D;\n  const res = ENGINE.runKernelFunc(\n      backend => backend.multinomial(logits2D, normalized, numSamples, seed),\n      {logits2D});\n\n  return origRank === 1 ? res.as1D() : res;\n}\n\n/**\n * Creates a one-hot `tf.Tensor`. The locations represented by `indices` take\n * value `onValue` (defaults to 1), while all other locations take value\n * `offValue` (defaults to 0). If `indices` is rank `R`, the output has rank\n * `R+1` with the last axis of size `depth`.\n *\n * ```js\n * tf.oneHot(tf.tensor1d([0, 1], 'int32'), 3).print();\n * ```\n *\n * @param indices `tf.Tensor` of indices with dtype `int32`.\n * @param depth The depth of the one hot dimension.\n * @param onValue A number used to fill in the output when the index matches\n * the location.\n * @param offValue A number used to fill in the output when the index does\n *     not match the location.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction oneHot_(\n    indices: Tensor|TensorLike, depth: number, onValue = 1,\n    offValue = 0): Tensor {\n  if (depth < 2) {\n    throw new Error(`Error in oneHot: depth must be >=2, but it is ${depth}`);\n  }\n  let $indices = convertToTensor(indices, 'indices', 'oneHot', 'int32');\n  const outShape = [...$indices.shape, depth];\n  $indices = $indices.flatten();\n\n  const grad = (dy: Tensor2D) => {\n    return {$indices: () => zeros($indices.shape, 'float32')};\n  };\n  const result = ENGINE.runKernelFunc(\n      backend => backend.oneHot($indices as Tensor1D, depth, onValue, offValue),\n      {$indices}, grad);\n  return result.reshape(outShape);\n}\n\n/**\n * Reshapes a `tf.Tensor` to a given shape.\n *\n * Given an input tensor, returns a new tensor with the same values as the\n * input tensor with shape `shape`.\n *\n * If one component of shape is the special value -1, the size of that\n * dimension is computed so that the total size remains constant. In\n * particular, a shape of [-1] flattens into 1-D. At most one component of\n * shape can be -1.\n *\n * If shape is 1-D or higher, then the operation returns a tensor with shape\n * shape filled with the values of tensor. In this case, the number of\n * elements implied by shape must be the same as the number of elements in\n * tensor.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * x.reshape([2, 2]).print();\n * ```\n *\n * @param x The input tensor to be reshaped.\n * @param shape An array of integers defining the output tensor shape.\n */\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\nfunction reshape_<R2 extends Rank>(\n    x: Tensor|TensorLike, shape: ShapeMap[R2]): Tensor<R2> {\n  const $x = convertToTensor(x, 'x', 'reshape', null);\n  shape = util.inferFromImplicitShape(shape, $x.size) as ShapeMap[R2];\n  util.assert(\n      $x.size === util.sizeFromShape(shape),\n      () => 'new shape and old shape must have the same number of elements.');\n\n  const grad = (dy: Tensor<R2>) => {\n    return {x: () => dy.reshape($x.shape)};\n  };\n  const attrs = {shape};\n  return ENGINE.runKernelFunc(\n      backend => backend.reshape($x, shape), {x: $x}, grad, 'Reshape', attrs);\n}\n\n/**\n * Removes dimensions of size 1 from the shape of a `tf.Tensor`.\n *\n * ```js\n * const x = tf.tensor([1, 2, 3, 4], [1, 1, 4]);\n * x.squeeze().print();\n * ```\n *\n * @param x The input tensor to be squeezed.\n * @param axis An optional list of numbers. If specified, only\n *     squeezes the dimensions listed. The dimension index starts at 0. It\n * is an error to squeeze a dimension that is not 1.\n */\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\nfunction squeeze_<T extends Tensor>(x: Tensor|TensorLike, axis?: number[]): T {\n  const $x = convertToTensor(x, 'x', 'squeeze');\n  return reshape($x, util.squeezeShape($x.shape, axis).newShape) as T;\n}\n\n/**\n * Casts a `tf.Tensor` to a new dtype.\n *\n * ```js\n * const x = tf.tensor1d([1.5, 2.5, 3]);\n * tf.cast(x, 'int32').print();\n * ```\n * @param x The input tensor to be casted.\n * @param dtype The dtype to cast the input tensor to.\n */\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\nfunction cast_<T extends Tensor>(x: T|TensorLike, dtype: DataType): T {\n  const $x = convertToTensor(x, 'x', 'cast');\n\n  // Sanity checks.\n  if (!util.isValidDtype(dtype)) {\n    throw new Error(`Failed to cast to unknown dtype ${dtype}`);\n  }\n  if (dtype === 'string' && $x.dtype !== 'string' ||\n      dtype !== 'string' && $x.dtype === 'string') {\n    throw new Error('Only strings can be casted to strings');\n  }\n\n  const grad = (dy: T) => {\n    return {x: () => dy.clone()};\n  };\n  const attrs = {dtype};\n  return ENGINE.runKernelFunc(\n      backend => backend.cast($x, dtype), {x: $x}, grad, 'Cast', attrs);\n}\n\n/**\n * Construct a tensor by repeating it the number of times given by reps.\n *\n * This operation creates a new tensor by replicating `input` `reps`\n * times. The output tensor's i'th dimension has `input.shape[i] *\n * reps[i]` elements, and the values of `input` are replicated\n * `reps[i]` times along the i'th dimension. For example, tiling\n * `[a, b, c, d]` by `[2]` produces `[a, b, c, d, a, b, c, d]`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n *\n * a.tile([2]).print();    // or a.tile([2])\n * ```\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * a.tile([1, 2]).print();  // or a.tile([1, 2])\n * ```\n * @param x The tensor to tile.\n * @param reps Determines the number of replications per dimension.\n */\n/** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */\nfunction tile_<T extends Tensor>(x: T|TensorLike, reps: number[]): T {\n  const parseAs: DataType = null;\n  const $x = convertToTensor(x, 'x', 'tile', parseAs);\n\n  util.assert(\n      $x.rank === reps.length,\n      () => `Error in transpose: rank of input ${$x.rank} ` +\n          `must match length of reps ${reps}.`);\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    const derX = () => {\n      let xGrad = zerosLike($x);\n      // TODO(cais): Maybe reduce memory footprint by avoiding repeated\n      // slicing.\n      if ($x.rank === 1) {\n        for (let i = 0; i < reps[0]; ++i) {\n          xGrad = xGrad.add(dy.slice([i * $x.shape[0]], [$x.shape[0]]));\n        }\n      } else if ($x.rank === 2) {\n        for (let i = 0; i < reps[0]; ++i) {\n          for (let j = 0; j < reps[1]; ++j) {\n            xGrad = xGrad.add(dy.slice(\n                [i * $x.shape[0], j * $x.shape[1]],\n                [$x.shape[0], $x.shape[1]]));\n          }\n        }\n      } else if ($x.rank === 3) {\n        for (let i = 0; i < reps[0]; ++i) {\n          for (let j = 0; j < reps[1]; ++j) {\n            for (let k = 0; k < reps[2]; ++k) {\n              xGrad = xGrad.add(dy.slice(\n                  [i * $x.shape[0], j * $x.shape[1], k * $x.shape[2]],\n                  [$x.shape[0], $x.shape[1], $x.shape[2]]));\n            }\n          }\n        }\n      } else if ($x.rank === 4) {\n        for (let i = 0; i < reps[0]; ++i) {\n          for (let j = 0; j < reps[1]; ++j) {\n            for (let k = 0; k < reps[2]; ++k) {\n              for (let l = 0; l < reps[3]; ++l) {\n                xGrad = xGrad.add(dy.slice(\n                    [\n                      i * $x.shape[0], j * $x.shape[1], k * $x.shape[2],\n                      l * $x.shape[3]\n                    ],\n                    [$x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]));\n              }\n            }\n          }\n        }\n      } else {\n        throw new Error(\n            `Gradient for tile operation is not implemented for rank-` +\n            `${$x.rank} tensors yet.`);\n      }\n      return xGrad as T;\n    };\n    return {x: derX};\n  };\n  const inputsToSave = [$x];\n  const attrs = {reps};\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.tile($x, reps);\n    save([$x]);\n    return res;\n  }, {x: $x}, grad, 'Tile', attrs, inputsToSave);\n}\n\n/**\n * Pads a `tf.Tensor1D` with a given value and paddings. See `pad` for details.\n */\nfunction pad1d_(\n    x: Tensor1D|TensorLike, paddings: [number, number],\n    constantValue = 0): Tensor1D {\n  util.assert(\n      paddings.length === 2,\n      () => 'Invalid number of paddings. Must be length of 2.');\n  return pad(x, [paddings], constantValue);\n}\n\n/**\n * Pads a `tf.Tensor2D` with a given value and paddings. See `pad` for details.\n */\nfunction pad2d_(\n    x: Tensor2D|TensorLike, paddings: [[number, number], [number, number]],\n    constantValue = 0): Tensor2D {\n  util.assert(\n      paddings.length === 2 && paddings[0].length === 2 &&\n          paddings[1].length === 2,\n      () => 'Invalid number of paddings. Must be length of 2 each.');\n  return pad(x, paddings, constantValue);\n}\n\n/**\n * Pads a `tf.Tensor3D` with a given value and paddings. See `pad` for details.\n */\nfunction pad3d_(\n    x: Tensor3D|TensorLike,\n    paddings: [[number, number], [number, number], [number, number]],\n    constantValue = 0): Tensor3D {\n  util.assert(\n      paddings.length === 3 && paddings[0].length === 2 &&\n          paddings[1].length === 2 && paddings[2].length === 2,\n      () => 'Invalid number of paddings. Must be length of 2 each.');\n  return pad(x, paddings, constantValue);\n}\n\n/**\n * Pads a `tf.Tensor4D` with a given value and paddings. See `pad` for details.\n */\nfunction pad4d_(\n    x: Tensor4D|TensorLike,\n    paddings:\n        [\n          [number, number], [number, number], [number, number], [number, number]\n        ],\n    constantValue = 0): Tensor4D {\n  util.assert(\n      paddings.length === 4 && paddings[0].length === 2 &&\n          paddings[1].length === 2 && paddings[2].length === 2 &&\n          paddings[3].length === 2,\n      () => 'Invalid number of paddings. Must be length of 2 each.');\n  return pad(x, paddings, constantValue);\n}\n\n/**\n * Pads a `tf.Tensor` with a given value and paddings.\n *\n * This operation currently only implements the `CONSTANT` mode.\n *\n * Also available are stricter rank-specific methods with the same signature\n * as this method that assert that `paddings` is of given length.\n *   - `tf.pad1d`\n *   - `tf.pad2d`\n *   - `tf.pad3d`\n *   - `tf.pad4d`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * x.pad([[1, 2]]).print();\n * ```\n * @param x The tensor to pad.\n * @param paddings An array of length `R` (the rank of the tensor), where\n * each element is a length-2 tuple of ints `[padBefore, padAfter]`,\n * specifying how much to pad along each dimension of the tensor.\n * @param constantValue The pad value to use. Defaults to 0.\n */\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\nfunction pad_<T extends Tensor>(\n    x: T|TensorLike, paddings: Array<[number, number]>, constantValue = 0): T {\n  const $x = convertToTensor(x, 'x', 'pad');\n\n  if ($x.rank === 0) {\n    throw new Error('pad(scalar) is not defined. Pass non-scalar to pad');\n  }\n\n  const grad = (dy: T) => {\n    // Pad introduces values around the original tensor, so the gradient\n    // slices the original shape out of the gradient.\n    const begin = paddings.map(p => p[0]);\n    return {x: () => dy.slice(begin, $x.shape)};\n  };\n  const attrs = {paddings, constantValue};\n  return ENGINE.runKernelFunc(\n      backend => backend.pad($x, paddings, constantValue), {x: $x}, grad,\n      'PadV2', attrs);\n}\n\n/**\n * Stacks a list of rank-`R` `tf.Tensor`s into one rank-`(R+1)` `tf.Tensor`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n * tf.stack([a, b, c]).print();\n * ```\n *\n * @param tensors A list of tensor objects with the same shape and dtype.\n * @param axis The axis to stack along. Defaults to 0 (the first dim).\n */\n/** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */\nfunction stack_<T extends Tensor>(\n    tensors: Array<T|TensorLike>, axis = 0): Tensor {\n  const $tensors = convertToTensorArray(tensors, 'tensors', 'stack');\n\n  util.assert(\n      $tensors.length >= 1, () => 'Pass at least one tensor to tf.stack');\n  if ($tensors.length === 1) {\n    return $tensors[0].expandDims(axis);\n  }\n  const rank = $tensors[0].rank;\n  const shape = $tensors[0].shape;\n  const dtype = $tensors[0].dtype;\n\n  util.assert(axis <= rank, () => 'Axis must be <= rank of the tensor');\n\n  $tensors.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n  });\n\n  $tensors.forEach(t => {\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n  const expandedTensors = $tensors.map(t => t.expandDims(axis));\n  return concat(expandedTensors, axis);\n}\n\n/**\n * This operation reshapes the \"batch\" dimension 0 into `M + 1` dimensions of\n * shape `blockShape + [batch]`, interleaves these blocks back into the grid\n * defined by the spatial dimensions `[1, ..., M]`, to obtain a result with\n * the same rank as the input. The spatial dimensions of this intermediate\n * result are then optionally cropped according to `crops` to produce the\n * output. This is the reverse of `tf.spaceToBatchND`. See below for a precise\n * description.\n *\n * ```js\n * const x = tf.tensor4d([1, 2, 3, 4], [4, 1, 1, 1]);\n * const blockShape = [2, 2];\n * const crops = [[0, 0], [0, 0]];\n *\n * x.batchToSpaceND(blockShape, crops).print();\n * ```\n *\n * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +\n * remainingShape`, where spatialShape has `M` dimensions.\n * @param blockShape A 1-D array. Must have shape `[M]`, all values must\n * be >= 1.\n * @param crops A 2-D array.  Must have shape `[M, 2]`, all values must be >= 0.\n * `crops[i] = [cropStart, cropEnd]` specifies the amount to crop from input\n * dimension `i + 1`, which corresponds to spatial dimension `i`. It is required\n * that `cropStart[i] + cropEnd[i] <= blockShape[i] * inputShape[i + 1]`\n *\n * This operation is equivalent to the following steps:\n *\n * 1. Reshape `x` to `reshaped` of shape: `[blockShape[0], ...,\n * blockShape[M-1], batch / prod(blockShape), x.shape[1], ...,\n * x.shape[N-1]]`\n *\n * 2. Permute dimensions of `reshaped`to produce `permuted` of shape `[batch /\n * prod(blockShape),x.shape[1], blockShape[0], ..., x.shape[M],\n * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`\n *\n * 3. Reshape `permuted` to produce `reshapedPermuted` of shape `[batch /\n * prod(blockShape),x.shape[1] * blockShape[0], ..., x.shape[M] *\n * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`\n *\n * 4. Crop the start and end of dimensions `[1, ..., M]` of `reshapedPermuted`\n * according to `crops` to produce the output of shape: `[batch /\n * prod(blockShape),x.shape[1] * blockShape[0] - crops[0,0] - crops[0,1],\n * ..., x.shape[M] * blockShape[M-1] - crops[M-1,0] -\n * crops[M-1,1],x.shape[M+1], ..., x.shape[N-1]]`\n */\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\nfunction batchToSpaceND_<T extends Tensor>(\n    x: T|TensorLike, blockShape: number[], crops: number[][]): T {\n  const $x = convertToTensor(x, 'x', 'batchToSpaceND');\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  util.assert(\n      $x.rank >= 1 + blockShape.length,\n      () => `input rank is ${$x.rank} but should be > than blockShape.length ${\n          blockShape.length}`);\n\n  util.assert(\n      crops.length === blockShape.length,\n      () => `crops.length is ${\n          crops.length} but should be equal to blockShape.length  ${\n          blockShape.length}`);\n\n  util.assert(\n      $x.shape[0] % prod === 0,\n      () => `input tensor batch is ${\n                $x.shape[0]} but is not divisible by the product of ` +\n          `the elements of blockShape ${blockShape.join(' * ')} === ${prod}`);\n\n  const grad = (dy: T) => {\n    return {$x: () => dy.spaceToBatchND(blockShape, crops)};\n  };\n\n  return ENGINE.runKernelFunc(\n      backend => backend.batchToSpaceND($x, blockShape, crops), {$x}, grad);\n}\n\n/**\n * This operation divides \"spatial\" dimensions `[1, ..., M]` of the input into\n * a grid of blocks of shape `blockShape`, and interleaves these blocks with\n * the \"batch\" dimension (0) such that in the output, the spatial\n * dimensions `[1, ..., M]` correspond to the position within the grid,\n * and the batch dimension combines both the position within a spatial block\n * and the original batch position. Prior to division into blocks,\n * the spatial dimensions of the input are optionally zero padded\n * according to `paddings`. See below for a precise description.\n *\n * ```js\n * const x = tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]);\n * const blockShape = [2, 2];\n * const paddings = [[0, 0], [0, 0]];\n *\n * x.spaceToBatchND(blockShape, paddings).print();\n * ```\n *\n * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +\n * remainingShape`, where spatialShape has `M` dimensions.\n * @param blockShape A 1-D array. Must have shape `[M]`, all values must\n * be >= 1.\n * @param paddings A 2-D array. Must have shape `[M, 2]`, all values must be >=\n *     0. `paddings[i] = [padStart, padEnd]` specifies the amount to zero-pad\n * from input dimension `i + 1`, which corresponds to spatial dimension `i`. It\n * is required that\n * `(inputShape[i + 1] + padStart + padEnd) % blockShape[i] === 0`\n *\n * This operation is equivalent to the following steps:\n *\n * 1. Zero-pad the start and end of dimensions `[1, ..., M]` of the input\n * according to `paddings` to produce `padded` of shape paddedShape.\n *\n * 2. Reshape `padded` to `reshapedPadded` of shape:\n * `[batch] + [paddedShape[1] / blockShape[0], blockShape[0], ...,\n * paddedShape[M] / blockShape[M-1], blockShape[M-1]] + remainingShape`\n *\n * 3. Permute dimensions of `reshapedPadded` to produce `permutedReshapedPadded`\n * of shape: `blockShape + [batch] + [paddedShape[1] / blockShape[0], ...,\n * paddedShape[M] / blockShape[M-1]] + remainingShape`\n *\n * 4. Reshape `permutedReshapedPadded` to flatten `blockShape` into the\n * batch dimension, producing an output tensor of shape:\n * `[batch * prod(blockShape)] + [paddedShape[1] / blockShape[0], ...,\n * paddedShape[M] / blockShape[M-1]] + remainingShape`\n */\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\nfunction spaceToBatchND_<T extends Tensor>(\n    x: T|TensorLike, blockShape: number[], paddings: number[][]): T {\n  const $x = convertToTensor(x, 'x', 'spaceToBatchND');\n\n  util.assert(\n      $x.rank >= 1 + blockShape.length,\n      () => `input rank ${$x.rank} should be > than [blockShape] ${\n          blockShape.length}`);\n\n  util.assert(\n      paddings.length === blockShape.length,\n      () => `paddings.shape[0] ${\n          paddings.length} must be equal to [blockShape] ${blockShape.length}`);\n\n  util.assert(\n      $x.shape.reduce(\n          (a, b, i) => {\n            if (i > 0 && i <= blockShape.length) {\n              return a &&\n                  ((b + paddings[i - 1][0] + paddings[i - 1][1]) %\n                       blockShape[i - 1] ===\n                   0);\n            }\n            return a;\n          },\n          true),\n      () => `input spatial dimensions ${$x.shape.slice(1)} with paddings ${\n          paddings.toString()} must be divisible by blockShapes ${\n          blockShape.toString()}`);\n\n  const grad = (dy: T) => {\n    return {$x: () => dy.batchToSpaceND(blockShape, paddings)};\n  };\n\n  return ENGINE.runKernelFunc(\n      backend => backend.spaceToBatchND($x, blockShape, paddings), {$x}, grad);\n}\n\n/**\n * Unstacks a `tf.Tensor` of rank-`R` into a list of rank-`(R-1)` `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * tf.unstack(a).forEach(tensor => tensor.print());\n * ```\n *\n * @param x A tensor object.\n * @param axis The axis to unstack along. Defaults to 0 (the first dim).\n */\n/** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */\nfunction unstack_(x: Tensor|TensorLike, axis = 0): Tensor[] {\n  axis = axis || 0;\n  const $x = convertToTensor(x, 'x', 'unstack');\n  util.assert(\n      axis >= -$x.shape.length && axis < $x.shape.length,\n      () =>\n          `Axis = ${axis} is not in [-${$x.shape.length}, ${$x.shape.length})`);\n  if (axis < 0) {\n    axis += $x.shape.length;\n  }\n  const grad = (dy: Tensor[]) => {\n    return {x: () => stack(dy, axis)};\n  };\n  const attrs = {axis};\n  return ENGINE.runKernelFunc(\n      backend => backend.unstack($x, axis), {x: $x}, grad, 'Unpack', attrs);\n}\n\n/**\n * Computes the cumulative sum of a `tf.Tensor` along `axis`.\n *\n * ```js\n * const x = tf.tensor([1, 2, 3, 4]);\n * x.cumsum().print();\n * ```\n * ```js\n * const x = tf.tensor([[1, 2], [3, 4]]);\n * x.cumsum().print();\n * ```\n *\n * @param x The input tensor to be summed.\n * @param axis The axis along which to sum. Optional. Defaults to 0.\n * @param exclusive Whether to perform exclusive cumulative sum. Optional.\n *     Defaults to false. If set to true then the sum of each tensor entry\n *     does not include its own value, but only the values previous to it\n *     along the specified axis.\n * @param reverse Whether to sum in the opposite direction. Optional.\n *     Defaults to false.\n */\n/** @doc {heading: 'Operations', subheading: 'Scan'} */\nfunction cumsum_<T extends Tensor>(\n    x: Tensor|TensorLike, axis = 0, exclusive = false, reverse = false): T {\n  const $x = convertToTensor(x, 'x', 'cumsum');\n\n  axis = axis | 0;\n  const permutation = getAxesPermutation([axis], $x.rank);\n  let permutedX = $x;\n  if (permutation != null) {\n    permutedX = $x.transpose(permutation);\n  }\n  const permutedAxis = getInnerMostAxes(1, $x.rank)[0];\n\n  const grad = (dy: T) => {\n    return {permutedX: () => dy.cumsum(axis, exclusive, !reverse)};\n  };\n  let value = ENGINE.runKernelFunc(\n                  backend => backend.cumsum(\n                      permutedX, permutedAxis, exclusive, reverse),\n                  {permutedX}, grad) as T;\n\n  if (permutation != null) {\n    value = value.transpose(permutation);\n  }\n  return value;\n}\n\n/**\n * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension\n * into the tensor's shape.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * const axis = 1;\n * x.expandDims(axis).print();\n * ```\n *\n * @param x The input tensor whose dimensions to be expanded.\n * @param axis The dimension index at which to insert shape of `1`. Defaults\n *     to 0 (the first dimension).\n */\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\nfunction expandDims_<R2 extends Rank>(\n    x: Tensor|TensorLike, axis = 0): Tensor<R2> {\n  const parseAs: DataType = null;\n  const $x = convertToTensor(x, 'x', 'expandDims', parseAs);\n\n  util.assert(axis <= $x.rank, () => 'Axis must be <= rank of the tensor');\n  const newShape = $x.shape.slice();\n  if (axis < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -($x.rank + 1) <= axis,\n        () => `Axis must be in the interval [${- ($x.rank + 1)}, ${$x.rank}]`);\n    axis = $x.rank + axis + 1;\n  }\n  newShape.splice(axis, 0, 1);\n  return reshape($x, newShape as ShapeMap[R2]);\n}\n\n/**\n * Rearranges data from depth into blocks of spatial data. More specifically,\n * this op outputs a copy of the input tensor where values from the `depth`\n * dimension are moved in spatial blocks to the `height` and `width` dimensions.\n * The attr `blockSize` indicates the input block size and how the data is\n * moved.\n *\n *  - Chunks of data of size `blockSize * blockSize` from depth are rearranged\n * into non-overlapping blocks of size `blockSize x blockSize`\n *\n *  - The width the output tensor is `inputWidth * blockSize`, whereas the\n * height is `inputHeight * blockSize`\n *\n *  - The Y, X coordinates within each block of the output image are determined\n * by the high order component of the input channel index\n *\n *  - The depth of the input tensor must be divisible by `blockSize *\n * blockSize`\n *\n * The `dataFormat` attr specifies the layout of the input and output tensors\n * with the following options: \"NHWC\": [ `batch, height, width, channels` ]\n * \"NCHW\": [ `batch, channels, height, width` ]\n *\n * ```js\n * const x = tf.tensor4d([1, 2, 3, 4], [1, 1, 1, 4]);\n * const blockSize = 2;\n * const dataFormat = \"NHWC\";\n *\n * tf.depthToSpace(x, blockSize, dataFormat).print();\n * ```\n *\n * @param x The input tensor of rank 4\n * @param blockSIze  An `int` that is `>= 2`. The size of the spatial block\n * @param dataFormat An optional string from: \"NHWC\", \"NCHW\". Defaults to \"NHWC\"\n */\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\nfunction depthToSpace_(\n    x: Tensor4D|TensorLike4D, blockSize: number,\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC'): Tensor4D {\n  const $x = convertToTensor(x, 'x', 'depthToSpace') as Tensor4D;\n\n  const inputHeight = (dataFormat === 'NHWC') ? $x.shape[1] : $x.shape[2];\n  const inputWidth = (dataFormat === 'NHWC') ? $x.shape[2] : $x.shape[3];\n  const inputDepth = (dataFormat === 'NHWC') ? $x.shape[3] : $x.shape[1];\n\n  util.assert(\n      inputHeight * blockSize >= 0,\n      () => `Negative dimension size caused by overflow when multiplying\n      ${inputHeight} and ${blockSize}  for depthToSpace with input shape\n      ${$x.shape}`);\n\n  util.assert(\n      inputWidth * blockSize >= 0,\n      () => `Negative dimension size caused by overflow when multiplying\n      ${inputWidth} and ${blockSize} for depthToSpace with input shape\n          ${$x.shape}`);\n\n  util.assert(\n      (inputDepth % (blockSize * blockSize) === 0),\n      () => `Dimension size must be evenly divisible by ${\n          blockSize * blockSize} but is ${\n          inputDepth} for depthToSpace with input shape ${$x.shape}`);\n\n  return ENGINE.runKernelFunc(\n      backend => backend.depthToSpace($x, blockSize, dataFormat), {$x});\n}\n\n/**\n * Computes the difference between two lists of numbers.\n *\n * Given a Tensor `x` and a Tensor `y`, this operation returns a Tensor `out`\n * that represents all values that are in `x` but not in `y`. The returned\n * Tensor `out` is sorted in the same order that the numbers appear in `x`\n * (duplicates are preserved). This operation also returns a Tensor indices that\n * represents the position of each out element in `x`. In other words:\n *\n * `out[i] = x[idx[i]] for i in [0, 1, ..., out.length - 1]`\n *\n * ```js\n * const x = [1, 2, 3, 4, 5, 6];\n * const y = [1, 3, 5];\n *\n * const [out, indices] = await tf.setdiff1dAsync(x, y);\n * out.print(); // [2, 4, 6]\n * indices.print(); // [1, 3, 5]\n * ```\n *\n * @param x 1-D Tensor. Values to keep.\n * @param y 1-D Tensor. Must have the same type as x. Values to exclude in the\n *     output.\n * @returns Promise of Tensor tuple [out, indices].\n *  out: Tensor with the same type as x.\n *  indices: A Tensor of type int32.\n */\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\nasync function setdiff1dAsync_(\n    x: Tensor|TensorLike, y: Tensor|TensorLike): Promise<[Tensor, Tensor]> {\n  const $x = convertToTensor(x, 'x', 'setdiff1d');\n  const $y = convertToTensor(y, 'y', 'setdiff1d');\n\n  util.assert(\n      $x.dtype === $y.dtype,\n      () => `x and y should have the same dtype, but got x (${\n          $x.dtype}) and y (${$y.dtype}).`);\n\n  util.assert(\n      $x.rank === 1, () => `x should be 1D tensor, but got x (${$x.shape}).`);\n\n  util.assert(\n      $y.rank === 1, () => `y should be 1D tensor, but got y (${$y.shape}).`);\n\n  const xVals = await $x.data();\n  const yVals = await $y.data();\n  const ySet = new Set(yVals);\n\n  let outputSize = 0;\n  for (let i = 0; i < xVals.length; i++) {\n    if (!ySet.has(xVals[i])) {\n      outputSize++;\n    }\n  }\n\n  const buffer = new TensorBuffer([outputSize], $x.dtype);\n  const indices = new TensorBuffer([outputSize], 'int32');\n  for (let i = 0, p = 0; i < xVals.length; i++) {\n    if (!ySet.has(xVals[i])) {\n      buffer.values[p] = xVals[i];\n      indices.values[p] = i;\n      p++;\n    }\n  }\n  return [buffer.toTensor(), indices.toTensor()];\n}\n\n/**\n * Creates an empty `tf.TensorBuffer` with the specified `shape` and `dtype`.\n *\n * The values are stored in CPU as `TypedArray`. Fill the buffer using\n * `buffer.set()`, or by modifying directly `buffer.values`.\n *\n * When done, call `buffer.toTensor()` to get an immutable `tf.Tensor` with\n * those values.\n *\n * ```js\n * // Create a buffer and set values at particular indices.\n * const buffer = tf.buffer([2, 2]);\n * buffer.set(3, 0, 0);\n * buffer.set(5, 1, 0);\n *\n * // Convert the buffer back to a tensor.\n * buffer.toTensor().print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The dtype of the buffer. Defaults to 'float32'.\n * @param values The values of the buffer as `TypedArray`. Defaults to\n * zeros.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction buffer<R extends Rank, D extends DataType = 'float32'>(\n    shape: ShapeMap[R], dtype: D = 'float32' as D,\n    values?: DataTypeMap[D]): TensorBuffer<R, D> {\n  dtype = dtype || 'float32' as D;\n  util.assertNonNegativeIntegerDimensions(shape);\n  return new TensorBuffer<R, D>(shape, dtype, values);\n}\n\n/**\n * Prints information about the `tf.Tensor` including its data.\n *\n * ```js\n * const verbose = true;\n * tf.tensor2d([1, 2, 3, 4], [2, 2]).print(verbose);\n * ```\n * @param x The tensor to be printed.\n * @param verbose Whether to print verbose information about the ` Tensor`,\n * including dtype and size.\n */\n/** @doc {heading: 'Tensors', subheading: 'Creation'} */\nfunction print<T extends Tensor>(x: T, verbose = false): void {\n  console.log(x.toString(verbose));\n}\n\nexport {\n  buffer,  // Not wrapped in op() since no tensors.\n  print    // Not wrapped in op() since no need to increase stack trace.\n};\n\nexport const batchToSpaceND = op({batchToSpaceND_});\nexport const broadcastTo = op({broadcastTo_});\nexport const cast = op({cast_});\nexport const clone = op({clone_});\nexport const cumsum = op({cumsum_});\nexport const depthToSpace = op({depthToSpace_});\nexport const expandDims = op({expandDims_});\nexport const eye = op({eye_});\nexport const multinomial = op({multinomial_});\nexport const oneHot = op({oneHot_});\nexport const pad = op({pad_});\nexport const pad1d = op({pad1d_});\nexport const pad2d = op({pad2d_});\nexport const pad3d = op({pad3d_});\nexport const pad4d = op({pad4d_});\nexport const rand = op({rand_});\nexport const randomNormal = op({randomNormal_});\nexport const randomGamma = op({randomGamma_});\nexport const randomUniform = op({randomUniform_});\nexport const reshape = op({reshape_});\nexport const spaceToBatchND = op({spaceToBatchND_});\nexport const squeeze = op({squeeze_});\nexport const stack = op({stack_});\nexport const tile = op({tile_});\nexport const truncatedNormal = op({truncatedNormal_});\nexport const unstack = op({unstack_});\nexport const setdiff1dAsync = setdiff1dAsync_;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Gets the new shape of the input Tensor after it's been reshaped\n * to:\n * [blockShape[0], ..., blockShape[M-1], batch / prod(blockShape),\n * inputShape[1], ..., inputShape[N-1]]\n *\n * See step 1: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getReshaped(\n    inputShape: number[], blockShape: number[], prod: number,\n    batchToSpace = true): number[] {\n  let reshaped: number[] = [];\n  if (batchToSpace) {\n    reshaped = reshaped.concat(blockShape.slice(0));\n    reshaped.push(inputShape[0] / prod);\n    reshaped = reshaped.concat(inputShape.slice(1));\n  } else {\n    reshaped = reshaped.concat(inputShape[0]);\n    const spatialLength = blockShape.length;\n    for (let i = 0; i < spatialLength; ++i) {\n      reshaped =\n          reshaped.concat([inputShape[i + 1] / blockShape[i], blockShape[i]]);\n    }\n    reshaped = reshaped.concat(inputShape.slice(spatialLength + 1));\n  }\n  return reshaped;\n}\n\n/**\n * Gets the permutation that will transpose the dimensions of the\n * reshaped tensor to shape:\n *\n * [batch / prod(block_shape),inputShape[1], blockShape[0], ...,\n * inputShape[M], blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * see step 2: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getPermuted(\n    reshapedRank: number, blockShapeRank: number,\n    batchToSpace = true): number[] {\n  const permuted = [];\n  if (batchToSpace) {\n    permuted.push(blockShapeRank);\n    for (let i = blockShapeRank + 1; i < reshapedRank; ++i) {\n      if (i <= 2 * blockShapeRank) {\n        permuted.push(i);\n        permuted.push(i - (blockShapeRank + 1));\n      } else {\n        permuted.push(i);\n      }\n    }\n  } else {\n    const permutedBeforeBatch = [];\n    const permutedAfterBatch = [];\n    for (let i = 1; i < reshapedRank; ++i) {\n      if (i >= blockShapeRank * 2 + 1 || i % 2 === 1) {\n        permutedAfterBatch.push(i);\n      } else {\n        permutedBeforeBatch.push(i);\n      }\n    }\n    permuted.push(...permutedBeforeBatch);\n    permuted.push(0);\n    permuted.push(...permutedAfterBatch);\n  }\n  return permuted;\n}\n\n/**\n * Gets the shape of the reshaped and permuted input Tensor before any cropping\n * is applied.  The new shape will be:\n *\n * [batch / prod(blockShape),inputShape[1] * blockShape[0], ...,\n * inputShape[M] * blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * See step 3: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getReshapedPermuted(\n    inputShape: number[], blockShape: number[], prod: number,\n    batchToSpace = true): number[] {\n  const reshapedPermuted = [];\n\n  if (batchToSpace) {\n    reshapedPermuted.push(inputShape[0] / prod);\n  } else {\n    reshapedPermuted.push(inputShape[0] * prod);\n  }\n\n  for (let i = 1; i < inputShape.length; ++i) {\n    if (i <= blockShape.length) {\n      if (batchToSpace) {\n        reshapedPermuted.push(blockShape[i - 1] * inputShape[i]);\n      } else {\n        reshapedPermuted.push(inputShape[i] / blockShape[i - 1]);\n      }\n    } else {\n      reshapedPermuted.push(inputShape[i]);\n    }\n  }\n\n  return reshapedPermuted;\n}\n\n/**\n * Converts the crops argument into the beginning coordinates of a slice\n * operation.\n */\nexport function getSliceBeginCoords(\n    crops: number[][], blockShape: number): number[] {\n  const sliceBeginCoords = [0];\n  for (let i = 0; i < blockShape; ++i) {\n    sliceBeginCoords.push(crops[i][0]);\n  }\n  return sliceBeginCoords;\n}\n\n/**\n * Converts the crops argument into the size of a slice operation.  When\n * combined with getSliceBeginCoords this function allows the reshaped and\n * permuted Tensor to be cropped to its final output shape of:\n *\n * inputShape[1] * blockShape[0] - crops[0,0] - crops[0,1], ...,\n * inputShape[M] * blockShape[M-1] -crops[M-1,0] -\n * crops[M-1,1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * See step 4: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getSliceSize(\n    uncroppedShape: number[], crops: number[][], blockShape: number): number[] {\n  const sliceSize = uncroppedShape.slice(0, 1);\n  for (let i = 0; i < blockShape; ++i) {\n    sliceSize.push(uncroppedShape[i + 1] - crops[i][0] - crops[i][1]);\n  }\n\n  return sliceSize;\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '../tensor';\nimport {computeStrides} from '../util';\n\n/**\n * Validate gather nd inputs.\n *\n * @param tensor The tensor contains the source values.\n * @param indices The tensor contains the indices to slice the source.\n *\n * @returns [resultShape, numUpdates, sliceSize, strides]\n */\nexport function prepareAndValidate(\n    tensor: Tensor, indices: Tensor): [number[], number, number, number[]] {\n  if (tensor.rank < 1) {\n    throw new Error(\n        'tf.gatherND() expects the input to be rank 1 or higher,' +\n        ` but the rank was ${tensor.rank}.`);\n  }\n  if (indices.rank < 1) {\n    throw new Error(\n        'tf.gatherND() expects the indices to be rank 1 or higher,' +\n        ` but the rank was ${indices.rank}.`);\n  }\n  if (indices.dtype !== 'int32') {\n    throw new Error(\n        'tf.gatherND() expects the indices to be int32 type,' +\n        ` but the dtype was ${indices.dtype}.`);\n  }\n  if (indices.shape[indices.rank - 1] > tensor.rank) {\n    throw new Error(\n        'index innermost dimension length must be <= tensor rank; saw: ' +\n        `${indices.shape[indices.rank - 1]} vs. ${tensor.rank}`);\n  }\n\n  if (tensor.size === 0) {\n    throw new Error(\n        'Requested more than 0 entries, but input is empty.' +\n        ` Input shape: ${tensor.shape}.`);\n  }\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n\n  // The result shape is\n  //   indices.shape[:-1] + params.shape[indices.shape[-1]:]\n  let nResult = 1;\n  for (let i = 0; i < indicesShape.length - 1; ++i) {\n    nResult *= indicesShape[i];\n  }\n\n  const inputShape = tensor.shape;\n\n  const resultShape = indicesShape.slice();\n  resultShape.pop();\n\n  let sliceSize = 1;\n  for (let i = sliceRank; i < tensor.rank; ++i) {\n    sliceSize *= inputShape[i];\n    resultShape.push(inputShape[i]);\n  }\n\n  const strides =\n      [...computeStrides(tensor.shape).map(stride => stride / sliceSize),\n       1].slice(0, sliceRank);\n\n  return [resultShape, nResult, sliceSize, strides];\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Inputs of size above this threshold will be parallelized by calling multiple\n * shader programs.\n */\nimport {nearestDivisor} from '../util';\n\nexport const PARALLELIZE_THRESHOLD = 30;\n\nexport interface ReduceInfo {\n  windowSize: number;\n  batchSize: number;\n  inSize: number;\n}\n\nexport function computeOptimalWindowSize(inSize: number): number {\n  if (inSize <= PARALLELIZE_THRESHOLD) {\n    return inSize;\n  }\n  return nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {TensorInfo} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {computeStrides, sizeFromShape} from '../util';\n\n/**\n * Check whether updates.shape = indices.shape[:batchDim] +\n * shape[sliceDim:]\n *\n * @param x The input tensor.\n */\nexport function validateUpdateShape(\n    shape: number[], indices: Tensor, updates: Tensor) {\n  const sliceDim = (indices.rank > 1) ? indices.shape[indices.rank - 1] : 1;\n  const batchDim = (indices.rank > 1) ? indices.rank - 1 : 1;\n\n  const shapeError = 'Must have updates.shape = indices.shape[:batchDim] + ' +\n      `shape[sliceDim:], got updates.shape: ${updates.shape}` +\n      `, indices.shape: ${indices.shape}, shape: ${shape}` +\n      `, sliceDim: ${sliceDim}, and batchDim: ${batchDim}.`;\n\n  if (updates.rank < batchDim) {\n    throw new Error(shapeError + ` update.rank < ${batchDim}. `);\n  }\n  if (shape.length < sliceDim + (updates.rank - batchDim)) {\n    throw new Error(\n        shapeError +\n        ` Output shape length < ${sliceDim + (updates.rank - batchDim)}`);\n  }\n  if (updates.rank !== batchDim + shape.length - sliceDim) {\n    throw new Error(\n        shapeError + ` update.rank != ${batchDim + shape.length - sliceDim}`);\n  }\n  for (let d = 0; d < batchDim; ++d) {\n    if (updates.shape[d] !== indices.shape[d]) {\n      throw new Error(\n          shapeError +\n          ` updates.shape[${d}] (${updates.shape[d]}) != indices.shape[${d}] (${\n              indices.shape[d]}).`);\n    }\n  }\n  for (let d = 0; d < updates.rank - batchDim; ++d) {\n    if (updates.shape[d + batchDim] !== shape[d + sliceDim]) {\n      throw new Error(\n          shapeError +\n          ` updates.shape[${d + batchDim}] (${\n              updates.shape[d + batchDim]}) != shape[${d + batchDim}] (${\n              shape[d + batchDim]})`);\n    }\n  }\n}\n\nexport interface ScatterShapeInfo {\n  sliceRank: number;\n  numUpdates: number;\n  sliceSize: number;\n  strides: number[];\n  outputSize: number;\n}\n/**\n * Validate scatter nd inputs.\n *\n * @param update The tensor contains the update values.\n * @param indices The tensor contains the indices for the update values.\n * @param shape The shape of the output tensor.\n */\nexport function validateInput(\n    updates: Tensor, indices: Tensor, shape: number[]) {\n  if (indices.rank < 1) {\n    throw new Error(\n        'tf.scatterND() expects the indices to be rank 1 or higher,' +\n        ` but the rank was ${indices.rank}.`);\n  }\n  if (updates.rank < 1) {\n    throw new Error(\n        'tf.scatterND() expects the updates to be rank 1 or higher,' +\n        ` but the rank was ${updates.rank}.`);\n  }\n  if (indices.dtype !== 'int32') {\n    throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${\n        indices.dtype}`);\n  }\n  if (shape.length < 1) {\n    throw new Error(\n        `Output rank must be greater or equal to 1, but got shape: ${shape}`);\n  }\n\n  if (shape.length === 0) {\n    if (indices.size === 0) {\n      throw new Error(`Indices specified for empty output. indices shape: ${\n          indices.shape}`);\n    }\n    if (updates.size === 0) {\n      throw new Error(`Updates specified for empty output. updates shape: ${\n          updates.shape}`);\n    }\n  }\n\n  validateUpdateShape(shape, indices, updates);\n}\n\n/**\n * Calculate the shape information for the output.\n *\n * @param update The tensor contains the update values.\n * @param indices The tensor contains the indices for the update values.\n * @param shape The shape of the output tensor.\n *\n * @returns ScatterShapeInfo\n */\nexport function calculateShapes(\n    updates: TensorInfo, indices: TensorInfo,\n    shape: number[]): ScatterShapeInfo {\n  // Calculate the number of dimensions in indices\n  const indicesRank = indices.shape.length;\n  const sliceRank = (indicesRank > 1) ? indices.shape[indicesRank - 1] : 1;\n\n  // Calculate the number of elements that make up each slice of our updated\n  // tensor. This allows us to work with flattened tensors and copy over whole\n  // slices at a time.\n  const totalNd = shape.length;\n\n  let sliceSize = 1;\n  for (let i = sliceRank; i < totalNd; ++i) {\n    sliceSize *= shape[i];\n  }\n\n  const safeSliceDim = (sliceRank < 1) ? 1 : sliceRank;\n  const numUpdates = sizeFromShape(indices.shape) / safeSliceDim;\n\n  const strides = [...computeStrides(shape.slice(0, sliceRank)), 1];\n  const outputSize = sizeFromShape(shape);\n  return {sliceRank, numUpdates, sliceSize, strides, outputSize};\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport * as util from '../util';\n\nexport function assertParamsValid(\n    input: Tensor, begin: number[], size: number[]): void {\n  util.assert(\n      input.rank === begin.length,\n      () => `Error in slice${input.rank}D: Length of begin ${begin} must ` +\n          `match the rank of the array (${input.rank}).`);\n  util.assert(\n      input.rank === size.length,\n      () => `Error in slice${input.rank}D: Length of size ${size} must ` +\n          `match the rank of the array (${input.rank}).`);\n\n  for (let i = 0; i < input.rank; ++i) {\n    util.assert(\n        begin[i] + size[i] <= input.shape[i],\n        () => `Error in slice${input.rank}D: begin[${i}] + size[${i}] ` +\n            `(${begin[i] + size[i]}) would overflow input.shape[${i}] (${\n                  input.shape[i]})`);\n  }\n}\n\n/** Converts a binary mask to an array of axes. Used in stridedSlice(). */\nexport function maskToAxes(mask: number): number[] {\n  const axes = [];\n  let axis = 0;\n  while (mask > 0) {\n    if (mask & 1) {\n      axes.push(axis);\n    }\n    mask /= 2;\n    axis++;\n  }\n  return axes;\n}\n\n/** Computes the output shape given the strided slice params. */\nexport function computeOutShape(\n    begin: number[], end: number[], strides: number[]): number[] {\n  const size = [];\n  for (let axis = 0; axis < begin.length; axis++) {\n    size[axis] = Math.ceil((end[axis] - begin[axis]) / strides[axis]);\n  }\n  return size;\n}\n\nexport function startForAxis(\n    beginMask: number, startIndices: number[], strides: number[],\n    inputShape: number[], axis: number): number {\n  // Begin with the specified index\n  let start = startIndices[axis];\n  const stride = strides[axis] || 1;\n\n  // Check the axis bit from right of beginMask or the begin index is not set\n  // for the axis.\n  if (beginMask & 1 << axis || start == null) {\n    if (stride > 0) {\n      // Forward iteration - use the first element. These values will get\n      // clamped below (Note: We could have set them to 0 and axis_size-1, but\n      // use lowest() and max() to maintain symmetry with StopForAxis())\n      start = Number.MIN_SAFE_INTEGER;\n    } else {\n      // Backward iteration - use the last element.\n      start = Number.MAX_SAFE_INTEGER;\n    }\n  }\n\n  // Handle negative indices\n  const axisSize = inputShape[axis];\n  if (start < 0) {\n    start += axisSize;\n  }\n\n  // Clamping\n  start = util.clamp(0, start, axisSize - 1);\n\n  return start;\n}\n\nexport function stopForAxis(\n    endMask: number, stopIndices: number[], strides: number[],\n    inputShape: number[], axis: number): number {\n  // Begin with the specified index\n  let stop = stopIndices[axis];\n  const stride = strides[axis] || 1;\n\n  // Check the axis bit from right of endMask or if the stop index is not set\n  // for this axis.\n  if (endMask & (1 << axis) || stop == null) {\n    if (stride > 0) {\n      // Forward iteration - use the last element. These values will get\n      // clamped below\n      stop = Number.MAX_SAFE_INTEGER;\n    } else {\n      // Backward iteration - use the first element.\n      stop = Number.MIN_SAFE_INTEGER;\n    }\n  }\n\n  // Handle negative indices\n  const axisSize = inputShape[axis];\n  if (stop < 0) {\n    stop += axisSize;\n  }\n\n  // Clamping\n  // Because the end index points one past the last element, we need slightly\n  // different clamping ranges depending on the direction.\n  if (stride > 0) {\n    // Forward iteration\n    stop = util.clamp(0, stop, axisSize);\n  } else {\n    // Backward iteration\n    stop = util.clamp(-1, stop, axisSize - 1);\n  }\n\n  return stop;\n}\n\n/**\n * Returns true if the slice occupies a continous set of elements in the\n * 'flat' space.\n */\nexport function isSliceContinous(\n    shape: number[], begin: number[], size: number[]) {\n  // Index of the first axis that has size > 1.\n  let firstNonOneAxis = size.length;\n  for (let i = 0; i < size.length; i++) {\n    if (size[i] > 1) {\n      firstNonOneAxis = i;\n      break;\n    }\n  }\n\n  for (let i = firstNonOneAxis + 1; i < size.length; i++) {\n    if (begin[i] > 0 || size[i] !== shape[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function computeFlatOffset(begin: number[], strides: number[]): number {\n  let flatOffset = begin.length > 0 ? begin[begin.length - 1] : 1;\n  for (let i = 0; i < begin.length - 1; i++) {\n    flatOffset += begin[i] * strides[i];\n  }\n  return flatOffset;\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {CustomGradientFunc, ENGINE} from './engine';\nimport {Scalar, Tensor, Variable} from './tensor';\nimport {NamedTensorMap} from './tensor_types';\nimport {convertToTensor, convertToTensorArray} from './tensor_util_env';\nimport {TensorLike} from './types';\nimport * as util from './util';\n\n/**\n * Provided `f(x)`, returns another function `g(x, dy?)`, which gives the\n * gradient of `f(x)` with respect to `x`.\n *\n * If `dy` is provided, the gradient of `f(x).mul(dy).sum()` with respect to\n * `x` is computed instead. `f(x)` must take a single tensor `x` and return a\n * single tensor `y`. If `f()` takes multiple inputs, use `tf.grads` instead.\n *\n * ```js\n * // f(x) = x ^ 2\n * const f = x => x.square();\n * // f'(x) = 2x\n * const g = tf.grad(f);\n *\n * const x = tf.tensor1d([2, 3]);\n * g(x).print();\n * ```\n *\n * ```js\n * // f(x) = x ^ 3\n * const f = x => x.pow(tf.scalar(3, 'int32'));\n * // f'(x) = 3x ^ 2\n * const g = tf.grad(f);\n * // f''(x) = 6x\n * const gg = tf.grad(g);\n *\n * const x = tf.tensor1d([2, 3]);\n * gg(x).print();\n * ```\n *\n * @param f The function f(x), to compute gradient for.\n */\n/** @doc {heading: 'Training', subheading: 'Gradients'} */\nfunction grad(f: (x: Tensor) => Tensor): (\n    x: TensorLike|Tensor, dy?: TensorLike|Tensor) => Tensor {\n  util.assert(\n      util.isFunction(f), () => 'The f passed in grad(f) must be a function');\n  return (x: TensorLike|Tensor, dy?: TensorLike|Tensor): Tensor => {\n    // x can be of any dtype, thus null as the last argument.\n    const $x = convertToTensor(x, 'x', 'tf.grad', null);\n    const $dy: Tensor =\n        (dy != null) ? convertToTensor(dy, 'dy', 'tf.grad') : null;\n    return ENGINE.tidy(() => {\n      const {value, grads} = ENGINE.gradients(() => f($x), [$x], $dy);\n      if ($dy != null) {\n        util.assertShapesMatch(\n            value.shape, $dy.shape,\n            'The shape of dy passed in grad(f)(x, dy) must match the shape ' +\n                'returned by f(x)');\n      }\n      checkGrads(grads);\n      return grads[0];\n    });\n  };\n}\n\n/**\n * Provided `f(x1, x2,...)`, returns another function `g([x1, x2,...], dy?)`,\n * which gives an array of gradients of `f()` with respect to each input\n * [`x1`,`x2`,...].\n *\n * If `dy` is passed when calling `g()`, the gradient of\n * `f(x1,...).mul(dy).sum()` with respect to each input is computed instead.\n * The provided `f` must take one or more tensors and return a single tensor\n * `y`. If `f()` takes a single input, we recommend using `tf.grad` instead.\n *\n * ```js\n * // f(a, b) = a * b\n * const f = (a, b) => a.mul(b);\n * // df / da = b, df / db = a\n * const g = tf.grads(f);\n *\n * const a = tf.tensor1d([2, 3]);\n * const b = tf.tensor1d([-2, -3]);\n * const [da, db] = g([a, b]);\n * console.log('da');\n * da.print();\n * console.log('db');\n * db.print();\n * ```\n *\n * @param f The function `f(x1, x2,...)` to compute gradients for.\n */\n/** @doc {heading: 'Training', subheading: 'Gradients'} */\nfunction grads(f: (...args: Tensor[]) => Tensor): (\n    args: Array<Tensor|TensorLike>, dy?: Tensor|TensorLike) => Tensor[] {\n  util.assert(\n      util.isFunction(f), () => 'The f passed in grads(f) must be a function');\n  return (args: Array<Tensor|TensorLike>, dy?: Tensor|TensorLike): Tensor[] => {\n    util.assert(\n        Array.isArray(args),\n        () => 'The args passed in grads(f)(args) must be an array ' +\n            'of `Tensor`s or `TensorLike`s');\n    // args can be of any dtype, thus null as the last argument.\n    const $args = convertToTensorArray(args, 'args', 'tf.grads', null);\n    const $dy: Tensor =\n        (dy != null) ? convertToTensor(dy, 'dy', 'tf.grads') : null;\n    return ENGINE.tidy(() => {\n      const {value, grads} = ENGINE.gradients(() => f(...$args), $args, $dy);\n      if ($dy != null) {\n        util.assertShapesMatch(\n            value.shape, $dy.shape,\n            'The shape of dy passed in grads(f)([x1,...], dy) must ' +\n                'match the shape returned by f([x1,...])');\n      }\n      checkGrads(grads);\n      return grads;\n    });\n  };\n}\n\n/**\n * Like `tf.grad`, but also returns the value of `f()`. Useful when `f()`\n * returns a metric you want to show.\n *\n * The result is a rich object with the following properties:\n * - grad: The gradient of `f(x)` w.r.t `x` (result of `tf.grad`).\n * - value: The value returned by `f(x)`.\n *\n * ```js\n * // f(x) = x ^ 2\n * const f = x => x.square();\n * // f'(x) = 2x\n * const g = tf.valueAndGrad(f);\n *\n * const x = tf.tensor1d([2, 3]);\n * const {value, grad} = g(x);\n *\n * console.log('value');\n * value.print();\n * console.log('grad');\n * grad.print();\n * ```\n */\n/** @doc {heading: 'Training', subheading: 'Gradients'} */\nfunction valueAndGrad<I extends Tensor, O extends Tensor>(f: (x: I) => O): (\n    x: I, dy?: O) => {\n  value: O;\n  grad: I;\n} {\n  util.assert(\n      util.isFunction(f),\n      () => 'The f passed in valueAndGrad(f) must be a function');\n  return (x: I, dy?: O) => {\n    util.assert(\n        x instanceof Tensor,\n        () => 'The x passed in valueAndGrad(f)(x) must be a tensor');\n    util.assert(\n        dy == null || dy instanceof Tensor,\n        () => 'The dy passed in valueAndGrad(f)(x, dy) must be a tensor');\n    const {grads, value} = ENGINE.gradients(() => f(x), [x], dy);\n    checkGrads(grads);\n    return {grad: grads[0] as I, value};\n  };\n}\n\n/**\n * Like `tf.grads`, but returns also the value of `f()`. Useful when `f()`\n * returns a metric you want to show.\n *\n * The result is a rich object with the following properties:\n * - grads: The gradients of `f()` w.r.t each input (result of `tf.grads`).\n * - value: The value returned by `f(x)`.\n *\n * ```js\n * // f(a, b) = a * b\n * const f = (a, b) => a.mul(b);\n * // df/da = b, df/db = a\n * const g = tf.valueAndGrads(f);\n *\n * const a = tf.tensor1d([2, 3]);\n * const b = tf.tensor1d([-2, -3]);\n * const {value, grads} = g([a, b]);\n *\n * const [da, db] = grads;\n *\n * console.log('value');\n * value.print();\n *\n * console.log('da');\n * da.print();\n * console.log('db');\n * db.print();\n * ```\n */\n/** @doc {heading: 'Training', subheading: 'Gradients'} */\nfunction valueAndGrads<O extends Tensor>(f: (...args: Tensor[]) => O): (\n    args: Tensor[], dy?: O) => {\n  grads: Tensor[];\n  value: O;\n} {\n  util.assert(\n      util.isFunction(f),\n      () => 'The f passed in valueAndGrads(f) must be a function');\n  return (args: Tensor[], dy?: O) => {\n    util.assert(\n        Array.isArray(args) && args.every(arg => arg instanceof Tensor),\n        () => 'The args passed in valueAndGrads(f)(args) must be array of ' +\n            'tensors');\n    util.assert(\n        dy == null || dy instanceof Tensor,\n        () => 'The dy passed in valueAndGrads(f)(args, dy) must be a tensor');\n    const res = ENGINE.gradients(() => f(...args), args, dy);\n    if (dy != null) {\n      util.assertShapesMatch(\n          res.value.shape, dy.shape,\n          'The shape of dy passed in valueAndGrads(f)([x1,...], dy) must ' +\n              'match the shape returned by f([x1,...])');\n    }\n    checkGrads(res.grads);\n    return res;\n  };\n}\n\n/**\n * Computes and returns the gradient of f(x) with respect to the list of\n * trainable variables provided by `varList`. If no list is provided, it\n * defaults to all trainable variables.\n *\n * ```js\n * const a = tf.variable(tf.tensor1d([3, 4]));\n * const b = tf.variable(tf.tensor1d([5, 6]));\n * const x = tf.tensor1d([1, 2]);\n *\n * // f(a, b) = a * x ^ 2 + b * x\n * const f = () => a.mul(x.square()).add(b.mul(x)).sum();\n * // df/da = x ^ 2, df/db = x\n * const {value, grads} = tf.variableGrads(f);\n *\n * Object.keys(grads).forEach(varName => grads[varName].print());\n * ```\n *\n * @param f The function to execute. f() should return a scalar.\n * @param varList The list of variables to compute the gradients with respect\n *     to. Defaults to all trainable variables.\n * @returns An object with the following keys and values:\n *   - `value`: The value of the function `f`.\n *   - `grads`: A map from the names of the variables to the gradients.\n *     If the `varList` argument is provided explicitly and contains a subset of\n *     non-trainable variables, this map in the return value will contain keys\n *     that map the names of the non-trainable variables to `null`.\n */\n/** @doc {heading: 'Training', subheading: 'Gradients'} */\nfunction variableGrads(f: () => Scalar, varList?: Variable[]):\n    {value: Scalar, grads: NamedTensorMap} {\n  util.assert(\n      util.isFunction(f),\n      () => 'The f passed in variableGrads(f) must be a function');\n  util.assert(\n      varList == null ||\n          Array.isArray(varList) && varList.every(v => v instanceof Variable),\n      () =>\n          'The varList passed in variableGrads(f, varList) must be an array ' +\n          'of variables');\n\n  const specifiedVarList = varList != null;\n  if (!specifiedVarList) {\n    // Get all of the trainable variables.\n    varList = [];\n    for (const varName in ENGINE.registeredVariables) {\n      varList.push(ENGINE.registeredVariables[varName]);\n    }\n  }\n\n  const specifiedNonTrainable: Variable[] =\n      specifiedVarList ? varList.filter(variable => !variable.trainable) : null;\n\n  // Prune non-trainable variables.\n  const originalVarCount = varList.length;\n  varList = varList.filter(variable => variable.trainable);\n  util.assert(\n      varList.length > 0,\n      () => `variableGrads() expects at least one of the input variables to ` +\n          `be trainable, but none of the ${originalVarCount} variables is ` +\n          `trainable.`);\n\n  const allowNoGradients = true;\n  const {value, grads} = ENGINE.gradients(f, varList, null, allowNoGradients);\n\n  util.assert(\n      grads.some(g => g != null),\n      () => 'Cannot find a connection between any variable and the result of ' +\n          'the loss function y=f(x). Please make sure the operations that ' +\n          'use variables are inside the function f passed to minimize().');\n  util.assert(\n      value.rank === 0,\n      () => `The f passed in variableGrads(f) must return a scalar, but it ` +\n          `returned a rank-${value.rank} tensor`);\n\n  const namedGrads: NamedTensorMap = {};\n  varList.forEach((v, i) => {\n    if (grads[i] != null) {\n      namedGrads[v.name] = grads[i];\n    }\n  });\n  if (specifiedNonTrainable != null) {\n    // If varList is explicitly provided and contains non-trainable values,\n    // add them to the returned gradients with `null` values.\n    specifiedNonTrainable.forEach(v => namedGrads[v.name] = null);\n  }\n  return {value, grads: namedGrads};\n}\n\n/**\n * Overrides the gradient computation of a function `f`.\n *\n * Takes a function\n * `f(...inputs, save) => {value: Tensor, gradFunc: (dy, saved) => Tensor[]}`\n * and returns another function `g(...inputs)` which takes the same inputs as\n * `f`. When called, `g` returns `f().value`. In backward mode, custom gradients\n * with respect to each input of `f` are computed using `f().gradFunc`.\n *\n * The `save` function passsed to `f` should be used for saving tensors needed\n * in the gradient. And the `saved` passed to the `gradFunc` is a\n * `NamedTensorMap`, which contains those saved tensor.\n *\n * ```js\n * const customOp = tf.customGrad((x, save) => {\n *   // Save x to make sure it's available later for the gradient.\n *   save([x]);\n *   // Override gradient of our custom x ^ 2 op to be dy * abs(x);\n *   return {\n *     value: x.square(),\n *     // Note `saved.x` which points to the `x` we saved earlier.\n *     gradFunc: (dy, saved) => [dy.mul(saved[0].abs())]\n *   };\n * });\n *\n * const x = tf.tensor1d([-1, -2, 3]);\n * const dx = tf.grad(x => customOp(x));\n *\n * console.log(`f(x):`);\n * customOp(x).print();\n * console.log(`f'(x):`);\n * dx(x).print();\n * ```\n *\n * @param f The function to evaluate in forward mode, which should return\n *     `{value: Tensor, gradFunc: (dy, saved) => Tensor[]}`, where `gradFunc`\n *     returns the custom gradients of `f` with respect to its inputs.\n */\n/** @doc {heading: 'Training', subheading: 'Gradients'} */\nfunction customGrad<T extends Tensor>(f: CustomGradientFunc<T>):\n    (...args: Tensor[]) => T {\n  return ENGINE.customGrad(f);\n}\n\nfunction checkGrads(grads: Tensor[]) {\n  const numNullGradients = grads.filter(g => g == null).length;\n  if (numNullGradients > 0) {\n    throw new Error(\n        `Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.`);\n  }\n}\n\nexport {\n  customGrad,\n  variableGrads,\n  valueAndGrad,\n  valueAndGrads,\n  grad,\n  grads,\n};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {customGrad} from '../gradients';\nimport {Tensor} from '../tensor';\nimport {GradSaveFunc} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * Computes the softmax normalized vector given the logits.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n *\n * a.softmax().print();  // or tf.softmax(a)\n * ```\n *\n * ```js\n * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);\n *\n * a.softmax().print();  // or tf.softmax(a)\n * ```\n *\n * @param logits The logits array.\n * @param dim The dimension softmax would be performed on. Defaults to `-1`\n *     which indicates the last dimension.\n */\n/** @doc {heading: 'Operations', subheading: 'Normalization'} */\nfunction softmax_<T extends Tensor>(logits: T|TensorLike, dim = -1): T {\n  const $logits = convertToTensor(logits, 'logits', 'softmax');\n\n  if (dim === -1) {\n    dim = $logits.rank - 1;\n  }\n  if (dim !== $logits.rank - 1) {\n    throw Error(\n        'Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${$logits.rank} and dim was ${dim}`);\n  }\n\n  const customOp = customGrad((logits: Tensor, save: GradSaveFunc) => {\n    // Do it in log space for numerical stability.\n    // exp(X - logSumExp(X))\n    const keepDims = true;\n    const lse = logits.logSumExp([dim], keepDims);\n    const logResult = logits.toFloat().sub(lse);\n    const y = logResult.exp() as T;\n    save([y]);\n    const gradFunc = (dy: T, saved: Tensor[]) => {\n      const [y] = saved;\n      const dyTimesY = dy.mul(y);\n      const keepDims = true;\n      return dyTimesY.sub(dyTimesY.sum([dim], keepDims).mul(y));\n    };\n\n    return {value: y, gradFunc};\n  });\n\n  return customOp($logits);\n}\n\n/**\n * Computes the log softmax.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n *\n * a.logSoftmax().print();  // or tf.logSoftmax(a)\n * ```\n *\n * ```js\n * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);\n *\n * a.logSoftmax().print();  // or tf.logSoftmax(a)\n * ```\n *\n * @param logits The logits array.\n * @param axis The dimension softmax would be performed on. Defaults to `-1`\n *     which indicates the last dimension.\n */\n/** @doc {heading: 'Operations', subheading: 'Normalization'} */\nfunction logSoftmax_<T extends Tensor>(logits: T|TensorLike, axis = -1): T {\n  const $logits = convertToTensor(logits, 'logits', 'logSoftmax');\n\n  if (axis === -1) {\n    axis = $logits.rank - 1;\n  }\n  if (axis !== $logits.rank - 1) {\n    throw Error(\n        'Log Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${$logits.rank} and axis was ${axis}`);\n  }\n\n  const customOp = customGrad((logits: Tensor, save: GradSaveFunc) => {\n    const keepDims = true;\n    const xMax = logits.max(axis, true);\n    const shifted = logits.sub(xMax);\n    const value =\n        shifted.toFloat().sub(shifted.exp().sum(axis, keepDims).log());\n    save([value]);\n    const gradFunc = (dy: T, saved: Tensor[]) => {\n      const [value] = saved;\n      const softmax = value.exp();\n      return dy.sub(dy.sum(axis, keepDims).mul(softmax));\n    };\n\n    return {value, gradFunc};\n  });\n\n  return customOp($logits) as T;\n}\n\nexport const softmax = op({softmax_});\nexport const logSoftmax = op({logSoftmax_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Conv2DInfo, Conv3DInfo} from '../ops/conv_util';\nimport {FusedBatchMatMulConfig, FusedConv2DConfig} from '../ops/fused_util';\nimport {Backend, DataId, Scalar, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, Tensor5D} from '../tensor';\nimport {BackendValues, DataType, Rank, ShapeMap} from '../types';\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\n// Required information for all backends.\nexport interface BackendTimingInfo {\n  kernelMs: number;\n  getExtraProfileInfo?(): string;  // a field for additional timing information\n                                   // e.g. packing / unpacking for WebGL backend\n}\n\nexport interface TensorStorage {\n  read(dataId: DataId): Promise<BackendValues>;\n  readSync(dataId: DataId): BackendValues;\n  disposeData(dataId: DataId): void;\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId;\n  move(dataId: DataId, values: BackendValues, shape: number[], dtype: DataType):\n      void;\n  memory(): {unreliable: boolean;};  // Backend-specific information.\n  /** Returns number of data ids currently in the storage. */\n  numDataIds(): number;\n}\n\n/** Convenient class for storing tensor-related data. */\nexport class DataStorage<T> {\n  private data = new WeakMap<DataId, T>();\n  private dataIdsCount = 0;\n\n  constructor(private backend: KernelBackend, private dataMover: DataMover) {}\n\n  get(dataId: DataId) {\n    if (!this.data.has(dataId)) {\n      this.dataMover.moveData(this.backend, dataId);\n    }\n    return this.data.get(dataId);\n  }\n\n  set(dataId: DataId, value: T): void {\n    this.dataIdsCount++;\n    this.data.set(dataId, value);\n  }\n\n  has(dataId: DataId): boolean {\n    return this.data.has(dataId);\n  }\n\n  delete(dataId: DataId): boolean {\n    this.dataIdsCount--;\n    return this.data.delete(dataId);\n  }\n\n  numDataIds(): number {\n    return this.dataIdsCount;\n  }\n}\n\nexport interface DataMover {\n  /**\n   * To be called by backends whenever they see a dataId that they don't own.\n   * Upon calling this method, the mover will fetch the tensor from another\n   * backend and register it with the current active backend.\n   */\n  moveData(backend: KernelBackend, dataId: DataId): void;\n}\n\nexport interface BackendTimer {\n  time(f: () => void): Promise<BackendTimingInfo>;\n}\n\n/**\n * The interface that defines the kernels that should be implemented when\n * adding a new backend. New backends don't need to implement every one of the\n * methods, this can be done gradually (throw an error for unimplemented\n * methods).\n */\nexport class KernelBackend implements TensorStorage, Backend, BackendTimer {\n  time(f: () => void): Promise<BackendTimingInfo> {\n    return notYetImplemented('time');\n  }\n  read(dataId: object): Promise<BackendValues> {\n    return notYetImplemented('read');\n  }\n  readSync(dataId: object): BackendValues {\n    return notYetImplemented('readSync');\n  }\n  numDataIds(): number {\n    return notYetImplemented('numDataIds');\n  }\n  disposeData(dataId: object): void {\n    return notYetImplemented('disposeData');\n  }\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId {\n    return notYetImplemented('write');\n  }\n  move(dataId: DataId, values: BackendValues, shape: number[], dtype: DataType):\n      void {\n    return notYetImplemented('move');\n  }\n  memory(): {unreliable: boolean; reasons?: string[]} {\n    return notYetImplemented('memory');\n  }\n  /** Returns the highest precision for floats in bits (e.g. 16 or 32) */\n  floatPrecision(): 16|32 {\n    return notYetImplemented('floatPrecision');\n  }\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  batchMatMul(\n      a: Tensor3D, b: Tensor3D, transposeA: boolean,\n      transposeB: boolean): Tensor3D {\n    return notYetImplemented('batchMatMul');\n  }\n\n  fusedBatchMatMul(\n      {a, b, transposeA, transposeB, bias, activation, preluActivationWeights}:\n          FusedBatchMatMulConfig): Tensor3D {\n    return notYetImplemented('fusedBatchMatMul');\n  }\n\n  slice<T extends Tensor>(x: T, begin: number[], size: number[]): T {\n    return notYetImplemented('slice');\n  }\n  stridedSlice<T extends Tensor>(\n      x: T, begin: number[], end: number[], strides: number[]): T {\n    return notYetImplemented('stridedSlice');\n  }\n  unstack(x: Tensor, axis: number): Tensor[] {\n    return notYetImplemented('unstack');\n  }\n  reverse<T extends Tensor>(a: T, axis: number[]): T {\n    return notYetImplemented('reverse');\n  }\n\n  concat(tensors: Tensor[], axis: number): Tensor {\n    return notYetImplemented('concat');\n  }\n\n  neg<T extends Tensor>(a: T): T {\n    return notYetImplemented('neg');\n  }\n\n  add(a: Tensor, b: Tensor): Tensor {\n    return notYetImplemented('add');\n  }\n  addN<T extends Tensor>(tensors: T[]): T {\n    return notYetImplemented('addN');\n  }\n  subtract(a: Tensor, b: Tensor): Tensor {\n    return notYetImplemented('subtract');\n  }\n  multiply(a: Tensor, b: Tensor): Tensor {\n    return notYetImplemented('multiply');\n  }\n  realDivide(a: Tensor, b: Tensor): Tensor {\n    return notYetImplemented('realDivide');\n  }\n  floorDiv(a: Tensor, b: Tensor): Tensor {\n    return notYetImplemented('floorDiv');\n  }\n\n  sum(x: Tensor, axes: number[]): Tensor {\n    return notYetImplemented('sum');\n  }\n  prod(x: Tensor, axes: number[]): Tensor {\n    return notYetImplemented('prod');\n  }\n\n  unsortedSegmentSum<T extends Tensor>(\n      x: T, segmentIds: Tensor1D, numSegments: number): Tensor {\n    return notYetImplemented('unsortedSegmentSum');\n  }\n\n  argMin(x: Tensor, axis: number): Tensor {\n    return notYetImplemented('argMin');\n  }\n  argMax(x: Tensor, axis: number): Tensor {\n    return notYetImplemented('argMax');\n  }\n\n  equal(a: Tensor, b: Tensor): Tensor {\n    return notYetImplemented('equal');\n  }\n  notEqual(a: Tensor, b: Tensor): Tensor {\n    return notYetImplemented('notEqual');\n  }\n\n  less(a: Tensor, b: Tensor): Tensor {\n    return notYetImplemented('less');\n  }\n  lessEqual(a: Tensor, b: Tensor): Tensor {\n    return notYetImplemented('lessEqual');\n  }\n\n  greater(a: Tensor, b: Tensor): Tensor {\n    return notYetImplemented('greater');\n  }\n  greaterEqual(a: Tensor, b: Tensor): Tensor {\n    return notYetImplemented('greaterEqual');\n  }\n\n  logicalNot<T extends Tensor>(a: T): T {\n    return notYetImplemented('logicalNot');\n  }\n  logicalAnd(a: Tensor, b: Tensor): Tensor {\n    return notYetImplemented('logicalAnd');\n  }\n  logicalOr(a: Tensor, b: Tensor): Tensor {\n    return notYetImplemented('logicalOr');\n  }\n\n  where(condition: Tensor): Tensor2D {\n    return notYetImplemented('where');\n  }\n  select(condition: Tensor, a: Tensor, b: Tensor): Tensor {\n    return notYetImplemented('select');\n  }\n\n  topk<T extends Tensor>(x: T, k: number, sorted: boolean): [T, T] {\n    return notYetImplemented('topk');\n  }\n\n  min(x: Tensor, axes: number[]): Tensor {\n    return notYetImplemented('min');\n  }\n  minimum(a: Tensor, b: Tensor): Tensor {\n    return notYetImplemented('minimum');\n  }\n\n  mod(a: Tensor, b: Tensor): Tensor {\n    return notYetImplemented('mod');\n  }\n\n  max(x: Tensor, axes: number[]): Tensor {\n    return notYetImplemented('max');\n  }\n  maximum(a: Tensor, b: Tensor): Tensor {\n    return notYetImplemented('maximum');\n  }\n\n  all(x: Tensor, axes: number[]): Tensor {\n    return notYetImplemented('all');\n  }\n  any(x: Tensor, axes: number[]): Tensor {\n    return notYetImplemented('any');\n  }\n\n  squaredDifference(a: Tensor, b: Tensor): Tensor {\n    return notYetImplemented('squaredDifference');\n  }\n\n  ceil<T extends Tensor>(x: T): T {\n    return notYetImplemented('ceil');\n  }\n  floor<T extends Tensor>(x: T): T {\n    return notYetImplemented('floor');\n  }\n  round<T extends Tensor>(x: T): T {\n    return notYetImplemented('round');\n  }\n\n  sign<T extends Tensor>(x: T): T {\n    return notYetImplemented('sign');\n  }\n\n  isNaN<T extends Tensor>(x: T): T {\n    return notYetImplemented('isNaN');\n  }\n  isInf<T extends Tensor>(x: T): T {\n    return notYetImplemented('isInf');\n  }\n  isFinite<T extends Tensor>(x: T): T {\n    return notYetImplemented('isFinite');\n  }\n\n  pow<T extends Tensor>(a: T, b: Tensor): T {\n    return notYetImplemented('pow');\n  }\n  exp<T extends Tensor>(x: T): T {\n    return notYetImplemented('exp');\n  }\n  expm1<T extends Tensor>(x: T): T {\n    return notYetImplemented('expm1');\n  }\n  log<T extends Tensor>(x: T): T {\n    return notYetImplemented('log');\n  }\n  log1p<T extends Tensor>(x: T): T {\n    return notYetImplemented('log1p');\n  }\n  sqrt<T extends Tensor>(x: T): T {\n    return notYetImplemented('sqrt');\n  }\n  rsqrt<T extends Tensor>(x: T): T {\n    return notYetImplemented('rsqrt');\n  }\n  square<T extends Tensor>(x: T): T {\n    return notYetImplemented('square');\n  }\n  reciprocal<T extends Tensor>(x: T): T {\n    return notYetImplemented('reciprocal');\n  }\n  relu<T extends Tensor>(x: T): T {\n    return notYetImplemented('relu');\n  }\n  relu6<T extends Tensor>(x: T): T {\n    return notYetImplemented('relu6');\n  }\n  prelu<T extends Tensor>(x: T, a: T): T {\n    return notYetImplemented('prelu');\n  }\n  elu<T extends Tensor>(x: T): T {\n    return notYetImplemented('elu');\n  }\n  eluDer<T extends Tensor>(dy: T, y: T): T {\n    return notYetImplemented('eluDer');\n  }\n  selu<T extends Tensor>(x: T): T {\n    return notYetImplemented('selu');\n  }\n  int<T extends Tensor>(x: T): T {\n    return notYetImplemented('int');\n  }\n\n  clip<T extends Tensor>(x: T, min: number, max: number): T {\n    return notYetImplemented('clip');\n  }\n\n  abs<T extends Tensor>(x: T): T {\n    return notYetImplemented('abs');\n  }\n  complexAbs<T extends Tensor>(x: T): T {\n    return notYetImplemented('complexAbs');\n  }\n\n  sigmoid<T extends Tensor>(x: T): T {\n    return notYetImplemented('sigmoid');\n  }\n\n  softplus<T extends Tensor>(x: T): T {\n    return notYetImplemented('softplus');\n  }\n\n  sin<T extends Tensor>(x: T): T {\n    return notYetImplemented('sin');\n  }\n  cos<T extends Tensor>(x: T): T {\n    return notYetImplemented('cos');\n  }\n  tan<T extends Tensor>(x: T): T {\n    return notYetImplemented('tan');\n  }\n\n  asin<T extends Tensor>(x: T): T {\n    return notYetImplemented('asin');\n  }\n  acos<T extends Tensor>(x: T): T {\n    return notYetImplemented('acos');\n  }\n  atan<T extends Tensor>(x: T): T {\n    return notYetImplemented('atan');\n  }\n  atan2<T extends Tensor>(a: T, b: T): T {\n    return notYetImplemented('atan2');\n  }\n\n  sinh<T extends Tensor>(x: T): T {\n    return notYetImplemented('sinh');\n  }\n  cosh<T extends Tensor>(x: T): T {\n    return notYetImplemented('cosh');\n  }\n  tanh<T extends Tensor>(x: T): T {\n    return notYetImplemented('tanh');\n  }\n\n  asinh<T extends Tensor>(x: T): T {\n    return notYetImplemented('asinh');\n  }\n  acosh<T extends Tensor>(x: T): T {\n    return notYetImplemented('acosh');\n  }\n  atanh<T extends Tensor>(x: T): T {\n    return notYetImplemented('atanh');\n  }\n\n  erf<T extends Tensor>(x: T): T {\n    return notYetImplemented('erf');\n  }\n\n  step<T extends Tensor>(x: T, alpha: number): T {\n    return notYetImplemented('step');\n  }\n\n  fusedConv2d(\n      {input, filter, convInfo, bias, activation, preluActivationWeights}:\n          FusedConv2DConfig): Tensor4D {\n    return notYetImplemented('fusedConv2d');\n  }\n\n  conv2d(x: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    return notYetImplemented('conv2d');\n  }\n  conv2dDerInput(dy: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    return notYetImplemented('conv2dDerInput');\n  }\n  conv2dDerFilter(x: Tensor4D, dY: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    return notYetImplemented('conv2dDerFilter');\n  }\n\n  fusedDepthwiseConv2D(\n      {input, filter, convInfo, bias, activation, preluActivationWeights}:\n          FusedConv2DConfig): Tensor4D {\n    return notYetImplemented('fusedDepthwiseConv2D');\n  }\n\n  depthwiseConv2D(input: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    return notYetImplemented('depthwiseConv2D');\n  }\n  depthwiseConv2DDerInput(dy: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    return notYetImplemented('depthwiseConv2DDerInput');\n  }\n  depthwiseConv2DDerFilter(x: Tensor4D, dY: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    return notYetImplemented('depthwiseConv2DDerFilter');\n  }\n  conv3d(x: Tensor5D, filter: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    return notYetImplemented('conv3d');\n  }\n  conv3dDerInput(dy: Tensor5D, filter: Tensor5D, convInfo: Conv3DInfo):\n      Tensor5D {\n    return notYetImplemented('conv3dDerInput');\n  }\n  conv3dDerFilter(x: Tensor5D, dY: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    return notYetImplemented('conv3dDerFilter');\n  }\n  maxPool(x: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    return notYetImplemented('maxPool');\n  }\n  maxPoolBackprop(dy: Tensor4D, x: Tensor4D, y: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    return notYetImplemented('maxPoolBackprop');\n  }\n  avgPool(x: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    return notYetImplemented('avgPool');\n  }\n  avgPoolBackprop(dy: Tensor4D, x: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    return notYetImplemented('avgPoolBackprop');\n  }\n  avgPool3d(x: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    return notYetImplemented('avgPool3d');\n  }\n  avgPool3dBackprop(dy: Tensor5D, x: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    return notYetImplemented('avgPool3dBackprop');\n  }\n  maxPool3d(x: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    return notYetImplemented('maxPool3d');\n  }\n  maxPool3dBackprop(\n      dy: Tensor5D, x: Tensor5D, y: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    return notYetImplemented('maxPool3dBackprop');\n  }\n\n  reshape<T extends Tensor, R extends Rank>(x: T, shape: ShapeMap[R]):\n      Tensor<R> {\n    return notYetImplemented('reshape');\n  }\n  cast<T extends Tensor>(x: T, dtype: DataType): T {\n    return notYetImplemented('cast');\n  }\n\n  tile<T extends Tensor>(x: T, reps: number[]): T {\n    return notYetImplemented('tile');\n  }\n\n  pad<T extends Tensor>(\n      x: T, paddings: Array<[number, number]>, constantValue: number): T {\n    return notYetImplemented('pad');\n  }\n\n  transpose<T extends Tensor>(x: T, perm: number[]): T {\n    return notYetImplemented('transpose');\n  }\n\n  gather<T extends Tensor>(x: T, indices: Tensor1D, axis: number): T {\n    return notYetImplemented('gather');\n  }\n\n  gatherND(x: Tensor, indices: Tensor): Tensor {\n    return notYetImplemented('gatherND');\n  }\n\n  scatterND<R extends Rank>(\n      indices: Tensor, updates: Tensor, shape: ShapeMap[R]): Tensor<R> {\n    return notYetImplemented('scatterND');\n  }\n\n  batchToSpaceND<T extends Tensor>(\n      x: T, blockShape: number[], crops: number[][]): T {\n    return notYetImplemented('batchToSpaceND');\n  }\n\n  spaceToBatchND<T extends Tensor>(\n      x: T, blockShape: number[], paddings: number[][]): T {\n    return notYetImplemented('spaceToBatchND');\n  }\n\n  resizeBilinear(\n      x: Tensor4D, newHeight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    return notYetImplemented('resizeBilinear');\n  }\n\n  resizeBilinearBackprop(dy: Tensor4D, x: Tensor4D, alignCorners: boolean):\n      Tensor4D {\n    return notYetImplemented('resizeBilinearBackprop');\n  }\n\n  resizeNearestNeighbor(\n      x: Tensor4D, newHEight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    return notYetImplemented('resizeNearestNeighbor');\n  }\n\n  resizeNearestNeighborBackprop(\n      dy: Tensor4D, x: Tensor4D, alignCorners: boolean): Tensor4D {\n    return notYetImplemented('resizeNearestNeighborBackprop');\n  }\n\n  batchNormalization(\n      x: Tensor4D, mean: Tensor4D|Tensor1D, variance: Tensor4D|Tensor1D,\n      varianceEpsilon: number, scale?: Tensor4D|Tensor1D,\n      offset?: Tensor4D|Tensor1D): Tensor4D {\n    return notYetImplemented('batchNormalization');\n  }\n\n  localResponseNormalization4D(\n      x: Tensor4D, radius: number, bias: number, alpha: number,\n      beta: number): Tensor4D {\n    return notYetImplemented('localResponseNormalization4D');\n  }\n\n  LRNGrad(\n      dy: Tensor4D, inputImage: Tensor4D, outputImage: Tensor4D, radius: number,\n      bias: number, alpha: number, beta: number): Tensor4D {\n    return notYetImplemented('LRNGrad');\n  }\n\n  multinomial(\n      logits: Tensor2D, normalized: boolean, numSamples: number,\n      seed: number): Tensor2D {\n    return notYetImplemented('multinomial');\n  }\n\n  oneHot(indices: Tensor1D, depth: number, onValue: number, offValue: number):\n      Tensor2D {\n    return notYetImplemented('oneHot');\n  }\n\n  cumsum(x: Tensor, axis: number, exclusive: boolean, reverse: boolean):\n      Tensor {\n    return notYetImplemented('cumsum');\n  }\n\n  nonMaxSuppression(\n      boxes: Tensor2D, scores: Tensor1D, maxOutputSize: number,\n      iouThreshold: number, scoreThreshold?: number): Tensor1D {\n    return notYetImplemented('nonMaxSuppression');\n  }\n\n  fft(x: Tensor2D): Tensor2D {\n    return notYetImplemented('fft');\n  }\n  ifft(x: Tensor2D): Tensor2D {\n    return notYetImplemented('ifft');\n  }\n  complex<T extends Tensor>(real: T, imag: T): T {\n    return notYetImplemented('complex');\n  }\n  real<T extends Tensor>(input: T): T {\n    return notYetImplemented('real');\n  }\n  imag<T extends Tensor>(input: T): T {\n    return notYetImplemented('imag');\n  }\n\n  cropAndResize(\n      image: Tensor4D, boxes: Tensor2D, boxIndex: Tensor1D,\n      cropSize: [number, number], method: 'bilinear'|'nearest',\n      extrapolationValue: number): Tensor4D {\n    return notYetImplemented('cropAndResize');\n  }\n\n  depthToSpace(x: Tensor4D, blockSize: number, dataFormat: string): Tensor4D {\n    return notYetImplemented('depthToSpace');\n  }\n\n  // Aligns with the \"SplitV\" kernel in TensorFlow.\n  split<T extends Tensor>(value: T, sizeSplits: number[], axis: number): T[] {\n    return notYetImplemented('split');\n  }\n\n  sparseToDense<R extends Rank>(\n      sparseIndices: Tensor, sparseValues: Tensor, outputShape: ShapeMap[R],\n      defaultValue: Scalar): Tensor<R> {\n    return notYetImplemented('sparseToDense');\n  }\n\n  diag(x: Tensor): Tensor {\n    return notYetImplemented('diag');\n  }\n\n  fill<R extends Rank>(\n      shape: ShapeMap[R], value: number|string, dtype?: DataType): Tensor<R> {\n    return notYetImplemented('fill');\n  }\n\n  onesLike<R extends Rank>(x: Tensor<R>): Tensor<R> {\n    return notYetImplemented('onesLike');\n  }\n\n  zerosLike<R extends Rank>(x: Tensor<R>): Tensor<R> {\n    return notYetImplemented('zerosLike');\n  }\n\n  linspace(start: number, stop: number, num: number): Tensor1D {\n    return notYetImplemented('linspace');\n  }\n\n  dispose(): void {\n    return notYetImplemented('dispose');\n  }\n}\n\nfunction notYetImplemented(kernelName: string): never {\n  throw new Error(\n      `'${kernelName}' not yet implemented or not found in the registry. ` +\n      `Did you forget to import the kernel?`);\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Returns the dimensions in the input shape that are broadcasted to\n * produce the provided output shape.\n *\n * The returned dimensions are 0-indexed and sorted. An example:\n * inShape = [4, 1, 3]\n * outShape = [5, 4, 3, 3]\n * result = [1]. Dimension 1 (2nd dimension of input) gets broadcasted 1 => 3.\n */\nexport function getBroadcastDims(\n    inShape: number[], outShape: number[]): number[] {\n  const inRank = inShape.length;\n  const dims: number[] = [];\n  for (let i = 0; i < inRank; i++) {\n    const dim = inRank - 1 - i;\n    const a = inShape[dim] || 1;\n    const b = outShape[outShape.length - 1 - i] || 1;\n    if (b > 1 && a === 1) {\n      dims.unshift(dim);\n    }\n  }\n  return dims;\n}\n\n/**\n * Returns the axes in the output space that should be reduced to produce\n * the input space.\n */\nexport function getReductionAxes(\n    inShape: number[], outShape: number[]): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < outShape.length; i++) {\n    const inDim = inShape[inShape.length - i - 1];\n    const outAxis = outShape.length - i - 1;\n    const outDim = outShape[outAxis];\n    if (inDim == null || (inDim === 1 && outDim > 1)) {\n      result.unshift(outAxis);\n    }\n  }\n  return result;\n}\n\nexport function assertAndGetBroadcastShape(\n    shapeA: number[], shapeB: number[]): number[] {\n  const result: number[] = [];\n  const l = Math.max(shapeA.length, shapeB.length);\n\n  for (let i = 0; i < l; i++) {\n    let a = shapeA[shapeA.length - i - 1];\n    if (a == null) {\n      a = 1;\n    }\n    let b = shapeB[shapeB.length - i - 1];\n    if (b == null) {\n      b = 1;\n    }\n    if (a === 1) {\n      result.unshift(b);\n    } else if (b === 1) {\n      result.unshift(a);\n    } else if (a !== b) {\n      const errMsg = `Operands could not be broadcast together with shapes ` +\n          `${shapeA} and ${shapeB}.`;\n      throw Error(errMsg);\n    } else {\n      result.unshift(a);\n    }\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as util from '../util';\n\ntype PadType = 'SAME'|'VALID'|'NUMBER';\n\nexport type PadInfo = {\n  top: number,\n  left: number,\n  right: number,\n  bottom: number,\n  type: PadType\n};\n\nexport type PadInfo3D = {\n  top: number,\n  left: number,\n  right: number,\n  bottom: number,\n  front: number,\n  back: number,\n  type: PadType\n};\n\n/**\n * Information about the forward pass of a convolution/pooling operation.\n * It includes input and output shape, strides, filter size and padding\n * information.\n */\nexport type Conv2DInfo = {\n  batchSize: number,\n  inHeight: number,\n  inWidth: number,\n  inChannels: number,\n  outHeight: number,\n  outWidth: number,\n  outChannels: number,\n  dataFormat: 'channelsFirst'|'channelsLast',\n  strideHeight: number,\n  strideWidth: number,\n  dilationHeight: number,\n  dilationWidth: number,\n  filterHeight: number,\n  filterWidth: number,\n  effectiveFilterHeight: number,\n  effectiveFilterWidth: number,\n  padInfo: PadInfo,\n  inShape: [number, number, number, number],\n  outShape: [number, number, number, number],\n  filterShape: [number, number, number, number]\n};\n\nexport function computePool2DInfo(\n    inShape: [number, number, number, number],\n    filterSize: [number, number]|number, strides: number|[number, number],\n    dilations: number|[number, number], pad: 'same'|'valid'|number,\n    roundingMode?: 'floor'|'round'|'ceil',\n    dataFormat: 'channelsFirst'|'channelsLast' = 'channelsLast'): Conv2DInfo {\n  const [filterHeight, filterWidth] = parseTupleParam(filterSize);\n\n  let filterShape: [number, number, number, number];\n  if (dataFormat === 'channelsLast') {\n    filterShape = [filterHeight, filterWidth, inShape[3], inShape[3]];\n  } else if (dataFormat === 'channelsFirst') {\n    filterShape = [filterHeight, filterWidth, inShape[1], inShape[1]];\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  return computeConv2DInfo(\n      inShape, filterShape, strides, dilations, pad, roundingMode, false,\n      dataFormat);\n}\n\n/**\n * Computes the information for a forward pass of a pooling3D operation.\n */\nexport function computePool3DInfo(\n    inShape: [number, number, number, number, number],\n    filterSize: number|[number, number, number],\n    strides: number|[number, number, number],\n    dilations: number|[number, number, number], pad: 'same'|'valid'|number,\n    roundingMode?: 'floor'|'round'|'ceil',\n    dataFormat: 'NDHWC'|'NCDHW' = 'NDHWC'): Conv3DInfo {\n  const [filterDepth, filterHeight, filterWidth] = parse3TupleParam(filterSize);\n\n  let filterShape: [number, number, number, number, number];\n  let $dataFormat: 'channelsFirst'|'channelsLast';\n  if (dataFormat === 'NDHWC') {\n    $dataFormat = 'channelsLast';\n    filterShape =\n        [filterDepth, filterHeight, filterWidth, inShape[4], inShape[4]];\n  } else if (dataFormat === 'NCDHW') {\n    $dataFormat = 'channelsFirst';\n    filterShape =\n        [filterDepth, filterHeight, filterWidth, inShape[1], inShape[1]];\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  return computeConv3DInfo(\n      inShape, filterShape, strides, dilations, pad, false, $dataFormat,\n      roundingMode);\n}\n\n/**\n * Computes the information for a forward pass of a convolution/pooling\n * operation.\n */\nexport function computeConv2DInfo(\n    inShape: [number, number, number, number],\n    filterShape: [number, number, number, number],\n    strides: number|[number, number], dilations: number|[number, number],\n    pad: 'same'|'valid'|number, roundingMode?: 'floor'|'round'|'ceil',\n    depthwise = false,\n    dataFormat: 'channelsFirst'|'channelsLast' = 'channelsLast'): Conv2DInfo {\n  let [batchSize, inHeight, inWidth, inChannels] = [-1, -1, -1, -1];\n  if (dataFormat === 'channelsLast') {\n    [batchSize, inHeight, inWidth, inChannels] = inShape;\n  } else if (dataFormat === 'channelsFirst') {\n    [batchSize, inChannels, inHeight, inWidth] = inShape;\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  const [filterHeight, filterWidth, , filterChannels] = filterShape;\n  const [strideHeight, strideWidth] = parseTupleParam(strides);\n  const [dilationHeight, dilationWidth] = parseTupleParam(dilations);\n\n  const effectiveFilterHeight =\n      getEffectiveFilterSize(filterHeight, dilationHeight);\n  const effectiveFilterWidth =\n      getEffectiveFilterSize(filterWidth, dilationWidth);\n  const {padInfo, outHeight, outWidth} = getPadAndOutInfo(\n      pad, inHeight, inWidth, strideHeight, strideWidth, effectiveFilterHeight,\n      effectiveFilterWidth, roundingMode);\n\n  const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n\n  let outShape: [number, number, number, number];\n  if (dataFormat === 'channelsFirst') {\n    outShape = [batchSize, outChannels, outHeight, outWidth];\n  } else if (dataFormat === 'channelsLast') {\n    outShape = [batchSize, outHeight, outWidth, outChannels];\n  }\n\n  return {\n    batchSize,\n    dataFormat,\n    inHeight,\n    inWidth,\n    inChannels,\n    outHeight,\n    outWidth,\n    outChannels,\n    padInfo,\n    strideHeight,\n    strideWidth,\n    filterHeight,\n    filterWidth,\n    effectiveFilterHeight,\n    effectiveFilterWidth,\n    dilationHeight,\n    dilationWidth,\n    inShape,\n    outShape,\n    filterShape\n  };\n}\n\n/**\n * Information about the forward pass of a 3D convolution/pooling operation.\n * It includes input and output shape, strides, filter size and padding\n * information.\n */\nexport type Conv3DInfo = {\n  batchSize: number,\n  inDepth: number,\n  inHeight: number,\n  inWidth: number,\n  inChannels: number,\n  outDepth: number,\n  outHeight: number,\n  outWidth: number,\n  outChannels: number,\n  dataFormat: 'channelsFirst'|'channelsLast',\n  strideDepth: number,\n  strideHeight: number,\n  strideWidth: number,\n  dilationDepth: number,\n  dilationHeight: number,\n  dilationWidth: number,\n  filterDepth: number,\n  filterHeight: number,\n  filterWidth: number,\n  effectiveFilterDepth: number,\n  effectiveFilterHeight: number,\n  effectiveFilterWidth: number,\n  padInfo: PadInfo3D,\n  inShape: [number, number, number, number, number],\n  outShape: [number, number, number, number, number],\n  filterShape: [number, number, number, number, number]\n};\n\n/**\n * Computes the information for a forward pass of a 3D convolution/pooling\n * operation.\n */\nexport function computeConv3DInfo(\n    inShape: [number, number, number, number, number],\n    filterShape: [number, number, number, number, number],\n    strides: number|[number, number, number],\n    dilations: number|[number, number, number], pad: 'same'|'valid'|number,\n    depthwise = false,\n    dataFormat: 'channelsFirst'|'channelsLast' = 'channelsLast',\n    roundingMode?: 'floor'|'round'|'ceil'): Conv3DInfo {\n  let [batchSize, inDepth, inHeight, inWidth, inChannels] =\n      [-1, -1, -1, -1, -1];\n  if (dataFormat === 'channelsLast') {\n    [batchSize, inDepth, inHeight, inWidth, inChannels] = inShape;\n  } else if (dataFormat === 'channelsFirst') {\n    [batchSize, inChannels, inDepth, inHeight, inWidth] = inShape;\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  const [filterDepth, filterHeight, filterWidth, , filterChannels] =\n      filterShape;\n  const [strideDepth, strideHeight, strideWidth] = parse3TupleParam(strides);\n  const [dilationDepth, dilationHeight, dilationWidth] =\n      parse3TupleParam(dilations);\n\n  const effectiveFilterDepth =\n      getEffectiveFilterSize(filterDepth, dilationDepth);\n  const effectiveFilterHeight =\n      getEffectiveFilterSize(filterHeight, dilationHeight);\n  const effectiveFilterWidth =\n      getEffectiveFilterSize(filterWidth, dilationWidth);\n  const {padInfo, outDepth, outHeight, outWidth} = get3DPadAndOutInfo(\n      pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth,\n      effectiveFilterDepth, effectiveFilterHeight, effectiveFilterWidth,\n      roundingMode);\n\n  const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n\n  let outShape: [number, number, number, number, number];\n  if (dataFormat === 'channelsFirst') {\n    outShape = [batchSize, outChannels, outDepth, outHeight, outWidth];\n  } else if (dataFormat === 'channelsLast') {\n    outShape = [batchSize, outDepth, outHeight, outWidth, outChannels];\n  }\n\n  return {\n    batchSize,\n    dataFormat,\n    inDepth,\n    inHeight,\n    inWidth,\n    inChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    outChannels,\n    padInfo,\n    strideDepth,\n    strideHeight,\n    strideWidth,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    effectiveFilterDepth,\n    effectiveFilterHeight,\n    effectiveFilterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    inShape,\n    outShape,\n    filterShape\n  };\n}\n\nfunction computeOutputShape2D(\n    inShape: [number, number], fieldSize: number, stride: number,\n    zeroPad?: number, roundingMode?: 'floor'|'round'|'ceil'): [number, number] {\n  if (zeroPad == null) {\n    zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n  }\n  const inputRows = inShape[0];\n  const inputCols = inShape[1];\n\n  const outputRows = conditionalRound(\n      (inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  util.assert(\n      util.isInt(outputRows),\n      () => `The output # of rows (${outputRows}) must be an integer. ` +\n          `Change the stride and/or zero pad parameters`);\n\n  const outputCols = conditionalRound(\n      (inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  util.assert(\n      util.isInt(outputCols),\n      () => `The output # of columns (${outputCols}) must be an integer. ` +\n          `Change the stride and/or zero pad parameters`);\n\n  return [outputRows, outputCols];\n}\n\nfunction computeOutputShape4D(\n    inShape: [number, number, number, number], fieldSize: number,\n    outChannels: number, stride: number, zeroPad?: number,\n    roundingMode?: 'floor'|'round'|'ceil'): [number, number, number, number] {\n  if (zeroPad == null) {\n    zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n  }\n  const inputDepth = inShape[0];\n  const inputRows = inShape[1];\n  const inputCols = inShape[2];\n\n  const outputDepths = conditionalRound(\n      (inputDepth - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  util.assert(\n      util.isInt(outputDepths),\n      () => `The output # of depths (${outputDepths}) must be an integer. ` +\n          `Change the stride and/or zero pad parameters`);\n\n  const outputRows = conditionalRound(\n      (inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  util.assert(\n      util.isInt(outputRows),\n      () => `The output # of rows (${outputRows}) must be an integer. ` +\n          `Change the stride and/or zero pad parameters`);\n\n  const outputCols = conditionalRound(\n      (inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  util.assert(\n      util.isInt(outputCols),\n      () => `The output # of columns (${outputCols}) must be an integer. ` +\n          `Change the stride and/or zero pad parameters`);\n\n  return [outputDepths, outputRows, outputCols, outChannels];\n}\n\nexport function computeDefaultPad(\n    inputShape: [number, number]|[number, number, number, number],\n    fieldSize: number, stride: number, dilation = 1): number {\n  const effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);\n  return Math.floor(\n      (inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);\n}\n\nfunction parseTupleParam(param: number|number[]): [number, number, number] {\n  if (typeof param === 'number') {\n    return [param, param, param];\n  }\n  if (param.length === 2) {\n    return [param[0], param[1], 1];\n  }\n  return param as [number, number, number];\n}\n\nfunction parse3TupleParam(param: number|[number, number, number]):\n    [number, number, number] {\n  return typeof param === 'number' ? [param, param, param] : param;\n}\n\n/* See https://www.tensorflow.org/api_docs/python/tf/nn/atrous_conv2d\n * Atrous convolution is equivalent to standard convolution with upsampled\n * filters with effective_filter_height =\n * filter_height + (filter_height - 1) * (dilation - 1)\n * and effective_filter_width =\n * filter_width + (filter_width - 1) * (dilation - 1),\n * produced by inserting dilation - 1 zeros along consecutive elements across\n * the filters' spatial dimensions.\n * When there is a dilation, this converts a filter dimension to the\n * effective filter dimension, so it can be used in a standard convolution.\n */\nfunction getEffectiveFilterSize(filterSize: number, dilation: number) {\n  if (dilation <= 1) {\n    return filterSize;\n  }\n\n  return filterSize + (filterSize - 1) * (dilation - 1);\n}\n\nfunction getPadAndOutInfo(\n    pad: 'same'|'valid'|number, inHeight: number, inWidth: number,\n    strideHeight: number, strideWidth: number, filterHeight: number,\n    filterWidth: number, roundingMode?: 'floor'|'round'|'ceil'):\n    {padInfo: PadInfo, outHeight: number, outWidth: number} {\n  let padInfo: PadInfo;\n  let outHeight: number;\n  let outWidth: number;\n\n  if (typeof pad === 'number') {\n    const padType = (pad === 0) ? 'VALID' : 'NUMBER';\n    padInfo = {top: pad, bottom: pad, left: pad, right: pad, type: padType};\n    const outShape = computeOutputShape2D(\n        [inHeight, inWidth], filterHeight, strideHeight, pad, roundingMode);\n    outHeight = outShape[0];\n    outWidth = outShape[1];\n  } else if (pad === 'same') {\n    outHeight = Math.ceil(inHeight / strideHeight);\n    outWidth = Math.ceil(inWidth / strideWidth);\n    const padAlongHeight =\n        Math.max(0, (outHeight - 1) * strideHeight + filterHeight - inHeight);\n    const padAlongWidth =\n        Math.max(0, (outWidth - 1) * strideWidth + filterWidth - inWidth);\n    const top = Math.floor(padAlongHeight / 2);\n    const bottom = padAlongHeight - top;\n    const left = Math.floor(padAlongWidth / 2);\n    const right = padAlongWidth - left;\n    padInfo = {top, bottom, left, right, type: 'SAME'};\n  } else if (pad === 'valid') {\n    padInfo = {top: 0, bottom: 0, left: 0, right: 0, type: 'VALID'};\n    outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n    outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n  } else {\n    throw Error(`Unknown padding parameter: ${pad}`);\n  }\n  return {padInfo, outHeight, outWidth};\n}\n\nfunction get3DPadAndOutInfo(\n    pad: 'same'|'valid'|number, inDepth: number, inHeight: number,\n    inWidth: number, strideDepth: number, strideHeight: number,\n    strideWidth: number, filterDepth: number, filterHeight: number,\n    filterWidth: number, roundingMode?: 'floor'|'round'|'ceil'): {\n  padInfo: PadInfo3D,\n  outDepth: number,\n  outHeight: number,\n  outWidth: number\n} {\n  let padInfo: PadInfo3D;\n  let outDepth: number;\n  let outHeight: number;\n  let outWidth: number;\n\n  if (typeof pad === 'number') {\n    const padType = (pad === 0) ? 'VALID' : 'NUMBER';\n    padInfo = {\n      top: pad,\n      bottom: pad,\n      left: pad,\n      right: pad,\n      front: pad,\n      back: pad,\n      type: padType\n    };\n    const outShape = computeOutputShape4D(\n        [inDepth, inHeight, inWidth, 1], filterDepth, 1, strideDepth, pad,\n        roundingMode);\n    outDepth = outShape[0];\n    outHeight = outShape[1];\n    outWidth = outShape[2];\n  } else if (pad === 'same') {\n    outDepth = Math.ceil(inDepth / strideDepth);\n    outHeight = Math.ceil(inHeight / strideHeight);\n    outWidth = Math.ceil(inWidth / strideWidth);\n    const padAlongDepth = (outDepth - 1) * strideDepth + filterDepth - inDepth;\n    const padAlongHeight =\n        (outHeight - 1) * strideHeight + filterHeight - inHeight;\n    const padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;\n    const front = Math.floor(padAlongDepth / 2);\n    const back = padAlongDepth - front;\n    const top = Math.floor(padAlongHeight / 2);\n    const bottom = padAlongHeight - top;\n    const left = Math.floor(padAlongWidth / 2);\n    const right = padAlongWidth - left;\n\n    padInfo = {top, bottom, left, right, front, back, type: 'SAME'};\n  } else if (pad === 'valid') {\n    padInfo = {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      front: 0,\n      back: 0,\n      type: 'VALID'\n    };\n    outDepth = Math.ceil((inDepth - filterDepth + 1) / strideDepth);\n    outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n    outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n  } else {\n    throw Error(`Unknown padding parameter: ${pad}`);\n  }\n  return {padInfo, outDepth, outHeight, outWidth};\n}\n\n/**\n * Rounds a value depending on the rounding mode\n * @param value\n * @param roundingMode\n */\nfunction conditionalRound(\n    value: number, roundingMode?: 'floor'|'round'|'ceil') {\n  if (!roundingMode) {\n    return value;\n  }\n  switch (roundingMode) {\n    case 'round':\n      // used for Caffe Conv\n      return Math.round(value);\n    case 'ceil':\n      // used for Caffe Pool\n      return Math.ceil(value);\n    case 'floor':\n      return Math.floor(value);\n    default:\n      throw new Error(`Unknown roundingMode ${roundingMode}`);\n  }\n}\n\nexport function tupleValuesAreOne(param: number|number[]): boolean {\n  const [dimA, dimB, dimC] = parseTupleParam(param);\n  return dimA === 1 && dimB === 1 && dimC === 1;\n}\n\nexport function eitherStridesOrDilationsAreOne(\n    strides: number|number[], dilations: number|number[]): boolean {\n  return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);\n}\n\n/**\n * Convert Conv2D dataFormat from 'NHWC'|'NCHW' to\n *    'channelsLast'|'channelsFirst'\n * @param dataFormat in 'NHWC'|'NCHW' mode\n * @return dataFormat in 'channelsLast'|'channelsFirst' mode\n * @throws unknown dataFormat\n */\nexport function convertConv2DDataFormat(dataFormat: 'NHWC'|'NCHW'):\n    'channelsLast'|'channelsFirst' {\n  if (dataFormat === 'NHWC') {\n    return 'channelsLast';\n  } else if (dataFormat === 'NCHW') {\n    return 'channelsFirst';\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {scalar, tensor1d, zeros} from '../ops/tensor_ops';\nimport {Tensor} from '../tensor';\nimport {Rank} from '../types';\nimport {DataType, ShapeMap} from '../types';\nimport {hasEncodingLoss, makeZerosTypedArray} from '../util';\n\nimport {KernelBackend} from './backend';\n\n// Utilities needed by backend consumers of tf-core.\nexport * from '../ops/axis_util';\nexport * from '../ops/broadcast_util';\nexport * from '../ops/concat_util';\nexport * from '../ops/conv_util';\nexport {Activation, FusedConv2DConfig} from '../ops/fused_util';\nexport * from '../ops/reduce_util';\nexport {BackendValues, TypedArray, upcastType, PixelData} from '../types';\nexport {MemoryInfo, TimingInfo} from '../engine';\n\nexport function castTensor<T extends Tensor>(\n    x: T, dtype: DataType, backend: KernelBackend): T {\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return x.clone();\n    }\n    const zerosTensor = zeros(x.shape);\n    const floatX = x.toFloat();\n    const result = backend.complex(floatX, zerosTensor);\n    zerosTensor.dispose();\n    floatX.dispose();\n    return result as T;\n  }\n\n  if (!hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    return ENGINE.makeTensorFromDataId(x.dataId, x.shape, dtype) as T;\n  }\n  if (x.dtype === 'complex64') {\n    const real = backend.real(x);\n    const result = real.cast(dtype);\n    real.dispose();\n    return result;\n  }\n  if (dtype === 'int32') {\n    return backend.int(x);\n  } else if (dtype === 'bool') {\n    const zero = scalar(0, x.dtype);\n    const result = backend.notEqual(x, zero) as T;\n    zero.dispose();\n    return result;\n  } else {\n    throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n  }\n}\n\nexport function reshapeTensor<T extends Tensor, R extends Rank>(\n    x: T, shape: ShapeMap[R]): Tensor<R> {\n  return ENGINE.makeTensorFromDataId(x.dataId, shape, x.dtype) as Tensor<R>;\n}\n\nexport function linspaceImpl(start: number, stop: number, num: number) {\n  const step = (stop - start) / (num - 1);\n\n  const values = makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return tensor1d(values, 'float32');\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray} from '../types';\n/**\n * Merges real and imaginary Float32Arrays into a single complex Float32Array.\n *\n * The memory layout is interleaved as follows:\n * real: [r0, r1, r2]\n * imag: [i0, i1, i2]\n * complex: [r0, i0, r1, i1, r2, i2]\n *\n * This is the inverse of splitRealAndImagArrays.\n *\n * @param real The real values of the complex tensor values.\n * @param imag The imag values of the complex tensor values.\n * @returns A complex tensor as a Float32Array with merged values.\n */\nexport function mergeRealAndImagArrays(\n    real: Float32Array, imag: Float32Array): Float32Array {\n  if (real.length !== imag.length) {\n    throw new Error(\n        `Cannot merge real and imag arrays of different lengths. real:` +\n        `${real.length}, imag: ${imag.length}.`);\n  }\n  const result = new Float32Array(real.length * 2);\n  for (let i = 0; i < result.length; i += 2) {\n    result[i] = real[i / 2];\n    result[i + 1] = imag[i / 2];\n  }\n  return result;\n}\n\n/**\n * Splits a complex Float32Array into real and imag parts.\n *\n * The memory layout is interleaved as follows:\n * complex: [r0, i0, r1, i1, r2, i2]\n * real: [r0, r1, r2]\n * imag: [i0, i1, i2]\n *\n * This is the inverse of mergeRealAndImagArrays.\n *\n * @param complex The complex tensor values.\n * @returns An object with real and imag Float32Array components of the complex\n *     tensor.\n */\nexport function splitRealAndImagArrays(complex: Float32Array):\n    {real: Float32Array, imag: Float32Array} {\n  const real = new Float32Array(complex.length / 2);\n  const imag = new Float32Array(complex.length / 2);\n  for (let i = 0; i < complex.length; i += 2) {\n    real[i / 2] = complex[i];\n    imag[i / 2] = complex[i + 1];\n  }\n  return {real, imag};\n}\n\n/**\n * Extracts even indexed complex values in the given array.\n * @param complex The complex tensor values\n */\nexport function complexWithEvenIndex(complex: Float32Array):\n    {real: Float32Array, imag: Float32Array} {\n  const len = Math.ceil(complex.length / 4);\n  const real = new Float32Array(len);\n  const imag = new Float32Array(len);\n  for (let i = 0; i < complex.length; i += 4) {\n    real[Math.floor(i / 4)] = complex[i];\n    imag[Math.floor(i / 4)] = complex[i + 1];\n  }\n  return {real, imag};\n}\n\n/**\n * Extracts odd indexed comple values in the given array.\n * @param complex The complex tensor values\n */\nexport function complexWithOddIndex(complex: Float32Array):\n    {real: Float32Array, imag: Float32Array} {\n  const len = Math.floor(complex.length / 4);\n  const real = new Float32Array(len);\n  const imag = new Float32Array(len);\n  for (let i = 2; i < complex.length; i += 4) {\n    real[Math.floor(i / 4)] = complex[i];\n    imag[Math.floor(i / 4)] = complex[i + 1];\n  }\n  return {real, imag};\n}\n\n/**\n * Get the map representing a complex value in the given array.\n * @param complex The complex tensor values.\n * @param index An index of the target complex value.\n */\nexport function getComplexWithIndex(\n    complex: Float32Array, index: number): {real: number, imag: number} {\n  const real = complex[index * 2];\n  const imag = complex[index * 2 + 1];\n  return {real, imag};\n}\n\n/**\n * Insert a given complex value into the TypedArray.\n * @param data The array in which the complex value is inserted.\n * @param c The complex value to be inserted.\n * @param index An index of the target complex value.\n */\nexport function assignToTypedArray(\n    data: TypedArray, real: number, imag: number, index: number) {\n  data[index * 2] = real;\n  data[index * 2 + 1] = imag;\n}\n\n/**\n * Make the list of exponent terms used by FFT.\n */\nexport function exponents(\n    n: number, inverse: boolean): {real: Float32Array, imag: Float32Array} {\n  const real = new Float32Array(n / 2);\n  const imag = new Float32Array(n / 2);\n  for (let i = 0; i < Math.ceil(n / 2); i++) {\n    const x = (inverse ? 2 : -2) * Math.PI * (i / n);\n    real[i] = Math.cos(x);\n    imag[i] = Math.sin(x);\n  }\n  return {real, imag};\n}\n\n/**\n * Make the exponent term used by FFT.\n */\nexport function exponent(\n    k: number, n: number, inverse: boolean): {real: number, imag: number} {\n  const x = (inverse ? 2 : -2) * Math.PI * (k / n);\n  const real = Math.cos(x);\n  const imag = Math.sin(x);\n  return {real, imag};\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Inserts a value into a sorted array. This method allows duplicate, meaning it\n * allows inserting duplicate value, in which case, the element will be inserted\n * at the lowest index of the value.\n * @param arr The array to modify.\n * @param element The element to insert.\n * @param comparator Optional. If no comparator is specified, elements are\n * compared using array_util.defaultComparator, which is suitable for Strings\n * and Numbers in ascending arrays. If the array contains multiple instances of\n * the target value, the left-most instance will be returned. To provide a\n * comparator, it should take 2 arguments to compare and return a negative,\n * zero, or a positive number.\n */\nexport function binaryInsert<T>(\n    arr: T[], element: T, comparator?: (a: T, b: T) => number) {\n  const index = binarySearch(arr, element, comparator);\n  const insertionPoint = index < 0 ? -(index + 1) : index;\n  arr.splice(insertionPoint, 0, element);\n}\n\n/**\n * Searches the array for the target using binary search, returns the index\n * of the found element, or position to insert if element not found. If no\n * comparator is specified, elements are compared using array_\n * util.defaultComparator, which is suitable for Strings and Numbers in\n * ascending arrays. If the array contains multiple instances of the target\n * value, the left-most instance will be returned.\n * @param arr The array to be searched in.\n * @param target The target to be searched for.\n * @param comparator Should take 2 arguments to compare and return a negative,\n *    zero, or a positive number.\n * @return Lowest index of the target value if found, otherwise the insertion\n *    point where the target should be inserted, in the form of\n *    (-insertionPoint - 1).\n */\nexport function binarySearch<T>(\n    arr: T[], target: T, comparator?: (a: T, b: T) => number) {\n  return binarySearch_(arr, target, comparator || defaultComparator);\n}\n\n/**\n * Compares its two arguments for order.\n * @param a The first element to be compared.\n * @param b The second element to be compared.\n * @return A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second.\n */\nfunction defaultComparator<T>(a: T, b: T): number {\n  return a > b ? 1 : a < b ? -1 : 0;\n}\n\nfunction binarySearch_<T>(\n    arr: T[], target: T, comparator: (a: T, b: T) => number) {\n  let left = 0;\n  let right = arr.length;\n  let middle = 0;\n  let found = false;\n  while (left < right) {\n    middle = left + ((right - left) >>> 1);\n    const compareResult = comparator(target, arr[middle]);\n    if (compareResult > 0) {\n      left = middle + 1;\n    } else {\n      right = middle;\n      // If compareResult is 0, the value is found. We record it is found,\n      // and then keep looking because there may be duplicate.\n      found = !compareResult;\n    }\n  }\n\n  return found ? left : -left - 1;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Implementation of the NonMaxSuppression kernel shared between webgl and cpu.\n */\n\nimport {scalar, tensor1d} from '../ops/tensor_ops';\nimport {Tensor1D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {TypedArray} from '../types';\n\nimport {binaryInsert} from './array_util';\n\ninterface Candidate {\n  score: number;\n  boxIndex: number;\n  suppressBeginIndex: number;\n}\n\nexport function nonMaxSuppressionV3(\n    boxes: TypedArray, scores: TypedArray, maxOutputSize: number,\n    iouThreshold: number, scoreThreshold: number): Tensor1D {\n  const dummySoftNmsSigma = 0.0;\n\n  return nonMaxSuppressionImpl_(\n             boxes, scores, maxOutputSize, iouThreshold, scoreThreshold,\n             dummySoftNmsSigma)\n             .selectedIndices as Tensor1D;\n}\n\nexport function nonMaxSuppressionV5(\n    boxes: TypedArray, scores: TypedArray, maxOutputSize: number,\n    iouThreshold: number, scoreThreshold: number,\n    softNmsSigma: number): NamedTensorMap {\n  // For NonMaxSuppressionV5Op, we always return a second output holding\n  // corresponding scores.\n  const returnScoresTensor = true;\n\n  const result = nonMaxSuppressionImpl_(\n      boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma,\n      returnScoresTensor);\n\n  result.numValidOutputs.dispose();\n\n  return {\n    selectedIndices: result.selectedIndices,\n    selectedScores: result.selectedScores\n  };\n}\n\nfunction nonMaxSuppressionImpl_(\n    boxes: TypedArray, scores: TypedArray, maxOutputSize: number,\n    iouThreshold: number, scoreThreshold: number, softNmsSigma: number,\n    returnScoresTensor = false, padToMaxOutputSize = false): NamedTensorMap {\n  // The list is sorted in ascending order, so that we can always pop the\n  // candidate with the largest score in O(1) time.\n  const candidates =\n      Array.from(scores)\n          .map((score, boxIndex) => ({score, boxIndex, suppressBeginIndex: 0}))\n          .filter(c => c.score > scoreThreshold)\n          .sort(ascendingComparator);\n\n  // If softNmsSigma is 0, the outcome of this algorithm is exactly same as\n  // before.\n  const scale = softNmsSigma > 0 ? (-0.5 / softNmsSigma) : 0.0;\n\n  const selectedIndices: number[] = [];\n  const selectedScores: number[] = [];\n\n  while (selectedIndices.length < maxOutputSize && candidates.length > 0) {\n    const candidate = candidates.pop();\n    const {score: originalScore, boxIndex, suppressBeginIndex} = candidate;\n\n    if (originalScore < scoreThreshold) {\n      break;\n    }\n\n    // Overlapping boxes are likely to have similar scores, therefore we\n    // iterate through the previously selected boxes backwards in order to\n    // see if candidate's score should be suppressed. We use\n    // suppressBeginIndex to track and ensure a candidate can be suppressed\n    // by a selected box no more than once. Also, if the overlap exceeds\n    // iouThreshold, we simply ignore the candidate.\n    let ignoreCandidate = false;\n    for (let j = selectedIndices.length - 1; j >= suppressBeginIndex; --j) {\n      const iou = intersectionOverUnion(boxes, boxIndex, selectedIndices[j]);\n\n      if (iou >= iouThreshold) {\n        ignoreCandidate = true;\n        break;\n      }\n\n      candidate.score =\n          candidate.score * suppressWeight(iouThreshold, scale, iou);\n\n      if (candidate.score <= scoreThreshold) {\n        break;\n      }\n    }\n\n    // At this point, if `candidate.score` has not dropped below\n    // `scoreThreshold`, then we know that we went through all of the\n    // previous selections and can safely update `suppressBeginIndex` to the\n    // end of the selected array. Then we can re-insert the candidate with\n    // the updated score and suppressBeginIndex back in the candidate list.\n    // If on the other hand, `candidate.score` has dropped below the score\n    // threshold, we will not add it back to the candidates list.\n    candidate.suppressBeginIndex = selectedIndices.length;\n\n    if (!ignoreCandidate) {\n      // Candidate has passed all the tests, and is not suppressed, so\n      // select the candidate.\n      if (candidate.score === originalScore) {\n        selectedIndices.push(boxIndex);\n        selectedScores.push(candidate.score);\n      } else if (candidate.score > scoreThreshold) {\n        // Candidate's score is suppressed but is still high enough to be\n        // considered, so add back to the candidates list.\n        binaryInsert(candidates, candidate, ascendingComparator);\n      }\n    }\n  }\n\n  // NonMaxSuppressionV4 feature: padding output to maxOutputSize.\n  const numValidOutputs = selectedIndices.length;\n  if (padToMaxOutputSize) {\n    selectedIndices.fill(0, numValidOutputs);\n    selectedScores.fill(0.0, numValidOutputs);\n  }\n\n  return {\n    selectedIndices: tensor1d(selectedIndices, 'int32'),\n    selectedScores: tensor1d(selectedScores, 'float32'),\n    numValidOutputs: scalar(numValidOutputs, 'int32')\n  };\n}\n\nfunction intersectionOverUnion(boxes: TypedArray, i: number, j: number) {\n  const iCoord = boxes.subarray(i * 4, i * 4 + 4);\n  const jCoord = boxes.subarray(j * 4, j * 4 + 4);\n  const yminI = Math.min(iCoord[0], iCoord[2]);\n  const xminI = Math.min(iCoord[1], iCoord[3]);\n  const ymaxI = Math.max(iCoord[0], iCoord[2]);\n  const xmaxI = Math.max(iCoord[1], iCoord[3]);\n  const yminJ = Math.min(jCoord[0], jCoord[2]);\n  const xminJ = Math.min(jCoord[1], jCoord[3]);\n  const ymaxJ = Math.max(jCoord[0], jCoord[2]);\n  const xmaxJ = Math.max(jCoord[1], jCoord[3]);\n  const areaI = (ymaxI - yminI) * (xmaxI - xminI);\n  const areaJ = (ymaxJ - yminJ) * (xmaxJ - xminJ);\n  if (areaI <= 0 || areaJ <= 0) {\n    return 0.0;\n  }\n  const intersectionYmin = Math.max(yminI, yminJ);\n  const intersectionXmin = Math.max(xminI, xminJ);\n  const intersectionYmax = Math.min(ymaxI, ymaxJ);\n  const intersectionXmax = Math.min(xmaxI, xmaxJ);\n  const intersectionArea = Math.max(intersectionYmax - intersectionYmin, 0.0) *\n      Math.max(intersectionXmax - intersectionXmin, 0.0);\n  return intersectionArea / (areaI + areaJ - intersectionArea);\n}\n\n// A Gaussian penalty function, this method always returns values in [0, 1].\n// The weight is a function of similarity, the more overlap two boxes are, the\n// smaller the weight is, meaning highly overlapping boxe will be significantly\n// penalized. On the other hand, a non-overlapping box will not be penalized.\nfunction suppressWeight(iouThreshold: number, scale: number, iou: number) {\n  const weight = Math.exp(scale * iou * iou);\n  return iou <= iouThreshold ? weight : 0.0;\n}\n\nfunction ascendingComparator(c1: Candidate, c2: Candidate) {\n  // For objects with same scores, we make the object with the larger index go\n  // first. In an array that pops from the end, this means that the object with\n  // the smaller index will be popped first. This ensures the same output as\n  // the TensorFlow python version.\n  return (c1.score - c2.score) ||\n      ((c1.score === c2.score) && (c2.boxIndex - c1.boxIndex));\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\n\n/** Shared implementation of the split kernel across WebGL and CPU. */\nexport function split<T extends Tensor>(\n    x: T, sizeSplits: number[], axis: number): T[] {\n  const begin = new Array(x.rank).fill(0);\n  const size = x.shape.slice();\n  return sizeSplits.map(s => {\n    size[axis] = s;\n    const slice = x.slice(begin, size);\n    begin[axis] += s;\n    return slice;\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nimport {buffer} from '../ops/array_ops';\nimport {Tensor, TensorBuffer} from '../tensor';\nimport {DataType, Rank} from '../types';\n\nexport function tile<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>, reps: number[]): Tensor<R> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result.toTensor() as Tensor<R>;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {tensor} from '../ops/tensor_ops';\nimport {Tensor} from '../tensor';\nimport {NumericDataType, TypedArray} from '../types';\nimport {getTypedArrayFromDType} from '../util';\n\nexport function topkImpl<T extends Tensor>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean): [T, T] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n    const valAndInd: Array<{value: number, index: number}> = [];\n    for (let i = 0; i < vals.length; i++) {\n      valAndInd.push({value: vals[i], index: i});\n    }\n    valAndInd.sort((a, b) => b.value - a.value);\n\n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n  return [\n    tensor(allTopKVals, outputShape, xDtype) as T,\n    tensor(allTopKIndices, outputShape, 'int32') as T\n  ];\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the Where kernel shared between cpu and webgl */\n\nimport {buffer} from '../ops/array_ops';\nimport {Tensor2D} from '../tensor';\nimport {TypedArray} from '../types';\n\nexport function whereImpl(condShape: number[], condVals: TypedArray): Tensor2D {\n  const indices = [];\n  for (let i = 0; i < condVals.length; i++) {\n    if (condVals[i]) {\n      indices.push(i);\n    }\n  }\n\n  const inBuffer = buffer(condShape, 'int32');\n\n  const out = buffer([indices.length, condShape.length], 'int32');\n  for (let i = 0; i < indices.length; i++) {\n    const loc = inBuffer.indexToLoc(indices[i]);\n    const offset = i * condShape.length;\n    out.values.set(loc, offset);\n  }\n  return out.toTensor() as Tensor2D;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from '../../environment';\n\nexport type GLSL = {\n  version: string,\n  attribute: string,\n  varyingVs: string,\n  varyingFs: string,\n  texture2D: string,\n  output: string,\n  defineOutput: string,\n  defineSpecialNaN: string,\n  defineSpecialInf: string,\n  defineRound: string\n};\n\nexport function getGlslDifferences(): GLSL {\n  let version: string;\n  let attribute: string;\n  let varyingVs: string;\n  let varyingFs: string;\n  let texture2D: string;\n  let output: string;\n  let defineOutput: string;\n  let defineSpecialNaN: string;\n  let defineSpecialInf: string;\n  let defineRound: string;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    version = '#version 300 es';\n    attribute = 'in';\n    varyingVs = 'out';\n    varyingFs = 'in';\n    texture2D = 'texture';\n    output = 'outputColor';\n    defineOutput = 'out vec4 outputColor;';\n\n    // Use custom isnan definition to work across differences between\n    // implementations on various platforms. While this should happen in ANGLE\n    // we still see differences between android and windows (on chrome) when\n    // using isnan directly.\n    defineSpecialNaN = `\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    `;\n    // In webgl 2 we do not need to specify a custom isinf so there is no\n    // need for a special INFINITY constant.\n    defineSpecialInf = ``;\n    defineRound = `\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  } else {\n    version = '';\n    attribute = 'attribute';\n    varyingVs = 'varying';\n    varyingFs = 'varying';\n    texture2D = 'texture2D';\n    output = 'gl_FragColor';\n    defineOutput = '';\n    // WebGL1 has no built in isnan so we define one here.\n    defineSpecialNaN = `\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    `;\n    defineSpecialInf = `\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    `;\n    defineRound = `\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  }\n\n  return {\n    version,\n    attribute,\n    varyingVs,\n    varyingFs,\n    texture2D,\n    output,\n    defineOutput,\n    defineSpecialNaN,\n    defineSpecialInf,\n    defineRound\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as util from '../../util';\n\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\nexport function getLogicalCoordinatesFromFlatIndex(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((stride, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n            `index -= ${coords[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nfunction buildVec(x: string[]): string {\n  if (x.length === 1) {\n    return `${x[0]}`;\n  }\n  return `vec${x.length}(${x.join(',')})`;\n}\n\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\nexport function dotify(x: string[], y: string[]): string {\n  if (x.length !== y.length) {\n    throw new Error(\n        `Vectors to be dotted must be of the same length -` +\n        `got ${x.length} and ${y.length}`);\n  }\n\n  const slices: string[] = [];\n  const nearestVec4 = Math.floor(x.length / 4);\n  const nearestVec4Remainder = x.length % 4;\n\n  for (let i = 0; i < nearestVec4; i++) {\n    const xSlice = x.slice(i * 4, i * 4 + 4);\n    const ySlice = y.slice(i * 4, i * 4 + 4);\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  if (nearestVec4Remainder !== 0) {\n    let xSlice = x.slice(nearestVec4 * 4);\n    let ySlice = y.slice(nearestVec4 * 4);\n    if (xSlice.length === 1) {\n      xSlice = xSlice.map(d => `float(${d})`);\n      ySlice = ySlice.map(d => `float(${d})`);\n    }\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  return slices.map((d, i) => `dot(${d})`).join('+');\n}\n\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\nexport function getFlatIndexFrom3D(shape: [number, number, number]): string {\n  const strides = util.computeStrides(shape).map(d => d.toString());\n\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\n\nexport const ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getBroadcastDims} from '../../ops/broadcast_util';\nimport * as util from '../../util';\nimport {getGlslDifferences, GLSL} from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n\nexport type ShapeInfo = {\n  logicalShape: number[],\n  texShape: [number, number],\n  isUniform: boolean,\n  isPacked: boolean,\n  flatOffset: number\n};\n\nexport type InputInfo = {\n  name: string,\n  shapeInfo: ShapeInfo\n};\n\nexport function makeShader(\n    inputsInfo: InputInfo[], outputShape: ShapeInfo, userCode: string,\n    usesPackedTextures: boolean): string {\n  const prefixSnippets: string[] = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\n          `uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n  });\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n\n  const inputSamplingSnippet =\n      inputsInfo\n          .map(x => getInputSamplingSnippet(x, outputShape, usesPackedTextures))\n          .join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet: string;\n  let floatTextureSetOutputSnippet: string;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet =\n        getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet =\n        getOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (usesPackedTextures) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [\n    shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n    inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, userCode\n  ].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(inInfo: InputInfo): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo);\n    case 1:\n      return getSampler1D(inInfo);\n    case 2:\n      return getSampler2D(inInfo);\n    case 3:\n      return getSampler3D(inInfo);\n    case 4:\n      return getSampler4D(inInfo);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\n          `${shape.length}-D input sampling` +\n          ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(inInfo: InputInfo): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo);\n    case 2:\n      return getPackedSampler2D(inInfo);\n    case 3:\n      return getPackedSampler3D(inInfo);\n    default:\n      return getPackedSamplerND(inInfo);\n  }\n}\n\nfunction getInputSamplingSnippet(\n    inInfo: InputInfo, outShapeInfo: ShapeInfo,\n    usesPackedTextures = false): string {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo);\n  } else {\n    res += getSamplerFromInInfo(inInfo);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number]): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(outShape as [number], outTexShape);\n    case 2:\n      return getOutputPacked2DCoords(outShape as [number, number], outTexShape);\n    case 3:\n      return getOutputPacked3DCoords(\n          outShape as [number, number, number], outTexShape);\n    default:\n      return getOutputPackedNDCoords(outShape, outTexShape);\n  }\n}\n\nfunction getOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number]): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(outShape as [number], outTexShape);\n    case 2:\n      return getOutput2DCoords(outShape as [number, number], outTexShape);\n    case 3:\n      return getOutput3DCoords(\n          outShape as [number, number, number], outTexShape);\n    case 4:\n      return getOutput4DCoords(\n          outShape as [number, number, number, number], outTexShape);\n    case 5:\n      return getOutput5DCoords(\n          outShape as [number, number, number, number, number], outTexShape);\n    case 6:\n      return getOutput6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape);\n    default:\n      throw new Error(\n          `${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl: GLSL): string {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl: GLSL): string {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl: GLSL): string {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl: GLSL): string {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(\n    shape: [number], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(\n    shape: [number], texShape: [number, number]): string {\n  if (texShape[0] === 1) {\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(\n    shape: [number, number, number], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(\n    shape: [number, number, number], texShape: [number, number]): string {\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(\n    shape: number[], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch =\n      texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(\n    shape: [number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2'], shape);\n\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3'], shape);\n\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(\n    shape: [number, number], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${\n        packedTexShape[1]}));\n      }\n    `;\n  }\n\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(\n    shape: [number, number], texShape: [number, number]): string {\n  if (util.arraysEqual(shape, texShape)) {\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName: string): string {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const glsl = getGlslDifferences();\n\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${\n      packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n  const glsl = getGlslDifferences();\n\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` +\n          `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n      inputInfo.shapeInfo.flatOffset == null &&\n      util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nfunction squeezeInputInfo(\n    inInfo: InputInfo, squeezedShape: number[]): InputInfo {\n  // Deep copy.\n  const newInputInfo: InputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as broadcast_util from '../../ops/broadcast_util';\nimport {GPGPUProgram} from './gpgpu_math';\n\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nexport const COMPLEX_MULTIPLY = {\n  REAL: 'return areal * breal - aimag * bimag;',\n  IMAG: 'return areal * bimag + aimag * breal;'\n};\n\nexport class BinaryOpComplexProgram implements GPGPUProgram {\n  variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape =\n        broadcast_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    this.userCode = `\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${op}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as broadcast_util from '../../ops/broadcast_util';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nconst CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\nexport const ADD = 'return a + b;';\nexport const SUB = 'return a - b;';\nexport const MUL = 'return a * b;';\n\n// Without the equality check div produces 0.9999 for a = b, which when\n// floored can cause errors.\nexport const DIV = `\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;`;\n\n// We use native integer division to deal with floating point imprecision. Since\n// we implement floor division and glsl implements truncated division, we\n// correct for this by subtracting 1 from result when the result is negative and\n// there is a remainder.\nexport const INT_DIV = `\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n`;\n\nexport const POW = `\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n`;\nexport const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\n\nexport const EQUAL = `return float(a == b);`;\n\nexport const NOT_EQUAL = `return float(a != b);`;\n\nexport const LESS = `return float(a < b);`;\n\nexport const LESS_EQUAL = `return float(a <= b);`;\n\nexport const GREATER = `return float(a > b);`;\n\nexport const GREATER_EQUAL = `return float(a >= b);`;\n\nexport const LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;\n\nexport const LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;\n\nexport const MAX = CHECK_NAN_SNIPPET + `\n  return max(a, b);\n`;\nexport const MIN = CHECK_NAN_SNIPPET + `\n  return min(a, b);\n`;\nexport const MOD = `if (b == 0.0) return NAN;\n  return mod(a, b);`;\n\nexport const ATAN2 = CHECK_NAN_SNIPPET + `\n  return atan(a, b);\n`;\n\nexport const ELU_DER = `return (b >= 1.0) ? a : a * (b + 1.0);`;\n\nexport const PRELU = `return (a < 0.) ? b * a : a;`;\n\nexport class BinaryOpProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape =\n        broadcast_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as broadcast_util from '../../ops/broadcast_util';\nimport {sizeFromShape} from '../../util';\nimport {getChannels} from '../packing_util';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nconst CHECK_NAN_SNIPPET = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\n\n// We do the same as in ./binaryop_gpu, with vec4 and ivec4.\n// On Linux, the vectorized implementation produces NaNs when a and b are 0.\nexport const DIV = `\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n`;\n\nexport const INT_DIV = `\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n`;\n\nexport const POW = `\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const PRELU = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport const ELU_DER = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const ATAN2 = `\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const EQUAL = `\n  return vec4(equal(a, b));\n`;\n\nexport const NOT_EQUAL = `\n  return vec4(notEqual(a, b));\n`;\n\nexport const LESS = `\n  return vec4(lessThan(a, b));\n`;\n\nexport const LESS_EQUAL = `\n  return vec4(lessThanEqual(a, b));\n`;\n\nexport const GREATER = `\n  return vec4(greaterThan(a, b));\n`;\n\nexport const GREATER_EQUAL = `\n  return vec4(greaterThanEqual(a, b));\n`;\n\nexport const LOGICAL_AND = `\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n`;\n\nexport const LOGICAL_OR = `\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n`;\n\nexport const MAX = `\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const MIN = `\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const MOD = `\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport class BinaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  supportsBroadcasting = true;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      op: string, aShape: number[], bShape: number[],\n      checkOutOfBounds = false) {\n    this.outputShape =\n        broadcast_util.assertAndGetBroadcastShape(aShape, bShape);\n    const rank = this.outputShape.length;\n    let checkOutOfBoundsString = '';\n    if (checkOutOfBounds) {\n      if (rank === 0 || sizeFromShape(this.outputShape) === 1) {\n        checkOutOfBoundsString = `\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        `;\n      } else {\n        const dtype = getCoordsDataType(rank);\n        checkOutOfBoundsString = `\n          ${dtype} coords = getOutputCoords();\n        `;\n        if (rank === 1) {\n          checkOutOfBoundsString += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n        } else {\n          const channels = getChannels('coords', rank);\n          checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n        }\n      }\n    }\n\n    this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${op}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${checkOutOfBoundsString}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ClipProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  // Caching uniform locations for speed.\n  minLoc: WebGLUniformLocation;\n  maxLoc: WebGLUniformLocation;\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(min: number, max: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.minLoc == null) {\n        this.minLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'minVal');\n        this.maxLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'maxVal');\n      }\n      gpgpu.gl.uniform1f(this.minLoc, min);\n      gpgpu.gl.uniform1f(this.maxLoc, max);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ClipPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  userCode: string;\n  outputShape: number[];\n\n  // Caching uniform locations for speed.\n  minLoc: WebGLUniformLocation;\n  maxLoc: WebGLUniformLocation;\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(min: number, max: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.minLoc == null) {\n        this.minLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'minVal');\n        this.maxLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'maxVal');\n      }\n      gpgpu.gl.uniform1f(this.minLoc, min);\n      gpgpu.gl.uniform1f(this.maxLoc, max);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as concat_util from '../../ops/concat_util';\nimport {getChannels} from '../packing_util';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ConcatPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(shapes: number[][], axis: number) {\n    this.outputShape = concat_util.computeOutShape(shapes, axis);\n    const shape = this.outputShape;\n    const rank = shape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][axis];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][axis];\n    }\n\n    const channel = channels[axis];\n    const lastChannels = channels.slice(-2);\n    const allChannels = channels.join();\n\n    let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      // Note: the >= comparison below may seem unnecessary given the check\n      // above but is needed to workaround branch execution issues on some\n      // devices. It makes all the conditions exclusive without relying on\n      // execution order.\n      getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift)}));\n        }`;\n    }\n    const lastIndex = offsets.length;\n    const shift = offsets[offsets.length - 1];\n    getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n\n    this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n        if (${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n\n        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n  }\n}\n\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\nfunction shiftedChannels(channels: string[], channel: string, shift: number) {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Conv2DInfo, Conv3DInfo} from '../../ops/conv_util';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: Conv2DInfo, addBias = false, activation: string = null,\n      hasPreluActivationWeights = false) {\n    this.outputShape = convInfo.outShape;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivationWeights) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${channelDim}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${convInfo.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${inputDepthVec4Remainder === 1}) {\n\n              if (${isChannelsLast}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              }\n\n            } else if (${inputDepthVec4Remainder === 2}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${inputDepthVec4Remainder === 3}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nexport class Conv3DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: Conv3DInfo) {\n    this.outputShape = convInfo.outShape;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n\n    this.userCode = `\n      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${\n        strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          int xF = xFCorner + wF * ${dilationDepth};\n\n          if (xF < 0 || xF >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            int xR = xRCorner + wR * ${dilationHeight};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${inputDepthVec4Remainder === 1}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);\n              } else if (${inputDepthVec4Remainder === 2}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${inputDepthVec4Remainder === 3}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Conv2DInfo} from '../../ops/conv_util';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: Conv2DInfo, addBias = false, activation: string = null,\n      hasPreluActivation = false) {\n    this.outputShape = convInfo.outShape;\n\n    const xNumRows = convInfo.inHeight;\n    const xNumCols = convInfo.inWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${xNumRows}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${xNumCols}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Conv2DInfo} from '../../ops/conv_util';\nimport * as util from '../../util';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConvPacked2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: Conv2DInfo, addBias = false, activation: string = null,\n      hasPreluActivation = false) {\n    this.outputShape = convInfo.outShape;\n\n    const xNumRows = convInfo.inHeight;\n    const xNumCols = convInfo.inWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n\n    let mainLoop = `int xR; int xC; int xCOffset;`;\n\n    for (let r = 0; r < filterHeight; r++) {\n      for (let c = 0; c < filterWidth; c++) {\n        mainLoop += `\n          vec4 xTexelR${r}C${c * 2} = vec4(0.);\n          vec4 wR${r}C${c} = vec4(0.);\n          vec4 xR${r}C${c} = vec4(0.);`;\n      }\n    }\n\n    /**\n     * This vectorized implementation works by gathering the values needed for\n     * each output channel's dot product into vec4's and then multiplying them\n     * all together (this happens in the final double for-loop below). Most of\n     * the main loop consists of constructing these vec4's with the minimum\n     * number of texture2D calls, which means making use of all four returned\n     * values from a texture2D call at once.\n     */\n    for (let r = 0; r < filterHeight; r++) {\n      for (let texelC = 0; texelC < texelsAcross; texelC++) {\n        const c = texelC * 2;\n\n        mainLoop += `\n          xR = xRCorner + ${r * dilationHeight};\n          xC = xCCorner + ${c * dilationWidth};\n        `;\n\n        if (strideWidth === 1) {\n          if (c < filterWidth) {\n            // If padding is odd, the outer texels have to be composed.\n            if (padLeft % 2 === 1) {\n              // TODO: Ensure vec4 previous does not result in redundant sample,\n              // and avoid setting xTexelRC's that exceed the boundary in the\n              // first place rather than resetting them to vec4(0)).\n\n              // To compute xCOffset:\n              // - If padding is odd, we must add 1 to ensure we ask for an\n              // even-numbered row.\n              // - We subtract 2 to access the previous texel.\n\n              mainLoop += `\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${xNumRows} && xCOffset >= 0 && xCOffset < ${\n                  xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${xNumRows} && xCOffset >= 0 && xCOffset < ${\n                  xNumCols}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n                  xR${r}C${c} = vec4(previous.zw, xTexelR${r}C${c}.xy);\n                } else {\n                  xR${r}C${c} = vec4(0, 0, xTexelR${r}C${c}.xy);\n                }\n              `;\n            } else {\n              // Padding is even, so xRC corresponds to a single texel.\n              mainLoop += `\n                if(xR >= 0 && xR < ${xNumRows} && xC >= 0 && xC < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xR${r}C${c} = xTexelR${r}C${c};\n              `;\n            }\n\n            if (c + 1 < filterWidth) {\n              // If dilation is even, the second entry should match the first\n              // (either both are composed or both are single samples). But if\n              // dilation is odd, then the second entry should be the opposite\n              // of the first (if the first is composed, the second is a single\n              // sample, and vice versa.)\n\n              const nextTexelOffset = padLeft % 2 === 0 ?\n                  util.nearestLargerEven(dilationWidth) :\n                  dilationWidth;\n\n              if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                  (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n                mainLoop += `\n                  xCOffset = xC + ${padLeft % 2} + ${nextTexelOffset};\n\n                  if(xR >= 0 && xR < ${xNumRows} &&\n                    xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `;\n\n                // If dilation > 1 then the xRC's will not be able to share any\n                // values, so each xRC will require two unique calls to getX.\n                if (dilationWidth > 1) {\n                  mainLoop += `\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${xNumRows} &&\n                      xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                      xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${r}C${c} = vec4(0.);\n                    }\n                  `;\n                }\n\n                mainLoop += `\n                  xR${r}C${c + 1} = vec4(\n                    xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.xy);\n                `;\n              } else {\n                mainLoop += `\n                  xCOffset = xC + ${nextTexelOffset};\n\n                  if(xR >= 0 && xR < ${xNumRows} &&\n                    xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${r}C${c + 1} = xTexelR${r}C${c + 2};\n                `;\n              }\n            }\n          }\n        } else {  // stride > 1\n          if (c < filterWidth) {\n            mainLoop += `\n              if(xR >= 0 && xR < ${xNumRows}) {\n            `;\n\n            // Depending on whether padLeft is even or odd, we want either the\n            // xy or zw channels from X texels for xR${r}C${c}. If padLeft is\n            // even, xR${r}C${c + 1} is simply the zw channels of texels we've\n            // already sampled. But if padLeft is odd, xR${r}C{$c + 1}.zw will\n            // need to come from the xy channels of a new texel, hence the `vec4\n            // final` initialized below.\n            if (padLeft % 2 === 1) {\n              mainLoop += `\n                xCOffset = xC + 1 - ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${xNumCols}) {\n                  xTexelR${r}C${c + 2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${r}C${c + 2} = vec4(0.);\n                }\n\n                xR${r}C${c} = vec4(\n                  xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.zw);\n              `;\n\n              if (c + 1 < filterWidth) {\n                mainLoop += `\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${strideWidth};\n                  if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${r}C${c + 1} = vec4(xTexelR${r}C${c + 2}.xy, final.xy);\n                `;\n              }\n            } else {\n              mainLoop += `\n                if(xC >= 0 && xC < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xCOffset = xC + ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${r}C${c + 2} = vec4(0.);\n                }\n\n                xR${r}C${c} = vec4(\n                  xTexelR${r}C${c}.xy, xTexelR${r}C${c + 2}.xy);\n              `;\n\n              if (c + 1 < filterWidth) {\n                mainLoop += `\n                  xR${r}C${c + 1} = vec4(\n                    xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.zw);\n                `;\n              }\n            }\n\n            mainLoop += `}`;\n          }\n        }\n\n        if (c < filterWidth) {\n          mainLoop += `\n            vec4 wTexelR${r}C${c} = getW(${r}, ${c}, d1, q);\n            wR${r}C${c} = vec4(wTexelR${r}C${c}.xz, wTexelR${r}C${c}.xz);\n          `;\n\n          if (c + 1 < filterWidth) {\n            mainLoop += `\n              vec4 wTexelR${r}C${c + 1} = getW(${r}, ${c + 1}, d1, q);\n              wR${r}C${c + 1} =\n                vec4(wTexelR${r}C${c + 1}.xz, wTexelR${r}C${c + 1}.xz);`;\n          }\n        }\n      }\n    }\n\n    for (let r = 0; r < filterHeight; r++) {\n      for (let c = 0; c < filterWidth; c++) {\n        mainLoop += `dotProd += xR${r}C${c} * wR${r}C${c};`;\n      }\n    }\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${mainLoop}\n\n        vec4 result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class CumSumProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(shape: number[], exclusive: boolean, reverse: boolean) {\n    this.outputShape = shape;\n    const rank = shape.length;\n    const finalDim = shape[shape.length - 1];\n    const comparator = reverse ? '<' : '>';\n\n    this.userCode = `\n      int getIndex(int i) {\n        ${reverse ? `return ${finalDim} -i - 1;` : 'return i;'}\n      }\n\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords')};\n        float val = 0.0;\n        for (int i = ${finalDim} - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx ${comparator} end) {\n            continue;\n          }\n          if (idx == end && ${exclusive}) {\n            continue;\n          }\n          ${getFinalCoord(rank, 'coords')} = idx;\n          val += getX(${getCoords(rank, 'coords')});\n        }\n        setOutput(val);\n      }\n    `;\n  }\n}\n\nfunction getCoords(rank: number, name: string): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n  }\n}\n\nfunction getFinalCoord(rank: number, name: string): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthToSpaceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  blockSize: number;\n  dataFormat: string;\n\n  constructor(\n      outputShape: number[], blockSize: number, dataFormat: 'NHWC'|'NCHW') {\n    this.outputShape = outputShape;\n    this.blockSize = blockSize;\n    this.dataFormat = dataFormat;\n    this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n  }\n\n  private getHeightCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n\n  private getWidthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n\n  private getDepthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n\n  private getOutputDepthSize(): number {\n    if (this.dataFormat === 'NHWC') {\n      return this.outputShape[3];\n    } else {\n      return this.outputShape[1];\n    }\n  }\n\n  private getInputSamplingString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport const COMPLEX_FFT = {\n  REAL: 'return real * expR - imag * expI;',\n  IMAG: 'return real * expI + imag * expR;'\n};\n\nexport class FFTProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(op: string, inputShape: [number, number], inverse: boolean) {\n    const innerDim = inputShape[1];\n    this.outputShape = inputShape;\n\n    const exponentMultiplierSnippet =\n        inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\n    const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\n\n    this.userCode = `\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${op}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${innerDim});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${innerDim}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FillProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  valueLoc: WebGLUniformLocation;\n\n  constructor(shape: number[], value: number) {\n    this.variableNames = ['x'];\n    this.outputShape = shape;\n\n    this.userCode = `\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    `;\n  }\n\n  getCustomSetupFunc(value: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.valueLoc == null) {\n        this.valueLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'value');\n      }\n      gpgpu.gl.uniform1f(this.valueLoc, value);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {PixelData, TypedArray} from '../../types';\n\nimport {getGlslDifferences} from './glsl_version';\nimport * as tex_util from './tex_util';\nimport {TextureConfig} from './tex_util';\nimport * as webgl_util from './webgl_util';\n\nexport function createVertexShader(\n    gl: WebGLRenderingContext, debug: boolean): WebGLShader {\n  const glsl = getGlslDifferences();\n  const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n  return webgl_util.createVertexShader(gl, debug, vertexShaderSource);\n}\n\nexport function createVertexBuffer(\n    gl: WebGLRenderingContext, debug: boolean): WebGLBuffer {\n  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n  const vertexArray = new Float32Array(\n      [-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return webgl_util.createStaticVertexBuffer(gl, debug, vertexArray);\n}\n\nexport function createIndexBuffer(\n    gl: WebGLRenderingContext, debug: boolean): WebGLBuffer {\n  // OpenGL (and WebGL) have \"CCW == front\" winding\n  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return webgl_util.createStaticIndexBuffer(gl, debug, triangleVertexIndices);\n}\n\nfunction createAndConfigureTexture(\n    gl: WebGLRenderingContext, debug: boolean, width: number, height: number,\n    internalFormat: number, textureFormat: number,\n    textureType: number): WebGLTexture {\n  webgl_util.validateTextureSize(width, height);\n  const texture = webgl_util.createTexture(gl, debug);\n\n  const tex2d = gl.TEXTURE_2D;\n  webgl_util.callAndCheck(gl, debug, () => gl.bindTexture(tex2d, texture));\n  webgl_util.callAndCheck(\n      gl, debug,\n      () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, debug,\n      () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, debug,\n      () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl, debug,\n      () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl, debug,\n      () => gl.texImage2D(\n          tex2d, 0, internalFormat, width, height, 0, textureFormat,\n          textureType, null));\n  webgl_util.callAndCheck(gl, debug, () => gl.bindTexture(gl.TEXTURE_2D, null));\n  return texture;\n}\n\nexport function createFloat32MatrixTexture(\n    gl: WebGLRenderingContext, debug: boolean, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, debug, width, height, textureConfig.internalFormatFloat,\n      textureConfig.textureFormatFloat, gl.FLOAT);\n}\n\nexport function createFloat16MatrixTexture(\n    gl: WebGLRenderingContext, debug: boolean, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, debug, width, height, textureConfig.internalFormatHalfFloat,\n      textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\n\nexport function createUnsignedBytesMatrixTexture(\n    gl: WebGLRenderingContext, debug: boolean, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, debug, width, height, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE);\n}\n\nexport function createPackedMatrixTexture(\n    gl: WebGLRenderingContext, debug: boolean, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, debug, width, height, textureConfig.internalFormatPackedFloat,\n      gl.RGBA, gl.FLOAT);\n}\n\nexport function createFloat16PackedMatrixTexture(\n    gl: WebGLRenderingContext, debug: boolean, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, debug, width, height, textureConfig.internalFormatPackedHalfFloat,\n      gl.RGBA, textureConfig.textureTypeHalfFloat);\n}\n\nexport function bindVertexProgramAttributeStreams(\n    gl: WebGLRenderingContext, debug: boolean, program: WebGLProgram,\n    vertexBuffer: WebGLBuffer): boolean {\n  const posOffset = 0;               // x is the first buffer element\n  const uvOffset = 3 * 4;            // uv comes after [x y z]\n  const stride = (3 * 4) + (2 * 4);  // xyz + uv, each entry is 4-byte float.\n  webgl_util.callAndCheck(\n      gl, debug, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n  const success = webgl_util.bindVertexBufferToProgramAttribute(\n      gl, debug, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n  return success &&\n      webgl_util.bindVertexBufferToProgramAttribute(\n          gl, debug, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\n\nexport function uploadDenseMatrixToTexture(\n    gl: WebGLRenderingContext, debug: boolean, texture: WebGLTexture,\n    width: number, height: number, data: TypedArray,\n    textureConfig: TextureConfig) {\n  webgl_util.callAndCheck(\n      gl, debug, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n\n  let dataForUpload: TypedArray, texelDataType: number, internalFormat: number;\n  if (data instanceof Uint8Array) {\n    dataForUpload = new Uint8Array(width * height * 4);\n    texelDataType = gl.UNSIGNED_BYTE;\n    internalFormat = gl.RGBA;\n  } else {\n    dataForUpload = new Float32Array(width * height * 4);\n    texelDataType = gl.FLOAT;\n    internalFormat = textureConfig.internalFormatPackedFloat;\n  }\n\n  dataForUpload.set(data);\n\n  webgl_util.callAndCheck(\n      gl, debug,\n      () => gl.texImage2D(\n          gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA,\n          texelDataType, dataForUpload));\n\n  webgl_util.callAndCheck(gl, debug, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function uploadPixelDataToTexture(\n    gl: WebGLRenderingContext, debug: boolean, texture: WebGLTexture,\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement) {\n  webgl_util.callAndCheck(\n      gl, debug, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  if ((pixels as PixelData).data instanceof Uint8Array) {\n    webgl_util.callAndCheck(\n        gl, debug,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA,\n            gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n  } else {\n    webgl_util.callAndCheck(\n        gl, debug,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE,\n            pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n                HTMLVideoElement));\n  }\n\n  webgl_util.callAndCheck(gl, debug, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function createBufferFromOutputTexture(\n    gl2: WebGL2RenderingContext, debug: boolean, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLBuffer {\n  // Create and bind the buffer.\n  const buffer = gl2.createBuffer();\n  webgl_util.callAndCheck(\n      gl2, debug, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n\n  // Initialize the buffer to the size of the texture in bytes.\n  const bytesPerFloat = 4;\n  const valuesPerTexel = 4;\n  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n\n  webgl_util.callAndCheck(\n      gl2, debug,\n      () => gl2.bufferData(\n          gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n\n  // Enqueue a command on the GPU command queue to copy of texture into the\n  // buffer.\n  webgl_util.callAndCheck(\n      gl2, debug,\n      () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n\n  webgl_util.callAndCheck(\n      gl2, debug, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n\n  return buffer;\n}\n\nexport function downloadFloat32MatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer,\n    size: number): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget = new Float32Array(size);\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(\n    gl: WebGLRenderingContext, debug: boolean, rows: number, columns: number,\n    textureConfig: TextureConfig) {\n  const [w, h] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n\n  const numChannels = 4;\n  const downloadTarget = new Uint8Array(\n      tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n\n  webgl_util.callAndCheck(\n      gl, debug,\n      () => gl.readPixels(\n          0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE,\n          downloadTarget));\n\n  // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n  // decoding of the 4 bytes that back each 32 bit float.\n  return new Float32Array(downloadTarget.buffer);\n}\n\nexport function downloadPackedMatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer, batch: number, rows: number,\n    cols: number, physicalRows: number, physicalCols: number,\n    textureConfig: TextureConfig): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget =\n      new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(\n          physicalRows, physicalCols));\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadMatrixFromPackedOutputTexture(\n    gl: WebGLRenderingContext, debug: boolean, physicalRows: number,\n    physicalCols: number): Float32Array {\n  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n  webgl_util.callAndCheck(\n      gl, debug,\n      () => gl.readPixels(\n          0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n\n  return packedRGBA;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '../../environment';\n\nimport {PixelData, TypedArray} from '../../types';\nimport * as util from '../../util';\n\nimport {getWebGLContext, setWebGLContext} from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport {TextureConfig} from './tex_util';\nimport {WebGL1DisjointQueryTimerExtension, WebGL2DisjointQueryTimerExtension} from './webgl_types';\nimport * as webgl_util from './webgl_util';\n\nexport interface FenceContext {\n  query: WebGLQuery|WebGLSync;\n  isFencePassed(): boolean;\n}\n\nexport class GPGPUContext {\n  gl: WebGLRenderingContext;\n  textureFloatExtension: {};\n  textureHalfFloatExtension: {};\n  colorBufferFloatExtension: {};\n  colorBufferHalfFloatExtension: {};\n  disjointQueryTimerExtension: WebGL2DisjointQueryTimerExtension|\n      WebGL1DisjointQueryTimerExtension;\n  vertexBuffer: WebGLBuffer;\n  indexBuffer: WebGLBuffer;\n  framebuffer: WebGLFramebuffer;\n  outputTexture: WebGLTexture|null = null;\n  program: WebGLProgram|null = null;\n  private disposed = false;\n  private disjoint: boolean;\n  private textureConfig: TextureConfig;\n\n  constructor(gl?: WebGLRenderingContext) {\n    const glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    // WebGL 2.0 enables texture floats without an extension.\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n\n      this.textureFloatExtension =\n          webgl_util.getExtensionOrThrow(this.gl, this.debug, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension = webgl_util.getExtensionOrThrow(\n            this.gl, this.debug, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support half float textures, yet the ' +\n            'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension = webgl_util.getExtensionOrThrow(\n            this.gl, this.debug, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support color renderable half floats, yet ' +\n            'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl, this.debug);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl, this.debug);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl, this.debug);\n\n    this.textureConfig =\n        tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n\n  private get debug(): boolean {\n    return env().getBool('DEBUG');\n  }\n\n  public dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n          ' This is probably a resource leak, delete the program with ' +\n          'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound output matrix ' +\n          'texture.  This is probably a resource leak, delete the output ' +\n          'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n          'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, this.debug, () => gl.finish());\n    webgl_util.callAndCheck(\n        gl, this.debug, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(\n        gl, this.debug, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(\n        gl, this.debug, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(\n        gl, this.debug, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(\n        gl, this.debug, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n\n  public createFloat32MatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(\n        this.gl, this.debug, rows, columns, this.textureConfig);\n  }\n\n  public createFloat16MatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(\n        this.gl, this.debug, rows, columns, this.textureConfig);\n  }\n\n  public createUnsignedBytesMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(\n        this.gl, this.debug, rows, columns, this.textureConfig);\n  }\n\n  public uploadPixelDataToTexture(\n      texture: WebGLTexture,\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, this.debug, texture, pixels);\n  }\n\n  public uploadDenseMatrixToTexture(\n      texture: WebGLTexture, width: number, height: number, data: TypedArray) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(\n        this.gl, this.debug, texture, width, height, data, this.textureConfig);\n  }\n\n  public createFloat16PackedMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(\n        this.gl, this.debug, rows, columns, this.textureConfig);\n  }\n\n  public createPackedMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(\n        this.gl, this.debug, rows, columns, this.textureConfig);\n  }\n\n  public deleteMatrixTexture(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(\n          this.gl, this.debug, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(\n        this.gl, this.debug, () => this.gl.deleteTexture(texture));\n  }\n\n  public downloadByteEncodedFloatMatrixFromOutputTexture(\n      texture: WebGLTexture, rows: number, columns: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(\n            this.gl, this.debug, rows, columns, this.textureConfig));\n  }\n\n  public downloadPackedMatrixFromBuffer(\n      buffer: WebGLBuffer, batch: number, rows: number, columns: number,\n      physicalRows: number, physicalCols: number): Float32Array {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(\n        this.gl, buffer, batch, rows, columns, physicalRows, physicalCols,\n        this.textureConfig);\n  }\n\n  public downloadFloat32MatrixFromBuffer(buffer: WebGLBuffer, size: number):\n      Float32Array {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n\n  public createBufferFromTexture(\n      texture: WebGLTexture, rows: number, columns: number): WebGLBuffer {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(\n        this.gl as WebGL2RenderingContext, this.debug, rows, columns,\n        this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n\n  public createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let query: WebGLQuery|WebGLSync;\n    let isFencePassed: () => boolean;\n\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl as WebGL2RenderingContext;\n\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED ||\n            status === gl2.CONDITION_SATISFIED;\n      };\n\n      query = sync;\n    } else if (\n        env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(\n          query,\n          env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n\n    return {query, isFencePassed};\n  }\n\n  public downloadMatrixFromPackedTexture(\n      texture: WebGLTexture, physicalRows: number,\n      physicalCols: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadMatrixFromPackedOutputTexture(\n            this.gl, this.debug, physicalRows, physicalCols));\n  }\n\n  private vertexAttrsAreBound = false;\n\n  public createProgram(fragmentShaderSource: string): WebGLProgram {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    const fragmentShader: WebGLShader =\n        webgl_util.createFragmentShader(gl, this.debug, fragmentShaderSource);\n    const vertexShader: WebGLShader =\n        gpgpu_util.createVertexShader(gl, this.debug);\n    const program: WebGLProgram = webgl_util.createProgram(\n        gl,\n        this.debug,\n    );\n    webgl_util.callAndCheck(\n        gl, this.debug, () => gl.attachShader(program, vertexShader));\n    webgl_util.callAndCheck(\n        gl, this.debug, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, this.debug, program);\n    if (this.debug) {\n      webgl_util.validateProgram(gl, this.debug, program);\n    }\n    if (!this.vertexAttrsAreBound) {\n      this.setProgram(program);\n      this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(\n          gl, this.debug, this.program, this.vertexBuffer);\n    }\n    return program;\n  }\n\n  public deleteProgram(program: WebGLProgram) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(\n          this.gl, this.debug, () => this.gl.deleteProgram(program));\n    }\n  }\n\n  public setProgram(program: WebGLProgram|null) {\n    this.throwIfDisposed();\n    this.program = program;\n    if ((this.program != null) && this.debug) {\n      webgl_util.validateProgram(this.gl, this.debug, this.program);\n    }\n    webgl_util.callAndCheck(\n        this.gl, this.debug, () => this.gl.useProgram(program));\n  }\n\n  public getUniformLocation(\n      program: WebGLProgram, uniformName: string,\n      shouldThrow = true): WebGLUniformLocation {\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(\n          this.gl, this.debug, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(\n          this.gl, program, uniformName);\n    }\n  }\n\n  public getAttributeLocation(program: WebGLProgram, attribute: string):\n      number {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(\n        this.gl, this.debug,\n        () => this.gl.getAttribLocation(program, attribute));\n  }\n\n  public getUniformLocationNoThrow(program: WebGLProgram, uniformName: string):\n      WebGLUniformLocation {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n\n  public setInputMatrixTexture(\n      inputMatrixTexture: WebGLTexture, uniformLocation: WebGLUniformLocation,\n      textureUnit: number) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(\n        this.gl, this.debug, this.program, inputMatrixTexture, uniformLocation,\n        textureUnit);\n  }\n\n  public setOutputMatrixTexture(\n      outputMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n\n  public setOutputPackedMatrixTexture(\n      outputPackedMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.throwIfDisposed();\n    const [width, height] =\n        tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n\n  public setOutputMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    this.setOutputMatrixWriteRegionDriver(\n        startColumn, startRow, numColumns, numRows);\n  }\n\n  public setOutputPackedMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n\n  public debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.debug, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n\n  public executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(\n        gl, this.debug,\n        () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n\n  public blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, this.debug, () => this.gl.finish());\n  }\n\n  private getQueryTimerExtension(): WebGL1DisjointQueryTimerExtension\n      |WebGL2DisjointQueryTimerExtension {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension =\n          webgl_util.getExtensionOrThrow(\n              this.gl, this.debug,\n              env().getNumber(\n                  'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                  'EXT_disjoint_timer_query_webgl2' :\n                  'EXT_disjoint_timer_query') as\n              WebGL1DisjointQueryTimerExtension |\n          WebGL2DisjointQueryTimerExtension;\n    }\n    return this.disjointQueryTimerExtension;\n  }\n\n  private getQueryTimerExtensionWebGL2(): WebGL2DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension();\n  }\n\n  private getQueryTimerExtensionWebGL1(): WebGL1DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension() as WebGL1DisjointQueryTimerExtension;\n  }\n\n  beginQuery(): WebGLQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT() as WebGLQuery;\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n\n  public async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await util.repeatedTry(\n        () => this.disposed ||  // while testing contexts are created / disposed\n                                // in rapid succession, so without this check we\n                                // may poll for the query timer indefinitely\n            this.isQueryAvailable(\n                query,\n                env().getNumber(\n                    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(\n        query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n\n  private getQueryTime(query: WebGLQuery, queryTimerVersion: number): number {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const timeElapsedNanos =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n\n  private isQueryAvailable(query: WebGLQuery, queryTimerVersion: number):\n      boolean {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const available =\n          gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const available =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    }\n  }\n\n  pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    util.repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n\n  private bindTextureToFrameBuffer(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(\n        this.gl, this.debug, texture, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n\n  private unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(\n          this.gl, this.debug, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(\n          this.gl, this.debug, this.framebuffer);\n    }\n  }\n\n  private downloadMatrixDriver(\n      texture: WebGLTexture,\n      downloadAndDecode: () => Float32Array): Float32Array {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n\n    return result;\n  }\n\n  private setOutputMatrixTextureDriver(\n      outputMatrixTextureMaybePacked: WebGLTexture, width: number,\n      height: number) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(\n        gl, this.debug, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(\n        gl, this.debug, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(\n        gl, this.debug, () => gl.scissor(0, 0, width, height));\n  }\n\n  private setOutputMatrixWriteRegionDriver(\n      x: number, y: number, width: number, height: number) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(\n        this.gl, this.debug, () => this.gl.scissor(x, y, width, height));\n  }\n\n  private throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n\n  private throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean,\n  resolveFn: () => void\n};\n\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '../../environment';\nimport {Tensor} from '../../tensor';\nimport {TypedArray} from '../../types';\nimport * as util from '../../util';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport * as shader_compiler from './shader_compiler';\nimport {InputInfo, ShapeInfo} from './shader_compiler';\nimport {PackingScheme, TextureData, TextureUsage} from './tex_util';\n\nexport interface GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  /** If true, this program expects packed input textures. Defaults to false. */\n  packedInputs?: boolean;\n  /** If true, this program produces a packed texture. Defaults to false. */\n  packedOutput?: boolean;\n  /**\n   * Affects what type of texture we allocate for the output. Defaults to\n   * `TextureUsage.RENDER`.\n   */\n  outTexUsage?: TextureUsage;\n  /**\n   * The type of scheme to use when packing texels for the output values.\n   * See `PackingScheme` for details. Defaults to `PackingScheme.SHARED_BATCH`.\n   */\n  outPackingScheme?: PackingScheme;\n}\n\nexport interface GPGPUBinary {\n  webGLProgram: WebGLProgram;\n  program: GPGPUProgram;\n  uniformLocations: {[name: string]: WebGLUniformLocation};\n  source: string;\n  inShapeInfos: ShapeInfo[];\n  outShapeInfo: ShapeInfo;\n  infLoc: WebGLUniformLocation;\n  nanLoc: WebGLUniformLocation;\n}\n\nexport interface TensorData {\n  shape: number[];\n  texData: TextureData;\n  isUniform: boolean;\n  // Available when we decide to upload as uniform instead of texture.\n  uniformValues?: TypedArray;\n}\n\nexport function compileProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, program: GPGPUProgram, inputs: TensorData[],\n    output: TensorData): GPGPUBinary {\n  const userCode = program.userCode;\n  const inputInfos: InputInfo[] = inputs.map((input, i) => {\n    const shapeInfo: ShapeInfo = {\n      logicalShape: input.shape,\n      texShape: input.isUniform ? null : input.texData.texShape,\n      isUniform: input.isUniform,\n      isPacked: input.isUniform ? false : input.texData.isPacked,\n      flatOffset: null\n    };\n    if (input.texData != null && input.texData.slice != null &&\n        input.texData.slice.flatOffset > 0) {\n      shapeInfo.flatOffset = input.texData.slice.flatOffset;\n    }\n    return {name: program.variableNames[i], shapeInfo};\n  });\n  const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n  const outShapeInfo: ShapeInfo = {\n    logicalShape: output.shape,\n    texShape: output.texData.texShape,\n    isUniform: false,\n    isPacked: output.texData.isPacked,\n    flatOffset: null\n  };\n  const source = shader_compiler.makeShader(\n      inputInfos, outShapeInfo, userCode, program.packedInputs);\n\n  const webGLProgram = gpgpu.createProgram(source);\n\n  // Add special uniforms (NAN, INFINITY)\n  let infLoc: WebGLUniformLocation = null;\n  const nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n  }\n\n  // Add user-defined uniforms\n  const uniformLocations: {[name: string]: WebGLUniformLocation} = {};\n  for (let i = 0; i < program.variableNames.length; i++) {\n    const varName = program.variableNames[i];\n    const shouldThrow = false;\n    uniformLocations[varName] =\n        gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n    uniformLocations[`offset${varName}`] =\n        gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n  }\n\n  return {\n    program,\n    source,\n    webGLProgram,\n    uniformLocations,\n    inShapeInfos,\n    outShapeInfo,\n    infLoc,\n    nanLoc,\n  };\n}\n\nfunction validateBinaryAndProgram(\n    shapeInfos: ShapeInfo[], inputs: TensorData[]) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(\n        `Binary was compiled with ${shapeInfos.length} inputs, but ` +\n        `was executed with ${inputs.length} inputs`);\n  }\n\n  shapeInfos.forEach((s, i) => {\n    const shapeA = s.logicalShape;\n    const input = inputs[i];\n    const shapeB = input.shape;\n\n    if (!util.arraysEqual(shapeA, shapeB)) {\n      throw Error(\n          `Binary was compiled with different shapes than ` +\n          `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n    }\n    // The input is uploaded as uniform.\n    if (s.isUniform && input.isUniform) {\n      return;\n    }\n\n    const texShapeA = s.texShape;\n    const texShapeB = input.isUniform ? null : input.texData.texShape;\n    if (!util.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(\n          `Binary was compiled with different texture shapes than the` +\n          ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n    }\n  });\n}\n\nexport function runProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, binary: GPGPUBinary, inputs: TensorData[],\n    output: TensorData,\n    customSetup?: (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) =>\n        void): void {\n  validateBinaryAndProgram(binary.inShapeInfos, inputs);\n  validateBinaryAndProgram([binary.outShapeInfo], [output]);\n\n  const outTex = output.texData.texture;\n  const outTexShape = output.texData.texShape;\n  if (output.texData.isPacked) {\n    gpgpu.setOutputPackedMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  } else {\n    gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  }\n  gpgpu.setProgram(binary.webGLProgram);\n\n  // Set special uniforms (NAN, INFINITY)\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    if (binary.infLoc !== null) {\n      gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n    }\n  }\n  if (binary.nanLoc !== null) {\n    gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n  }\n\n  // Set user-defined inputs\n  inputs.forEach((input, i) => {\n    const varName = binary.program.variableNames[i];\n    const varLoc = binary.uniformLocations[varName];\n    const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n\n    if (varLoc == null) {\n      // The compiler inferred that this variable is not used in this shader.\n      return;\n    }\n\n    if (input.isUniform) {\n      // Upload the values of the tensor as uniform.\n      if (util.sizeFromShape(input.shape) < 2) {\n        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n      } else {\n        let vals = input.uniformValues;\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n        gpgpu.gl.uniform1fv(varLoc, vals);\n      }\n      return;\n    }\n\n    // If the input was sliced, upload the flat offset index.\n    if (input.texData.slice != null && varOffsetLoc != null) {\n      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n    }\n\n    gpgpu.setInputMatrixTexture(input.texData.texture, varLoc, i);\n  });\n\n  if (customSetup != null) {\n    customSetup(gpgpu, binary.webGLProgram);\n  }\n  gpgpu.executeProgram();\n}\n\nexport function makeShaderKey(\n    program: GPGPUProgram, inputs: TensorData[], output: TensorData): string {\n  let keyInputs = '';\n  inputs.concat(output).forEach(x => {\n    const hasOffset = x.texData != null && x.texData.slice != null &&\n        x.texData.slice.flatOffset > 0;\n    const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n    keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n  });\n  const keyUserCode = program.userCode;\n  let key = program.constructor.name;\n  // Fast string concat. See https://jsperf.com/string-concatenation/14.\n  key += '_' + keyInputs + '_' + keyUserCode;\n  return key;\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MatMulPackedProgram implements GPGPUProgram {\n  variableNames = ['matrixA', 'matrixB'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      aShape: [number, number, number], outputShape: [number, number, number],\n      transposeA = false, transposeB = false, addBias = false,\n      activation: string = null, hasPreluActivation = false) {\n    this.outputShape = outputShape;\n\n    const sharedDim = transposeA ? aShape[1] : aShape[2];\n    const sharedDimensionPacked = Math.ceil(sharedDim / 2);\n\n    const aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';\n    const bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';\n    const aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];\n    const bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const float sharedDimension = ${sharedDimensionPacked}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${sharedDimensionPacked}; i++) {\n          vec4 a = getMatrixA(rc.x, ${aSample});\n          vec4 b = getMatrixB(rc.x, ${bSample});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${aSwizzle[0]} * ${bSwizzle[0]});\n          result += (${aSwizzle[1]} * ${bSwizzle[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${addBiasSnippet}\n\n        ${applyActivationSnippet}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MultinomialProgram implements GPGPUProgram {\n  variableNames = ['probs'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  seedLoc: WebGLUniformLocation;\n\n  constructor(batchSize: number, numOutcomes: number, numSamples: number) {\n    this.outputShape = [batchSize, numSamples];\n\n    this.userCode = `\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${numOutcomes - 1}));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(seed: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.seedLoc == null) {\n        this.seedLoc = gpgpu.getUniformLocation(webGLProgram, 'seed');\n      }\n      gpgpu.gl.uniform1f(this.seedLoc, seed);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Conv2DInfo} from '../../ops/conv_util';\nimport {Conv3DInfo} from '../../ops/conv_util';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Pool2DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: Conv2DInfo, poolType: 'max'|'avg', computePositions: boolean) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n        const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${compareOp} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = wR * ${effectiveFilterWidth} + wC;\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / count`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)\n            );\n\n            ${updateSnippet}\n          }\n\n          int xC = xCCorner + ${filterWidthNearestVec4};\n          if (${filterWidthVec4Remainder === 1}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 2}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 3}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              initializationValue\n            );\n\n            ${updateSnippet}\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n\nexport class Pool3DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: Conv3DInfo, poolType: 'max'|'avg', computePositions: boolean) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec3 strides =\n            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${effectiveFilterDepth};\n              wD += ${dilationDepth}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${effectiveFilterHeight};\n                wR += ${dilationHeight}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${effectiveFilterWidth};\n                  wC += ${dilationWidth}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${compareOp} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition =\n                      wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                      wR * ${effectiveFilterWidth} + wC;;\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / count`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec3 strides =\n        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)\n              );\n\n              ${updateSnippet}\n            }\n\n            int xC = xCCorner + ${filterWidthNearestVec4};\n            if (${filterWidthVec4Remainder === 1}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 2}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 3}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                initializationValue\n              );\n\n              ${updateSnippet}\n            }\n          }\n          setOutput(${returnValue});\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ScatterProgram implements GPGPUProgram {\n  variableNames = ['updates', 'indices', 'defaultValue'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      updateSize: number, sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      summingDupeIndex = true) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    let updatesString = '';\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SliceProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  // Caching uniform location for speed.\n  startLoc: WebGLUniformLocation;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    const uniformPart = `uniform int start[${this.rank}];`;\n    const sourceCoords = getCoords(this.rank);\n\n    let body: string;\n    const coordSum = destSize.map((_, i) => {\n      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n    });\n    body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n    this.userCode = `\n      ${uniformPart}\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(start: number[]) {\n    if (start.length !== this.rank) {\n      throw Error(\n          `The rank (${this.rank}) of the program must match the ` +\n          `length of start (${start.length})`);\n    }\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.startLoc == null) {\n        this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n        if (this.startLoc == null) {\n          // This means the compiler has optimized and realized it doesn't need\n          // the uniform.\n          return;\n        }\n      }\n      gpgpu.gl.uniform1iv(this.startLoc, start);\n    };\n  }\n}\n\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank: number): string {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getChannels} from '../packing_util';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SlicePackedProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  // Caching uniform location for speed.\n  startLoc: WebGLUniformLocation;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    const coords = getChannels('coords', this.rank);\n    const sourceLoc = getChannels('sourceLoc', this.rank);\n\n    const innerDims =\n        this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;\n    const getChannel =\n        `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;\n    const upperRow = `\n      result.x = ${getChannel};\n      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n        ++${sourceLoc[this.rank - 1]};\n        result.y = ${getChannel};\n        --${sourceLoc[this.rank - 1]};\n      }\n    `;\n    const lowerRow = this.rank === 1 ? '' : `\n      --${coords[this.rank - 1]};\n      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {\n        ++${sourceLoc[this.rank - 2]};\n        result.z = ${getChannel};\n        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n          ++${sourceLoc[this.rank - 1]};\n          result.w = ${getChannel};\n        }\n      }\n    `;\n\n    const sourceLocSetup = this.rank <= 4 ?\n        `sourceLoc = coords +\n            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` :\n        destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`)\n            .join('\\n');\n    this.userCode = `\n      uniform int start[${this.rank}];\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        ${dtype} sourceLoc;\n        ${sourceLocSetup}\n        vec4 result = vec4(0.);\n        ${upperRow}\n        ${lowerRow}\n        setOutput(result);\n      }\n    `;\n  }\n\n  getCustomSetupFunc(start: number[]) {\n    if (start.length !== this.rank) {\n      throw Error(\n          `The rank (${this.rank}) of the program must match the ` +\n          `length of start (${start.length})`);\n    }\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.startLoc == null) {\n        this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n        if (this.startLoc == null) {\n          // This means the compiler has optimized and realized it doesn't need\n          // the uniform.\n          return;\n        }\n      }\n      gpgpu.gl.uniform1iv(this.startLoc, start);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '../../environment';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {PhysicalTextureType, TextureUsage} from './tex_util';\n\nexport class TextureManager {\n  private numUsedTextures = 0;\n  private numFreeTextures = 0;\n  private freeTextures: {[shape: string]: WebGLTexture[]} = {};\n  private logEnabled = false;\n  private usedTextures: {[shape: string]: WebGLTexture[]} = {};\n\n  constructor(private gpgpu: GPGPUContext) {}\n\n  acquireTexture(\n      shapeRC: [number, number], usage: TextureUsage,\n      isPacked: boolean): WebGLTexture {\n    const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);\n\n    const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n    if (!(shapeKey in this.usedTextures)) {\n      this.usedTextures[shapeKey] = [];\n    }\n\n    if (this.freeTextures[shapeKey].length > 0) {\n      this.numFreeTextures--;\n      this.numUsedTextures++;\n      this.log();\n      const newTexture = this.freeTextures[shapeKey].shift();\n      this.usedTextures[shapeKey].push(newTexture);\n      return newTexture;\n    }\n    this.numUsedTextures++;\n    this.log();\n\n    let newTexture: WebGLTexture;\n    if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT32) {\n      newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT32) {\n      newTexture =\n          this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);\n\n    } else if (\n        physicalTexType === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {\n      newTexture =\n          this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);\n    }\n    this.usedTextures[shapeKey].push(newTexture);\n\n    return newTexture;\n  }\n\n  releaseTexture(\n      texture: WebGLTexture, shape: [number, number],\n      logicalTexType: TextureUsage, isPacked: boolean): void {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    const physicalTexType =\n        getPhysicalFromLogicalTextureType(logicalTexType, isPacked);\n    const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n    this.freeTextures[shapeKey].push(texture);\n    this.numFreeTextures++;\n    this.numUsedTextures--;\n    const texList = this.usedTextures[shapeKey];\n    const texIndex = texList.indexOf(texture);\n    if (texIndex < 0) {\n      throw new Error(\n          'Cannot release a texture that was never provided by this ' +\n          'texture manager');\n    }\n    texList.splice(texIndex, 1);\n    this.log();\n  }\n\n  private log() {\n    if (!this.logEnabled) {\n      return;\n    }\n    const total = this.numFreeTextures + this.numUsedTextures;\n    console.log(\n        'Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`,\n        `(${total})`);\n  }\n\n  getNumUsedTextures(): number {\n    return this.numUsedTextures;\n  }\n\n  getNumFreeTextures(): number {\n    return this.numFreeTextures;\n  }\n\n  dispose() {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    for (const texShape in this.freeTextures) {\n      this.freeTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex);\n      });\n    }\n    for (const texShape in this.usedTextures) {\n      this.usedTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex);\n      });\n    }\n    this.freeTextures = null;\n    this.usedTextures = null;\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n  }\n}\n\nfunction getPhysicalTextureForRendering(isPacked: boolean):\n    PhysicalTextureType {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {\n    if (isPacked) {\n      return PhysicalTextureType.PACKED_2X2_FLOAT32;\n    }\n    return PhysicalTextureType.UNPACKED_FLOAT32;\n  }\n\n  if (isPacked) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT16;\n  }\n  return PhysicalTextureType.UNPACKED_FLOAT16;\n}\n\nfunction getPhysicalFromLogicalTextureType(\n    logicalTexType: TextureUsage, isPacked: boolean): PhysicalTextureType {\n  if (logicalTexType === TextureUsage.UPLOAD) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT32;\n  } else if (logicalTexType === TextureUsage.RENDER || logicalTexType == null) {\n    return getPhysicalTextureForRendering(isPacked);\n  } else if (\n      logicalTexType === TextureUsage.DOWNLOAD ||\n      logicalTexType === TextureUsage.PIXELS) {\n    return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;\n  }\n  throw new Error(`Unknown logical texture type ${logicalTexType}`);\n}\n\nfunction getKeyFromTextureShape(\n    shapeRowsCol: [number, number], physicalTexType: PhysicalTextureType,\n    isPacked: boolean): string {\n  return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const SELU_SCALEALPHA = 1.7580993408473768599402175208123;\nexport const SELU_SCALE = 1.0507009873554804934193349852946;\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as erf_util from '../../ops/erf_util';\nimport * as selu_util from '../../ops/selu_util';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class UnaryOpProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.userCode = `\n      float unaryOperation(float x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n\nconst CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;\n\nexport const LINEAR = `return x;`;\n\nexport const ABS = `return abs(x);`;\n\nexport const RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nexport const RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nexport const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\n\nexport const SELU = `\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${selu_util.SELU_SCALEALPHA};\n  float scale = ${selu_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;\n\nexport function STEP(alpha = 0.0) {\n  return CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${alpha});\n  `;\n}\n\nexport const NEG = `return -x;`;\n\nexport const CEIL = `return ceil(x);`;\n\nexport const FLOOR = `return floor(x);`;\n\nexport const SIGN = `\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n`;\n\nexport const IS_NAN = `return float(isnan(x));`;\n\nexport const IS_INF = `return float(isinf(x));`;\n\nexport const IS_FINITE = `return float(!isnan(x) && !isinf(x));`;\n\nexport const ROUND = `\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n`;\n\nexport const EXP = `return exp(x);`;\n\nexport const EXPM1 = `return exp(x) - 1.0;`;\n\nexport const LOG = `if (x < 0.0) return NAN;\n  return log(x);`;\n\nexport const LOG1P = `return log(1.0 + x);`;\n\nexport const SQRT = `return sqrt(x);`;\n\nexport const RSQRT = `return inversesqrt(x);`;\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n\n/**\n * mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n *\n * epsilon is the difference between 1.0 and the next representable\n * float. For a single precision 32 bit float this should be 2^-23, see:\n * https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\n *\n * too_large = (x > -threshold) is value above which exp(x) may overflow\n * but softplus(x) == x is within machine epsilon\n *\n * too_small = (x < threshold) is value below which exp(x) may underflow,\n * but softplus(x) == exp(x) is within machine epsilon.\n */\nexport const SOFTPLUS = `\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n`;\n\nexport const SIN = CHECK_NAN_SNIPPET + `\n  return sin(x);\n`;\n\nexport const COS = CHECK_NAN_SNIPPET + `\n  return cos(x);\n`;\n\nexport const TAN = `return tan(x);`;\n\nexport const ASIN = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n`;\n\nexport const ACOS = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n`;\n\nexport const ATAN = CHECK_NAN_SNIPPET + `\n  return atan(x);\n`;\n\nexport const SINH = `\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\n\nexport const COSH = `\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\n\nexport const TANH = `\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n`;\n\nexport const ASINH = CHECK_NAN_SNIPPET + `return log(x + sqrt(x * x + 1.0));`;\n\nexport const ACOSH = CHECK_NAN_SNIPPET + `\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));`;\n\nexport const ATANH = CHECK_NAN_SNIPPET + `\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;`;\n\nexport const ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  float p = ${erf_util.ERF_P};\n  float a1 = ${erf_util.ERF_A1};\n  float a2 = ${erf_util.ERF_A2};\n  float a3 = ${erf_util.ERF_A3};\n  float a4 = ${erf_util.ERF_A4};\n  float a5 = ${erf_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`;\n\nexport const SQUARE = `return x * x;`;\n\nexport const RECIPROCAL = `return 1.0 / x;`;\n\nexport const LOGICAL_NOT = `return float(!(x >= 1.0));`;\n\nexport const TO_INT = `return float(int(x));`;\n\nexport const CLONE = 'return x;';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport const LINEAR = `return x;`;\n\nexport const LOG = `\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n`;\n\nexport const RELU = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const RELU6 = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const ELU = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nexport class UnaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.userCode = `\n      vec4 unaryOperation(vec4 x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import webgl flags.\nimport './flags_webgl';\n\nimport * as device_util from '../../device_util';\nimport {ENGINE, MemoryInfo, TimingInfo} from '../../engine';\nimport {env} from '../../environment';\nimport {tidy} from '../../globals';\nimport {TensorInfo} from '../../kernel_registry';\nimport {warn} from '../../log';\nimport {buffer} from '../../ops/array_ops';\nimport * as array_ops_util from '../../ops/array_ops_util';\nimport * as axis_util from '../../ops/axis_util';\nimport {complex, imag, real} from '../../ops/complex_ops';\nimport {computeOutShape} from '../../ops/concat_util';\nimport {Conv2DInfo, Conv3DInfo} from '../../ops/conv_util';\nimport {Activation, FusedBatchMatMulConfig, FusedConv2DConfig} from '../../ops/fused_util';\nimport * as gather_nd_util from '../../ops/gather_nd_util';\nimport * as reduce_util from '../../ops/reduce_util';\nimport * as scatter_nd_util from '../../ops/scatter_nd_util';\nimport * as segment_util from '../../ops/segment_util';\nimport * as slice_util from '../../ops/slice_util';\nimport {softmax} from '../../ops/softmax';\nimport {range, scalar, tensor} from '../../ops/tensor_ops';\nimport {DataId, Scalar, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, Tensor5D} from '../../tensor';\nimport {BackendValues, DataType, DataTypeMap, NumericDataType, Rank, RecursiveArray, ShapeMap, sumOutType, TypedArray, upcastType} from '../../types';\nimport * as util from '../../util';\nimport {getArrayFromDType, getTypedArrayFromDType, inferDtype, sizeFromShape} from '../../util';\nimport {DataStorage, EPSILON_FLOAT16, EPSILON_FLOAT32, KernelBackend} from '../backend';\nimport * as backend_util from '../backend_util';\nimport {mergeRealAndImagArrays} from '../complex_util';\nimport {nonMaxSuppressionV3} from '../non_max_suppression_impl';\nimport {split} from '../split_shared';\nimport {tile} from '../tile_impl';\nimport {topkImpl} from '../topk_impl';\nimport {whereImpl} from '../where_impl';\n\nimport {AddNProgram} from './addn_gpu';\nimport {AddNPackedProgram} from './addn_packed_gpu';\nimport {ArgMinMaxProgram} from './argminmax_gpu';\nimport {ArgMinMaxPackedProgram} from './argminmax_packed_gpu';\nimport {AvgPool2DBackpropProgram, AvgPool3DBackpropProgram} from './avg_pool_backprop_gpu';\nimport {BatchNormProgram} from './batchnorm_gpu';\nimport {BatchNormPackedProgram} from './batchnorm_packed_gpu';\nimport * as binaryop_complex_gpu from './binaryop_complex_gpu';\nimport {BinaryOpComplexProgram} from './binaryop_complex_gpu';\nimport * as binaryop_gpu from './binaryop_gpu';\nimport {BinaryOpProgram} from './binaryop_gpu';\nimport * as binaryop_packed_gpu from './binaryop_packed_gpu';\nimport {BinaryOpPackedProgram} from './binaryop_packed_gpu';\nimport {getWebGLContext} from './canvas_util';\nimport {ClipProgram} from './clip_gpu';\nimport {ClipPackedProgram} from './clip_packed_gpu';\nimport {ComplexAbsProgram} from './complex_abs_gpu';\nimport {ConcatProgram} from './concat_gpu';\nimport {ConcatPackedProgram} from './concat_packed_gpu';\nimport {Conv2DDerFilterProgram, Conv2DDerInputProgram, Conv3DDerFilterProgram, Conv3DDerInputProgram} from './conv_backprop_gpu';\nimport {DepthwiseConv2DDerFilterProgram, DepthwiseConv2DDerInputProgram} from './conv_backprop_gpu_depthwise';\nimport {Conv2DProgram, Conv3DProgram} from './conv_gpu';\nimport {DepthwiseConv2DProgram} from './conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from './conv_packed_gpu_depthwise';\nimport {CropAndResizeProgram} from './crop_and_resize_gpu';\nimport {CumSumProgram} from './cumsum_gpu';\nimport {DecodeMatrixProgram} from './decode_matrix_gpu';\nimport {DecodeMatrixPackedProgram} from './decode_matrix_packed_gpu';\nimport {DepthToSpaceProgram} from './depth_to_space_gpu';\nimport {DiagProgram} from './diag_gpu';\nimport {EncodeFloatProgram} from './encode_float_gpu';\nimport {EncodeFloatPackedProgram} from './encode_float_packed_gpu';\nimport {EncodeMatrixProgram} from './encode_matrix_gpu';\nimport {EncodeMatrixPackedProgram} from './encode_matrix_packed_gpu';\nimport * as fft_gpu from './fft_gpu';\nimport {FFTProgram} from './fft_gpu';\nimport {FillProgram} from './fill_gpu';\nimport {GatherProgram} from './gather_gpu';\nimport {GatherNDProgram} from './gather_nd_gpu';\nimport {GPGPUContext} from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport {GPGPUBinary, GPGPUProgram, TensorData} from './gpgpu_math';\nimport {Im2ColPackedProgram} from './im2col_packed_gpu';\nimport {LRNProgram} from './lrn_gpu';\nimport {LRNGradProgram} from './lrn_grad_gpu';\nimport {LRNPackedProgram} from './lrn_packed_gpu';\nimport {MaxPool2DBackpropProgram, MaxPool3DBackpropProgram} from './max_pool_backprop_gpu';\nimport {MatMulPackedProgram} from './mulmat_packed_gpu';\nimport {MultinomialProgram} from './multinomial_gpu';\nimport {OneHotProgram} from './onehot_gpu';\nimport {PackProgram} from './pack_gpu';\nimport {PadProgram} from './pad_gpu';\nimport {PadPackedProgram} from './pad_packed_gpu';\nimport {Pool2DProgram, Pool3DProgram} from './pool_gpu';\nimport {ReduceProgram} from './reduce_gpu';\nimport {ReshapePackedProgram} from './reshape_packed_gpu';\nimport {ResizeBilinearBackpropProgram} from './resize_bilinear_backprop_gpu';\nimport {ResizeBilinearProgram} from './resize_bilinear_gpu';\nimport {ResizeBilinearPackedProgram} from './resize_bilinear_packed_gpu';\nimport {ResizeNearestNeigborBackpropProgram} from './resize_nearest_neighbor_backprop_gpu';\nimport {ResizeNearestNeighborProgram} from './resize_nearest_neighbor_gpu';\nimport {ReverseProgram} from './reverse_gpu';\nimport {ReversePackedProgram} from './reverse_packed_gpu';\nimport {ScatterProgram} from './scatter_gpu';\nimport {SegmentOpProgram} from './segment_gpu';\nimport {SelectProgram} from './select_gpu';\nimport {SliceProgram} from './slice_gpu';\nimport {SlicePackedProgram} from './slice_packed_gpu';\nimport {StridedSliceProgram} from './strided_slice_gpu';\nimport * as tex_util from './tex_util';\nimport {TextureData, TextureUsage} from './tex_util';\nimport {TextureManager} from './texture_manager';\nimport {TileProgram} from './tile_gpu';\nimport {TransposeProgram} from './transpose_gpu';\nimport {TransposePackedProgram} from './transpose_packed_gpu';\nimport * as unary_op from './unaryop_gpu';\nimport {UnaryOpProgram} from './unaryop_gpu';\nimport * as unary_packed_op from './unaryop_packed_gpu';\nimport {UnaryOpPackedProgram} from './unaryop_packed_gpu';\nimport {UnpackProgram} from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\n\ntype KernelInfo = {\n  name: string; query: Promise<number>;\n};\n\nexport type TimerNode = RecursiveArray<KernelInfo>|KernelInfo;\nexport interface CPUTimerQuery {\n  startMs: number;\n  endMs?: number;\n}\n\nexport interface WebGLMemoryInfo extends MemoryInfo {\n  numBytesInGPU: number;\n  unreliable: boolean;\n}\n\nexport interface WebGLTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\nconst binaryCaches: {[webGLVersion: string]: {[key: string]: GPGPUBinary}} = {};\n\nexport function getBinaryCache(webGLVersion: number) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n\nfunction mapActivationToShaderProgram(\n    activation: Activation, packed = false): string {\n  if (activation === 'linear') {\n    if (packed) {\n      return unary_packed_op.LINEAR;\n    }\n    return unary_op.LINEAR;\n  } else if (activation === 'relu') {\n    if (packed) {\n      return unary_packed_op.RELU;\n    }\n    return unary_op.RELU;\n  } else if (activation === 'elu') {\n    if (packed) {\n      return unary_packed_op.ELU;\n    }\n    return unary_op.ELU;\n  } else if (activation === 'relu6') {\n    if (packed) {\n      return unary_packed_op.RELU6;\n    }\n    return unary_op.RELU6;\n  } else if (activation === 'prelu') {\n    if (packed) {\n      return binaryop_packed_gpu.PRELU;\n    }\n    return binaryop_gpu.PRELU;\n  }\n  throw new Error(`Activation ${\n      activation} has not been implemented for the WebGL backend.`);\n}\n\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD = 128;\n\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning(): number {\n  if (env().global.screen == null) {\n    return 1024;  // 1 GB.\n  }\n  return (env().global.screen.height * env().global.screen.width *\n          window.devicePixelRatio) *\n      BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\n\nexport class MathBackendWebGL extends KernelBackend {\n  texData: DataStorage<TextureData>;\n  gpgpu: GPGPUContext;\n\n  // Maps data ids that have a pending read operation, to list of subscribers.\n  private pendingRead = new WeakMap<DataId, Array<(arr: TypedArray) => void>>();\n  // List of data ids that are scheduled for disposal, but are waiting on a\n  // pending read operation.\n  private pendingDisposal = new WeakSet<DataId>();\n  // Used to count the number of 'shallow' sliced tensors that point to the\n  // same data id.\n  private dataRefCount = new WeakMap<DataId, number>();\n  private numBytesInGPU = 0;\n\n  private canvas: HTMLCanvasElement|OffscreenCanvas;\n\n  private programTimersStack: TimerNode[];\n  private activeTimers: TimerNode[];\n  // Accumulated time spent (including blocking) in uploading data to webgl.\n  private uploadWaitMs = 0;\n  // Accumulated time spent (including blocking in downloading data from webgl.\n  private downloadWaitMs = 0;\n  private cpuBackend: KernelBackend;\n\n  // Number of bits of precision of this backend.\n  private floatPrecisionValue: 32|16;\n\n  private textureManager: TextureManager;\n  private binaryCache: {[key: string]: GPGPUBinary};\n  private gpgpuCreatedLocally: boolean;\n  private numMBBeforeWarning: number;\n  private warnedAboutMemory = false;\n\n  constructor(gpgpu?: GPGPUContext) {\n    super();\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    if (gpgpu == null) {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpu = new GPGPUContext(gl);\n      this.canvas = gl.canvas;\n      this.gpgpuCreatedLocally = true;\n    } else {\n      this.gpgpu = gpgpu;\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n      this.canvas = gpgpu.gl.canvas;\n    }\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n\n    this.texData = new DataStorage(this, ENGINE);\n  }\n\n  numDataIds() {\n    return this.texData.numDataIds() +\n        (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) -\n        this.pendingDeletes;\n  }\n\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {};\n    this.texData.set(\n        dataId, {shape, dtype, values, usage: TextureUsage.UPLOAD});\n    return dataId;\n  }\n\n  move(dataId: DataId, values: BackendValues, shape: number[], dtype: DataType):\n      void {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    this.texData.set(\n        dataId, {shape, dtype, values, usage: TextureUsage.UPLOAD});\n  }\n\n  readSync(dataId: DataId): BackendValues {\n    const texData = this.texData.get(dataId);\n    const {values, dtype, complexTensors, slice, shape, isPacked} = texData;\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeData(res.dataId);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result: Float32Array;\n    if (dtype === 'complex64') {\n      const realValues = complexTensors.real.dataSync() as Float32Array;\n      const imagValues = complexTensors.imag.dataSync() as Float32Array;\n      result = mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  async read(dataId: DataId): Promise<BackendValues> {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<TypedArray>(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, complexTensors, isPacked} = texData;\n\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.read(res.dataId);\n      this.disposeData(res.dataId);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n        env().getNumber('WEBGL_VERSION') === 2) {\n      throw new Error(\n          `tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n          `WEBGL_VERSION=2 not yet supported.`);\n    }\n\n    let buffer = null;\n    let tmpDownloadTarget: TensorInfo;\n\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n\n      buffer = this.gpgpu.createBufferFromTexture(\n          tmpData.texture, ...tex_util.getDenseTexShape(shape));\n    }\n\n    this.pendingRead.set(dataId, []);\n\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n\n    // Download the values from the GPU.\n    let vals: Float32Array;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all(\n          [complexTensors.real.data(), complexTensors.imag.data()]);\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = mergeRealAndImagArrays(\n          realValues as Float32Array, imagValues as Float32Array);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeData(tmpDownloadTarget.dataId);\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      this.disposeData(dataId);\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n\n  private checkNumericalProblems(values: BackendValues): void {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i] as number;\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(\n              `The value ${num} cannot be represented with your ` +\n              `current settings. Consider enabling float32 rendering: ` +\n              `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  private getValuesFromTexture(dataId: DataId): Float32Array {\n    const {shape, dtype, isPacked} = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals = this.gpgpu\n                       .downloadMatrixFromPackedTexture(\n                           tmpData.texture, ...tex_util.getDenseTexShape(shape))\n                       .subarray(0, size);\n\n      this.disposeData(tmpTarget.dataId);\n\n      return vals;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape =\n        shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ?\n        new EncodeFloatPackedProgram(outputShape as [number, number, number]) :\n        new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(\n        program, [{shape: outputShape, dtype, dataId}], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals =\n        this.gpgpu\n            .downloadByteEncodedFloatMatrixFromOutputTexture(\n                tmpData.texture, tmpData.texShape[0], tmpData.texShape[1])\n            .subarray(0, size);\n    this.disposeData(output.dataId);\n\n    return vals;\n  }\n\n  async time(f: () => void): Promise<WebGLTimingInfo> {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.query))\n            .filter(d => d != null);\n    const flattenedActiveTimerNames =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.name))\n            .filter(d => d != null);\n\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n\n    const res: WebGLTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: util.sum(kernelMs),\n      getExtraProfileInfo: () =>\n          kernelMs.map((d, i) => ({name: flattenedActiveTimerNames[i], ms: d}))\n              .map(d => `${d.name}: ${d.ms}`)\n              .join(', '),\n      wallMs: null  // will be filled by the engine\n    };\n    this.uploadWaitMs = 0;\n    this.downloadWaitMs = 0;\n    return res;\n  }\n  memory(): WebGLMemoryInfo {\n    return {unreliable: false, numBytesInGPU: this.numBytesInGPU} as\n        WebGLMemoryInfo;\n  }\n\n  private startTimer(): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {startMs: util.now(), endMs: null};\n  }\n\n  private endTimer(query: WebGLQuery|CPUTimerQuery): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    (query as CPUTimerQuery).endMs = util.now();\n    return query;\n  }\n\n  private async getQueryTime(query: WebGLQuery|CPUTimerQuery): Promise<number> {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query as WebGLQuery);\n    }\n    const timerQuery = query as CPUTimerQuery;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n\n  private pendingDeletes = 0;\n\n  disposeData(dataId: DataId): void {\n    if (this.pendingDisposal.has(dataId)) {\n      return;\n    }\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return;\n    }\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return;\n    }\n\n    this.releaseGPUData(dataId);\n    const {complexTensors} = this.texData.get(dataId);\n    if (complexTensors != null) {\n      complexTensors.real.dispose();\n      complexTensors.imag.dispose();\n    }\n    this.texData.delete(dataId);\n  }\n\n  private releaseGPUData(dataId: DataId): void {\n    const {texture, dtype, texShape, usage, isPacked, slice} =\n        this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId: DataId): WebGLTexture {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture;\n  }\n\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId: DataId): TextureData {\n    return this.texData.get(dataId);\n  }\n\n  private getCPUBackend(): KernelBackend|null {\n    if (!env().getBool('WEBGL_CPU_FORWARD')) {\n      return null;\n    }\n\n    if (this.cpuBackend == null) {\n      this.cpuBackend = ENGINE.findBackend('cpu');\n    }\n\n    return this.cpuBackend;\n  }\n\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  private shouldExecuteOnCPU(\n      inputs: Tensor[], sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD): boolean {\n    return this.getCPUBackend() != null &&\n        inputs.every(\n            input => this.texData.get(input.dataId).texture == null &&\n                input.size < sizeThreshold);\n  }\n\n  getGPGPUContext(): GPGPUContext {\n    return this.gpgpu;\n  }\n\n  complex<T extends Tensor>(real: T, imag: T): T {\n    const result = this.makeOutput(real.shape, 'complex64');\n    const resultData = this.texData.get(result.dataId);\n    // The backend owns the reference to the underlying real and imaginary\n    // clones. These will explicitly get disposed when the complex tensor is\n    // disposed.\n    resultData.complexTensors = {\n      real: ENGINE.keep(real.clone()),\n      imag: ENGINE.keep(imag.clone())\n    };\n\n    return result as T;\n  }\n  real<T extends Tensor>(input: T): T {\n    const resultData = this.texData.get(input.dataId);\n    return resultData.complexTensors.real.clone() as T;\n  }\n  imag<T extends Tensor>(input: T): T {\n    const resultData = this.texData.get(input.dataId);\n    return resultData.complexTensors.imag.clone() as T;\n  }\n\n  slice<T extends Tensor>(x: T, begin: number[], size: number[]): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.slice(x, begin, size);\n    }\n    // Short-circuit computation if the slice is zero-sized.\n    if (util.sizeFromShape(size) === 0) {\n      return tensor([], size, x.dtype) as T;\n    }\n    const {isPacked} = this.texData.get(x.dataId);\n    const isContinous = slice_util.isSliceContinous(x.shape, begin, size);\n    if (isPacked || !isContinous) {\n      const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n          new SlicePackedProgram(size) :\n          new SliceProgram(size);\n      const customSetup = program.getCustomSetupFunc(begin);\n      return this.compileAndRun(program, [x], null, customSetup);\n    }\n    this.uploadToGPU(x.dataId);\n    return this.shallowSlice(x, begin, size) as T;\n  }\n\n  private shallowSlice(x: Tensor, begin: number[], size: number[]): Tensor {\n    const xTexData = this.texData.get(x.dataId);\n    const t = this.makeOutput(size, x.dtype);\n    const newTexData = this.texData.get(t.dataId);\n    // Copy texture data from the original tensor.\n    Object.assign(newTexData, xTexData);\n    newTexData.shape = size;\n    newTexData.dtype = x.dtype;\n    let flatOffset = slice_util.computeFlatOffset(begin, x.strides);\n    if (xTexData.slice) {\n      // We are slicing an already sliced tensor, so we have to accumulate\n      // the offset.\n      flatOffset += xTexData.slice.flatOffset;\n    }\n    newTexData.slice = {\n      flatOffset,\n      // Point to the original dataId, which is used to do ref counting.\n      origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId\n    };\n\n    // Increase the ref count for that data bucket.\n    const refCount = this.dataRefCount.get(newTexData.slice.origDataId) || 1;\n    this.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);\n\n    return t;\n  }\n\n  stridedSlice<T extends Tensor>(\n      x: T, begin: number[], end: number[], strides: number[]): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.stridedSlice(x, begin, end, strides);\n    }\n\n    const outShape = slice_util.computeOutShape(begin, end, strides);\n\n    if (outShape.some(axis => axis === 0)) {\n      return tensor([], outShape) as T;\n    }\n\n    const program = new StridedSliceProgram(begin, strides, outShape);\n    return this.compileAndRun(program, [x]);\n  }\n\n  reverse<T extends Tensor>(x: T, axis: number[]): T {\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new ReversePackedProgram(x.shape, axis) :\n        new ReverseProgram(x.shape, axis);\n    return this.compileAndRun(program, [x]);\n  }\n\n  concat(tensors: Tensor[], axis: number): Tensor {\n    if (tensors[0].dtype === 'complex64') {\n      const reals = tensors.map((t) => real(t));\n      const imags = tensors.map((t) => imag(t));\n      return complex(this.concat(reals, axis), this.concat(imags, axis));\n    }\n    if (this.shouldExecuteOnCPU(tensors)) {\n      return this.cpuBackend.concat(tensors, axis);\n    }\n\n    if (tensors.length === 1) {\n      return tensors[0];\n    }\n    if (tensors.length > env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n      const midIndex = Math.floor(tensors.length / 2);\n      const leftSide = this.concat(tensors.slice(0, midIndex), axis);\n      const rightSide = this.concat(tensors.slice(midIndex), axis);\n      return this.concat([leftSide, rightSide], axis);\n    }\n    if (env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') && tensors[0].rank > 1) {\n      const program = new ConcatPackedProgram(tensors.map(t => t.shape), axis);\n      return this.compileAndRun(program, tensors);\n    }\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const outShape = computeOutShape(tensors.map(t => t.shape), axis);\n    const tensors2D =\n        tensors.map(t => t.as2D(-1, sizeFromShape(t.shape.slice(axis))));\n    const program = new ConcatProgram(tensors2D.map(t => t.shape));\n    const res: Tensor = this.compileAndRun(program, tensors2D);\n    return res.reshape(outShape);\n  }\n\n  neg<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.neg(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.NEG, x.dtype) as T;\n    }\n    const program = new UnaryOpProgram(x.shape, unary_op.NEG);\n    return this.compileAndRun(program, [x]);\n  }\n\n  batchMatMul(\n      a: Tensor3D, b: Tensor3D, transposeA: boolean,\n      transposeB: boolean): Tensor3D {\n    const outerShapeA = transposeA ? a.shape[2] : a.shape[1];\n    const outerShapeB = transposeB ? b.shape[1] : b.shape[2];\n    const sharedDim = transposeA ? a.shape[1] : a.shape[2];\n    const [batch, , ] = a.shape;\n\n    // Since the matrices are vectors, it is faster to call mul().sum()\n    // because sum() is O(sqrt(N)) due to divide-and-conquer.\n    if ((outerShapeA === 1 || outerShapeB === 1) &&\n        sharedDim > MATMUL_SHARED_DIM_THRESHOLD) {\n      if (transposeA) {\n        a = a.transpose([0, 2, 1]);\n      }\n      if (transposeB) {\n        b = b.transpose([0, 2, 1]);\n      }\n\n      const a3D = outerShapeB === 1 ? a : a.as3D(batch, sharedDim, 1);\n      const axis = outerShapeB === 1 ? 2 : 1;\n      const b3D = outerShapeB === 1 ? b.as3D(batch, 1, sharedDim) : b;\n      return this.multiply(a3D, b3D).sum(axis, true /* keepDims */);\n    }\n\n    const dtype = upcastType(a.dtype, b.dtype);\n\n    const program = new MatMulPackedProgram(\n        a.shape, [batch, outerShapeA, outerShapeB], transposeA, transposeB);\n    return this.compileAndRun<Tensor3D>(program, [a, b], dtype);\n  }\n\n  fusedBatchMatMul(\n      {a, b, transposeA, transposeB, bias, activation, preluActivationWeights}:\n          FusedBatchMatMulConfig): Tensor3D {\n    const outerShapeA = transposeA ? a.shape[2] : a.shape[1];\n    const outerShapeB = transposeB ? b.shape[1] : b.shape[2];\n    const [batch, , ] = a.shape;\n\n    const dtype = upcastType(a.dtype, b.dtype);\n\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, true) : null;\n    const program = new MatMulPackedProgram(\n        a.shape, [batch, outerShapeA, outerShapeB], transposeA, transposeB,\n        hasBias, fusedActivation, hasPreluActivationWeights);\n    const inputs: TensorInfo[] = [a, b];\n    if (bias) {\n      inputs.push(bias);\n    }\n    if (preluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    return this.compileAndRun<Tensor3D>(program, inputs, dtype);\n  }\n\n  multiply(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64') {\n      const aData = this.texData.get(a.dataId);\n      const bData = this.texData.get(b.dataId);\n\n      const realProgram = new BinaryOpComplexProgram(\n          binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n      const imagProgram = new BinaryOpComplexProgram(\n          binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n\n      const inputs = [\n        this.makeComplexComponentTensorInfo(a, aData.complexTensors.real),\n        this.makeComplexComponentTensorInfo(a, aData.complexTensors.imag),\n        this.makeComplexComponentTensorInfo(b, bData.complexTensors.real),\n        this.makeComplexComponentTensorInfo(b, bData.complexTensors.imag)\n      ];\n      const real = this.compileAndRun<Tensor>(realProgram, inputs);\n      const imag = this.compileAndRun<Tensor>(imagProgram, inputs);\n\n      const complex = this.complex(real, imag);\n      real.dispose();\n      imag.dispose();\n      return complex;\n    }\n\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.multiply(a, b);\n    }\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_gpu.MUL, a.dtype);\n    }\n    const program = new BinaryOpProgram(binaryop_gpu.MUL, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], a.dtype);\n  }\n\n  batchNormalization(\n      x: Tensor4D, mean: Tensor4D|Tensor1D, variance: Tensor4D|Tensor1D,\n      varianceEpsilon: number, scale?: Tensor4D|Tensor1D,\n      offset?: Tensor4D|Tensor1D): Tensor4D {\n    const inputs = [x, mean, variance];\n\n    let offsetShape = null;\n    if (offset != null) {\n      offsetShape = offset.shape;\n      inputs.push(offset);\n    }\n\n    let scaleShape = null;\n    if (scale != null) {\n      scaleShape = scale.shape;\n      inputs.push(scale);\n    }\n\n    if (env().getBool('WEBGL_PACK_NORMALIZATION')) {\n      const batchNormPackedProgram = new BatchNormPackedProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon);\n      return this.compileAndRun<Tensor4D>(batchNormPackedProgram, inputs);\n    }\n\n    const batchNormProgram = new BatchNormProgram(\n        x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n        varianceEpsilon);\n    return this.compileAndRun(batchNormProgram, inputs);\n  }\n\n  localResponseNormalization4D(\n      x: Tensor4D, radius: number, bias: number, alpha: number,\n      beta: number): Tensor4D {\n    const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n        new LRNPackedProgram(x.shape, radius, bias, alpha, beta) :\n        new LRNProgram(x.shape, radius, bias, alpha, beta);\n    return this.compileAndRun(program, [x]);\n  }\n\n  LRNGrad(\n      dy: Tensor4D, inputImage: Tensor4D, outputImage: Tensor4D,\n      depthRadius: number, bias: number, alpha: number,\n      beta: number): Tensor4D {\n    const program =\n        new LRNGradProgram(inputImage.shape, depthRadius, bias, alpha, beta);\n    return this.compileAndRun(program, [inputImage, outputImage, dy]);\n  }\n\n  tile<T extends Tensor>(x: T, reps: number[]): T {\n    if (x.dtype === 'string') {\n      const data = this.readSync(x.dataId) as Uint8Array[];\n      const decodedData = data.map(d => util.decodeString(d));\n      const buf = buffer(x.shape, x.dtype, decodedData);\n      return tile(buf, reps) as T;\n    }\n    const program = new TileProgram(x.shape, reps);\n    return this.compileAndRun(program, [x]);\n  }\n\n  pad<T extends Tensor>(\n      x: T, paddings: Array<[number, number]>, constantValue: number): T {\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new PadPackedProgram(x.shape, paddings, constantValue) :\n        new PadProgram(x.shape, paddings, constantValue);\n    return this.compileAndRun(program, [x]);\n  }\n\n  transpose<T extends Tensor>(x: T, perm: number[]): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.transpose(x, perm);\n    }\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new TransposePackedProgram(x.shape, perm) :\n        new TransposeProgram(x.shape, perm);\n    return this.compileAndRun(program, [x]);\n  }\n\n  gather<T extends Tensor>(x: T, indices: Tensor1D, axis: number): T {\n    if (this.shouldExecuteOnCPU([x, indices])) {\n      return this.cpuBackend.gather(x, indices, axis);\n    }\n    const program = new GatherProgram(x.shape, indices.size, axis);\n    return this.compileAndRun(program, [x, indices]);\n  }\n\n  batchToSpaceND<T extends Tensor>(\n      x: T, blockShape: number[], crops: number[][]): T {\n    util.assert(\n        x.rank <= 4,\n        () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' +\n            'implemented yet');\n    const prod = blockShape.reduce((a, b) => a * b);\n\n    const reshaped = array_ops_util.getReshaped(x.shape, blockShape, prod);\n    const permuted =\n        array_ops_util.getPermuted(reshaped.length, blockShape.length);\n    const reshapedPermuted =\n        array_ops_util.getReshapedPermuted(x.shape, blockShape, prod);\n    const sliceBeginCoords =\n        array_ops_util.getSliceBeginCoords(crops, blockShape.length);\n    const sliceSize =\n        array_ops_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n    return x.reshape(reshaped)\n               .transpose(permuted)\n               .reshape(reshapedPermuted)\n               .slice(sliceBeginCoords, sliceSize) as T;\n  }\n\n  spaceToBatchND<T extends Tensor>(\n      x: T, blockShape: number[], paddings: Array<[number, number]>): T {\n    util.assert(\n        x.rank <= 4,\n        () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' +\n            'implemented yet');\n\n    const prod = blockShape.reduce((a, b) => a * b);\n\n    const completePaddings: Array<[number, number]> = [[0, 0]];\n    completePaddings.push(...paddings);\n    for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n      completePaddings.push([0, 0]);\n    }\n\n    const paddedX = x.pad(completePaddings);\n\n    const reshapedPaddedShape =\n        array_ops_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n    const permutedReshapedPaddedPermutation = array_ops_util.getPermuted(\n        reshapedPaddedShape.length, blockShape.length, false);\n\n    const flattenShape = array_ops_util.getReshapedPermuted(\n        paddedX.shape, blockShape, prod, false);\n\n    return paddedX.reshape(reshapedPaddedShape)\n               .transpose(permutedReshapedPaddedPermutation)\n               .reshape(flattenShape) as T;\n  }\n\n  private reduce(\n      x: Tensor2D, reduceType: 'all'|'any'|'max'|'min'|'sum'|'prod',\n      dtype: DataType): Tensor2D {\n    const batchSize = x.shape[0];\n    const inSize = x.shape[1];\n    const windowSize = reduce_util.computeOptimalWindowSize(inSize);\n    const reduceInfo = {windowSize, inSize, batchSize};\n    const program = new ReduceProgram(reduceInfo, reduceType);\n    const output = this.compileAndRun<Tensor2D>(program, [x], dtype);\n    // No need to run another GPGPU program.\n    if (output.shape[1] === 1) {\n      return output;\n    }\n    return this.reduce(output, reduceType, dtype);\n  }\n\n  private argReduce(\n      x: Tensor2D, reduceType: 'max'|'min',\n      bestIndicesA: Tensor2D = null): Tensor2D {\n    let batchSize = x.shape[0];\n    let inSize = x.shape[1];\n    if (bestIndicesA != null) {\n      batchSize = bestIndicesA.shape[0];\n      inSize = bestIndicesA.shape[1];\n    }\n    const windowSize = reduce_util.computeOptimalWindowSize(inSize);\n    const reduceInfo = {windowSize, inSize, batchSize};\n    const program =\n        new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n    const inputs = [x];\n    if (bestIndicesA != null) {\n      inputs.push(bestIndicesA);\n    }\n    const output = this.compileAndRun<Tensor2D>(program, inputs, 'int32');\n    // No need to run another GPGPU program.\n    if (output.shape[1] === 1) {\n      return output;\n    }\n    return this.argReduce(x, reduceType, output);\n  }\n\n  private argReducePacked(\n      x: Tensor, reduceType: 'max'|'min', bestIndicesA: Tensor = null): Tensor {\n    const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n    const inSize = inShape[inShape.length - 1];\n    const windowSize = reduce_util.computeOptimalWindowSize(inSize);\n    const program = new ArgMinMaxPackedProgram(\n        inShape, windowSize, reduceType, bestIndicesA == null);\n    const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n    const output = this.compileAndRun<Tensor>(program, inputs, 'int32');\n    if (output.rank === x.rank) {\n      return this.argReducePacked(x, reduceType, output);\n    }\n    return output;\n  }\n\n  sum(x: Tensor, axes: number[]): Tensor {\n    axis_util.assertAxesAreInnerMostDims('sum', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    const outputDType = sumOutType(x.dtype);\n    return this.reduce(a2D, 'sum', outputDType).reshape(outShape);\n  }\n\n  prod(x: Tensor, axes: number[]): Tensor {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.prod(x, axes);\n    }\n\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    const outputDType = sumOutType(x.dtype);\n    return this.reduce(a2D, 'prod', outputDType).reshape(outShape);\n  }\n\n  unsortedSegmentSum<T extends Tensor>(\n      x: T, segmentIds: Tensor1D, numSegments: number): Tensor {\n    let axis = 0;\n    const permutation = axis_util.getAxesPermutation([axis], x.rank);\n    let permutedX = x;\n    if (permutation != null) {\n      permutedX = x.transpose(permutation);\n      axis = axis_util.getInnerMostAxes(1, x.rank)[0];\n    }\n\n    const outShape =\n        segment_util.computeOutShape(permutedX.shape, axis, numSegments);\n    const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n    const a2D = permutedX.as2D(-1, inSize);\n    const outputDType = sumOutType(x.dtype);\n    let result =\n        this.segOpCompute(\n                a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments)\n            .reshape(outShape);\n    if (permutation != null) {\n      result = result.transpose(axis_util.getUndoAxesPermutation(permutation));\n    }\n    return result;\n  }\n\n  private segOpCompute(\n      x: Tensor2D, segOpType: 'unsortedSegmentSum', segmentIds: Tensor1D,\n      dtype: DataType, numSegments: number): Tensor2D {\n    const batchSize = x.shape[0];\n    const inSize = x.shape[1];\n    const windowSize =\n        segment_util.segOpComputeOptimalWindowSize(inSize, numSegments);\n    const segOpInfo = {windowSize, inSize, batchSize, numSegments};\n    const program = new SegmentOpProgram(segOpInfo, segOpType);\n    const output =\n        this.compileAndRun<Tensor2D>(program, [x, segmentIds], dtype);\n    // No need to run another GPGPU program.\n    if (output.shape[1] === numSegments) {\n      return output;\n    }\n    segmentIds = range(0, numSegments).tile([inSize / windowSize]);\n    return this.segOpCompute(output, segOpType, segmentIds, dtype, numSegments);\n  }\n\n  private argMinMaxReduce(x: Tensor, axis: number, reduceType: 'min'|'max'):\n      Tensor {\n    const axes = [axis];\n    axis_util.assertAxesAreInnerMostDims(\n        'arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes,\n        x.rank);\n    if (!env().getBool('WEBGL_PACK_REDUCE') || x.rank <= 2) {\n      const [outShape, reduceShape] =\n          axis_util.computeOutAndReduceShapes(x.shape, axes);\n      const inSize = util.sizeFromShape(reduceShape);\n      const a2D = x.as2D(-1, inSize);\n      return this.argReduce(a2D, reduceType).reshape(outShape);\n    }\n    return this.argReducePacked(x, reduceType);\n  }\n\n  argMin(x: Tensor, axis: number): Tensor {\n    return this.argMinMaxReduce(x, axis, 'min');\n  }\n\n  argMax(x: Tensor, axis: number): Tensor {\n    return this.argMinMaxReduce(x, axis, 'max');\n  }\n\n  cumsum(x: Tensor, axis: number, exclusive: boolean, reverse: boolean):\n      Tensor {\n    if (axis !== x.rank - 1) {\n      throw new Error(\n          `WebGL cumsum shader expects an inner-most axis=${x.rank - 1} ` +\n          `but got axis=${axis}`);\n    }\n    const program = new CumSumProgram(x.shape, exclusive, reverse);\n    return this.compileAndRun(program, [x]);\n  }\n\n  equal(a: Tensor, b: Tensor): Tensor {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.EQUAL, 'bool');\n    }\n    const program = new BinaryOpProgram(binaryop_gpu.EQUAL, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  notEqual(a: Tensor, b: Tensor): Tensor {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.NOT_EQUAL, 'bool');\n    }\n    const program =\n        new BinaryOpProgram(binaryop_gpu.NOT_EQUAL, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  less(a: Tensor, b: Tensor): Tensor {\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.less(a, b);\n    }\n\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LESS, 'bool');\n    }\n\n    const program = new BinaryOpProgram(binaryop_gpu.LESS, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  lessEqual(a: Tensor, b: Tensor): Tensor {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LESS_EQUAL, 'bool');\n    }\n    const program =\n        new BinaryOpProgram(binaryop_gpu.LESS_EQUAL, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  greater(a: Tensor, b: Tensor): Tensor {\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.greater(a, b);\n    }\n\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.GREATER, 'bool');\n    }\n\n    const program = new BinaryOpProgram(binaryop_gpu.GREATER, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  greaterEqual(a: Tensor, b: Tensor): Tensor {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(\n          a, b, binaryop_packed_gpu.GREATER_EQUAL, 'bool');\n    }\n    const program =\n        new BinaryOpProgram(binaryop_gpu.GREATER_EQUAL, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  logicalNot<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.LOGICAL_NOT);\n    return this.compileAndRun(program, [x]);\n  }\n\n  logicalAnd(a: Tensor, b: Tensor): Tensor {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LOGICAL_AND, 'bool');\n    }\n    const program =\n        new BinaryOpProgram(binaryop_gpu.LOGICAL_AND, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  logicalOr(a: Tensor, b: Tensor): Tensor {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LOGICAL_OR, 'bool');\n    }\n    const program =\n        new BinaryOpProgram(binaryop_gpu.LOGICAL_OR, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  select(condition: Tensor, a: Tensor, b: Tensor): Tensor {\n    const program = new SelectProgram(condition.rank, a.shape, a.rank);\n    return this.compileAndRun(\n        program, [condition, a, b], upcastType(a.dtype, b.dtype));\n  }\n\n  where(condition: Tensor): Tensor2D {\n    warn(\n        'tf.where() in webgl locks the UI thread. ' +\n        'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  topk<T extends Tensor>(x: T, k: number, sorted: boolean): [T, T] {\n    const xVals = x.dataSync();\n    return topkImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n  }\n\n  min(x: Tensor, axes: number[]): Tensor {\n    axis_util.assertAxesAreInnerMostDims('min', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    return this.reduce(a2D, 'min', a2D.dtype).reshape(outShape);\n  }\n\n  minimum(a: Tensor, b: Tensor): Tensor {\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.minimum(a, b);\n    }\n\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(binaryop_packed_gpu.MIN, a.shape, b.shape) :\n        new BinaryOpProgram(binaryop_gpu.MIN, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  mod(a: Tensor, b: Tensor): Tensor {\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(binaryop_packed_gpu.MOD, a.shape, b.shape) :\n        new BinaryOpProgram(binaryop_gpu.MOD, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  max(x: Tensor, axes: number[]): Tensor {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.max(x, axes);\n    }\n\n    axis_util.assertAxesAreInnerMostDims('max', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    return this.reduce(a2D, 'max', a2D.dtype).reshape(outShape);\n  }\n\n  maximum(a: Tensor, b: Tensor): Tensor {\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.maximum(a, b);\n    }\n\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(binaryop_packed_gpu.MAX, a.shape, b.shape) :\n        new BinaryOpProgram(binaryop_gpu.MAX, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  all(x: Tensor, axes: number[]): Tensor {\n    axis_util.assertAxesAreInnerMostDims('all', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    return this.reduce(a2D, 'all', a2D.dtype).reshape(outShape);\n  }\n\n  any(x: Tensor, axes: number[]): Tensor {\n    axis_util.assertAxesAreInnerMostDims('any', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    return this.reduce(a2D, 'any', a2D.dtype).reshape(outShape);\n  }\n\n  squaredDifference(a: Tensor, b: Tensor): Tensor {\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(\n            binaryop_gpu.SQUARED_DIFFERENCE, a.shape, b.shape) :\n        new BinaryOpProgram(binaryop_gpu.SQUARED_DIFFERENCE, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  realDivide(a: Tensor, b: Tensor): Tensor {\n    const op = binaryop_gpu.DIV;\n    const outputDtype = 'float32';\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      const checkOutOfBounds = true;\n      return this.packedBinaryOp(\n          a, b, binaryop_packed_gpu.DIV, outputDtype, checkOutOfBounds);\n    }\n    const program = new BinaryOpProgram(op, a.shape, b.shape);\n    return this.compileAndRun<Tensor>(program, [a, b], outputDtype);\n  }\n\n  floorDiv(a: Tensor, b: Tensor): Tensor {\n    const op = binaryop_gpu.INT_DIV;\n    const outputDtype = 'int32';\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(\n          a, b, binaryop_packed_gpu.INT_DIV, outputDtype);\n    }\n    const program = new BinaryOpProgram(op, a.shape, b.shape);\n    return this.compileAndRun<Tensor>(program, [a, b], outputDtype);\n  }\n\n  add(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64' && b.dtype === 'complex64') {\n      return this.complexSeparableBinaryOp(a, b, binaryop_gpu.ADD);\n    }\n\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.add(a, b);\n    }\n\n    const dtype = upcastType(a.dtype, b.dtype);\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_gpu.ADD, dtype);\n    }\n    const program = new BinaryOpProgram(binaryop_gpu.ADD, a.shape, b.shape);\n    return this.compileAndRun<Tensor>(program, [a, b], dtype);\n  }\n\n  private packedUnaryOp(x: TensorInfo, op: string, dtype: DataType) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    return this.compileAndRun<Tensor>(program, [x], dtype);\n  }\n\n  private packedBinaryOp(\n      a: TensorInfo, b: TensorInfo, op: string, dtype: DataType,\n      checkOutOfBounds = false) {\n    const program =\n        new BinaryOpPackedProgram(op, a.shape, b.shape, checkOutOfBounds);\n    return this.compileAndRun<Tensor>(program, [a, b], dtype);\n  }\n\n  /**\n   * Computes a complex binary operation that can be decomposed into a simple\n   * binary operation on both the real and imagary parts.\n   */\n  private complexSeparableBinaryOp(a: Tensor, b: Tensor, op: string): Tensor {\n    const aData = this.texData.get(a.dataId);\n    const bData = this.texData.get(b.dataId);\n\n    const [real, imag] = [\n      [aData.complexTensors.real, bData.complexTensors.real],\n      [aData.complexTensors.imag, bData.complexTensors.imag]\n    ].map(complexParts => {\n      const [aPart, bPart] = complexParts;\n\n      const aHandle = this.makeComplexComponentTensorInfo(a, aPart);\n      const bHandle = this.makeComplexComponentTensorInfo(b, bPart);\n\n      const program = new BinaryOpProgram(op, a.shape, b.shape);\n      return this.compileAndRun<Tensor>(\n          program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n    });\n\n    const complex = this.complex(real, imag);\n    real.dispose();\n    imag.dispose();\n    return complex;\n  }\n\n  // Returns a TensorInfo with the complex shape and the dataId of the\n  // underlying part. We need to do this because a reshaped complex tensor is\n  // not reflected in its parts.\n  private makeComplexComponentTensorInfo(\n      complexTensor: Tensor, complexPart: Tensor): TensorInfo {\n    return {\n      dataId: complexPart.dataId,\n      dtype: complexPart.dtype,\n      shape: complexTensor.shape\n    };\n  }\n\n  addN<T extends Tensor>(tensors: T[]): T {\n    if (tensors.length === 1) {\n      return tensors[0];\n    }\n\n    // Limit the number of uploaded textures for optimization.\n    if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n      const midIndex = Math.floor(tensors.length / 2);\n      const leftSide = this.addN(tensors.slice(0, midIndex));\n      const rightSide = this.addN(tensors.slice(midIndex));\n      return this.addN([leftSide, rightSide]);\n    }\n\n    const dtype =\n        tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n    const shapes = tensors.map(t => t.shape);\n    // We can make sure shapes are identical in op level.\n    const usePackedOp = env().getBool('WEBGL_PACK');\n    const program = usePackedOp ?\n        new AddNPackedProgram(tensors[0].shape, shapes) :\n        new AddNProgram(tensors[0].shape, shapes);\n    return this.compileAndRun<T>(program, tensors, dtype);\n  }\n\n  subtract(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64' && b.dtype === 'complex64') {\n      return this.complexSeparableBinaryOp(a, b, binaryop_gpu.SUB);\n    }\n\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.subtract(a, b);\n    }\n    const dtype = upcastType(a.dtype, b.dtype);\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_gpu.SUB, a.dtype);\n    }\n    const program = new BinaryOpProgram(binaryop_gpu.SUB, a.shape, b.shape);\n    return this.compileAndRun<Tensor>(program, [a, b], dtype);\n  }\n\n  pow<T extends Tensor>(a: T, b: Tensor): T {\n    const usePackedOp = env().getBool('WEBGL_PACK_BINARY_OPERATIONS');\n    const program = usePackedOp ?\n        new BinaryOpPackedProgram(binaryop_packed_gpu.POW, a.shape, b.shape) :\n        new BinaryOpProgram(binaryop_gpu.POW, a.shape, b.shape);\n    const dtype = upcastType(a.dtype, b.dtype);\n    return this.compileAndRun<T>(program, [a, b], dtype);\n  }\n\n  ceil<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.ceil(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.CEIL, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.CEIL);\n    return this.compileAndRun(program, [x]);\n  }\n\n  floor<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.floor(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.FLOOR, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.FLOOR);\n    return this.compileAndRun(program, [x]);\n  }\n\n  sign<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SIGN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  isNaN<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.IS_NAN);\n    return this.compileAndRun(program, [x], 'bool');\n  }\n  isInf<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.IS_INF);\n    return this.compileAndRun(program, [x], 'bool');\n  }\n  isFinite<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.IS_FINITE);\n    return this.compileAndRun(program, [x], 'bool');\n  }\n\n  round<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ROUND);\n    return this.compileAndRun(program, [x]);\n  }\n\n  exp<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.exp(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.EXP, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.EXP);\n    return this.compileAndRun(program, [x]);\n  }\n\n  expm1<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.expm1(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.EXPM1, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.EXPM1);\n    return this.compileAndRun(program, [x]);\n  }\n\n  log<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.log(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_packed_op.LOG, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.LOG);\n    return this.compileAndRun(program, [x]);\n  }\n\n  log1p<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.LOG1P);\n    return this.compileAndRun(program, [x]);\n  }\n\n  sqrt<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SQRT);\n    return this.compileAndRun(program, [x]);\n  }\n\n  rsqrt<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.rsqrt(x);\n    }\n    const program = new UnaryOpProgram(x.shape, unary_op.RSQRT);\n    return this.compileAndRun(program, [x]);\n  }\n\n  reciprocal<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.RECIPROCAL);\n    return this.compileAndRun(program, [x]);\n  }\n\n  relu<T extends Tensor>(x: T): T {\n    let program: UnaryOpProgram|UnaryOpPackedProgram;\n    if (env().getBool('WEBGL_PACK')) {\n      program = new UnaryOpPackedProgram(x.shape, unary_packed_op.RELU);\n    } else {\n      program = new UnaryOpProgram(x.shape, unary_op.RELU);\n    }\n    return this.compileAndRun(program, [x]);\n  }\n\n  relu6<T extends Tensor>(x: T): T {\n    let program: UnaryOpProgram|UnaryOpPackedProgram;\n    if (env().getBool('WEBGL_PACK')) {\n      program = new UnaryOpPackedProgram(x.shape, unary_packed_op.RELU6);\n    } else {\n      program = new UnaryOpProgram(x.shape, unary_op.RELU6);\n    }\n    return this.compileAndRun(program, [x]);\n  }\n\n  prelu<T extends Tensor>(x: T, alpha: T): T {\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(\n            binaryop_packed_gpu.PRELU, x.shape, alpha.shape) :\n        new BinaryOpProgram(binaryop_gpu.PRELU, x.shape, alpha.shape);\n    return this.compileAndRun(program, [x, alpha]);\n  }\n\n  elu<T extends Tensor>(x: T): T {\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_packed_op.ELU, x.dtype) as T;\n    }\n    const program = new UnaryOpProgram(x.shape, unary_op.ELU);\n    return this.compileAndRun(program, [x]);\n  }\n\n  eluDer<T extends Tensor>(dy: T, y: T): T {\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(\n            binaryop_packed_gpu.ELU_DER, dy.shape, y.shape) :\n        new BinaryOpProgram(binaryop_gpu.ELU_DER, dy.shape, y.shape);\n    return this.compileAndRun(program, [dy, y]);\n  }\n\n  selu<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SELU);\n    return this.compileAndRun(program, [x]);\n  }\n\n  int<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.TO_INT);\n    return this.compileAndRun(program, [x], 'int32');\n  }\n\n  clip<T extends Tensor>(x: T, min: number, max: number): T {\n    let program;\n    if (env().getBool('WEBGL_PACK_CLIP')) {\n      program = new ClipPackedProgram(x.shape);\n    } else {\n      program = new ClipProgram(x.shape);\n    }\n    const customSetup = program.getCustomSetupFunc(min, max);\n    return this.compileAndRun(program, [x], null, customSetup);\n  }\n\n  abs<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.abs(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    return this.compileAndRun(program, [x]);\n  }\n\n  complexAbs<T extends Tensor>(x: T): T {\n    const xData = this.texData.get(x.dataId);\n\n    const program = new ComplexAbsProgram(x.shape);\n    const inputs = [\n      this.makeComplexComponentTensorInfo(x, xData.complexTensors.real),\n      this.makeComplexComponentTensorInfo(x, xData.complexTensors.imag),\n    ];\n\n    return this.compileAndRun<Tensor>(program, inputs) as T;\n  }\n\n  sigmoid<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SIGMOID);\n    return this.compileAndRun(program, [x]);\n  }\n\n  softplus<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SOFTPLUS);\n    return this.compileAndRun(program, [x]);\n  }\n\n  sin<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SIN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  cos<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.COS);\n    return this.compileAndRun(program, [x]);\n  }\n\n  tan<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.TAN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  asin<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ASIN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  acos<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ACOS);\n    return this.compileAndRun(program, [x]);\n  }\n\n  atan<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ATAN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  atan2<T extends Tensor>(a: T, b: T): T {\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(binaryop_packed_gpu.ATAN2, a.shape, b.shape) :\n        new BinaryOpProgram(binaryop_gpu.ATAN2, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  sinh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SINH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  cosh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.COSH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  tanh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.TANH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  asinh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ASINH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  acosh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ACOSH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  atanh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ATANH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  erf<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ERF);\n    return this.compileAndRun(program, [x]);\n  }\n\n  step<T extends Tensor>(x: T, alpha: number): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.STEP(alpha));\n    return this.compileAndRun(program, [x]);\n  }\n\n  private conv2dByMatMul(\n      x: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo, bias?: Tensor,\n      activation?: Activation, preluActivationWeights?: Tensor): Tensor4D {\n    // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n    // result from 2D to 4D.\n    const xShape = x.shape;\n    const xTexData = this.texData.get(x.dataId);\n    const sharedMatMulDim = convInfo.inChannels;\n    const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n    const outerShapeFilter = convInfo.outChannels;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    const transposeA = false;\n    const transposeB = false;\n\n    // TODO: Once reduction ops are packed, batchMatMul will always be packed\n    // and we can remove this condition.\n    const batchMatMulWillBeUnpacked =\n        (outerShapeX === 1 || outerShapeFilter === 1) &&\n        sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n    const reshapeWillBeExpensive = xShape[2] % 2 !== 0 && !!xTexData.isPacked;\n\n    if (batchMatMulWillBeUnpacked || !env().getBool('WEBGL_LAZILY_UNPACK') ||\n        !env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ||\n        !reshapeWillBeExpensive) {\n      const targetShape = isChannelsLast ? xShape[0] * xShape[1] * xShape[2] :\n                                           xShape[0] * xShape[2] * xShape[3];\n      const xReshaped = this.reshape(x, [1, targetShape, convInfo.inChannels]);\n      const filterReshaped =\n          this.reshape(filter, [1, convInfo.inChannels, convInfo.outChannels]);\n\n      return this.reshape<Rank.R4>(\n          this.fusedBatchMatMul({\n            a: xReshaped as Tensor3D,\n            b: filterReshaped as Tensor3D,\n            transposeA,\n            transposeB,\n            bias,\n            activation,\n            preluActivationWeights\n          }),\n          convInfo.outShape);\n    }\n\n    // Following optimization is specific to packed |x| with odd row count\n    // (For example, in channelLast mode, 'row count' refers to x.shape[2]):\n    // we avoid expensive packed 2x2 reshape by padding row count to next,\n    // even number. When x.shape[2] is odd, the result of packed batchMatMul is\n    // the same (has the same texture layout and and values in the texture) as\n    // it is for even x.shape[2] + 1. We make the odd-rows tensor to look like\n    // even-rows tensor before the operation and, after the batchMatMul,\n    // fix the even-rows result to have odd number of rows.\n    const targetShape = isChannelsLast ?\n        xShape[0] * xShape[1] * (xShape[2] + 1) :\n        xShape[0] * xShape[2] * (xShape[3] + 1);\n    const xReshaped: TensorInfo = {\n      dataId: x.dataId,\n      shape: [1, targetShape, convInfo.inChannels],\n      dtype: x.dtype\n    };\n    // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n    // Decrementing row count, after batchMatMul->...->compileProgram leads to\n    // invalid row count within the reference in GPGPUBinary.inShapeInfos.\n    // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n    // in compileProgram method, but that would affect compilation of all\n    // programs - instead, provide a copy here, with even row count, before\n    // calling batchMatMul->...->compileProgram and after that, the original\n    // xTexData.shape is restored.\n    const originalXTexDataShape = xTexData.shape;\n    xTexData.shape = xTexData.shape.slice();\n    xTexData.shape[xTexData.shape.length - 2]++;\n    util.assert(\n        webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape),\n        () => `packed reshape ${xTexData.shape} to ${\n            xReshaped.shape} isn't free`);\n    const filterReshaped =\n        this.reshape(filter, [1, convInfo.inChannels, convInfo.outChannels]);\n\n    const pointwiseConv = this.fusedBatchMatMul({\n      a: xReshaped as Tensor3D,\n      b: filterReshaped as Tensor3D,\n      transposeA,\n      transposeB,\n      bias,\n      activation,\n      preluActivationWeights\n    });\n    const pointwiseConvTexData = this.texData.get(pointwiseConv.dataId);\n    util.assert(\n        pointwiseConvTexData.isPacked,\n        () => 'batchMatMul result is expected to be packed');\n    // Restore the input shape to original.\n    xTexData.shape = originalXTexDataShape;\n    // Set the output shape - there is no need for expensive reshape as data\n    // layout is already correct.\n    pointwiseConvTexData.shape = convInfo.outShape;\n    return ENGINE.makeTensorFromDataId(\n               pointwiseConv.dataId, convInfo.outShape, pointwiseConv.dtype) as\n        Tensor4D;\n  }\n\n  private conv2dWithIm2Row(\n      x: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo, bias?: Tensor,\n      activation?: Activation, preluActivationWeights?: Tensor): Tensor4D {\n    // Rearranges conv2d input so each block to be convolved over forms the\n    // column of a new matrix with shape [filterWidth * filterHeight *\n    // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n    // output channel forms a row of a new matrix with shape [outChannels,\n    // filterWidth * filterHeight * inChannels]. The convolution is then\n    // computed by multiplying these matrices and reshaping the result.\n    const {\n      filterWidth,\n      filterHeight,\n      inChannels,\n      outWidth,\n      outHeight,\n      dataFormat\n    } = convInfo;\n\n    const isChannelsLast = dataFormat === 'channelsLast';\n\n    const sharedDim = filterWidth * filterHeight * inChannels;\n    const numCols = outHeight * outWidth;\n    const x2ColShape = [sharedDim, numCols];\n    const transposeA = true;\n    const transposeB = false;\n\n    const xSqueezed = x.squeeze([0]);\n    const w2Row = filter.reshape([1, sharedDim, -1]);\n\n    const im2ColProgram =\n        new Im2ColPackedProgram(x2ColShape, xSqueezed.shape, convInfo);\n    const im2Col: Tensor3D =\n        this.compileAndRun<Tensor2D>(im2ColProgram, [xSqueezed]).reshape([\n          1, x2ColShape[0], x2ColShape[1]\n        ]);\n\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, true) : null;\n    const matmulProgram = new MatMulPackedProgram(\n        im2Col.shape, [1, numCols, convInfo.outChannels], transposeA,\n        transposeB, hasBias, fusedActivation, hasPreluActivationWeights);\n    const inputs: TensorInfo[] = [im2Col, w2Row];\n    if (bias) {\n      inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    const product = this.compileAndRun<Tensor4D>(matmulProgram, inputs);\n\n    if (isChannelsLast) {\n      return product.reshape([1, outHeight, outWidth, convInfo.outChannels]);\n    } else {\n      return product.reshape([1, convInfo.outChannels, outHeight, outWidth]);\n    }\n  }\n\n  fusedConv2d(\n      {input, filter, convInfo, bias, activation, preluActivationWeights}:\n          FusedConv2DConfig): Tensor4D {\n    if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n        convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n        convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n        (convInfo.padInfo.type === 'SAME' ||\n         convInfo.padInfo.type === 'VALID')) {\n      return this.conv2dByMatMul(\n          input, filter, convInfo, bias, activation, preluActivationWeights);\n    }\n    if (env().getBool('WEBGL_CONV_IM2COL') && input.shape[0] === 1) {\n      return this.conv2dWithIm2Row(\n          input, filter, convInfo, bias, activation, preluActivationWeights);\n    }\n\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, false) : null;\n    const program = new Conv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n    const inputs: TensorInfo[] = [input, filter];\n    if (bias) {\n      inputs.push(bias);\n    }\n    if (preluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    return this.compileAndRun(program, inputs);\n  }\n\n  conv2d(x: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n        convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n        convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n        (convInfo.padInfo.type === 'SAME' ||\n         convInfo.padInfo.type === 'VALID')) {\n      return this.conv2dByMatMul(x, filter, convInfo);\n    }\n    if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n      return this.conv2dWithIm2Row(x, filter, convInfo);\n    }\n    const program = new Conv2DProgram(convInfo);\n    return this.compileAndRun(program, [x, filter]);\n  }\n\n  conv2dDerInput(dy: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    const program = new Conv2DDerInputProgram(convInfo);\n    return this.compileAndRun(program, [dy, filter]);\n  }\n\n  conv2dDerFilter(x: Tensor4D, dy: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    const program = new Conv2DDerFilterProgram(convInfo);\n    return this.compileAndRun(program, [x, dy]);\n  }\n\n  fusedDepthwiseConv2D(\n      {input, filter, convInfo, bias, activation, preluActivationWeights}:\n          FusedConv2DConfig): Tensor4D {\n    const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n        convInfo.strideWidth <= 2 &&\n        convInfo.outChannels / convInfo.inChannels === 1;\n    const fusedActivation = activation ?\n        mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :\n        null;\n    const inputs: Tensor[] = [input, filter];\n\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    if (hasBias) {\n      inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n\n    let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n    if (shouldPackDepthwiseConv) {\n      program = new DepthwiseConvPacked2DProgram(\n          convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n      return this.compileAndRun(program, inputs);\n    }\n\n    program = new DepthwiseConv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n    return this.compileAndRun(program, inputs);\n  }\n\n  depthwiseConv2D(x: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n    if (env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n        convInfo.strideWidth <= 2 &&\n        convInfo.outChannels / convInfo.inChannels === 1) {\n      program = new DepthwiseConvPacked2DProgram(convInfo);\n      return this.compileAndRun(program, [x, filter]);\n    }\n\n    program = new DepthwiseConv2DProgram(convInfo);\n    return this.compileAndRun(program, [x, filter]);\n  }\n\n  depthwiseConv2DDerInput(dy: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    const program = new DepthwiseConv2DDerInputProgram(convInfo);\n    return this.compileAndRun(program, [dy, filter]);\n  }\n\n  depthwiseConv2DDerFilter(x: Tensor4D, dy: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n    return this.compileAndRun(program, [x, dy]);\n  }\n\n  conv3d(x: Tensor5D, filter: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    const program = new Conv3DProgram(convInfo);\n    return this.compileAndRun(program, [x, filter]);\n  }\n\n  conv3dDerInput(dy: Tensor5D, filter: Tensor5D, convInfo: Conv3DInfo):\n      Tensor5D {\n    const program = new Conv3DDerInputProgram(convInfo);\n    return this.compileAndRun(program, [dy, filter]);\n  }\n\n  conv3dDerFilter(x: Tensor5D, dy: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    const program = new Conv3DDerFilterProgram(convInfo);\n    return this.compileAndRun(program, [x, dy]);\n  }\n\n  maxPool(x: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    const program = new Pool2DProgram(convInfo, 'max', false);\n    return this.compileAndRun(program, [x]);\n  }\n\n  avgPool(x: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    const program = new Pool2DProgram(convInfo, 'avg', false);\n    return this.compileAndRun(program, [x], 'float32');\n  }\n\n  maxPoolBackprop(dy: Tensor4D, x: Tensor4D, y: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    const getPositions = true;\n    const maxPoolPositionsProgram =\n        new Pool2DProgram(convInfo, 'max', getPositions);\n    const maxPoolPositions: Tensor4D =\n        this.compileAndRun(maxPoolPositionsProgram, [x]);\n\n    const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n    const result = this.compileAndRun(\n        maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n    maxPoolPositions.dispose();\n    return result as Tensor4D;\n  }\n\n  avgPoolBackprop(dy: Tensor4D, x: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    const avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);\n    return this.compileAndRun(avgPoolBackpropProgram, [dy], x.dtype);\n  }\n\n  cast<T extends Tensor>(x: T, dtype: DataType): T {\n    return backend_util.castTensor(x, dtype, this);\n  }\n\n  unstack(x: Tensor, axis: number): Tensor[] {\n    const num = x.shape[axis];\n    const outShape: number[] = new Array(x.rank - 1);\n    let outIndex = 0;\n    for (let i = 0; i < x.rank; i++) {\n      if (i !== axis) {\n        outShape[outIndex++] = x.shape[i];\n      }\n    }\n\n    const begin = new Array(x.rank).fill(0);\n    const size = x.shape.slice();\n    size[axis] = 1;\n    const res = new Array(num);\n    for (let i = 0; i < res.length; i++) {\n      begin[axis] = i;\n      res[i] = this.slice(x, begin, size).reshape(outShape);\n    }\n    return res;\n  }\n\n  avgPool3d(x: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    const program = new Pool3DProgram(convInfo, 'avg', false);\n    return this.compileAndRun(program, [x], 'float32');\n  }\n\n  avgPool3dBackprop(dy: Tensor5D, x: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    const avgPool3dBackpropProgram = new AvgPool3DBackpropProgram(convInfo);\n    return this.compileAndRun(avgPool3dBackpropProgram, [dy], x.dtype);\n  }\n\n  maxPool3d(x: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    const program = new Pool3DProgram(convInfo, 'max', false);\n    return this.compileAndRun(program, [x], 'float32');\n  }\n\n  maxPool3dBackprop(\n      dy: Tensor5D, x: Tensor5D, y: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    const getPositions = true;\n    const maxPool3dPositionsProgram =\n        new Pool3DProgram(convInfo, 'max', getPositions);\n    const maxPool3dPositions: Tensor5D =\n        this.compileAndRun(maxPool3dPositionsProgram, [x]);\n    const maxPool3dBackPropProgram = new MaxPool3DBackpropProgram(convInfo);\n    const result = this.compileAndRun(\n        maxPool3dBackPropProgram, [dy, maxPool3dPositions], x.dtype);\n    maxPool3dPositions.dispose();\n    return result as Tensor5D;\n  }\n\n  reshape<R extends Rank>(x: Tensor, shape: ShapeMap[R]): Tensor<R> {\n    const texData = this.texData.get(x.dataId);\n    if (texData.isPacked && !webgl_util.isReshapeFree(x.shape, shape) &&\n        !(texData.texture !== null &&\n          webgl_util.isReshapeFree(texData.shape, shape))) {\n      const info = this.packedReshape(x, shape);\n      return ENGINE.makeTensorFromDataId(info.dataId, info.shape, info.dtype) as\n          Tensor<R>;\n    }\n    return backend_util.reshapeTensor(x, shape);\n  }\n\n  resizeBilinear(\n      x: Tensor4D, newHeight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n        new ResizeBilinearPackedProgram(\n            x.shape, newHeight, newWidth, alignCorners) :\n        new ResizeBilinearProgram(x.shape, newHeight, newWidth, alignCorners);\n    return this.compileAndRun(program, [x], 'float32');\n  }\n\n  resizeBilinearBackprop(dy: Tensor4D, x: Tensor4D, alignCorners: boolean):\n      Tensor4D {\n    const program = new ResizeBilinearBackpropProgram(dy, x, alignCorners);\n\n    return this.compileAndRun(program, [dy]);\n  }\n\n  resizeNearestNeighbor(\n      x: Tensor4D, newHeight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    const program = new ResizeNearestNeighborProgram(\n        x.shape, newHeight, newWidth, alignCorners);\n    return this.compileAndRun(program, [x]);\n  }\n\n  resizeNearestNeighborBackprop(\n      dy: Tensor4D, x: Tensor4D, alignCorners: boolean): Tensor4D {\n    const program =\n        new ResizeNearestNeigborBackpropProgram(dy, x, alignCorners);\n    return this.compileAndRun(program, [dy]);\n  }\n\n  multinomial(\n      logits: Tensor2D, normalized: boolean, numSamples: number,\n      seed: number): Tensor2D {\n    const probs = normalized ? logits : softmax(logits);\n    const batchSize = probs.shape[0];\n    const numOutcomes = probs.shape[1];\n    const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n    const customSetup = program.getCustomSetupFunc(seed);\n    return this.compileAndRun(program, [probs], 'int32', customSetup);\n  }\n\n  oneHot(indices: Tensor1D, depth: number, onValue: number, offValue: number):\n      Tensor2D {\n    const program = new OneHotProgram(indices.size, depth, onValue, offValue);\n    return this.compileAndRun(program, [indices]);\n  }\n\n  diag(x: Tensor): Tensor {\n    const program = new DiagProgram(x.size);\n    return this.compileAndRun(program, [x]);\n  }\n\n  nonMaxSuppression(\n      boxes: Tensor2D, scores: Tensor1D, maxOutputSize: number,\n      iouThreshold: number, scoreThreshold: number): Tensor1D {\n    warn(\n        'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n        'Call tf.nonMaxSuppressionAsync() instead');\n    const boxesVals = boxes.dataSync();\n    const scoresVals = scores.dataSync();\n    return nonMaxSuppressionV3(\n        boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n  }\n\n  cropAndResize(\n      image: Tensor4D, boxes: Tensor2D, boxIndex: Tensor1D,\n      cropSize: [number, number], method: 'bilinear'|'nearest',\n      extrapolationValue: number): Tensor4D {\n    const program = new CropAndResizeProgram(\n        image.shape, boxes.shape, cropSize, method, extrapolationValue);\n    return this.compileAndRun(program, [image, boxes, boxIndex], 'float32');\n  }\n\n  depthToSpace(x: Tensor4D, blockSize: number, dataFormat: 'NHWC'|'NCHW'):\n      Tensor4D {\n    util.assert(\n        blockSize > 1,\n        () =>\n            `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n\n    const batchSize = x.shape[0];\n    const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n    const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n    const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n\n    const outputHeight = inputHeight * blockSize;\n    const outputWidth = inputWidth * blockSize;\n    const outputDepth = inputDepth / (blockSize * blockSize);\n\n    const outputShape = (dataFormat === 'NHWC') ?\n        [batchSize, outputHeight, outputWidth, outputDepth] :\n        [batchSize, outputDepth, outputHeight, outputWidth];\n\n    const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n    return this.compileAndRun(program, [x]);\n  }\n\n  split<T extends Tensor>(x: T, sizeSplits: number[], axis: number): T[] {\n    return split(x, sizeSplits, axis);\n  }\n\n  scatterND<R extends Rank>(\n      indices: Tensor, updates: Tensor, shape: ShapeMap[R]): Tensor<R> {\n    const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n        scatter_nd_util.calculateShapes(updates, indices, shape);\n\n    const flattenShape = [outputSize / sliceSize, sliceSize];\n    const flattenIndices = indices.reshape([numUpdates, sliceRank]);\n    const flattenX = updates.reshape([numUpdates, sliceSize]);\n\n    if (outputSize === 0) {\n      return backend_util.reshapeTensor(tensor([]), shape);\n    }\n    const defaultValue = scalar(0);\n    const program = new ScatterProgram(\n        numUpdates, sliceRank, flattenIndices.rank, flattenX.rank, strides,\n        flattenShape);\n    const res: Tensor =\n        this.compileAndRun(program, [flattenX, flattenIndices, defaultValue]);\n    return res.reshape(shape);\n  }\n\n  sparseToDense<R extends Rank>(\n      sparseIndices: Tensor, sparseValues: Tensor, outputShape: ShapeMap[R],\n      defaultValue: Scalar): Tensor<R> {\n    const {sliceRank, numUpdates, strides, outputSize} =\n        scatter_nd_util.calculateShapes(\n            sparseValues, sparseIndices, outputShape);\n\n    const sumDupeIndices = false;\n    const program = new ScatterProgram(\n        numUpdates, sliceRank, sparseIndices.rank, sparseValues.rank, strides,\n        [outputSize, 1], sumDupeIndices);\n    const res: Tensor = this.compileAndRun(\n        program, [sparseValues, sparseIndices, defaultValue]);\n    return res.reshape(outputShape);\n  }\n\n  fft(x: Tensor2D): Tensor2D {\n    const inverse = false;\n    return this.fftImpl(x, inverse);\n  }\n\n  ifft(x: Tensor2D): Tensor2D {\n    const inverse = true;\n    return this.fftImpl(x, inverse);\n  }\n\n  private fftImpl(x: Tensor2D, inverse: boolean): Tensor2D {\n    const xData = this.texData.get(x.dataId);\n\n    const realProgram =\n        new FFTProgram(fft_gpu.COMPLEX_FFT.REAL, x.shape, inverse);\n    const imagProgram =\n        new FFTProgram(fft_gpu.COMPLEX_FFT.IMAG, x.shape, inverse);\n    const inputs = [\n      this.makeComplexComponentTensorInfo(x, xData.complexTensors.real),\n      this.makeComplexComponentTensorInfo(x, xData.complexTensors.imag),\n    ];\n\n    const real = this.compileAndRun<Tensor>(realProgram, inputs);\n    const imag = this.compileAndRun<Tensor>(imagProgram, inputs);\n    const complex = this.complex(real, imag).as2D(x.shape[0], x.shape[1]);\n    real.dispose();\n    imag.dispose();\n    return complex;\n  }\n\n  gatherND(x: Tensor, indices: Tensor): Tensor {\n    const indicesShape = indices.shape;\n    const sliceRank = indicesShape[indicesShape.length - 1];\n\n    const [resultShape, numSlices, sliceSize, strides] =\n        gather_nd_util.prepareAndValidate(x, indices);\n\n    const flattenIndices = indices.reshape([numSlices, sliceRank]);\n    const flattenX = x.reshape([x.size / sliceSize, sliceSize]);\n    const program =\n        new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);\n    const res: Tensor = this.compileAndRun(program, [flattenX, flattenIndices]);\n    return res.reshape(resultShape);\n  }\n\n  fill<R extends Rank>(\n      shape: ShapeMap[R], value: number|string, dtype?: DataType): Tensor<R> {\n    dtype = dtype || inferDtype(value);\n\n    if (dtype === 'string') {\n      // String type should be handled in CPU memory.\n      const values = getArrayFromDType(dtype, sizeFromShape(shape));\n      values.fill(value as string);\n      return ENGINE.makeTensor(values, shape, dtype, this) as Tensor<R>;\n    } else {\n      const program = new FillProgram(shape, value as number);\n      const customSetup = program.getCustomSetupFunc(value as number);\n      return this.compileAndRun(program, [], dtype, customSetup);\n    }\n  }\n\n  onesLike<R extends Rank>(x: Tensor<R>): Tensor<R> {\n    if (x.dtype === 'string') {\n      throw new Error('onesLike is not supported under string dtype');\n    } else {\n      // TODO(cais, smilkov): Add WebGL shader for onesLike:\n      //   https://github.com/tensorflow/tfjs/issues/1293\n      return this.fill(x.shape, 1, x.dtype);\n    }\n  }\n\n  zerosLike<R extends Rank>(x: Tensor<R>): Tensor<R> {\n    return this.fill(x.shape, x.dtype === 'string' ? '' : 0, x.dtype);\n  }\n\n  linspace(start: number, stop: number, num: number): Tensor1D {\n    // TODO: Use CPU implementation due to the precision problem in Safari.\n    return backend_util.linspaceImpl(start, stop, num);\n  }\n\n  makeTensorInfo(shape: number[], dtype: DataType): TensorInfo {\n    const dataId = this.write(null /* values */, shape, dtype);\n    this.texData.get(dataId).usage = null;\n    return {dataId, shape, dtype};\n  }\n\n  private makeOutput<T extends Tensor>(shape: number[], dtype: DataType): T {\n    const {dataId} = this.makeTensorInfo(shape, dtype);\n    return ENGINE.makeTensorFromDataId(dataId, shape, dtype, this) as T;\n  }\n\n  private unpackTensor(input: TensorInfo): TensorInfo {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  private packTensor(input: TensorInfo): TensorInfo {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(\n        program, [input], input.dtype, null /* customSetup */,\n        preventEagerUnpackingOutput);\n  }\n\n  private packedReshape(input: TensorInfo, afterShape: number[]): TensorInfo {\n    const input3DShape = [\n      webgl_util.getBatchDim(input.shape),\n      ...webgl_util.getRowsCols(input.shape)\n    ] as [number, number, number];\n    const input3D: TensorInfo = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [\n      webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n    ] as [number, number, number];\n\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const output = this.runWebGLProgram(\n        program, [input3D], input.dtype, null /* customSetup */,\n        preventEagerUnpackingOfOutput);\n    return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n  }\n\n  private decode(dataId: DataId): TensorInfo {\n    const texData = this.texData.get(dataId);\n    const {isPacked, shape, dtype} = texData;\n    const shapeAs3D =\n        webgl_util.getShapeAs3D(shape) as [number, number, number];\n    let program;\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const out = this.runWebGLProgram(\n        program, [{shape: shapeAs3D, dtype, dataId}], dtype,\n        null /* customSetup */, preventEagerUnpackingOfOutput);\n    return {dtype, shape, dataId: out.dataId};\n  }\n\n  runWebGLProgram(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype: DataType,\n      customSetup?: (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => void,\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = tex_util.getDenseTexShape(program.outputShape);\n      // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n      outData.texShape = texelShape.map(d => d * 2) as [number, number];\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n    if (sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values = getTypedArrayFromDType(output.dtype as 'float32', 0);\n      return output;\n    }\n\n    const dataToDispose: TensorInfo[] = [];\n    const inputsData: TensorData[] = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\n            `GPGPUProgram does not support complex64 input. For complex64 ` +\n            `dtypes, please separate the program into real and imaginary ` +\n            `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs &&\n            util.sizeFromShape(input.shape) <=\n                env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values as TypedArray\n          };\n        }\n\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      } else if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) :\n                                   this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (\n          texData.isPacked &&\n          !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n\n        const savedInput = input;\n        const targetShape = input.shape;\n\n        input.shape = texData.shape;\n        input = this.packedReshape(input as Tensor, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n\n        savedInput.shape = targetShape;\n      }\n\n      this.uploadToGPU(input.dataId);\n      return {shape: input.shape, texData, isUniform: false};\n    });\n\n    this.uploadToGPU(output.dataId);\n    const outputData:\n        TensorData = {shape: output.shape, texData: outData, isUniform: false};\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(\n          this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query: WebGLQuery|CPUTimerQuery;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    gpgpu_math.runProgram(\n        this.gpgpu, binary, inputsData, outputData, customSetup);\n\n    dataToDispose.forEach(info => this.disposeData(info.dataId));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push(\n          {name: program.constructor.name, query: this.getQueryTime(query)});\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n        preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeData(output.dataId);\n      return unpacked;\n    }\n    return output;\n  }\n\n  compileAndRun<K extends TensorInfo>(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype?: DataType,\n      customSetup?: (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => void,\n      preventEagerUnpackingOfOutput = false): K {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(\n        program, inputs, outputDtype, customSetup,\n        preventEagerUnpackingOfOutput);\n    return ENGINE.makeTensorFromDataId(\n               outInfo.dataId, outInfo.shape, outInfo.dtype) as {} as K;\n  }\n\n  private getAndSaveBinary(key: string, getBinary: () => GPGPUBinary):\n      GPGPUBinary {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n\n  getTextureManager(): TextureManager {\n    return this.textureManager;\n  }\n\n  private disposed = false;\n\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null &&\n        (typeof (HTMLCanvasElement) !== 'undefined' &&\n         this.canvas instanceof HTMLCanvasElement)) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n\n  floatPrecision(): 16|32 {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  private uploadToGPU(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    const {shape, dtype, values, texture, usage, isPacked} = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n\n      let program;\n      let width = texShape[1], height = texShape[0];\n      const isByteArray = values instanceof Uint8Array;\n\n      if (isPacked) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(\n            texShape[0], texShape[1]);\n        program = new EncodeMatrixPackedProgram(\n            shapeAs3D, [height, width], isByteArray);\n      } else {\n        program =\n            new EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);\n      }\n\n      const tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);\n      if (isByteArray) {\n        this.texData.get(tempDenseInputHandle.dataId).usage =\n            TextureUsage.PIXELS;\n      } else {\n        this.texData.get(tempDenseInputHandle.dataId).usage =\n            TextureUsage.UPLOAD;\n      }\n      this.gpgpu.uploadDenseMatrixToTexture(\n          this.getTexture(tempDenseInputHandle.dataId), width, height,\n          values as TypedArray);\n\n      // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(\n          program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking);\n\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texture = outputTexData.texture;\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n\n      this.disposeData(tempDenseInputHandle.dataId);\n      this.texData.delete(encodedOutputTarget.dataId);\n\n      // Once uploaded, don't store the values on cpu.\n      texData.values = null;\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  private convertAndCacheOnCPU(dataId: DataId, float32Values?: Float32Array):\n      TypedArray {\n    const texData = this.texData.get(dataId);\n    const {dtype} = texData;\n\n    this.releaseGPUData(dataId);\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype as 'float32');\n    }\n    return texData.values as TypedArray;\n  }\n\n  private acquireTexture(\n      texShape: [number, number], texType: TextureUsage, dtype: DataType,\n      isPacked: boolean): WebGLTexture {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory &&\n        this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(\n          `High memory usage in GPU: ${mb} MB, ` +\n          `most likely due to a memory leak`);\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  private computeBytes(shape: [number, number], dtype: DataType) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n}\n\nif (device_util.isBrowser()) {\n  ENGINE.registerBackend(\n      'webgl', () => new MathBackendWebGL(), 2 /* priority */);\n}\n\nfunction float32ToTypedArray<D extends NumericDataType>(\n    a: Float32Array, dtype: D): DataTypeMap[D] {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a as DataTypeMap[D];\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = (dtype === 'int32') ? new Int32Array(a.length) :\n                                         new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result as DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = false;\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class StridedSliceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      begin: number[], strides: number[], size: number[]) {\n    this.outputShape = size;\n    const rank = size.length;\n    const inputDtype = getCoordsDataType(size.length);\n    const dtype = getCoordsDataType(size.length);\n\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * strides + begin';\n    } else {\n      let outputAxis = 0;\n      newCoords =\n          size.map((_, i) => {\n                outputAxis++;\n                return size.length === 1 ?\n                    `coords * strides[${i}] + begin[${i}]` :\n                    `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n              })\n              .join(',');\n    }\n\n    this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getChannels} from '../packing_util';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReversePackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n    const channels = getChannels('rc', rank);\n    const nextColumn =\n        `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;\n    const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;\n    const type = getCoordsDataType(rank);\n    if (rank === 1) {\n      this.userCode = `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${xShape[0]} - rc - 1),\n            ${xShape[0]} - rc - 1);\n          if(${nextColumn}){\n              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),\n                ${xShape[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `;\n    } else {\n      this.userCode = `\n        void main() {\n          ${type} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${getR(channels.slice())};\n          if(${nextColumn}){\n            result.g = ${getG(channels.slice())};\n          }\n          if(${nextRow}) {\n            result.b = ${getB(channels.slice())};\n            if(${nextColumn}) {\n              result.a = ${getA(channels.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `;\n    }\n\n    function getR(channels: string[]): string {\n      return getChannel(channels);\n    }\n\n    function getG(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getB(channels: string[]): string {\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getA(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getChannel(channels: string[]): string {\n      const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));\n      const inCoords = inCoordsArray.join(',');\n      const innerDims = inCoordsArray.slice(-2).join(',');\n      return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;\n    }\n\n    function getInCoord(i: number, channels1: string[]): string {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - ${channels1[i]} - 1`;\n      } else {\n        return `${channels1[i]}`;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReverseProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n\n    if (rank === 1) {\n      this.userCode = `\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${xShape[0]} - coord - 1));\n        }\n      `;\n      return;\n    }\n    const getInCoord = (i: number) => {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - coords[${i}] - 1`;\n      }\n      return `coords[${i}]`;\n    };\n    const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');\n    const type = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${type} coords = getOutputCoords();\n        setOutput(getX(${inCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as concat_util from '../../ops/concat_util';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ConcatProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\n  constructor(shapes: Array<[number, number]>) {\n    this.outputShape = concat_util.computeOutShape(shapes, 1 /* axis */);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][1];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][1];\n    }\n\n    const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      snippets.push(\n          `else if (yC < ${offsets[i]}) ` +\n          `setOutput(getT${i}(yR, yC-${shift}));`);\n    }\n    const lastIndex = offsets.length;\n    const lastShift = offsets[offsets.length - 1];\n    snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${snippets.join('\\n        ')}\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as broadcast_util from '../../ops/broadcast_util';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    broadcast_util.assertAndGetBroadcastShape(xShape, meanShape);\n    broadcast_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = 'vec4(0.0)';\n    if (offsetShape != null) {\n      broadcast_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = 'vec4(1.0)';\n    if (scaleShape != null) {\n      broadcast_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        vec4 offset = ${offsetSnippet};\n        vec4 scale = ${scaleSnippet};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as broadcast_util from '../../ops/broadcast_util';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    broadcast_util.assertAndGetBroadcastShape(xShape, meanShape);\n    broadcast_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = '0.0';\n    if (offsetShape != null) {\n      broadcast_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = '1.0';\n    if (scaleShape != null) {\n      broadcast_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${rad};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${rad}; j <= ${rad}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${powOperator};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNGradProgram implements GPGPUProgram {\n  variableNames = ['inputImage', 'outputImage', 'dy'];\n  outputShape: number[] = [];\n  userCode: string;\n  depthRadius: number;\n  bias: number;\n  alpha: number;\n  beta: number;\n  depth: number;\n\n  constructor(\n      inputShape: number[], depthRadius: number, bias: number, alpha: number,\n      beta: number) {\n    this.outputShape = inputShape;\n    this.depth = inputShape[3];\n    this.depthRadius = depthRadius;\n    this.bias = bias;\n    this.alpha = alpha;\n    this.beta = beta;\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${depthRadius})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${depthRadius} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${alpha}) * norm + float(${bias});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${alpha})\n                * float(${beta})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${beta});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TileProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], reps: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nfunction getSourceCoords(aShape: number[]): string {\n  const rank = aShape.length;\n  if (rank > 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `imod(resRC, ${aShape[0]})`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getChannels} from '../packing_util';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n\n    const componentSetup = [\n      `${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;\n       if(${cLimit}) {\n      `,\n      rank === 1 ? '' : `}\n       rc = outputLoc;\n       ${coords[rank - 2]} += 1;\n       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`,\n      rank === 1 ? '' : `  ${coords[rank - 1]} += 1;\n         if(${cLimit}) {`\n    ];\n\n    const paddingArea = rank === 1 ?\n        'rc < start || rc >= end' :\n        'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';\n    let mainLoop = '';\n    for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n      mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(${constantValue});\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    }\n    mainLoop += (rank === 1 ? `} ` : `}}`);\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const type = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${constantValue}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${constantValue}));\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getVecChannels} from '../packing_util';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    if (this.rank > 6) {\n      throw Error(\n          `Packed transpose for rank ${this.rank} is not yet supported.`);\n    }\n    const dtype = getCoordsDataType(this.rank);\n\n    const outputOrder = getVecChannels('rc', this.rank);\n    const switchedOrder = new Array(this.rank);\n    for (let i = 0; i < newDim.length; i++) {\n      switchedOrder[newDim[i]] = outputOrder[i];\n    }\n    const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n    const nextColumn =\n        `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n    const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n\n    this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }\n      setOutput(result);\n    }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposeProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const switched = getSwitchedCoords(newDim);\n\n    this.userCode = `\n    void main() {\n      ${dtype} resRC = getOutputCoords();\n      setOutput(getA(${switched}));\n    }\n    `;\n  }\n}\n\nfunction getSwitchedCoords(newDim: number[]): string {\n  const rank = newDim.length;\n  if (rank > 6) {\n    throw Error(`Transpose for rank ${rank} is not yet supported`);\n  }\n  const originalOrder =\n      ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];\n  const switchedCoords = new Array(rank);\n  for (let i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = originalOrder[i];\n  }\n  return switchedCoords.join();\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherProgram implements GPGPUProgram {\n  variableNames = ['A', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], indicesLength: number, axis: number) {\n    const outputShape: number[] = aShape.slice();\n    outputShape[axis] = indicesLength;\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape, axis);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nfunction getSourceCoords(aShape: number[], axis: number): string {\n  const rank = aShape.length;\n  if (rank > 4) {\n    throw Error(`Gather for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `int(getIndices(resRC))`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === axis) {\n      sourceCoords.push(`int(getIndices(${currentCoords[i]}))`);\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ReduceInfo} from '../../ops/reduce_util';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ReduceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: ReduceInfo,\n      reduceType: 'all'|'any'|'max'|'min'|'sum'|'prod') {\n    const windowSize = reduceInfo.windowSize;\n    const batchSize = reduceInfo.batchSize;\n    const inSize = reduceInfo.inSize;\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = [batchSize, outSize];\n\n    let initializationValue = '0.0';\n    let compareOp = ``;\n\n    if (reduceType === 'prod') {\n      initializationValue = '1.0';\n    } else if (reduceType === 'min') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '1.0 / 1e-20';\n      compareOp = `min`;\n    } else if (reduceType === 'max') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n      compareOp = `max`;\n    }\n\n    let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n\n    if (reduceType === 'sum') {\n      returnValue = `sumValue`;\n    } else if (reduceType === 'prod') {\n      returnValue = `prodValue`;\n    } else if (reduceType === 'all') {\n      returnValue = `allValue`;\n    } else if (reduceType === 'any') {\n      returnValue = `anyValue`;\n    }\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    let vecType = `vec4`;\n\n    if (reduceType === 'all') {\n      initializationValue = '1.0';\n      updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    } else if (reduceType === 'any') {\n      initializationValue = '0.0';\n      updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ReduceInfo} from '../../ops/reduce_util';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ArgMinMaxProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(reduceInfo: ReduceInfo, op: 'max'|'min', firstPass: boolean) {\n    const windowSize = reduceInfo.windowSize;\n    const batchSize = reduceInfo.batchSize;\n    const inSize = reduceInfo.inSize;\n    const outSize = Math.ceil(inSize / windowSize);\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    this.outputShape = [batchSize, outSize];\n    const compOp = (op === 'max') ? '>' : '<';\n    const indexSnippet = firstPass ?\n        'inOffset + i;' :\n        'round(getBestIndicesA(batch, inOffset + i));';\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {assert} from '../../util';\nimport {getChannels} from '../packing_util';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ArgMinMaxPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      shape: number[], windowSize: number, op: 'max'|'min',\n      firstPass: boolean) {\n    assert(\n        shape.length > 2,\n        () => `Packed arg${\n            op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n    const inSize = shape[shape.length - 1];\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = shape.slice(0, -1);\n    if (outSize > 1) {\n      this.outputShape.push(outSize);\n    }\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    const outShape = this.outputShape;\n    const rank = outShape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n\n    let sourceLocSetup;\n    let sourceRank;\n    if (outSize === 1) {\n      sourceRank = rank + 1;\n      const sourceLocDType = getCoordsDataType(sourceRank);\n      sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n    } else {\n      sourceRank = rank;\n      sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n    }\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n    const inChannel = '.' + channels[sourceRank - 1];  // e.g. \".b\" for rank 3.\n    const intChannels = channels.map(x => 'int ' + x);\n    const srcRCoords =\n        getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n    const srcGCoords =\n        getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n    const srcBCoords =\n        getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n    const srcACoords =\n        getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n\n    const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n    const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n\n    const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n\n    const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n\n    this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {nearestDivisor} from '../util';\n\nimport {PARALLELIZE_THRESHOLD} from './reduce_util';\n\nexport interface SegOpInfo {\n  windowSize: number;\n  batchSize: number;\n  inSize: number;\n  numSegments: number;\n}\n\nexport function segOpComputeOptimalWindowSize(\n    inSize: number, numSegments: number): number {\n  let done = false;\n  let res;\n\n  if (inSize <= PARALLELIZE_THRESHOLD) {\n    res = inSize;\n    done = true;\n  } else {\n    res = nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n  }\n\n  while (!done) {\n    if (res > numSegments || res === inSize) {\n      done = true;\n    } else {\n      res = nearestDivisor(inSize, res + 1);\n    }\n  }\n  return res;\n}\n\nexport function computeOutShape(\n    aShape: number[], axis: number, numSegments: number): number[] {\n  const outShape = [];\n  const rank = aShape.length;\n  for (let dim = 0; dim < rank; dim++) {\n    if (dim !== axis) {\n      outShape.push(aShape[dim]);\n    } else {\n      outShape.push(numSegments);\n    }\n  }\n  return outShape;\n}\n\nexport interface GatherOpShapeInfo {\n  batchSize: number;\n  sliceSize: number;\n  dimSize: number;\n  outputShape: number[];\n}\nexport function collectGatherOpShapeInfo(\n    x: Tensor, indices: Tensor, axis: number): GatherOpShapeInfo {\n  const dimSize = x.shape[axis];\n\n  const outputShape: number[] = [];\n  let batchSize = 1;\n  let sliceSize = 1;\n  for (let i = 0; i < axis; i++) {\n    outputShape.push(x.shape[i]);\n    batchSize *= x.shape[i];\n  }\n\n  for (let i = 0; i < indices.rank; i++) {\n    outputShape.push(indices.shape[i]);\n  }\n\n  for (let i = axis + 1; i < x.rank; i++) {\n    outputShape.push(x.shape[i]);\n    sliceSize *= x.shape[i];\n  }\n\n  return {batchSize, sliceSize, dimSize, outputShape};\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {SegOpInfo} from '../../ops/segment_util';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class SegmentOpProgram implements GPGPUProgram {\n  variableNames = ['x', 'segmentIds'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(segOpInfo: SegOpInfo, segOpType: 'unsortedSegmentSum') {\n    const windowSize = segOpInfo.windowSize;\n    const batchSize = segOpInfo.batchSize;\n    const inSize = segOpInfo.inSize;\n    const numSegments = segOpInfo.numSegments;\n    const outSize = numSegments * Math.ceil(inSize / windowSize);\n    this.outputShape = [batchSize, outSize];\n\n    const initializationValue = '0.0';\n    const returnValue = `sumValue`;\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    const updateSnippet = `\n        sumValue += dot(values, segFilter);\n    `;\n\n    let checkValueOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkValueOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n\n    let checkSegmentIdOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkSegmentIdOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return -1.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n\n      float getValue(int batch, int inIdx) {\n        ${checkValueOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${checkSegmentIdOutOfBounds}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${numSegments})) * float(${windowSize}));\n        int currentSeg = int(mod(float(outIdx), float(${numSegments})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SelectProgram implements GPGPUProgram {\n  variableNames = ['c', 'a', 'b'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(cRank: number, shape: number[], rank: number) {\n    this.outputShape = shape;\n\n    let cCoords;\n    let abCoords;\n    if (rank > 4) {\n      throw Error(`Where for rank ${rank} is not yet supported`);\n    }\n\n    if (rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      const cCoordVars = [];\n      const abCoordVars = [];\n      for (let i = 0; i < shape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n        if (i < cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n\n    const dtype = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        vec4 result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`float v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        float result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ComplexAbsProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.userCode = `\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Conv2DInfo} from '../../ops/conv_util';\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Im2ColPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      outputShape: number[], inputShape: number[], convInfo: Conv2DInfo) {\n    this.outputShape = outputShape;\n\n    const {\n      filterWidth,\n      inChannels,\n      strideWidth,\n      strideHeight,\n      padInfo,\n      outWidth,\n      dilationWidth,\n      dilationHeight,\n      dataFormat\n    } = convInfo;\n    const {left, top} = padInfo;\n    const itemsPerBlockRow = inChannels * filterWidth;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 0 : 1;\n    const colDim = isChannelsLast ? 1 : 2;\n\n    let unrolled = ``;\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.y + ${col};\n          pos = rc.x + ${row};\n\n          if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {\n            offsetY = int(blockIndex / (${outWidth})) * ${strideHeight} - ${\n            top};\n            d0 = offsetY + ${dilationHeight} * (pos / ${itemsPerBlockRow});\n\n            if(d0 < ${inputShape[rowDim]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${outWidth}.) * ${\n            strideWidth}. - ${left}.);\n              d1 = offsetX + ${dilationWidth} * (int(mod(float(pos), ${\n            itemsPerBlockRow}.) / ${inChannels}.));\n\n              if(d1 < ${inputShape[colDim]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${inChannels}.));\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Conv2DInfo, Conv3DInfo} from '../../ops/conv_util';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              if (${isChannelsLast}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${channelDim}];\n\n        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n\n              if (${isChannelsLast}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: Conv3DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    this.userCode = `\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {\n            int xF = wF + yF * ${strideDepth} - ${padFront};\n\n            if (xF < 0 || xF >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n              int xR = wR + yR * ${strideHeight} - ${padTop};\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n                int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padFront = filterDepth - 1 - convInfo.padInfo.front;\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${filterDepth} - 1 - wF;\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${filterHeight} - 1 - wR;\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${filterWidth} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Conv2DInfo} from '../../ops/conv_util';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${channelMul} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class DepthwiseConv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${channelMul}; dm++) {\n              int d2 = d1 * ${channelMul} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Conv2DInfo, Conv3DInfo} from '../../ops/conv_util';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MaxPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n          wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${effectiveFilterWidth} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class MaxPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex =\n        effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n           wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${lastIndex} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                  wR * ${effectiveFilterWidth} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Conv2DInfo, Conv3DInfo} from '../../ops/conv_util';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AvgPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class AvgPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor4D} from '../../tensor';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(dy: Tensor4D, x: Tensor4D, alignCorners: boolean) {\n    this.outputShape = x.shape;\n    const [, xHeight, xWidth, ] = x.shape;\n    const [, yHeight, yWidth] = dy.shape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor4D} from '../../tensor';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeigborBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(dy: Tensor4D, x: Tensor4D, alignCorners: boolean) {\n    this.outputShape = x.shape;\n    const [, xHeight, xWidth, ] = x.shape;\n    const [, yHeight, yWidth] = dy.shape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${effectiveXSize[0]}) *\n                (float(dyR) / float(${effectiveYSize[0]}));\n\n            float sourceFracCol =\n                float(${effectiveXSize[1]}) *\n                  (float(dyC) / float(${effectiveYSize[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${xHeight}) - 1),\n                ${alignCorners} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${xWidth}) - 1),\n                ${alignCorners} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class OneHotProgram implements GPGPUProgram {\n  variableNames = ['indices'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  seedLoc: WebGLUniformLocation;\n\n  constructor(\n      numIndices: number, depth: number, onValue: number, offValue: number) {\n    this.outputShape = [numIndices, depth];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${offValue}), float(${onValue}),\n                      float(index == coords.y)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DiagProgram implements GPGPUProgram {\n  variableNames = ['X'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(size: number) {\n    this.outputShape = [size, size];\n    this.userCode = `\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class CropAndResizeProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Boxes', 'BoxInd'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      imageShape: [number, number, number, number], boxShape: [number, number],\n      cropSize: [number, number], method: 'bilinear'|'nearest',\n      extrapolationValue: number) {\n    const [batch, imageHeight, imageWidth, depth] = imageShape;\n    const [numBoxes, ] = boxShape;\n    const [cropHeight, cropWidth] = cropSize;\n    this.outputShape = [numBoxes, cropHeight, cropWidth, depth];\n    const methodId = method === 'bilinear' ? 1 : 0;\n\n    const [inputHeightFloat, inputWidthFloat] =\n        [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];\n\n    const [heightRatio, heightScale, inY] = cropHeight > 1 ?\n        [\n          `${(imageHeight - 1) / (cropHeight - 1)}`,\n          '(y2-y1) * height_ratio',\n          `y1*${inputHeightFloat} + float(y)*(height_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (y1+y2) * ${inputHeightFloat}`,\n        ];\n    const [widthRatio, widthScale, inX] = cropWidth > 1 ?\n        [\n          `${(imageWidth - 1) / (cropWidth - 1)}`,\n          '(x2-x1) * width_ratio',\n          `x1*${inputWidthFloat} + float(x)*(width_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (x1+x2) * ${inputWidthFloat}`,\n        ];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n    this.userCode = `\n      const float height_ratio = float(${heightRatio});\n      const float width_ratio = float(${widthRatio});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${batch}) {\n          return;\n        }\n\n        float height_scale = ${heightScale};\n        float width_scale = ${widthScale};\n\n        float in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n        float in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${methodId} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherNDProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  constructor(\n      private sliceDim: number, private strides: number[], shape: number[]) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    const strideString = this.sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${this.strides});\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${strideString};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getChannels, getSourceCoords} from '../packing_util';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class UnpackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = false;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;\n    const rank = outputShape.length;\n\n    const channels = getChannels('rc', rank);\n    const dtype = getCoordsDataType(rank);\n    const sourceCoords = getSourceCoords(rank, channels);\n    const innerDims = channels.slice(-2);\n    const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n\n    this.userCode = `\n      void main() {\n        ${dtype} rc = getOutputCoords();\n        vec4 packedInput = getA(${sourceCoords});\n\n        setOutput(getChannel(packedInput, ${coords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getChannels} from '../packing_util';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(\n      outputShape:\n          number[]) {  // TODO(https://github.com/tensorflow/tfjs/issues/893):\n                       // Only input / output 3D tensors.\n    this.outputShape = outputShape;\n    const rank = outputShape.length;\n\n    if (rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', rank);\n      const dtype = getCoordsDataType(rank);\n      const outOfBoundsCondition =\n          getOutOfBoundsCondition(rank, outputShape, channels);\n      const setup = getSetup(\n          rank, outputShape[outputShape.length - 1],\n          outputShape[outputShape.length - 2], channels);\n      const output = getOutput(outputShape, channels);\n\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n}\n\nfunction getSourceCoordsArr(rank: number, dims: string[]): string[] {\n  const coords = [];\n\n  for (let row = 0; row <= 1; row++) {\n    for (let col = 0; col <= 1; col++) {\n      let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n\n      for (let d = 2; d < rank; d++) {\n        coord = `${dims[dims.length - 1 - d]},` + coord;\n      }\n\n      coords.push(coord);\n    }\n  }\n  return coords;\n}\n\nfunction getOutOfBoundsCondition(\n    rank: number, shape: number[], dims: string[]): string {\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\nfunction getSetup(\n    rank: number, cols: number, rows: number, dims: string[]): string {\n  if (rank === 1) {\n    return '';\n  }\n\n  const innerDims = dims.slice(-2);\n\n  return `\n    int r = ${innerDims[0]};\n    int c = ${innerDims[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${cols};\n    bool rEdge = rp1 >= ${rows};\n  `;\n}\n\nfunction getOutput(shape: number[], dims: string[]): string {\n  const rank = shape.length;\n  const sourceCoords = getSourceCoordsArr(rank, dims);\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  return `getA(${sourceCoords[0]}),\n          cEdge ? 0. : getA(${sourceCoords[1]}),\n          rEdge ? 0. : getA(${sourceCoords[2]}),\n          rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class ReshapePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(outputShape: [number, number, number], inputShape: [\n    number, number, number\n  ]) {\n    this.outputShape = outputShape;\n\n    let mainLoop = ``;\n    for (let i = 0; i < 4; i++) {\n      let thisRC = `thisRC = rc;`;\n      if (i % 2 === 1) {\n        thisRC += `thisRC.z += 1;`;\n      }\n      if (i > 1) {\n        thisRC += `thisRC.y += 1;`;\n      }\n\n      mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n\n    this.userCode = `\n      ${getReshapedInputCoords(inputShape)}\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${outputShape[1]};\n        int cols = ${outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {getDenseTexShape, PackingScheme} from './tex_util';\n\nexport class DecodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: [number, number, number];\n  outPackingScheme = PackingScheme.DENSE;\n\n  constructor(outputShape: [number, number, number]) {\n    const texShape = getDenseTexShape(outputShape);\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        shader_util.getLogicalCoordinatesFromFlatIndex(\n            ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${texShape[0]}, ${texShape[1]}));\n        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {getDenseTexShape, PackingScheme} from './tex_util';\n\nexport class DecodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: [number, number, number];\n  packedInputs = false;\n  packedOutput = true;\n  outPackingScheme = PackingScheme.DENSE;\n\n  constructor(outputShape: [number, number, number]) {\n    const texShape = getDenseTexShape(outputShape);\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        shader_util.getLogicalCoordinatesFromFlatIndex(\n            ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${texShape[0]}, ${texShape[1]}));\n        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\n\nexport class EncodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(\n      outputShape: [number, number, number], texShape: [number, number],\n      inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    const [height, width] = texShape;\n    this.outputShape = outputShape;\n\n    let mainLoop = '';\n    let output = 'result';\n    if (inputIsUnsignedByte) {\n      output = 'floor(result * 255. + 0.5)';\n    }\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        const channel = row * 2 + col;\n\n        mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${outputShape[2]}) {\n            localCoords[2] += ${col};\n            if(localCoords[1] + ${row} < ${outputShape[1]}) {\n              localCoords[1] += ${row};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${width};\n              c = imod(flatIndex, ${width});\n              uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\n              values = ${glsl.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${channel}] = values[0];\n              } else if(offset == 1) {\n                result[${channel}] = values[1];\n              } else if(offset == 2) {\n                result[${channel}] = values[2];\n              } else {\n                result[${channel}] = values[3];\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${mainLoop}\n\n        ${glsl.output} = ${output};\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class EncodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(\n      outputShape: [number, number, number], texShape: [number, number],\n      inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    const [height, width] = texShape;\n    this.outputShape = outputShape;\n\n    let output = `result`;\n    if (inputIsUnsignedByte) {\n      output = `floor(result * 255. + 0.5)`;\n    }\n\n    this.userCode = `\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n        \n        int r = flatIndex / ${width};\n        int c = imod(flatIndex, ${width});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\n        vec4 values = ${glsl.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {registerGradient} from '../kernel_registry';\nimport {Tensor} from '../tensor';\n\nregisterGradient({\n  kernelName: 'Square',\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [x] = saved;\n    return {x: () => dy.mul(x.toFloat().mul(2))};\n  }\n});\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * Computes square of `x` element-wise: `x ^ 2`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, Math.sqrt(2), -1]);\n *\n * x.square().print();  // or tf.square(x)\n * ```\n * @param x The input Tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction square_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'square');\n  const attrs = {};\n  const inputsToSave = [$x];\n  const outputsToSave: boolean[] = [];\n  return ENGINE.runKernelFunc((backend, save) => {\n    save([$x]);\n    return backend.square($x);\n  }, {x: $x}, null /* grad */, 'Square', attrs, inputsToSave, outputsToSave);\n}\n\nexport const square = op({square_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\nimport {scalar, zerosLike} from './tensor_ops';\n\n/**\n * Computes `-1 * x` element-wise.\n *\n * ```js\n * const x = tf.tensor2d([1, 2, -2, 0], [2, 2]);\n *\n * x.neg().print();  // or tf.neg(x)\n * ```\n *\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction neg_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'neg');\n\n  const grad = (dy: T) => {\n    return {$x: () => dy.neg()};\n  };\n  return ENGINE.runKernelFunc(backend => backend.neg($x), {$x}, grad);\n}\n\n/**\n * Computes ceiling of input `tf.Tensor` element-wise: `ceil(x)`\n *\n * ```js\n * const x = tf.tensor1d([.6, 1.1, -3.3]);\n *\n * x.ceil().print();  // or tf.ceil(x)\n * ```\n * @param x The input Tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction ceil_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'ceil');\n\n  // TODO(manrajgrover): Return null for gradients when backprop supports it.\n  const grad = (dy: T) => {\n    return {$x: () => zerosLike(dy)};\n  };\n  return ENGINE.runKernelFunc(backend => backend.ceil($x), {$x}, grad);\n}\n\n/**\n * Computes floor of input `tf.Tensor` element-wise: `floor(x)`.\n *\n * ```js\n * const x = tf.tensor1d([.6, 1.1, -3.3]);\n *\n * x.floor().print();  // or tf.floor(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction floor_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'floor');\n\n  // TODO(nsthorat): Let gradients be null for cases where we want to stop\n  // backpropgation.\n  const grad = (dy: T) => {\n    return {$x: () => zerosLike(dy)};\n  };\n  return ENGINE.runKernelFunc(backend => backend.floor($x), {$x}, grad);\n}\n\n/**\n * Returns an element-wise indication of the sign of a number.\n *\n * ```js\n * const x = tf.tensor1d([.6, 1.1, -3.3, NaN, 0]);\n *\n * x.sign().print();  // or tf.sign(x)\n * ```\n * @param x The input Tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction sign_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'sign');\n\n  const grad = (dy: T) => {\n    return {$x: () => zerosLike(dy)};\n  };\n  return ENGINE.runKernelFunc(backend => backend.sign($x), {$x}, grad);\n}\n\n/**\n * RReturns which elements of x are NaN.\n *\n * ```js\n * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);\n *\n * x.isNaN().print();  // or tf.isNaN(x)\n * ```\n * @param x The input Tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction isNaN_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'isNaN');\n\n  // TODO(nsthorat): Let gradients be null for cases where we want to stop\n  // backpropgation.\n  const grad = (dy: T) => {\n    return {$x: () => zerosLike(dy)};\n  };\n  return ENGINE.runKernelFunc(backend => backend.isNaN($x), {$x}, grad);\n}\n\n/**\n * Returns which elements of x are Infinity or -Infinity.\n *\n * ```js\n * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);\n *\n * x.isInf().print();  // or tf.isNaN(x)\n * ```\n * @param x The input Tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction isInf_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'isInf');\n\n  // TODO(nsthorat): Let gradients be null for cases where we want to stop\n  // backpropgation.\n  const grad = (dy: T) => {\n    return {$x: () => zerosLike(dy)};\n  };\n  return ENGINE.runKernelFunc(backend => backend.isInf($x), {$x}, grad);\n}\n\n/**\n * Returns which elements of x are finite.\n *\n * ```js\n * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);\n *\n * x.isFinite().print();  // or tf.isNaN(x)\n * ```\n * @param x The input Tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction isFinite_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'isFinite');\n\n  // TODO(nsthorat): Let gradients be null for cases where we want to stop\n  // backpropgation.\n  const grad = (dy: T) => {\n    return {$x: () => zerosLike(dy)};\n  };\n  return ENGINE.runKernelFunc(backend => backend.isFinite($x), {$x}, grad);\n}\n\n/**\n * Computes round of input `tf.Tensor` element-wise: `round(x)`.\n * It implements banker's rounding.\n *\n * ```js\n * const x = tf.tensor1d([.6, 1.1, -3.3]);\n *\n * x.round().print();  // or tf.round(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction round_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'round');\n\n  // TODO(nsthorat): Let gradients be null for cases where we want to stop\n  // backpropgation.\n  const grad = (dy: T) => {\n    return {$x: () => zerosLike(dy)};\n  };\n  return ENGINE.runKernelFunc(backend => backend.round($x), {$x}, grad);\n}\n\n/**\n * Computes exponential of the input `tf.Tensor` element-wise. `e ^ x`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, -3]);\n *\n * x.exp().print();  // or tf.exp(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction exp_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'exp');\n\n  const bck = (dy: T, saved: Tensor[]) => {\n    return {x: () => dy.mulStrict(saved[0] as T)};\n  };\n  const attrs = {};\n  const inputsToSave: Tensor[] = [];\n  const outputsToSave = [true];\n  return ENGINE.runKernelFunc((backend, save) => {\n    const y = backend.exp($x);\n    save([y]);\n    return y;\n  }, {x: $x}, bck, 'Exp', attrs, inputsToSave, outputsToSave);\n}\n\n/**\n * Computes exponential of the input `tf.Tensor` minus one element-wise.\n * `e ^ x - 1`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, -3]);\n *\n * x.expm1().print();  // or tf.expm1(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction expm1_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'expm1');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => dy.mul($x.exp())} as {$x: () => T};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.expm1($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes natural logarithm of the input `tf.Tensor` element-wise: `ln(x)`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, Math.E]);\n *\n * x.log().print();  // or tf.log(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction log_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'log');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {x: () => dy.div($x.toFloat())} as {x: () => T};\n  };\n\n  const attrs = {};\n  const inputsToSave = [$x];\n\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.log($x);\n    save([$x]);\n    return res;\n  }, {x: $x}, grad, 'Log', attrs, inputsToSave);\n}\n\n/**\n * Computes natural logarithm of the input `tf.Tensor` plus one\n * element-wise: `ln(1 + x)`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, Math.E - 1]);\n *\n * x.log1p().print();  // or tf.log1p(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction log1p_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'log1p');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => dy.div($x.add(1))} as {$x: () => T};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.log1p($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes square root of the input `tf.Tensor` element-wise: `y = sqrt(x)`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 4, -1]);\n *\n * x.sqrt().print();  // or tf.sqrt(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction sqrt_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'sqrt');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => dy.div($x.toFloat().sqrt().mul(2))} as {$x: () => T};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.sqrt($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes reciprocal of square root of the input `tf.Tensor` element-wise:\n * `y = 1 / sqrt(x)`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 4, -1]);\n *\n * x.rsqrt().print();  // or tf.rsqrt(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction rsqrt_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'rsqrt');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {x: () => dy.div($x.pow(1.5).mul(2)).neg() as T};\n  };\n  const inputsToSave = [$x];\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.rsqrt($x);\n    save([$x]);\n    return res;\n  }, {x: $x}, grad, 'Rsqrt', {} /* attrs */, inputsToSave);\n}\n\n/**\n * Computes reciprocal of x element-wise: `1 / x`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, 2]);\n *\n * x.reciprocal().print();  // or tf.reciprocal(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction reciprocal_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'reciprocal');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => dy.div($x.square().neg())} as {$x: () => T};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.reciprocal($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes absolute value element-wise: `abs(x)`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.abs().print();  // or tf.abs(x)\n * ```\n * @param x The input `tf.Tensor`.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction abs_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'abs');\n\n  if ($x.dtype === 'complex64') {\n    return ENGINE.runKernelFunc(backend => backend.complexAbs($x), {$x});\n  }\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {x: () => dy.mul($x.toFloat().step(-1))} as {x: () => T};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.abs($x);\n    save([$x]);\n    return res;\n  }, {x: $x}, grad, 'Abs');\n}\n\n/**\n * Clips values element-wise. `max(min(x, clipValueMax), clipValueMin)`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.clipByValue(-2, 3).print();  // or tf.clipByValue(x, -2, 3)\n * ```\n * @param x The input tensor.\n * @param clipValueMin Lower-bound of range to be clipped to.\n * @param clipValueMax Upper-bound of range to be clipped to.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction clipByValue_<T extends Tensor>(\n    x: T|TensorLike, clipValueMin: number, clipValueMax: number): T {\n  const $x = convertToTensor(x, 'x', 'clipByValue');\n  util.assert(\n      (clipValueMin <= clipValueMax),\n      () => `Error in clip: min (${clipValueMin}) must be ` +\n          `less than or equal to max (${clipValueMax}).`);\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {\n      x: () => dy.where(\n                   $x.greaterEqual(clipValueMin)\n                       .logicalAnd($x.lessEqual(clipValueMax)),\n                   zerosLike(dy)) as T,\n    };\n  };\n  const inputsToSave = [$x];\n  const attr = {min: clipValueMin, max: clipValueMax};\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.clip($x, clipValueMin, clipValueMax);\n    save([$x]);\n    return res;\n  }, {x: $x}, grad, 'ClipByValue', attr, inputsToSave);\n}\n\n/**\n * Computes sigmoid element-wise, `1 / (1 + exp(-x))`\n *\n * ```js\n * const x = tf.tensor1d([0, -1, 2, -3]);\n *\n * x.sigmoid().print();  // or tf.sigmoid(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction sigmoid_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'sigmoid');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [y] = saved;\n    return {x: () => dy.mul(y.mul(scalar(1).sub(y)))} as {x: () => T};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const y = backend.sigmoid($x);\n    save([y]);\n    return y;\n  }, {x: $x}, grad, 'Sigmoid');\n}\n\n/**\n * Computes log sigmoid of the input `tf.Tensor` element-wise:\n * `logSigmoid(x)`. For numerical stability, we use `-tf.softplus(-x)`.\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.logSigmoid().print();  // or tf.logSigmoid(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction logSigmoid_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'logSigmoid');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => dy.mul($x.neg().sigmoid())} as {$x: () => T};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.softplus($x.neg()).neg();\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes softplus of the input `tf.Tensor` element-wise: `log(exp(x) + 1)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.softplus().print();  // or tf.softplus(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction softplus_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'softplus');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => dy.mul($x.sigmoid())} as {$x: () => T};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.softplus($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes sin of the input Tensor element-wise: `sin(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);\n *\n * x.sin().print();  // or tf.sin(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction sin_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'sin');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {x: () => $x.toFloat().cos().mul(dy)} as {x: () => T};\n  };\n  const inputsToSave = [$x];\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.sin($x);\n    save([$x]);\n    return res;\n  }, {x: $x}, grad, 'Sin', {} /* attrs */, inputsToSave);\n}\n\n/**\n * Computes cos of the input `tf.Tensor` element-wise: `cos(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);\n *\n * x.cos().print();  // or tf.cos(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction cos_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'cos');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {x: () => $x.toFloat().sin().neg().mul(dy)} as {x: () => T};\n  };\n  const inputsToSave = [$x];\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.cos($x);\n    save([$x]);\n    return res;\n  }, {x: $x}, grad, 'Cos', {} /* attrs */, inputsToSave);\n}\n\n/**\n * Computes tan of the input `tf.Tensor` element-wise, `tan(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);\n *\n * x.tan().print();  // or tf.tan(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction tan_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'tan');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => dy.div($x.cos().square())} as {$x: () => T};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.tan($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes asin of the input `tf.Tensor` element-wise: `asin(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.asin().print();  // or tf.asin(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction asin_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'asin');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {\n      $x: () => dy.divStrict(scalar(1).sub($x.toFloat().square()).sqrt() as T)\n    };\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.asin($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes acos of the input `tf.Tensor` element-wise: `acos(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.acos().print();  // or tf.acos(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction acos_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'acos');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {\n      $x: () =>\n          dy.divStrict(scalar(1).sub($x.toFloat().square()).sqrt() as T).neg()\n    };\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.acos($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes atan of the input `tf.Tensor` element-wise: `atan(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.atan().print();  // or tf.atan(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction atan_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'atan');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => dy.div($x.toFloat().square().add(1))} as {$x: () => T};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.atan($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes hyperbolic sin of the input `tf.Tensor` element-wise: `sinh(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.sinh().print();  // or tf.sinh(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction sinh_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'sinh');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => $x.toFloat().cosh().mulStrict(dy) as T};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.sinh($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes hyperbolic cos of the input `tf.Tensor` element-wise: `cosh(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.cosh().print();  // or tf.cosh(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction cosh_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'cosh');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => $x.toFloat().sinh().mulStrict(dy) as T};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.cosh($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes hyperbolic tangent of the input `tf.Tensor` element-wise: `tanh(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, 70]);\n *\n * x.tanh().print();  // or tf.tanh(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction tanh_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'tanh');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [y] = saved;\n    return {x: () => scalar(1).sub(y.square()).mulStrict(dy) as T};\n  };\n  const outputsToSave = [true];\n  return ENGINE.runKernelFunc(\n      (backend, save) => {\n        const y = backend.tanh($x);\n        save([y]);\n        return y;\n      },\n      {x: $x}, grad, 'Tanh', {} /* attrs */, null /* inputsToSave */,\n      outputsToSave);\n}\n\n/**\n * Computes inverse hyperbolic sin of the input `tf.Tensor` element-wise:\n * `asinh(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.asinh().print();  // or tf.asinh(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction asinh_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'asinh');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {\n      $x: () => dy.divStrict(scalar(1).add($x.toFloat().square()).sqrt() as T)\n    };\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.asinh($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes the inverse hyperbolic cos of the input `tf.Tensor` element-wise:\n * `acosh(x)`\n *\n * ```js\n * const x = tf.tensor1d([10, 1, 3, 5.7]);\n *\n * x.acosh().print();  // or tf.acosh(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction acosh_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'acosh');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => dy.divStrict($x.toFloat().square().sub(1).sqrt() as T)};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.acosh($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes inverse hyperbolic tan of the input `tf.Tensor` element-wise:\n * `atanh(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, .1, -.1, .7]);\n *\n * x.atanh().print();  // or tf.atanh(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction atanh_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'atanh');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => dy.div(scalar(1).sub($x.toFloat().square()))} as\n        {$x: () => T};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.atanh($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes gause error function of the input `tf.Tensor` element-wise:\n * `erf(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, .1, -.1, .7]);\n *\n * x.erf().print(); // or tf.erf(x);\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction erf_<T extends Tensor>(x: T|TensorLike): T {\n  let $x = convertToTensor(x, 'x', 'erf');\n  util.assert(\n      $x.dtype === 'int32' || $x.dtype === 'float32',\n      () => 'Input dtype must be `int32` or `float32`.');\n\n  if ($x.dtype === 'int32') {\n    $x = $x.toFloat();\n  }\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {\n      $x: () => dy.mul($x.square().neg().exp().mul(2 / Math.sqrt(Math.PI)))\n    } as {$x: () => T};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.erf($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes step of the input `tf.Tensor` element-wise: `x > 0 ? 1 : alpha * x`\n *\n * ```js\n * const x = tf.tensor1d([0, 2, -1, -3]);\n *\n * x.step(.5).print();  // or tf.step(x, .5)\n * ```\n * @param x The input tensor.\n * @param alpha The gradient when input is negative.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction step_<T extends Tensor>(x: T|TensorLike, alpha = 0.0): T {\n  const $x = convertToTensor(x, 'x', 'step');\n\n  // TODO(manrajgrover): Return null for gradients when backprop supports\n  // it.\n  const grad = (dy: T) => {\n    return {$x: () => zerosLike(dy)};\n  };\n  return ENGINE.runKernelFunc(backend => backend.step($x, alpha), {$x}, grad);\n}\n\nexport const abs = op({abs_});\nexport const acos = op({acos_});\nexport const acosh = op({acosh_});\nexport const asin = op({asin_});\nexport const asinh = op({asinh_});\nexport const atan = op({atan_});\nexport const atanh = op({atanh_});\nexport const ceil = op({ceil_});\nexport const clipByValue = op({clipByValue_});\nexport const cos = op({cos_});\nexport const cosh = op({cosh_});\nexport const erf = op({erf_});\nexport const exp = op({exp_});\nexport const expm1 = op({expm1_});\nexport const floor = op({floor_});\nexport const log = op({log_});\nexport const log1p = op({log1p_});\nexport const logSigmoid = op({logSigmoid_});\nexport const neg = op({neg_});\nexport const reciprocal = op({reciprocal_});\nexport const round = op({round_});\nexport const rsqrt = op({rsqrt_});\nexport const sigmoid = op({sigmoid_});\nexport const sign = op({sign_});\nexport const isNaN = op({isNaN_});\nexport const isInf = op({isInf_});\nexport const isFinite = op({isFinite_});\nexport const sin = op({sin_});\nexport const sinh = op({sinh_});\nexport const softplus = op({softplus_});\nexport const sqrt = op({sqrt_});\nexport const step = op({step_});\nexport const tan = op({tan_});\nexport const tanh = op({tanh_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {deprecationWarn} from '../globals';\nimport {Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {Rank, ShapeMap, TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {tile} from './array_ops';\nimport {getReductionAxes} from './broadcast_util';\nimport {op} from './operation';\nimport {scalar} from './tensor_ops';\nimport {rsqrt} from './unary_ops';\n\n/**\n * Batch normalization, strictly for 2D. For the more relaxed version, see\n * `tf.batchNorm`.\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n */\nfunction batchNorm2d_(\n    x: Tensor2D|TensorLike, mean: Tensor2D|Tensor1D|TensorLike,\n    variance: Tensor2D|Tensor1D|TensorLike,\n    offset?: Tensor2D|Tensor1D|TensorLike, scale?: Tensor2D|Tensor1D|TensorLike,\n    varianceEpsilon?: number): Tensor2D {\n  const $x = convertToTensor(x, 'x', 'batchNorm');\n  const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n  const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n  let $scale: Tensor2D|Tensor1D;\n  if (scale != null) {\n    $scale = convertToTensor(scale, 'scale', 'batchNorm');\n  }\n  let $offset: Tensor2D|Tensor1D;\n  if (offset != null) {\n    $offset = convertToTensor(offset, 'offset', 'batchNorm');\n  }\n  util.assert(\n      $x.rank === 2,\n      () => `Error in batchNorm3D: x must be rank 3 but got rank ` +\n          `${$x.rank}.`);\n  util.assert(\n      $mean.rank === 2 || $mean.rank === 1,\n      () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but ` +\n          `got rank ${$mean.rank}.`);\n  util.assert(\n      $variance.rank === 2 || $variance.rank === 1,\n      () => `Error in batchNorm2D: variance must be rank 2 or rank 1 ` +\n          `but got rank ${$variance.rank}.`);\n  if ($scale != null) {\n    util.assert(\n        $scale.rank === 2 || $scale.rank === 1,\n        () => `Error in batchNorm2D: scale must be rank 2 or rank 1 ` +\n            `but got rank ${$scale.rank}.`);\n  }\n  if ($offset != null) {\n    util.assert(\n        $offset.rank === 2 || $offset.rank === 1,\n        () => `Error in batchNorm2D: offset must be rank 2 or rank 1 ` +\n            `but got rank ${$offset.rank}.`);\n  }\n\n  return batchNorm_($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\n\n/**\n * Batch normalization, strictly for 3D. For the more relaxed version, see\n * `tf.batchNorm`.\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n */\nfunction batchNorm3d_(\n    x: Tensor3D|TensorLike, mean: Tensor3D|Tensor1D|TensorLike,\n    variance: Tensor3D|Tensor1D|TensorLike,\n    offset?: Tensor3D|Tensor1D|TensorLike, scale?: Tensor3D|Tensor1D|TensorLike,\n    varianceEpsilon?: number): Tensor3D {\n  const $x = convertToTensor(x, 'x', 'batchNorm');\n  const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n  const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n  let $scale: Tensor3D|Tensor1D;\n  if (scale != null) {\n    $scale = convertToTensor(scale, 'scale', 'batchNorm');\n  }\n  let $offset: Tensor3D|Tensor1D;\n  if (offset != null) {\n    $offset = convertToTensor(offset, 'offset', 'batchNorm');\n  }\n  util.assert(\n      $x.rank === 3,\n      () => `Error in batchNorm3D: x must be rank 3 but got rank ` +\n          `${$x.rank}.`);\n  util.assert(\n      $mean.rank === 3 || $mean.rank === 1,\n      () => `Error in batchNorm3D: mean must be rank 3 or rank 1 but ` +\n          `got rank ${$mean.rank}.`);\n  util.assert(\n      $variance.rank === 3 || $variance.rank === 1,\n      () => `Error in batchNorm3D: variance must be rank 3 or rank 1 ` +\n          `but got rank ${$variance.rank}.`);\n  if ($scale != null) {\n    util.assert(\n        $scale.rank === 3 || $scale.rank === 1,\n        () => `Error in batchNorm3D: scale must be rank 3 or rank 1 ` +\n            `but got rank ${$scale.rank}.`);\n  }\n  if ($offset != null) {\n    util.assert(\n        $offset.rank === 3 || $offset.rank === 1,\n        () => `Error in batchNorm3D: offset must be rank 3 or rank 1 ` +\n            `but got rank ${$offset.rank}.`);\n  }\n\n  return batchNorm_($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\n\n/**\n * Batch normalization, strictly for 4D. For the more relaxed version, see\n * `tf.batchNorm`.\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n */\nfunction batchNorm4d_(\n    x: Tensor4D|TensorLike, mean: Tensor4D|Tensor1D|TensorLike,\n    variance: Tensor4D|Tensor1D|TensorLike,\n    offset?: Tensor4D|Tensor1D|TensorLike, scale?: Tensor4D|Tensor1D|TensorLike,\n    varianceEpsilon?: number): Tensor4D {\n  const $x = convertToTensor(x, 'x', 'batchNorm');\n  const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n  const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n  let $scale: Tensor4D|Tensor1D;\n  if (scale != null) {\n    $scale = convertToTensor(scale, 'scale', 'batchNorm');\n  }\n  let $offset: Tensor4D|Tensor1D;\n  if (offset != null) {\n    $offset = convertToTensor(offset, 'offset', 'batchNorm');\n  }\n  util.assert(\n      $x.rank === 4,\n      () => `Error in batchNorm4D: x must be rank 4 but got rank ` +\n          `${$x.rank}.`);\n  util.assert(\n      $mean.rank === 4 || $mean.rank === 1,\n      () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but ` +\n          `got rank ${$mean.rank}.`);\n  util.assert(\n      $variance.rank === 4 || $variance.rank === 1,\n      () => `Error in batchNorm4D: variance must be rank 4 or rank 1 ` +\n          `but got rank ${$variance.rank}.`);\n  if ($scale != null) {\n    util.assert(\n        $scale.rank === 4 || $scale.rank === 1,\n        () => `Error in batchNorm4D: scale must be rank 4 or rank 1 ` +\n            `but got rank ${$scale.rank}.`);\n  }\n  if ($offset != null) {\n    util.assert(\n        $offset.rank === 4 || $offset.rank === 1,\n        () => `Error in batchNorm4D: offset must be rank 4 or rank 1 ` +\n            `but got rank ${$offset.rank}.`);\n  }\n  return batchNorm_($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\n\n/**\n * @deprecated Please use `tf.batchNorm` instead and note the positional\n *     argument change of scale, offset, and varianceEpsilon.\n */\nfunction batchNormalization_<R extends Rank>(\n    x: Tensor<R>|TensorLike, mean: Tensor<R>|Tensor1D|TensorLike,\n    variance: Tensor<R>|Tensor1D|TensorLike, varianceEpsilon = .001,\n    scale?: Tensor<R>|Tensor1D|TensorLike,\n    offset?: Tensor<R>|Tensor1D|TensorLike): Tensor<R> {\n  warnDeprecation();\n  return batchNorm_(x, mean, variance, offset, scale, varianceEpsilon);\n}\n\n/**\n * Batch normalization.\n *\n * As described in\n * [http://arxiv.org/abs/1502.03167](http://arxiv.org/abs/1502.03167).\n *\n * Mean, variance, scale, and offset can be of two shapes:\n *   - The same shape as the input.\n *   - In the common case, the depth dimension is the last dimension of x, so\n *     the values would be an `tf.Tensor1D` of shape [depth].\n *\n * Also available are stricter rank-specific methods with the same signature\n * as this method that assert that parameters passed are of given rank\n *   - `tf.batchNorm2d`\n *   - `tf.batchNorm3d`\n *   - `tf.batchNorm4d`\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n */\n/** @doc {heading: 'Operations', subheading: 'Normalization'} */\nfunction batchNorm_<R extends Rank>(\n    x: Tensor<R>|TensorLike, mean: Tensor<R>|Tensor1D|TensorLike,\n    variance: Tensor<R>|Tensor1D|TensorLike,\n    offset?: Tensor<R>|Tensor1D|TensorLike,\n    scale?: Tensor<R>|Tensor1D|TensorLike,\n    varianceEpsilon?: number): Tensor<R> {\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n  const $x = convertToTensor(x, 'x', 'batchNorm');\n  const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n  const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n  let $scale: Tensor<R>|Tensor1D;\n  if (scale != null) {\n    $scale = convertToTensor(scale, 'scale', 'batchNorm');\n  }\n  let $offset: Tensor<R>|Tensor1D;\n  if (offset != null) {\n    $offset = convertToTensor(offset, 'offset', 'batchNorm');\n  }\n\n  util.assert(\n      $mean.rank === $variance.rank,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      $offset == null || $mean.rank === $offset.rank,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      $scale == null || $mean.rank === $scale.rank,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  let x4D: Tensor4D;\n  if ($x.rank === 0 || $x.rank === 1) {\n    x4D = $x.as4D(1, 1, 1, $x.size);\n  } else if ($x.rank === 2) {\n    x4D = $x.as4D(1, 1, $x.shape[0], $x.shape[1]);\n  } else if ($x.rank === 3) {\n    x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);\n  } else {\n    x4D = $x as Tensor4D;\n  }\n\n  const der = (dy: Tensor, saved: Tensor[]) => {\n    type Saved = [\n      Tensor<R>, Tensor<R>| Tensor1D, Tensor<R>| Tensor1D, Tensor<R>| Tensor1D\n    ];\n    const [$x, $mean, $variance, $scale] = saved as Saved;\n    const scaleValue = $scale == null ? scalar(1) : $scale;\n    const reductionAxes = getReductionAxes($mean.shape, x4D.shape);\n    const tileShape: number[] = [];\n    if ($mean.rank === 1) {\n      for (let i = 0; i < x4D.shape.length - 1; ++i) {\n        tileShape.push(x4D.shape[i]);\n      }\n      tileShape.push(1);\n    }\n\n    const xMinusMean = $x.sub($mean);\n    const dyTimesScaleValue = dy.mul(scaleValue);\n    const oneOverSqrtVariance = rsqrt($variance.add(scalar(varianceEpsilon)));\n    const minusHalfRCube = oneOverSqrtVariance.mul(oneOverSqrtVariance)\n                               .mul(oneOverSqrtVariance)\n                               .mul(scalar(-0.5));\n\n    const derX = () => {\n      if ($mean.rank === 1) {\n        return dy\n            .mul(tile(\n                oneOverSqrtVariance.as4D(1, 1, 1, $mean.shape[0]), tileShape))\n            .mul(scaleValue)\n            .reshape($x.shape);\n      } else {\n        return dy.mul(oneOverSqrtVariance).mul(scaleValue).reshape($x.shape);\n      }\n    };\n    const derMean = () => {\n      let meanDer = oneOverSqrtVariance.mul(scalar(-1)).mul(dyTimesScaleValue);\n      if ($mean.rank === 1) {\n        meanDer = meanDer.sum(reductionAxes);\n      }\n      return meanDer.reshape($mean.shape as ShapeMap[R]);\n    };\n    const derVariance = () => {\n      let varianceDer = minusHalfRCube.mul(xMinusMean).mul(dyTimesScaleValue);\n      if ($mean.rank === 1) {\n        varianceDer = varianceDer.sum(reductionAxes);\n      }\n      return varianceDer.reshape($mean.shape as ShapeMap[R]);\n    };\n    const derScale = () => {\n      const xMinusMean2TimesRsqrt = xMinusMean.mul(oneOverSqrtVariance);\n      let scaleDer = dy.mul(xMinusMean2TimesRsqrt);\n      if ($mean.rank === 1) {\n        scaleDer = scaleDer.sum(reductionAxes);\n      }\n      return scaleDer.reshape($mean.shape as ShapeMap[R]);\n    };\n    const derOffset = () => {\n      let offsetDer = dy;\n      if ($mean.rank === 1) {\n        offsetDer = offsetDer.sum(reductionAxes);\n      }\n      return offsetDer.reshape($mean.shape as ShapeMap[R]);\n    };\n    return {\n      x: derX,\n      mean: derMean,\n      variance: derVariance,\n      scale: derScale,\n      offset: derOffset\n    };\n  };\n\n  const inputsToSave = [$x, $mean, $variance, $scale];\n\n  const res = ENGINE.runKernelFunc(\n      (backend, save) => {\n        const res = backend.batchNormalization(\n            x4D, batchnormReshape4D($mean), batchnormReshape4D($variance),\n            varianceEpsilon, batchnormReshape4D($scale),\n            batchnormReshape4D($offset));\n        save([$x, $mean, $variance, $scale]);\n        return res;\n      },\n      {x: $x, mean: $mean, variance: $variance, scale: $scale, offset: $offset},\n      der, 'BatchNormalization', {varianceEpsilon}, inputsToSave);\n  return res.reshape($x.shape);\n}\n\nfunction batchnormReshape4D(x: Tensor): Tensor4D|Tensor1D {\n  if (x == null) {\n    return null;\n  }\n  if (x.rank === 0) {\n    return x.as1D();\n  } else if (x.rank === 1) {\n    return x as Tensor1D;\n  } else if (x.rank === 2) {\n    return x.as4D(1, 1, x.shape[0], x.shape[1]);\n  } else if (x.rank === 3) {\n    return x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n  }\n  return x as Tensor4D;\n}\n\n/**\n * @deprecated Please use `tf.batchNorm2d` instead and note the positional\n *     argument change of scale, offset, and varianceEpsilon.\n */\nfunction batchNormalization2d_(\n    x: Tensor2D|TensorLike, mean: Tensor2D|Tensor1D|TensorLike,\n    variance: Tensor2D|Tensor1D|TensorLike, varianceEpsilon = .001,\n    scale?: Tensor2D|Tensor1D|TensorLike,\n    offset?: Tensor2D|Tensor1D|TensorLike): Tensor2D {\n  warnDeprecation();\n  return batchNorm2d_(x, mean, variance, offset, scale, varianceEpsilon);\n}\n\n/**\n * @deprecated Please use `tf.batchNorm3d` instead and note the positional\n *     argument change of scale, offset, and varianceEpsilon.\n */\nfunction batchNormalization3d_(\n    x: Tensor3D|TensorLike, mean: Tensor3D|Tensor1D|TensorLike,\n    variance: Tensor3D|Tensor1D|TensorLike, varianceEpsilon = .001,\n    scale?: Tensor3D|Tensor1D|TensorLike,\n    offset?: Tensor3D|Tensor1D|TensorLike): Tensor3D {\n  warnDeprecation();\n  return batchNorm3d_(x, mean, variance, offset, scale, varianceEpsilon);\n}\n\n/**\n * @deprecated Please use `tf.batchNorm4d` instead and note the positional\n *     argument change of scale, offset, and varianceEpsilon.\n */\nfunction batchNormalization4d_(\n    x: Tensor4D|TensorLike, mean: Tensor4D|Tensor1D|TensorLike,\n    variance: Tensor4D|Tensor1D|TensorLike, varianceEpsilon = .001,\n    scale?: Tensor4D|Tensor1D|TensorLike,\n    offset?: Tensor4D|Tensor1D|TensorLike): Tensor4D {\n  warnDeprecation();\n  return batchNorm4d_(x, mean, variance, offset, scale, varianceEpsilon);\n}\n\nfunction warnDeprecation() {\n  deprecationWarn(\n      'tf.batchNormalization() is going away. ' +\n      'Use tf.batchNorm() instead, and note the positional argument change ' +\n      'of scale, offset, and varianceEpsilon');\n}\n\nexport const batchNormalization2d = op({batchNormalization2d_});\nexport const batchNormalization3d = op({batchNormalization3d_});\nexport const batchNormalization4d = op({batchNormalization4d_});\nexport const batchNormalization = op({batchNormalization_});\n\nexport const batchNorm = op({batchNorm_});\nexport const batchNorm2d = op({batchNorm2d_});\nexport const batchNorm3d = op({batchNorm3d_});\nexport const batchNorm4d = op({batchNorm4d_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {whereImpl} from '../backends/where_impl';\nimport {ENGINE} from '../engine';\nimport {Tensor, Tensor2D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {assert, assertShapesMatch} from '../util';\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {op} from './operation';\nimport {zerosLike} from './tensor_ops';\n\n/**\n * Returns the truth value of `NOT x` element-wise.\n *\n * ```js\n * const a = tf.tensor1d([false, true], 'bool');\n *\n * a.logicalNot().print();\n * ```\n *\n * @param x The input tensor. Must be of dtype 'bool'.\n */\n/** @doc {heading: 'Operations', subheading: 'Logical'} */\nfunction logicalNot_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'logicalNot', 'bool');\n  return ENGINE.runKernelFunc(backend => backend.logicalNot($x), {$x});\n}\n\n/**\n * Returns the truth value of `a AND b` element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([false, false, true, true], 'bool');\n * const b = tf.tensor1d([false, true, false, true], 'bool');\n *\n * a.logicalAnd(b).print();\n * ```\n *\n * @param a The first input tensor. Must be of dtype bool.\n * @param b The second input tensor. Must be of dtype bool.\n */\n/** @doc {heading: 'Operations', subheading: 'Logical'} */\nfunction logicalAnd_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'logicalAnd', 'bool');\n  const $b = convertToTensor(b, 'b', 'logicalAnd', 'bool');\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  return ENGINE.runKernelFunc(\n             backend => backend.logicalAnd($a, $b), {a: $a, b: $b},\n             null /* grad */, 'LogicalAnd') as T;\n}\n\n/**\n * Returns the truth value of `a OR b` element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([false, false, true, true], 'bool');\n * const b = tf.tensor1d([false, true, false, true], 'bool');\n *\n * a.logicalOr(b).print();\n * ```\n * @param a The first input tensor. Must be of dtype bool.\n * @param b The second input tensor. Must be of dtype bool.\n */\n/** @doc {heading: 'Operations', subheading: 'Logical'} */\nfunction logicalOr_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'logicalOr', 'bool');\n  const $b = convertToTensor(b, 'b', 'logicalOr', 'bool');\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  return ENGINE.runKernelFunc(backend => backend.logicalOr($a, $b), {$a, $b}) as\n      T;\n}\n\n/**\n * Returns the truth value of `a XOR b` element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([false, false, true, true], 'bool');\n * const b = tf.tensor1d([false, true, false, true], 'bool');\n *\n * a.logicalXor(b).print();\n * ```\n *\n * @param a The first input tensor. Must be of dtype bool.\n * @param b The second input tensor. Must be of dtype bool.\n */\n/** @doc {heading: 'Operations', subheading: 'Logical'} */\nfunction logicalXor_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'logicalXor', 'bool');\n  const $b = convertToTensor(b, 'b', 'logicalXor', 'bool');\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  // x ^ y = (x | y) & ~(x & y)\n  return logicalOr(a, b).logicalAnd(logicalAnd(a, b).logicalNot()) as T;\n}\n\n/**\n * Returns the elements, either `a` or `b` depending on the `condition`.\n *\n * If the condition is true, select from `a`, otherwise select from `b`.\n *\n * ```js\n * const cond = tf.tensor1d([false, false, true], 'bool');\n * const a = tf.tensor1d([1 , 2, 3]);\n * const b = tf.tensor1d([-1, -2, -3]);\n *\n * a.where(cond, b).print();\n * ```\n *\n * @param condition The input condition. Must be of dtype bool.\n * @param a If `condition` is rank 1, `a` may have a higher rank but\n *     its first dimension must match the size of `condition`.\n * @param b A tensor with the same shape and type as `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Logical'} */\nfunction where_<T extends Tensor>(\n    condition: Tensor|TensorLike, a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'where');\n  const $b = convertToTensor(b, 'b', 'where');\n  const $condition = convertToTensor(condition, 'condition', 'where', 'bool');\n\n  assertShapesMatch($a.shape, $b.shape, 'Error in where: ');\n\n  if ($condition.rank === 1) {\n    // If condition rank is 1, then the first dimension must match the size of\n    // condition.\n    assert(\n        $condition.shape[0] === $a.shape[0],\n        () => 'The first dimension of `a` must match the size of `condition`.');\n  } else {\n    // A must have the same shape as condition.\n    assertShapesMatch($condition.shape, $b.shape, 'Error in where: ');\n  }\n\n  // TODO(julianoks): Return null for condition gradient\n  // when backprop supports it.\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$condition] = saved;\n    return {\n      $condition: () => zerosLike($condition).toFloat(),\n      $a: () => dy.mul($condition.cast(dy.dtype)),\n      $b: () => dy.mul($condition.logicalNot().cast(dy.dtype))\n    } as {$a: () => T, $b: () => T, $condition: () => T};\n  };\n\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.select($condition, $a, $b);\n    save([$condition]);\n    return res;\n  }, {$condition, $a, $b}, grad) as T;\n}\n\n/**\n * Returns the coordinates of true elements of condition.\n *\n * The coordinates are returned in a 2-D tensor where the first dimension (rows)\n * represents the number of true elements, and the second dimension (columns)\n * represents the coordinates of the true elements. Keep in mind, the shape of\n * the output tensor can vary depending on how many true values there are in\n * input. Indices are output in row-major order. The resulting tensor has the\n * shape `[numTrueElems, condition.rank]`.\n *\n * This is analogous to calling the python `tf.where(cond)` without an x or y.\n *\n * ```js\n * const cond = tf.tensor1d([false, false, true], 'bool');\n * const result = await tf.whereAsync(cond);\n * result.print();\n * ```\n */\n/** @doc {heading: 'Operations', subheading: 'Logical'} */\nasync function whereAsync_(condition: Tensor|TensorLike): Promise<Tensor2D> {\n  const $condition =\n      convertToTensor(condition, 'condition', 'whereAsync', 'bool');\n  const vals = await $condition.data();\n  const res = whereImpl($condition.shape, vals);\n  if (condition !== $condition) {\n    $condition.dispose();\n  }\n  return res;\n}\n\nexport const logicalAnd = op({logicalAnd_});\nexport const logicalNot = op({logicalNot_});\nexport const logicalOr = op({logicalOr_});\nexport const logicalXor = op({logicalXor_});\nexport const where = op({where_});\nexport const whereAsync = whereAsync_;\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike, upcastType} from '../types';\nimport * as util from '../util';\nimport * as broadcast_util from './broadcast_util';\nimport {where} from './logical_ops';\nimport {op} from './operation';\nimport {scalar, zerosLike} from './tensor_ops';\nimport {neg} from './unary_ops';\n\n/**\n * Adds two `tf.Tensor`s element-wise, A + B. Supports broadcasting.\n *\n * We also expose `tf.addStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3, 4]);\n * const b = tf.tensor1d([10, 20, 30, 40]);\n *\n * a.add(b).print();  // or tf.add(a, b)\n * ```\n *\n * ```js\n * // Broadcast add a with b.\n * const a = tf.scalar(5);\n * const b = tf.tensor1d([10, 20, 30, 40]);\n *\n * a.add(b).print();  // or tf.add(a, b)\n * ```\n * @param a The first `tf.Tensor` to add.\n * @param b The second `tf.Tensor` to add. Must have the same type as `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Arithmetic'} */\nfunction add_<T extends Tensor>(a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'add');\n  let $b = convertToTensor(b, 'b', 'add');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const outShape =\n      broadcast_util.assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const der = (dy: Tensor) => {\n    const derA = () => {\n      let res = dy;\n      const reduceAxes = broadcast_util.getReductionAxes($a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = res.sum(reduceAxes);\n      }\n      return res.reshape($a.shape);\n    };\n    const derB = () => {\n      let res = dy;\n      const reduceAxes = broadcast_util.getReductionAxes($b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = res.sum(reduceAxes);\n      }\n      return res.reshape($b.shape);\n    };\n    return {a: derA, b: derB};\n  };\n  return ENGINE.runKernelFunc(\n             backend => backend.add($a, $b), {a: $a, b: $b}, der, 'Add') as T;\n}\n\n/**\n * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n *\n * tf.addN([a, b, c]).print();\n * ```\n * @param tensors A list of tensors with the same shape and dtype.\n */\n/** @doc {heading: 'Operations', subheading: 'Arithmetic'} */\nfunction addN_<T extends Tensor>(tensors: Array<T|TensorLike>): T {\n  util.assert(\n      Array.isArray(tensors),\n      () => 'The argument passed to tf.addN() must be a list of tensors');\n  util.assert(\n      tensors.length >= 1,\n      () => `Must pass at least one tensor to tf.addN(), but got ` +\n          `${tensors.length}`);\n  const $tensors =\n      tensors.map((t, i) => convertToTensor(t, `tensors${i}`, 'addN'));\n  const firstTensor = $tensors[0];\n  $tensors.forEach(t => {\n    if (t.dtype !== firstTensor.dtype) {\n      throw new Error(\n          'All tensors passed to tf.addN() must have the same dtype');\n    }\n  });\n  $tensors.forEach(t => {\n    if (!util.arraysEqual(t.shape, firstTensor.shape)) {\n      throw new Error(\n          'All tensors passed to tf.addN() must have the same shape');\n    }\n  });\n\n  const der = (dy: T) => {\n    const ders: {[key: string]: () => Tensor} = {};\n    $tensors.forEach((t, i) => {\n      ders[i] = () => dy.clone();\n    });\n    return ders;\n  };\n  const inputs: NamedTensorMap = $tensors as {} as NamedTensorMap;\n  return ENGINE.runKernelFunc(\n      backend => backend.addN($tensors), inputs, der, 'AddN');\n}\n\n/**\n * Adds two `tf.Tensor`s element-wise, A + B.\n *\n * Inputs must be the same shape. For broadcasting support, use add() instead.\n *\n * @param a The first Tensor to add element-wise.\n * @param b The second Tensor to add element-wise.\n */\nfunction addStrict_<T extends Tensor>(a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'addStrict');\n  const $b = convertToTensor(b, 'b', 'addStrict');\n  util.assertShapesMatch($a.shape, $b.shape, 'Error in addStrict: ');\n  return $a.add($b);\n}\n\n/**\n * Subtracts two `tf.Tensor`s element-wise, A - B. Supports broadcasting.\n *\n * We also expose `tf.subStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([10, 20, 30, 40]);\n * const b = tf.tensor1d([1, 2, 3, 4]);\n *\n * a.sub(b).print();  // or tf.sub(a, b)\n * ```\n *\n * ```js\n * // Broadcast subtract a with b.\n * const a = tf.tensor1d([10, 20, 30, 40]);\n * const b = tf.scalar(5);\n *\n * a.sub(b).print();  // or tf.sub(a, b)\n * ```\n * @param a The first `tf.Tensor` to subtract from.\n * @param b The second `tf.Tensor` to be subtracted. Must have the same dtype as\n * `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Arithmetic'} */\nfunction sub_<T extends Tensor>(a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'sub');\n  let $b = convertToTensor(b, 'b', 'sub');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const outShape =\n      broadcast_util.assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const der = (dy: Tensor) => {\n    const derA = () => {\n      let res = dy;\n      const reduceAxes = broadcast_util.getReductionAxes($a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = res.sum(reduceAxes);\n      }\n      return res.reshape($a.shape);\n    };\n    const derB = () => {\n      let res = dy;\n      const reduceAxes = broadcast_util.getReductionAxes($b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = res.sum(reduceAxes);\n      }\n      return res.neg().reshape($b.shape);\n    };\n    return {a: derA, b: derB};\n  };\n  return ENGINE.runKernelFunc(\n             backend => backend.subtract($a, $b), {a: $a, b: $b}, der, 'Sub') as\n      T;\n}\n\n/**\n * Subtracts two `tf.Tensor`s element-wise, A - B. Inputs must\n * be the same shape.\n *\n * For broadcasting support, use `tf.sub` instead.\n *\n * @param a The first Tensor to subtract element-wise.\n * @param b The second Tensor to subtract element-wise.\n */\nfunction subStrict_<T extends Tensor>(a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'subStrict');\n  const $b = convertToTensor(b, 'b', 'subStrict');\n  util.assertShapesMatch($a.shape, $b.shape, 'Error in subStrict: ');\n  return $a.sub($b);\n}\n\n/**\n * Computes the power of one `tf.Tensor` to another. Supports broadcasting.\n *\n * Given a `tf.Tensor` x and a `tf.Tensor` y, this operation computes x^y for\n * corresponding elements in x and y. The result's dtype will be the upcasted\n * type of the `base` and `exp` dtypes.\n *\n * ```js\n * const a = tf.tensor([[2, 3], [4, 5]])\n * const b = tf.tensor([[1, 2], [3, 0]]).toInt();\n *\n * a.pow(b).print();  // or tf.pow(a, b)\n * ```\n *\n * ```js\n * const a = tf.tensor([[1, 2], [3, 4]])\n * const b = tf.tensor(2).toInt();\n *\n * a.pow(b).print();  // or tf.pow(a, b)\n * ```\n * We also expose `powStrict` which has the same signature as this op and\n * asserts that `base` and `exp` are the same shape (does not broadcast).\n *\n * @param base The base `tf.Tensor` to pow element-wise.\n * @param exp The exponent `tf.Tensor` to pow element-wise.\n */\n/** @doc {heading: 'Operations', subheading: 'Arithmetic'} */\nfunction pow_<T extends Tensor>(base: T|TensorLike, exp: Tensor|TensorLike): T {\n  const $base = convertToTensor(base, 'base', 'pow');\n  const $exp = convertToTensor(exp, 'exp', 'pow');\n\n  const outShape =\n      broadcast_util.assertAndGetBroadcastShape($base.shape, $exp.shape);\n  base = $base.cast(upcastType($base.dtype, $exp.dtype));\n  exp = $exp.cast(upcastType($base.dtype, $exp.dtype));\n  const grad = (dy: Tensor, saved: Tensor[]) => {\n    const [$base, $exp, y] = saved;\n    const derBase = () => {\n      const expFloat = $exp.toFloat();\n      let res = dy.mul(expFloat.mul($base.pow(expFloat.sub(scalar(1)))));\n      const reduceAxes = broadcast_util.getReductionAxes($base.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = res.sum(reduceAxes);\n      }\n      return res.reshape($base.shape) as T;\n    };\n    const derExp = () => {\n      const condition = $base.greater(0);\n      const logBase = $base.log().where(condition, zerosLike($base));\n      let res = dy.mul(y.mul(logBase));\n      const reduceAxes = broadcast_util.getReductionAxes($exp.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = res.sum(reduceAxes);\n      }\n      return res.reshape($exp.shape);\n    };\n    return {$base: derBase, $exp: derExp};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const y = backend.pow($base, $exp);\n    save([$base, $exp, y]);\n    return y;\n  }, {$base, $exp}, grad) as T;\n}\n\n/**\n * Computes the power of one `tf.Tensor` to another. Inputs must\n * be the same shape.\n *\n * For broadcasting support, use `tf.pow` instead.\n *\n * @param base The base tensor to pow element-wise.\n * @param exp The exponent tensor to pow element-wise.\n */\nfunction powStrict_<T extends Tensor>(base: T, exp: Tensor): T {\n  util.assertShapesMatch(base.shape, exp.shape, 'Error in powStrict: ');\n  return base.pow(exp);\n}\n\n/**\n * Multiplies two `tf.Tensor`s element-wise, A * B. Supports broadcasting.\n *\n * We also expose `tf.mulStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3, 4]);\n * const b = tf.tensor1d([2, 3, 4, 5]);\n *\n * a.mul(b).print();  // or tf.mul(a, b)\n * ```\n *\n * ```js\n * // Broadcast mul a with b.\n * const a = tf.tensor1d([1, 2, 3, 4]);\n * const b = tf.scalar(5);\n *\n * a.mul(b).print();  // or tf.mul(a, b)\n * ```\n * @param a The first tensor to multiply.\n * @param b The second tensor to multiply. Must have the same dtype as `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Arithmetic'} */\nfunction mul_<T extends Tensor>(a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'mul');\n  let $b = convertToTensor(b, 'b', 'mul');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const outShape =\n      broadcast_util.assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const der = (dy: Tensor, saved: Tensor[]) => {\n    const [$a, $b] = saved;\n    const derA = () => {\n      const res = dy.mul($b.toFloat());\n      const reduceAxes = broadcast_util.getReductionAxes($a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return res.sum(reduceAxes).reshape($a.shape);\n      }\n      return res;\n    };\n    const derB = () => {\n      const res = dy.mul($a.toFloat());\n      const reduceAxes = broadcast_util.getReductionAxes($b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return res.sum(reduceAxes).reshape($b.shape);\n      }\n      return res;\n    };\n    return {a: derA, b: derB};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.multiply($a, $b);\n    save([$a, $b]);\n    return res;\n  }, {a: $a, b: $b}, der, 'Mul') as T;\n}\n\n/**\n * Multiplies two `tf.Tensor`s element-wise, A * B.\n *\n * Inputs must be the same shape. For broadcasting support, use `tf.mul`.\n *\n * @param a The first tensor to multiply.\n * @param b The first tensor to multiply. Must have the same\n *    dtype as `a`.\n */\nfunction mulStrict_<T extends Tensor>(a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'mul');\n  const $b = convertToTensor(b, 'b', 'mul');\n  util.assertShapesMatch($a.shape, $b.shape, 'Error in multiplyStrict: ');\n  return $a.mul($b);\n}\n\n/**\n * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.\n *\n * We also expose `tf.divStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 9, 16]);\n * const b = tf.tensor1d([1, 2, 3, 4]);\n *\n * a.div(b).print();  // or tf.div(a, b)\n * ```\n *\n * ```js\n * // Broadcast div a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(2);\n *\n * a.div(b).print();  // or tf.div(a, b)\n * ```\n *\n * @param a The first tensor as the numerator.\n * @param b The second tensor as the denominator. Must have the same dtype as\n * `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Arithmetic'} */\nfunction div_<T extends Tensor>(a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'div');\n  let $b = convertToTensor(b, 'b', 'div');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  if ($a.dtype === 'int32' && $b.dtype === 'int32') {\n    return floorDiv($a, $b);\n  }\n\n  const outShape =\n      broadcast_util.assertAndGetBroadcastShape($a.shape, $b.shape);\n  const der = (dy: Tensor, saved: Tensor[]) => {\n    const [$a, $b] = saved;\n    const derA = () => {\n      const res = dy.div($b.toFloat());\n      const reduceAxes = broadcast_util.getReductionAxes($a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return res.sum(reduceAxes).reshape($a.shape);\n      }\n      return res;\n    };\n    const derB = () => {\n      let res = dy.mul($a.toFloat());\n      const reduceAxes = broadcast_util.getReductionAxes($b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = res.sum(reduceAxes).reshape($b.shape);\n      }\n      const tmp = $b.square();\n      return res.div(tmp.toFloat()).neg();\n    };\n    return {a: derA, b: derB};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.realDivide($a, $b);\n    save([$a, $b]);\n    return res;\n  }, {a: $a, b: $b}, der, 'Div') as T;\n}\n\n/**\n * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting. Return 0\n * if denominator is 0.\n *\n * We also expose `tf.divStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 9, 16]);\n * const b = tf.tensor1d([1, 2, 3, 4]);\n * const c = tf.tensor1d([0, 0, 0, 0]);\n *\n * a.divNoNan(b).print();  // or tf.divNoNan(a, b)\n * a.divNoNan(c).print();  // or tf.divNoNan(a, c)\n * ```\n *\n * ```js\n * // Broadcast div a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(2);\n * const c = tf.scalar(0);\n *\n * a.divNoNan(b).print();  // or tf.divNoNan(a, b)\n * a.divNoNan(c).print();  // or tf.divNoNan(a, c)\n * ```\n *\n * @param a The first tensor as the numerator.\n * @param b The second tensor as the denominator. Must have the same dtype as\n * `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Arithmetic'} */\nfunction divNoNan_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'div');\n  let $b = convertToTensor(b, 'b', 'div');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const divResult = div($a, $b);\n  const zeros = zerosLike(divResult);\n  const bEqualsZero = $b.equal(zeros);\n  return where(bEqualsZero, zeros, divResult) as T;\n}\n\n/**\n * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.\n * The result is rounded with floor function.\n *\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 9, 16]);\n * const b = tf.tensor1d([1, 2, 3, 4]);\n *\n * a.floorDiv(b).print();  // or tf.div(a, b)\n * ```\n *\n * ```js\n * // Broadcast div a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(2);\n *\n * a.floorDiv(b).print();  // or tf.floorDiv(a, b)\n * ```\n *\n * @param a The first tensor as the numerator.\n * @param b The second tensor as the denominator. Must have the same dtype as\n * `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Arithmetic'} */\nfunction floorDiv_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'floorDiv');\n  let $b = convertToTensor(b, 'b', 'floorDiv');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const outShape =\n      broadcast_util.assertAndGetBroadcastShape($a.shape, $b.shape);\n  const der = (dy: Tensor, saved: Tensor[]) => {\n    const [$a, $b] = saved;\n    const derA = () => {\n      const res = dy.div($b.toFloat());\n      const reduceAxes = broadcast_util.getReductionAxes($a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return res.sum(reduceAxes).reshape($a.shape);\n      }\n      return res;\n    };\n    const derB = () => {\n      let res = dy.mul($a.toFloat());\n      const reduceAxes = broadcast_util.getReductionAxes($b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = res.sum(reduceAxes).reshape($b.shape);\n      }\n      const tmp = $b.square();\n      return res.div(tmp.toFloat()).neg();\n    };\n    return {a: derA, b: derB};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.floorDiv($a, $b);\n    save([$a, $b]);\n    return res;\n  }, {a: $a, b: $b}, der, 'FloorDiv') as T;\n}\n\n/**\n * Divides two `tf.Tensor`s element-wise, A / B. Inputs must\n * be the same shape.\n *\n * @param a The first tensor as the numerator for element-wise division.\n * @param b The second tensor as the denominator for element-wise division.\n */\nfunction divStrict_<T extends Tensor>(a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'div');\n  const $b = convertToTensor(b, 'b', 'div');\n  util.assertShapesMatch($a.shape, $b.shape, 'Error in divideStrict: ');\n  return $a.div($b);\n}\n\n/**\n * Returns the mod of a and b element-wise.\n * `floor(x / y) * y + mod(x, y) = x`\n * Supports broadcasting.\n *\n * We also expose `tf.modStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 3, 16]);\n * const b = tf.tensor1d([1, 2, 9, 4]);\n *\n * a.mod(b).print();  // or tf.mod(a, b)\n * ```\n *\n * ```js\n * // Broadcast a mod b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(5);\n *\n * a.mod(b).print();  // or tf.mod(a, b)\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same type as `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Arithmetic'} */\nfunction mod_<T extends Tensor>(a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'mod');\n  let $b = convertToTensor(b, 'b', 'mod');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const outShape =\n      broadcast_util.assertAndGetBroadcastShape($a.shape, $b.shape);\n  const der = (dy: Tensor, saved: Tensor[]) => {\n    const [$a, $b] = saved;\n    const derA = () => {\n      const reduceAxes = broadcast_util.getReductionAxes($a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return dy.sum(reduceAxes).reshape($a.shape);\n      }\n      return dy;\n    };\n    const derB = () => {\n      const res = dy.mul($a.div($b).floor().neg());\n      const reduceAxes = broadcast_util.getReductionAxes($b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return res.sum(reduceAxes).reshape($b.shape);\n      }\n      return res;\n    };\n    return {$a: derA, $b: derB};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.mod($a, $b);\n    save([$a, $b]);\n    return res;\n  }, {$a, $b}, der) as T;\n}\n\n/**\n * Returns the mod of a and b (`a < b ? a : b`) element-wise. Inputs must\n * be the same shape. For broadcasting support, use mod().\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same dtype as `a`.\n */\nfunction modStrict_<T extends Tensor>(a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'modStrict');\n  const $b = convertToTensor(b, 'b', 'modStrict');\n  util.assertShapesMatch($a.shape, $b.shape, 'Error in modStrict: ');\n  return $a.mod($b);\n}\n\n/**\n * Returns the min of a and b (`a < b ? a : b`) element-wise.\n * Supports broadcasting.\n *\n * We also expose `minimumStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 3, 16]);\n * const b = tf.tensor1d([1, 2, 9, 4]);\n *\n * a.minimum(b).print();  // or tf.minimum(a, b)\n * ```\n *\n * ```js\n * // Broadcast minimum a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(5);\n *\n * a.minimum(b).print();  // or tf.minimum(a, b)\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same type as `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Arithmetic'} */\nfunction minimum_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'minimum');\n  let $b = convertToTensor(b, 'b', 'minimum');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  if ($a.dtype === 'bool') {\n    $a = $a.toInt();\n    $b = $b.toInt();\n  }\n\n  broadcast_util.assertAndGetBroadcastShape($a.shape, $b.shape);\n  const der = (dy: Tensor, saved: Tensor[]) => {\n    const [$a, $b] = saved;\n    const derA = () => dy.mul($a.lessEqual($b).toFloat());\n    const derB = () => dy.mul($a.greater($b).toFloat());\n    return {a: derA, b: derB};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.minimum($a, $b);\n    save([$a, $b]);\n    return res;\n  }, {a: $a, b: $b}, der, 'Minimum') as T;\n}\n\n/**\n * Returns the min of a and b (`a < b ? a : b`) element-wise. Inputs must\n * be the same shape. For broadcasting support, use minimum().\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same dtype as `a`.\n */\nfunction minimumStrict_<T extends Tensor>(a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'minimumStrict');\n  const $b = convertToTensor(b, 'b', 'minimumStrict');\n  util.assertShapesMatch($a.shape, $b.shape, 'Error in minimumStrict: ');\n  return $a.minimum($b);\n}\n\n/**\n * Returns the max of a and b (`a > b ? a : b`) element-wise.\n * Supports broadcasting.\n *\n * We also expose `tf.maximumStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 3, 16]);\n * const b = tf.tensor1d([1, 2, 9, 4]);\n *\n * a.maximum(b).print();  // or tf.maximum(a, b)\n * ```\n *\n * ```js\n * // Broadcast maximum a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(5);\n *\n * a.maximum(b).print();  // or tf.maximum(a, b)\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same type as `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Arithmetic'} */\nfunction maximum_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'maximum');\n  let $b = convertToTensor(b, 'b', 'maximum');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  if ($a.dtype === 'bool') {\n    $a = $a.toInt();\n    $b = $b.toInt();\n  }\n\n  broadcast_util.assertAndGetBroadcastShape($a.shape, $b.shape);\n  const der = (dy: Tensor, saved: Tensor[]) => {\n    const [$a, $b] = saved;\n    const derA = () => dy.mul($a.greaterEqual($b).toFloat());\n    const derB = () => dy.mul($a.less($b).toFloat());\n    return {a: derA, b: derB};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.maximum($a, $b);\n    save([$a, $b]);\n    return res;\n  }, {a: $a, b: $b}, der, 'Maximum') as T;\n}\n\n/**\n * Returns the max of a and b (`a > b ? a : b`) element-wise. Inputs must\n * be the same shape. For broadcasting support, use maximum().\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same dtype as `a`.\n */\nfunction maximumStrict_<T extends Tensor>(a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'maximumStrict');\n  const $b = convertToTensor(b, 'b', 'maximumStrict');\n  util.assertShapesMatch($a.shape, $b.shape, 'Error in maximumStrict: ');\n  return $a.maximum($b);\n}\n\n/**\n * Returns (a - b) * (a - b) element-wise.\n * Supports broadcasting.\n *\n * We also expose `tf.squaredDifferenceStrict` which has the same signature as\n * this op and asserts that `a` and `b` are the same shape (does not\n * broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 3, 16]);\n * const b = tf.tensor1d([1, 2, 9, 4]);\n *\n * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)\n * ```\n *\n * ```js\n * // Broadcast squared difference  a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(5);\n *\n * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same type as `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Arithmetic'} */\nfunction squaredDifference_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'squaredDifference');\n  let $b = convertToTensor(b, 'b', 'squaredDifference');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  broadcast_util.assertAndGetBroadcastShape($a.shape, $b.shape);\n  const der = (dy: Tensor, saved: Tensor[]) => {\n    const [$a, $b] = saved;\n    const two = scalar(2);\n    const derA = () => dy.mul($a.sub($b).mul(two));\n    const derB = () => dy.mul($b.sub($a).mul(two));\n    return {$a: derA, $b: derB};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.squaredDifference($a, $b);\n    save([$a, $b]);\n    return res;\n  }, {$a, $b}, der) as T;\n}\n\n/**\n * Returns (a - b) * (a - b) element-wise.\n *\n * Inputs must be the same shape. For broadcasting support, use\n * `tf.squaredDifference` instead.\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same type as `a`.\n */\nfunction squaredDifferenceStrict_<T extends Tensor>(\n    a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'squaredDifferenceStrict');\n  const $b = convertToTensor(b, 'b', 'squaredDifferenceStrict');\n  util.assertShapesMatch(\n      $a.shape, $b.shape, 'Error in squaredDifferenceStrict: ');\n  return $a.squaredDifference($b);\n}\n\n/**\n * Computes arctangent of `tf.Tensor`s a / b element-wise: `atan2(a, b)`.\n * Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1.0, 1.0, -1.0, .7]);\n * const b = tf.tensor1d([2.0, 13.0, 3.5, .21]);\n *\n * tf.atan2(a, b).print()\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same dtype as `a`.\n *\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction atan2_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'atan2');\n  let $b = convertToTensor(b, 'b', 'atan2');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const outShape =\n      broadcast_util.assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const der = (dy: Tensor, saved: Tensor[]) => {\n    const [$a, $b] = saved;\n    const derA = () => {\n      const d = add($a.square(), $b.square());\n      let res = dy.mul($b.div(d));\n      const reduceAxes = broadcast_util.getReductionAxes($a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = res.sum(reduceAxes);\n      }\n      return res.reshape($a.shape);\n    };\n    const derB = () => {\n      const d = add($a.square(), $b.square());\n      let res = neg(dy.mul($a.div(d)));\n      const reduceAxes = broadcast_util.getReductionAxes($b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = res.sum(reduceAxes);\n      }\n      return res.reshape($b.shape);\n    };\n    return {$a: derA, $b: derB};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.atan2($a, $b);\n    save([$a, $b]);\n    return res;\n  }, {$a, $b}, der) as T;\n}\n\nexport const add = op({add_});\nexport const addN = op({addN_});\nexport const addStrict = op({addStrict_});\nexport const atan2 = op({atan2_});\nexport const div = op({div_});\nexport const divNoNan = op({divNoNan_});\nexport const divStrict = op({divStrict_});\nexport const floorDiv = op({floorDiv_});\nexport const maximum = op({maximum_});\nexport const maximumStrict = op({maximumStrict_});\nexport const minimum = op({minimum_});\nexport const minimumStrict = op({minimumStrict_});\nexport const mod = op({mod_});\nexport const modStrict = op({modStrict_});\nexport const mul = op({mul_});\nexport const mulStrict = op({mulStrict_});\nexport const pow = op({pow_});\nexport const powStrict = op({powStrict_});\nexport const squaredDifference = op({squaredDifference_});\nexport const squaredDifferenceStrict = op({squaredDifferenceStrict_});\nexport const sub = op({sub_});\nexport const subStrict = op({subStrict_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {assertShapesMatch} from '../util';\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {op} from './operation';\nimport {zerosLike} from './tensor_ops';\n\n/**\n * Returns the truth value of (a != b) element-wise. Supports broadcasting.\n *\n * We also expose `tf.notEqualStrict` which has the same signature as this op\n * and asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([0, 2, 3]);\n *\n * a.notEqual(b).print();\n * ```\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Logical'} */\nfunction notEqual_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'notEqual');\n  let $b = convertToTensor(b, 'b', 'notEqual');\n  [$a, $b] = makeTypesMatch($a, $b);\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n  return ENGINE.runKernelFunc(backend => backend.notEqual($a, $b), {$a, $b}) as\n      T;\n}\n\n/**\n * Strict version of `tf.notEqual` that forces `a` and `b` to be of the same\n * shape.\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same shape and dtype as\n *     `a`.\n */\nfunction notEqualStrict_<T extends Tensor>(\n    a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'notEqualStrict');\n  const $b = convertToTensor(b, 'b', 'notEqualStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in notEqualStrict: ');\n  return $a.notEqual($b);\n}\n\n/**\n * Returns the truth value of (a < b) element-wise. Supports broadcasting.\n *\n * We also expose `tf.lessStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.less(b).print();\n * ```\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Logical'} */\nfunction less_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'less');\n  let $b = convertToTensor(b, 'b', 'less');\n  [$a, $b] = makeTypesMatch($a, $b);\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  return ENGINE.runKernelFunc(\n             backend => backend.less($a, $b), {a: $a, b: $b}, null /* grad */,\n             'Less') as T;\n}\n\n/**\n * Strict version of `tf.less` that forces `a` and `b` to be of the same\n * shape.\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same shape and dtype as\n *     `a`.\n */\nfunction lessStrict_<T extends Tensor>(a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'lessStrict');\n  const $b = convertToTensor(b, 'b', 'lessStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in lessStrict: ');\n  return $a.less($b);\n}\n\n/**\n * Returns the truth value of (a == b) element-wise. Supports broadcasting.\n *\n * We also expose `tf.equalStrict` which has the same signature as this op\n * and asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.equal(b).print();\n * ```\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Logical'} */\nfunction equal_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'equal');\n  let $b = convertToTensor(b, 'b', 'equal');\n  [$a, $b] = makeTypesMatch($a, $b);\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  return ENGINE.runKernelFunc(backend => backend.equal($a, $b), {$a, $b}) as T;\n}\n\nfunction equalStrict_<T extends Tensor>(a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'equalStrict');\n  const $b = convertToTensor(b, 'b', 'equalStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in equalStrict: ');\n  return $a.equal($b);\n}\n\n/**\n * Returns the truth value of (a <= b) element-wise. Supports broadcasting.\n *\n * We also expose `tf.lessEqualStrict` which has the same signature as this op\n * and asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.lessEqual(b).print();\n * ```\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Logical'} */\nfunction lessEqual_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'lessEqual');\n  let $b = convertToTensor(b, 'b', 'lessEqual');\n  [$a, $b] = makeTypesMatch($a, $b);\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.lessEqual($a, $b);\n    save([$a, $b]);\n    return res;\n  }, {a: $a, b: $b}, null /* grad */, 'LessEqual') as T;\n}\n\nfunction lessEqualStrict_<T extends Tensor>(\n    a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'lessEqualStrict');\n  const $b = convertToTensor(b, 'b', 'lessEqualStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in lessEqualStrict: ');\n  return $a.lessEqual($b);\n}\n\n/**\n * Returns the truth value of (a > b) element-wise. Supports broadcasting.\n *\n * We also expose `tf.greaterStrict` which has the same signature as this\n * op and asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.greater(b).print();\n * ```\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Logical'} */\nfunction greater_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'greater');\n  let $b = convertToTensor(b, 'b', 'greater');\n  [$a, $b] = makeTypesMatch($a, $b);\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  return ENGINE.runKernelFunc(\n             backend => backend.greater($a, $b), {a: $a, b: $b},\n             null /* grad */, 'Greater') as T;\n}\n\nfunction greaterStrict_<T extends Tensor>(a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'greaterStrict');\n  const $b = convertToTensor(b, 'b', 'greaterStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in greaterStrict: ');\n  return $a.greater($b);\n}\n\n/**\n * Returns the truth value of (a >= b) element-wise. Supports broadcasting.\n *\n * We also expose `tf.greaterEqualStrict` which has the same signature as this\n * op and asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.greaterEqual(b).print();\n * ```\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n */\n/** @doc {heading: 'Operations', subheading: 'Logical'} */\nfunction greaterEqual_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'greaterEqual');\n  let $b = convertToTensor(b, 'b', 'greaterEqual');\n  [$a, $b] = makeTypesMatch($a, $b);\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$a, $b] = saved;\n    return {a: () => zerosLike($a), b: () => zerosLike($b)};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.greaterEqual($a, $b);\n    save([$a, $b]);\n    return res;\n  }, {a: $a, b: $b}, grad, 'GreaterEqual') as T;\n}\n\nfunction greaterEqualStrict_<T extends Tensor>(\n    a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'greaterEqualStrict');\n  const $b = convertToTensor(b, 'b', 'greaterEqualStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in greaterEqualStrict: ');\n  return $a.greaterEqual($b);\n}\n\nexport const equal = op({equal_});\nexport const equalStrict = op({equalStrict_});\nexport const greater = op({greater_});\nexport const greaterEqual = op({greaterEqual_});\nexport const greaterEqualStrict = op({greaterEqualStrict_});\nexport const greaterStrict = op({greaterStrict_});\nexport const less = op({less_});\nexport const lessEqual = op({lessEqual_});\nexport const lessEqualStrict = op({lessEqualStrict_});\nexport const lessStrict = op({lessStrict_});\nexport const notEqual = op({notEqual_});\nexport const notEqualStrict = op({notEqualStrict_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor, Tensor1D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {assert, isInt, parseAxisParam} from '../util';\nimport {expandDims} from './array_ops';\nimport {getUndoAxesPermutation} from './axis_util';\nimport {maximum} from './binary_ops';\nimport {greaterEqual} from './compare';\nimport {logicalAnd, where} from './logical_ops';\nimport {op} from './operation';\nimport {collectGatherOpShapeInfo} from './segment_util';\nimport {ones, scalar, zerosLike} from './tensor_ops';\n\n/**\n * Computes the sum along segments of a `tf.Tensor`.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * const segmentIds = tf.tensor1d([1, 2, 0, 1], 'int32');\n * const numSegments = 3;\n *\n * x.unsortedSegmentSum(segmentIds, numSegments).print()\n * //or tf.unsortedSegmentSum(x, segmentIds, numSegments)\n * ```\n * @param x The `tf.Tensor` that will be summed along its segments.\n * @param segmentIds A `tf.Tensor1D` whose rank is equal to the rank of `x`'s\n * dimension along the `axis`.  Maps each element of `x` to a segment.\n * @param numSegments The number of distinct `segmentIds`.\n */\n/** @doc {heading: 'Operations', subheading: 'Segment'} */\nfunction unsortedSegmentSum_<T extends Tensor>(\n    x: T|TensorLike, segmentIds: Tensor1D|TensorLike, numSegments: number): T {\n  const $x = convertToTensor(x, 'x', 'unsortedSegmentSum');\n  const $segmentIds =\n      convertToTensor(segmentIds, 'segmentIds', 'unsortedSegmentSum', 'int32');\n  assert(isInt(numSegments), () => 'numSegments must be of dtype int');\n\n  const gradFunc = (dy: T, saved: Tensor[]) => {\n    const [$segmentIds] = saved;\n    const derX = () => {\n      return gatherDropNegatives(dy, $segmentIds as Tensor1D);\n    };\n    return {$x: derX};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.unsortedSegmentSum($x, $segmentIds, numSegments);\n    save([$segmentIds]);\n    return res;\n  }, {$x}, gradFunc) as T;\n}\n\n/**\n * Gather slices from tensor `x`'s axis `axis` according to `indices`.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * const indices = tf.tensor1d([1, 3, 3], 'int32');\n *\n * x.gather(indices).print();\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const indices = tf.tensor1d([1, 1, 0], 'int32');\n *\n * x.gather(indices).print();\n * ```\n * @param x The input tensor whose slices to be gathered.\n * @param indices The indices of the values to extract.\n * @param axis The axis over which to select values. Defaults to 0.\n */\n/** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */\nfunction gather_<T extends Tensor>(\n    x: T|TensorLike, indices: Tensor|TensorLike, axis = 0): T {\n  const $x = convertToTensor(x, 'x', 'gather');\n  const $indices = convertToTensor(indices, 'indices', 'gather', 'int32');\n  axis = parseAxisParam(axis, $x.shape)[0];\n  const shapeInfo = collectGatherOpShapeInfo($x, $indices, axis);\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$indices] = saved;\n    const derX = () => {\n      const paramsShape = $x.shape;\n      const indicesSize = $indices.size;\n\n      const outerShape = paramsShape.slice(0, axis);\n      const outerDims = outerShape.length;\n      const innerShape = paramsShape.slice(axis, paramsShape.length).slice(1);\n      const innerDims = innerShape.length;\n\n      const outerAxesIndices = arrayRange(0, outerDims);\n      const innerAxesIndices =\n          arrayRange(outerDims + 1, outerDims + 1 + innerDims);\n\n      const valuesShape = arrayConcat([outerShape, [indicesSize], innerShape]);\n\n      const values = dy.reshape(valuesShape);\n      const reshapedIndices = $indices.reshape([indicesSize]);\n\n      const transposeDims =\n          arrayConcat([[outerDims], outerAxesIndices, innerAxesIndices]);\n      const valuesTranspose = values.transpose(transposeDims);\n      let paramsGrad = unsortedSegmentSum(\n          valuesTranspose, reshapedIndices as Tensor1D, $x.shape[axis]);\n\n      const invertTransposeDims = getUndoAxesPermutation(transposeDims);\n      paramsGrad = paramsGrad.transpose(invertTransposeDims);\n\n      return paramsGrad as T;\n    };\n    return {x: derX, indices: () => $indices};\n  };\n  return (ENGINE.runKernelFunc(\n              (backend, save) => {\n                const res = backend.gather($x, $indices.flatten(), axis);\n                save([$indices]);\n                return res;\n              },\n              {x: $x, indices: $indices}, grad, 'Gather', {axis}))\n             .reshape(shapeInfo.outputShape) as T;\n}\n\nfunction arrayRange(start: number, stop: number): number[] {\n  const result = [];\n  for (let i = start; i < stop; ++i) {\n    result.push(i);\n  }\n  return result;\n}\n\nfunction arrayConcat(arrays: number[][]): number[] {\n  const result = [];\n  for (let i = 0; i < arrays.length; ++i) {\n    for (let j = 0; j < arrays[i].length; ++j) {\n      result.push(arrays[i][j]);\n    }\n  }\n  return result;\n}\n\nfunction gatherDropNegatives<T extends Tensor>(x: T, indices: Tensor1D) {\n  // Helper function for unsorted segment ops. Gathers params for\n  // positive segment ids and gathers 0 for inputs with negative segment id.\n  // Mirrors _GatherDropNegatives from tensorflow/python/ops/math_grad.py\n  const zeroClippedIndices = maximum(indices, zerosLike(indices));\n  const gathered = gather(x, zeroClippedIndices as Tensor1D);\n  let isPositive = greaterEqual(indices, scalar(0, 'int32'));\n  const numIters = gathered.rank - isPositive.rank;\n  for (let i = 0; i < numIters; ++i) {\n    isPositive = expandDims(isPositive, i + 1);\n  }\n  isPositive = logicalAnd(isPositive, ones(gathered.shape, 'bool'));\n  const zeroSlice = zerosLike(gathered);\n  return where(isPositive, gathered, zeroSlice);\n}\n\nexport const gather = op({gather_});\nexport const unsortedSegmentSum = op({unsortedSegmentSum_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {whereAsync} from './logical_ops';\nimport {gather} from './segment_ops';\n\n/**\n * Apply boolean mask to tensor.\n *\n * ```js\n * const tensor = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);\n * const mask = tf.tensor1d([1, 0, 1], 'bool');\n * const result = await tf.booleanMaskAsync(tensor, mask);\n * result.print();\n * ```\n *\n * @param tensor N-D tensor.\n * @param mask K-D boolean tensor, K <= N and K must be known statically.\n * @param axis A 0-D int Tensor representing the axis in tensor to mask from.\n *     By default, axis is 0 which will mask from the first dimension.\n *     Otherwise K + axis <= N.\n */\n/** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */\nasync function booleanMaskAsync_(\n    tensor: Tensor|TensorLike, mask: Tensor|TensorLike,\n    axis?: number): Promise<Tensor> {\n  const $tensor = convertToTensor(tensor, 'tensor', 'boolMask');\n  const $mask = convertToTensor(mask, 'mask', 'boolMask', 'bool');\n\n  const axisFrom = axis == null ? 0 : axis;\n  const maskDim = $mask.rank;\n  const tensorShape = $tensor.shape;\n\n  util.assert(maskDim > 0, () => 'mask cannot be scalar');\n  util.assertShapesMatch(\n      tensorShape.slice(axisFrom, axisFrom + maskDim), $mask.shape,\n      `mask's shape must match the first K dimensions of tensor's shape,`);\n\n  let leadingSize = 1;\n  for (let i = axisFrom; i < axisFrom + maskDim; i++) {\n    leadingSize *= tensorShape[i];\n  }\n  const targetTensorShape =\n      tensorShape.slice(0, axisFrom)\n          .concat([leadingSize], tensorShape.slice(axisFrom + maskDim));\n  const reshapedTensor = $tensor.reshape(targetTensorShape);\n  const reshapedMask = $mask.reshape([-1]);\n  const positivePositions = await whereAsync(reshapedMask);\n  const indices = positivePositions.squeeze([1]);\n\n  const res = gather(reshapedTensor, indices, axisFrom);\n\n  // Ensure no memory leak.\n  if (tensor !== $tensor) {\n    $tensor.dispose();\n  }\n  if (mask !== $mask) {\n    $mask.dispose();\n  }\n  indices.dispose();\n  reshapedTensor.dispose();\n  reshapedMask.dispose();\n  positivePositions.dispose();\n\n  return res;\n}\n\nexport const booleanMaskAsync = booleanMaskAsync_;\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor, Tensor2D, Tensor3D, Tensor4D, Tensor5D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\n\n/**\n * Computes a 1D convolution over the input x.\n *\n * @param x The input tensor, of rank 3 or rank 2, of shape\n *     `[batch, width, inChannels]`. If rank 2, batch of 1 is assumed.\n * @param filter The filter, rank 3, of shape\n *     `[filterWidth, inDepth, outDepth]`.\n * @param stride The number of entries by which the filter is moved right at\n *     each step.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dataFormat An optional string from \"NWC\", \"NCW\". Defaults to \"NWC\",\n *     the data is stored in the order of [batch, in_width, in_channels]. Only\n *     \"NWC\" is currently supported.\n * @param dilation The dilation rate in which we sample input values in\n *     atrous convolution. Defaults to `1`. If it is greater than 1, then\n *     stride must be `1`.\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n */\n/** @doc {heading: 'Operations', subheading: 'Convolution'} */\nfunction conv1d_<T extends Tensor2D|Tensor3D>(\n    x: T|TensorLike, filter: Tensor3D|TensorLike, stride: number,\n    pad: 'valid'|'same'|number, dataFormat: 'NWC'|'NCW' = 'NWC', dilation = 1,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $x = convertToTensor(x, 'x', 'conv1d');\n  const $filter = convertToTensor(filter, 'filter', 'conv1d');\n\n  let x3D = $x as Tensor3D;\n  let reshapedTo3D = false;\n  if ($x.rank === 2) {\n    reshapedTo3D = true;\n    x3D = $x.as3D(1, $x.shape[0], $x.shape[1]);\n  }\n\n  util.assert(\n      x3D.rank === 3,\n      () => `Error in conv1d: input must be rank 3, but got rank ${x3D.rank}.`);\n  util.assert(\n      $filter.rank === 3,\n      () => `Error in conv1d: filter must be rank 3, but got rank ` +\n          `${$filter.rank}.`);\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in conv1d: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  util.assert(\n      x3D.shape[2] === $filter.shape[1],\n      () => `Error in conv1d: depth of input (${x3D.shape[2]}) must match ` +\n          `input depth for filter ${$filter.shape[1]}.`);\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(stride, dilation),\n      () => 'Error in conv1D: Either stride or dilation must be 1. ' +\n          `Got stride ${stride} and dilation '${dilation}'`);\n  util.assert(\n      dataFormat === 'NWC',\n      () => `Error in conv1d: got dataFormat of ${\n          dataFormat} but only NWC is currently supported.`);\n\n  const filter4D =\n      $filter.as4D(1, $filter.shape[0], $filter.shape[1], $filter.shape[2]);\n  const input4D = x3D.as4D(x3D.shape[0], 1, x3D.shape[1], x3D.shape[2]);\n  const strides: [number, number] = [1, stride];\n  const dilations: [number, number] = [1, dilation];\n\n  const conv2dDataFormat = 'NHWC';\n\n  const res = conv2d(\n      input4D, filter4D, strides, pad, conv2dDataFormat, dilations,\n      dimRoundingMode);\n\n  if (reshapedTo3D) {\n    return res.as2D(res.shape[2], res.shape[3]) as T;\n  }\n  return res.as3D(res.shape[0], res.shape[2], res.shape[3]) as T;\n}\n\n/**\n * Computes a 2D convolution over the input x.\n *\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n */\n/** @doc {heading: 'Operations', subheading: 'Convolution'} */\nfunction conv2d_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filter: Tensor4D|TensorLike,\n    strides: [number, number]|number, pad: 'valid'|'same'|number,\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC',\n    dilations: [number, number]|number = [1, 1],\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $x = convertToTensor(x, 'x', 'conv2d');\n  const $filter = convertToTensor(filter, 'filter', 'conv2d');\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);\n  }\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in conv2d: input must be rank 4, but got rank ${x4D.rank}.`);\n  util.assert(\n      $filter.rank === 4,\n      () => `Error in conv2d: filter must be rank 4, but got rank ` +\n          `${$filter.rank}.`);\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in conv2d: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n  const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];\n  util.assert(\n      inDepth === $filter.shape[2],\n      () => `Error in conv2d: depth of input (${inDepth}) must match ` +\n          `input depth for filter ${$filter.shape[2]}.`);\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in conv2D: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const $dataFormat = conv_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = conv_util.computeConv2DInfo(\n      x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode, false,\n      $dataFormat);\n\n  const grad = (dy: Tensor4D, saved: Tensor[]) => {\n    const [$filter, x4D] = saved as [Tensor4D, Tensor4D];\n    util.assert(\n        conv_util.tupleValuesAreOne(dilations),\n        () => 'Error in gradient of conv2D: dilation rates greater than 1 ' +\n            `are not yet supported in gradients. Got dilations '${dilations}'`);\n\n    return {\n      x: () => conv2dDerInput(x4D.shape, dy, $filter, strides, pad, dataFormat),\n      filter: () =>\n          conv2dDerFilter(x4D, dy, $filter.shape, strides, pad, dataFormat)\n    };\n  };\n\n  const inputsToSave = [$filter, x4D];\n  const res = ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.conv2d(x4D, $filter, convInfo);\n    save([$filter, x4D]);\n\n    return res;\n  }, {x: x4D, filter: $filter}, grad, 'Conv2D', convInfo, inputsToSave);\n\n  if (reshapedTo4D) {\n    return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n  }\n  return res as T;\n}\n\n/**\n * Computes the derivative of the input of a 2D convolution.\n *\n * @param xShape The shape of the input: [batch, height, width, inDepth].\n * If length of 3, batch of 1 is assumed.\n * @param dy The derivative of the output, of rank 4 or rank 3 of shape\n *   `[batch, outHeight, outWidth, outDepth]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm used:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n */\nfunction conv2dDerInput_<T extends Tensor3D|Tensor4D>(\n    xShape: [number, number, number, number]|[number, number, number], dy: T,\n    filter: Tensor4D, strides: [number, number]|number,\n    pad: 'valid'|'same'|number, dataFormat: 'NHWC'|'NCHW' = 'NHWC',\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  util.assert(\n      xShape.length === dy.rank,\n      () => `Length of inShape ` +\n          `(${xShape.length}) and rank of dy (${dy.rank}) must match`);\n\n  let xShape4D = xShape as [number, number, number, number];\n  let dy4D = dy as Tensor4D;\n  let reshapedTo4D = false;\n  if (dy.rank === 3) {\n    reshapedTo4D = true;\n    dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);\n    xShape4D = [1, xShape[0], xShape[1], xShape[2]];\n  }\n\n  util.assert(\n      xShape4D.length === 4,\n      () =>\n          `Error in conv2dDerInput: inShape must be length 4, but got length ` +\n          `${xShape4D.length}.`);\n  util.assert(\n      dy4D.rank === 4,\n      () => `Error in conv2dDerInput: dy must be rank 4, but got ` +\n          `rank ${dy4D.rank}`);\n  util.assert(\n      filter.rank === 4,\n      () => `Error in conv2dDerInput: filter must be rank 4, but got ` +\n          `rank ${filter.rank}`);\n  const inDepth = dataFormat === 'NHWC' ? xShape4D[3] : xShape4D[1];\n  const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];\n  util.assert(\n      inDepth === filter.shape[2],\n      () => `Error in conv2dDerInput: depth of input (${inDepth}) must ` +\n          `match input depth for filter ${filter.shape[2]}.`);\n  util.assert(\n      outDepth === filter.shape[3],\n      () => `Error in conv2dDerInput: depth of output (${outDepth}) must ` +\n          `match output depth for filter ${filter.shape[3]}.`);\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in conv2dDerInput: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  const dilations = 1;\n\n  const grad = (ddx: Tensor4D, saved: Tensor[]) => {\n    const [filter, dy4D] = saved;\n    return {\n      dy4D: () => conv2d(\n          ddx, filter as Tensor4D, strides, pad, dataFormat, dilations,\n          dimRoundingMode),\n      filter: () => conv2dDerFilter(\n          ddx, dy4D as Tensor4D, (filter as Tensor4D).shape, strides, pad,\n          dataFormat, dimRoundingMode)\n    };\n  };\n\n  const $dataFormat = conv_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = conv_util.computeConv2DInfo(\n      xShape4D, filter.shape, strides, dilations, pad, dimRoundingMode, false,\n      $dataFormat);\n  const res = ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.conv2dDerInput(dy4D, filter, convInfo);\n    save([filter, dy4D]);\n    return res;\n  }, {dy4D, filter}, grad);\n  if (reshapedTo4D) {\n    return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n  }\n  return res as T;\n}\n\n/**\n * Computes the derivative of the filter of a 2D convolution.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     [batch, height, width, inChannels]. If rank 3, batch of 1 is assumed.\n * @param dy The dy image, of rank 4 or rank 3, of shape\n *     [batch, height, width, outDepth]. If rank 3, batch of 1 is assumed.\n * @param filterShape The shape of the filter, length 4,\n *     [filterHeight, filterWidth, inDepth, outDepth].\n * @param strides The strides of the convolution: [strideHeight,\n * strideWidth].\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The\n *     rounding mode used when computing output dimensions if pad is a\n *     number. If none is provided, it will not round and error if the output\n *     is of fractional size.\n */\nfunction conv2dDerFilter_<T extends Tensor3D|Tensor4D>(\n    x: T, dy: T, filterShape: [number, number, number, number],\n    strides: [number, number]|number, pad: 'valid'|'same'|number,\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC',\n    dimRoundingMode?: 'floor'|'round'|'ceil'): Tensor4D {\n  let x4D = x as Tensor4D;\n  if (x.rank === 3) {\n    x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n  }\n  let dy4D = dy as Tensor4D;\n  if (dy4D.rank === 3) {\n    dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);\n  }\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in conv2dDerFilter: input must be rank 4, but got shape ` +\n          `${x4D.shape}.`);\n  util.assert(\n      dy4D.rank === 4,\n      () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ` +\n          `${dy4D.shape}.`);\n  util.assert(\n      filterShape.length === 4,\n      () => `Error in conv2dDerFilter: filterShape must be length 4, but got ` +\n          `${filterShape}.`);\n  const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];\n  const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];\n  util.assert(\n      inDepth === filterShape[2],\n      () => `Error in conv2dDerFilter: depth of input ${inDepth}) must ` +\n          `match input depth in filter (${filterShape[2]}.`);\n  util.assert(\n      outDepth === filterShape[3],\n      () => `Error in conv2dDerFilter: depth of dy (${outDepth}) must ` +\n          `match output depth for filter (${filterShape[3]}).`);\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in conv2dDerFilter: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  const dilations = 1;\n  const $dataFormat = conv_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = conv_util.computeConv2DInfo(\n      x4D.shape, filterShape, strides, dilations, pad, dimRoundingMode, false,\n      $dataFormat);\n  return ENGINE.runKernelFunc(\n      backend => backend.conv2dDerFilter(x4D, dy4D, convInfo), {x4D, dy4D});\n}\n\n/**\n * Computes the transposed 2D convolution of an image, also known as a\n * deconvolution.\n *\n * @param x The input image, of rank 4 or rank 3, of shape\n *   `[batch, height, width, inDepth]`. If rank 3, batch of 1 is assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, outDepth, inDepth]`.\n *     `inDepth` must match `inDepth` in `x`.\n * @param outputShape Output shape, of rank 4 or rank 3:\n *     `[batch, height, width, outDepth]`. If rank 3, batch of 1 is assumed.\n * @param strides The strides of the original convolution:\n *     `[strideHeight, strideWidth]`.\n * @param pad  The type of padding algorithm used in the non-transpose version\n *    of the op.\n * @param dimRoundingMode The rounding mode used when computing output\n *    dimensions if pad is a number. If none is provided, it will not round\n *    and error if the output is of fractional size.\n */\n/** @doc {heading: 'Operations', subheading: 'Convolution'} */\nfunction conv2dTranspose_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filter: Tensor4D|TensorLike,\n    outputShape: [number, number, number, number]|[number, number, number],\n    strides: [number, number]|number, pad: 'valid'|'same'|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $x = convertToTensor(x, 'x', 'conv2dTranspose');\n  const $filter = convertToTensor(filter, 'filter', 'conv2dTranspose');\n\n  return conv2dDerInput_(\n      outputShape, $x, $filter, strides, pad, 'NHWC', dimRoundingMode);\n}\n\n/**\n * Depthwise 2D convolution.\n *\n * Given a 4D `input` array and a `filter` array of shape\n * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing\n * `inChannels` convolutional filters of depth 1, this op applies a\n * different filter to each input channel (expanding from 1 channel to\n * `channelMultiplier` channels for each), then concatenates the results\n * together. The output has `inChannels * channelMultiplier` channels.\n *\n * See\n * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](\n *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)\n * for more details.\n *\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter tensor, rank 4, of shape\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`. If strides is a single number, then `strideHeight ==\n * strideWidth`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n */\n/** @doc {heading: 'Operations', subheading: 'Convolution'} */\nfunction depthwiseConv2d_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filter: Tensor4D|TensorLike,\n    strides: [number, number]|number, pad: 'valid'|'same'|number,\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC',\n    dilations: [number, number]|number = [1, 1],\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $x = convertToTensor(x, 'x', 'depthwiseConv2d');\n  const $filter = convertToTensor(filter, 'filter', 'depthwiseConv2d');\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);\n  }\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in depthwiseConv2d: input must be rank 4, but got ` +\n          `rank ${x4D.rank}.`);\n  util.assert(\n      $filter.rank === 4,\n      () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ` +\n          `${$filter.rank}.`);\n  util.assert(\n      x4D.shape[3] === $filter.shape[2],\n      () => `Error in depthwiseConv2d: number of input channels ` +\n          `(${x4D.shape[3]}) must match the inChannels dimension in ` +\n          `filter ${$filter.shape[2]}.`);\n  if (dilations == null) {\n    dilations = [1, 1];\n  }\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () =>\n          'Error in depthwiseConv2d: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in depthwiseConv2d: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  const convInfo = conv_util.computeConv2DInfo(\n      x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode,\n      true /* depthwise */);\n\n  const grad = (dy: Tensor4D, saved: Tensor[]) => {\n    util.assert(\n        conv_util.tupleValuesAreOne(dilations),\n        () => 'Error in gradient of depthwiseConv2d: dilation rates ' +\n            `greater than 1 are not yet supported. Got dilations ` +\n            `'${dilations}'`);\n    const [x4D, $filter] = saved;\n    return {\n      x: () => depthwiseConv2dDerInput(\n          (x4D as Tensor4D).shape, dy, $filter as Tensor4D, convInfo),\n      filter: () => depthwiseConv2dDerFilter(\n          x4D as Tensor4D, dy, ($filter as Tensor4D).shape, convInfo),\n    };\n  };\n\n  const inputsToSave = [x4D, $filter];\n  const res = ENGINE.runKernelFunc(\n      (backend, save) => {\n        const res = backend.depthwiseConv2D(x4D, $filter, convInfo);\n        save([x4D, $filter]);\n        return res;\n      },\n      {x: x4D, filter: $filter}, grad, 'DepthwiseConv2dNative', convInfo,\n      inputsToSave);\n  if (reshapedTo4D) {\n    return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n  }\n  return res as T;\n}\n\n/**\n * 2-D convolution with separable filters.\n *\n * Performs a depthwise convolution that acts separately on channels followed\n * by a pointwise convolution that mixes channels. Note that this is\n * separability between dimensions [1, 2] and 3, not spatial separability\n * between dimensions 1 and 2.\n *\n * See\n * [https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d](\n *     https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d)\n * for more details.\n *\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param depthwiseFilter The depthwise filter tensor, rank 4, of shape\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`. This is\n *     the filter used in the first step.\n * @param pointwiseFilter The pointwise filter tensor, rank 4, of shape\n *     `[1, 1, inChannels * channelMultiplier, outChannels]`. This is\n *     the filter used in the second step.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`. If strides is a single number, then `strideHeight ==\n * strideWidth`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n */\n/** @doc {heading: 'Operations', subheading: 'Convolution'} */\nfunction separableConv2d_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, depthwiseFilter: Tensor4D|TensorLike,\n    pointwiseFilter: Tensor4D|TensorLike, strides: [number, number]|number,\n    pad: 'valid'|'same', dilation: [number, number]|number = [1, 1],\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC'): T {\n  const $x = convertToTensor(x, 'x', 'separableConv2d');\n  const $depthwiseFilter =\n      convertToTensor(depthwiseFilter, 'depthwiseFilter', 'separableConv2d');\n  const $pointwiseFilter =\n      convertToTensor(pointwiseFilter, 'pointwiseFilter', 'separableConv2d');\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);\n  }\n\n  if (dataFormat === 'NCHW') {\n    throw new Error(\n        'separableConv2d currently does not support dataFormat NCHW; only ' +\n        'NHWC is supported');\n  }\n\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in separableConv2d: input must be rank 4, but got ` +\n          `rank ${x4D.rank}.`);\n  util.assert(\n      $depthwiseFilter.rank === 4,\n      () => `Error in separableConv2d: depthwise filter must be rank 4, but ` +\n          `got rank ${$depthwiseFilter.rank}.`);\n  util.assert(\n      $pointwiseFilter.rank === 4,\n      () => `Error in separableConv2d: pointwise filter must be rank 4, but ` +\n          `got rank ${$depthwiseFilter.rank}.`);\n  util.assert(\n      $pointwiseFilter.shape[0] === 1,\n      () =>\n          `Error in separableConv2d: the first dimension of pointwise filter ` +\n          ` must be 1, but got ${$pointwiseFilter.shape[0]}.`);\n  util.assert(\n      $pointwiseFilter.shape[1] === 1,\n      () => `Error in separableConv2d: the second dimension of pointwise ` +\n          `filter must be 1, but got ${$pointwiseFilter.shape[1]}.`);\n\n  const inChannels = $depthwiseFilter.shape[2];\n  const channelMultiplier = $depthwiseFilter.shape[3];\n  util.assert(\n      $pointwiseFilter.shape[2] === inChannels * channelMultiplier,\n      () =>\n          `Error in separableConv2d: the third dimension of pointwise filter ` +\n          `must be ${inChannels * channelMultiplier}, ` +\n          `but got ${$pointwiseFilter.shape[2]}.`);\n\n  const depthwise = depthwiseConv2d(\n      x4D, $depthwiseFilter, strides, pad, dataFormat, dilation);\n  const pointwiseStride = 1;\n  const res =\n      conv2d(depthwise, $pointwiseFilter, pointwiseStride, 'valid', dataFormat);\n  if (reshapedTo4D) {\n    return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n  }\n  return res as T;\n}\n\nfunction parseTupleParam(\n    param: number|[number, number]|[number, number, number]):\n    [number, number, number] {\n  if (typeof param === 'number') {\n    return [param, param, param];\n  }\n  if (param.length === 2) {\n    return [param[0], param[1], 1];\n  }\n  return param;\n}\n\nfunction tupleValuesAreOne(\n    param: number|[number, number]|[number, number, number]): boolean {\n  const [dimA, dimB, dimC] = parseTupleParam(param);\n  return dimA === 1 && dimB === 1 && dimC === 1;\n}\n\nfunction eitherStridesOrDilationsAreOne(\n    strides: number|[number, number]|[number, number, number],\n    dilations: number|[number, number]|[number, number, number]): boolean {\n  return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);\n}\n\nfunction depthwiseConv2dDerInput_<T extends Tensor3D|Tensor4D>(\n    xShape: [number, number, number, number]|[number, number, number], dy: T,\n    filter: Tensor4D, convInfo: conv_util.Conv2DInfo): T {\n  let dy4D = dy as Tensor4D;\n  let reshapedTo4D = false;\n  if (dy.rank === 3) {\n    reshapedTo4D = true;\n    dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);\n  }\n  const res = ENGINE.runKernelFunc(\n      backend => backend.depthwiseConv2DDerInput(dy4D, filter, convInfo),\n      {dy4D});\n  if (reshapedTo4D) {\n    return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n  }\n  return res as T;\n}\n\nfunction depthwiseConv2dDerFilter_<T extends Tensor3D|Tensor4D>(\n    x: T, dy: T, filterShape: [number, number, number, number],\n    convInfo: conv_util.Conv2DInfo): Tensor4D {\n  let x4D = x as Tensor4D;\n  if (x.rank === 3) {\n    x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n  }\n  let dy4D = dy as Tensor4D;\n  if (dy4D.rank === 3) {\n    dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);\n  }\n  return ENGINE.runKernelFunc(\n      backend => backend.depthwiseConv2DDerFilter(x4D, dy4D, convInfo),\n      {x4D, dy4D});\n}\n\n/**\n * Computes a 3D convolution over the input x.\n *\n * @param x The input tensor, of rank 5 or rank 4, of shape\n *     `[batch, depth, height, width, channels]`. If rank 4,\n * batch of 1 is assumed.\n * @param filter The filter, rank 5, of shape\n *     `[filterDepth, filterHeight, filterWidth, inChannels, outChannels]`.\n *      inChannels must match between input and filter.\n * @param strides The strides of the convolution: `[strideDepth, strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dataFormat: An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\n *     \"NDHWC\". Specify the data format of the input and output data. With the\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\n * @param dilations The dilation rates: `[dilationDepth, dilationHeight,\n *     dilationWidth]` in which we sample input values across the height\n *     and width dimensions in atrous convolution. Defaults to `[1, 1, 1]`.\n *     If `dilations` is a single number, then\n *     `dilationDepth == dilationHeight == dilationWidth`. If it is greater\n *     than 1, then all values of `strides` must be 1.\n */\n\n/** @doc {heading: 'Operations', subheading: 'Convolution'} */\nfunction conv3d_<T extends Tensor4D|Tensor5D>(\n    x: T|TensorLike, filter: Tensor5D|TensorLike,\n    strides: [number, number, number]|number, pad: 'valid'|'same',\n    dataFormat: 'NDHWC'|'NCDHW' = 'NDHWC',\n    dilations: [number, number, number]|number = [1, 1, 1]): T {\n  const $x = convertToTensor(x, 'x', 'conv3d');\n  const $filter = convertToTensor(filter, 'filter', 'conv3d');\n\n  let x5D = $x as Tensor5D;\n  let reshapedTo5D = false;\n\n  if ($x.rank === 4) {\n    reshapedTo5D = true;\n    x5D = $x.as5D(1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]);\n  }\n  util.assert(\n      x5D.rank === 5,\n      () => `Error in conv3d: input must be rank 5, but got rank ${x5D.rank}.`);\n  util.assert(\n      $filter.rank === 5,\n      () => `Error in conv3d: filter must be rank 5, but got rank ` +\n          `${$filter.rank}.`);\n  util.assert(\n      x5D.shape[4] === $filter.shape[3],\n      () => `Error in conv3d: depth of input (${x5D.shape[4]}) must match ` +\n          `input depth for filter ${$filter.shape[3]}.`);\n  util.assert(\n      eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in conv3D: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n  util.assert(\n      dataFormat === 'NDHWC',\n      () => `Error in conv3d: got dataFormat of ${\n          dataFormat} but only NDHWC is currently supported.`);\n\n  const convInfo = conv_util.computeConv3DInfo(\n      x5D.shape, $filter.shape, strides, dilations, pad);\n\n  const grad = (dy: Tensor5D, saved: Tensor[]) => {\n    util.assert(\n        tupleValuesAreOne(dilations),\n        () =>\n            'Error in gradient of conv3D: dilation rates greater than 1 are ' +\n            `not yet supported in gradients. Got dilations '${dilations}'`);\n    const [x5D, $filter] = saved;\n    return {\n      x: () => conv3dDerInput_(\n          (x5D as Tensor5D).shape, dy, $filter as Tensor5D, strides, pad),\n      $filter: () => conv3dDerFilter_(\n          x5D as Tensor5D, dy, ($filter as Tensor5D).shape, strides, pad)\n    };\n  };\n\n  const res = ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.conv3d(x5D, $filter, convInfo);\n    save([x5D, $filter]);\n    return res;\n  }, {x: x5D, $filter}, grad);\n  if (reshapedTo5D) {\n    return res.as4D(res.shape[1], res.shape[2], res.shape[3], res.shape[4]) as\n        T;\n  }\n  return res as T;\n}\n\n/**\n * Computes the derivative of the input of a 3D convolution.\n *\n * @param xShape The shape of the input: [batch, depth, height, width,\n * in_channels]. If length of 4, batch of 1 is assumed.\n * @param dy The derivative of the output, of rank 5 or rank 4 of shape\n *   `[batch, outDepth, outHeight, outWidth, in_channels]`.\n * If rank 4, batch of 1 is assumed.\n * @param filter The filter, rank 5, of shape\n *     `[filterDepth, filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideDepth, strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm used:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n */\nfunction conv3dDerInput_<T extends Tensor4D|Tensor5D>(\n    xShape:\n        [number, number, number, number,\n         number]|[number, number, number, number],\n    dy: T, filter: Tensor5D, strides: [number, number, number]|number,\n    pad: 'valid'|'same'): T {\n  util.assert(\n      xShape.length === dy.rank,\n      () => `Length of inShape ` +\n          `(${xShape.length}) and rank of dy (${dy.rank}) must match`);\n\n  let xShape5D = xShape as [number, number, number, number, number];\n  let dy5D = dy as Tensor5D;\n  let reshapedTo5D = false;\n  if (dy.rank === 4) {\n    reshapedTo5D = true;\n    dy5D = dy.as5D(1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]);\n    xShape5D = [1, xShape[0], xShape[1], xShape[2], xShape[3]];\n  }\n\n  const inDepth = xShape5D[4];\n  const outDepth = dy5D.shape[4];\n  util.assert(\n      xShape5D.length === 5,\n      () =>\n          `Error in conv3dDerInput: inShape must be length 5, but got length ` +\n          `${xShape5D.length}.`);\n  util.assert(\n      dy5D.rank === 5,\n      () => `Error in conv3dDerInput: dy must be rank 5, but got ` +\n          `rank ${dy5D.rank}`);\n  util.assert(\n      filter.rank === 5,\n      () => `Error in conv3dDerInput: filter must be rank 5, but got ` +\n          `rank ${filter.rank}`);\n  util.assert(\n      inDepth === filter.shape[3],\n      () => `Error in conv3dDerInput: depth of input (${inDepth}) must ` +\n          `match input depth for filter ${filter.shape[3]}.`);\n  util.assert(\n      outDepth === filter.shape[4],\n      () => `Error in conv3dDerInput: depth of output (${outDepth}) must ` +\n          `match output depth for filter ${filter.shape[4]}.`);\n\n  const dilations = 1;\n\n  const convInfo = conv_util.computeConv3DInfo(\n      xShape5D, filter.shape, strides, dilations, pad);\n  const res = ENGINE.runKernelFunc(\n      backend => backend.conv3dDerInput(dy5D, filter, convInfo), {dy5D});\n  if (reshapedTo5D) {\n    return res.as4D(res.shape[1], res.shape[2], res.shape[3], res.shape[4]) as\n        T;\n  }\n  return res as T;\n}\n\n/**\n * Computes the derivative of the filter of a 3D convolution.\n *\n * @param x The input tensor, of rank 5 or rank 4 of shape\n *     [batch, depth, height, width, inChannels]. If rank 4, batch of 1 is\n *     assumed.\n * @param dy The dy image, of rank 5 or rank 4, of shape\n *     [batch, depth, height, width, outDepth]. If rank 4, batch of 1 is\n *     assumed.\n * @param filterShape The shape of the filter, length 5,\n *     [filterDepth, filterHeight, filterWidth, inDepth, outDepth].\n * @param strides The strides of the convolution: [strideDepth, strideHeight,\n * strideWidth].\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n */\nfunction conv3dDerFilter_<T extends Tensor4D|Tensor5D>(\n    x: T, dy: T, filterShape: [number, number, number, number, number],\n    strides: [number, number, number]|number, pad: 'valid'|'same'): Tensor5D {\n  let x5D = x as Tensor5D;\n  if (x.rank === 4) {\n    x5D = x.as5D(1, x.shape[0], x.shape[1], x.shape[2], x.shape[3]);\n  }\n  let dy5D = dy as Tensor5D;\n  if (dy5D.rank === 4) {\n    dy5D = dy.as5D(1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]);\n  }\n  util.assert(\n      x5D.rank === 5,\n      () => `Error in conv3dDerFilter: input must be rank 5, but got shape ` +\n          `${x5D.shape}.`);\n  util.assert(\n      dy5D.rank === 5,\n      () => `Error in conv3dDerFilter: dy must be rank 5, but got shape ` +\n          `${dy5D.shape}.`);\n  util.assert(\n      filterShape.length === 5,\n      () => `Error in conv3dDerFilter: filterShape must be length 5, but got ` +\n          `${filterShape}.`);\n  util.assert(\n      x5D.shape[4] === filterShape[3],\n      () => `Error in conv3dDerFilter: depth of input ${x5D.shape[4]}) must ` +\n          `match input depth in filter (${filterShape[3]}.`);\n  util.assert(\n      dy5D.shape[4] === filterShape[4],\n      () => `Error in conv3dDerFilter: depth of dy (${dy5D.shape[4]}) must ` +\n          `match output depth for filter (${filterShape[4]}).`);\n\n  const dilations = 1;\n\n  const convInfo = conv_util.computeConv3DInfo(\n      x5D.shape, filterShape, strides, dilations, pad);\n  return ENGINE.runKernelFunc(\n      backend => backend.conv3dDerFilter(x5D, dy5D, convInfo), {x5D, dy5D});\n}\n\n/**\n * Computes the transposed 3D convolution of a volume, also known as a\n * deconvolution.\n *\n * @param x The input image, of rank 5 or rank 4, of shape\n *   `[batch, depth, height, width, inDepth]`. If rank 4, batch of 1 is assumed.\n * @param filter The filter, rank 4, of shape\n *     `[depth, filterHeight, filterWidth, outDepth, inDepth]`.\n *     `inDepth` must match `inDepth` in `x`.\n * @param outputShape Output shape, of rank 5 or rank 4:\n *     `[batch, depth, height, width, outDepth]`. If rank 3, batch of 1 is\n *    assumed.\n * @param strides The strides of the original convolution:\n *     `[strideDepth, strideHeight, strideWidth]`.\n * @param pad  The type of padding algorithm used in the non-transpose version\n *    of the op.\n */\n/** @doc {heading: 'Operations', subheading: 'Convolution'} */\nfunction conv3dTranspose_<T extends Tensor4D|Tensor5D>(\n    x: T|TensorLike, filter: Tensor5D|TensorLike,\n    outputShape:\n        [number, number, number, number,\n         number]|[number, number, number, number],\n    strides: [number, number, number]|number, pad: 'valid'|'same'): T {\n  const $x = convertToTensor(x, 'x', 'conv3dTranspose');\n  const $filter = convertToTensor(filter, 'filter', 'conv3dTranspose');\n\n  return conv3dDerInput_(outputShape, $x, $filter, strides, pad);\n}\n\nexport const conv1d = op({conv1d_});\nexport const conv2d = op({conv2d_});\nexport const conv3d = op({conv3d_});\nexport const conv2dDerFilter = op({conv2dDerFilter_});\nexport const conv2dDerInput = op({conv2dDerInput_});\nexport const depthwiseConv2d = op({depthwiseConv2d_});\nexport const depthwiseConv2dDerInput = op({depthwiseConv2dDerInput_});\nexport const depthwiseConv2dDerFilter = op({depthwiseConv2dDerFilter_});\nexport const separableConv2d = op({separableConv2d_});\nexport const conv2dTranspose = op({conv2dTranspose_});\nexport const conv3dTranspose = op({conv3dTranspose_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor, Tensor1D, Tensor2D, Tensor3D} from '../tensor';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport {op} from './operation';\n\n/**\n * Computes the dot product of two matrices, A * B. These must be matrices.\n *\n * ```js\n * const a = tf.tensor2d([1, 2], [1, 2]);\n * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * a.matMul(b).print();  // or tf.matMul(a, b)\n * ```\n * @param a First matrix in dot product operation.\n * @param b Second matrix in dot product operation.\n * @param transposeA If true, `a` is transposed before multiplication.\n * @param transposeB If true, `b` is transposed before multiplication.\n */\n/** @doc {heading: 'Operations', subheading: 'Matrices'} */\nfunction matMul_<T extends Tensor>(\n    a: T|TensorLike, b: T|TensorLike, transposeA = false,\n    transposeB = false): T {\n  let $a = convertToTensor(a, 'a', 'matMul');\n  let $b = convertToTensor(b, 'b', 'matMul');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const innerShapeA =\n      transposeA ? $a.shape[$a.rank - 2] : $a.shape[$a.rank - 1];\n  const innerShapeB =\n      transposeB ? $b.shape[$b.rank - 1] : $b.shape[$b.rank - 2];\n\n  const outerShapeA =\n      transposeA ? $a.shape[$a.rank - 1] : $a.shape[$a.rank - 2];\n  const outerShapeB =\n      transposeB ? $b.shape[$b.rank - 2] : $b.shape[$b.rank - 1];\n\n  const outerDimsA = $a.shape.slice(0, -2);\n  const outerDimsB = $b.shape.slice(0, -2);\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  util.assert(\n      $a.rank >= 2 && $b.rank >= 2 && $a.rank === $b.rank,\n      () => `Error in matMul: inputs must have the same rank of at least 2, ` +\n          `got ranks ${$a.rank} and ${$b.rank}.`);\n\n  util.assert(\n      util.arraysEqual(outerDimsA, outerDimsB),\n      () => `Error in matMul: outer dimensions (${outerDimsA}) and (` +\n          `${outerDimsB}) of Tensors with shapes ${$a.shape} and ` +\n          `${$b.shape} must match.`);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${$a.shape} and ` +\n          `${$b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const outShape = $a.shape.slice(0, -2).concat([outerShapeA, outerShapeB]);\n\n  const a3D = transposeA ? $a.as3D(batchDimA, innerShapeA, outerShapeA) :\n                           $a.as3D(batchDimA, outerShapeA, innerShapeA);\n  const b3D = transposeB ? $b.as3D(batchDimB, outerShapeB, innerShapeB) :\n                           $b.as3D(batchDimB, innerShapeB, outerShapeB);\n\n  const grad = (dy: Tensor3D, saved: Tensor[]) => {\n    const [a3D, b3D] = saved as Tensor3D[];\n    if (!transposeA && !transposeB) {\n      return {\n        a: () => dy.matMul(b3D, false, true),\n        b: () => a3D.matMul(dy, true, false)\n      };\n    } else if (!transposeA && transposeB) {\n      return {\n        a: () => dy.matMul(b3D, false, false),\n        b: () => dy.matMul(a3D, true, false)\n      };\n    } else if (transposeA && !transposeB) {\n      return {\n        a: () => b3D.matMul(dy, false, true),\n        b: () => a3D.matMul(dy, false, false)\n      };\n    } else {\n      return {\n        a: () => b3D.matMul(dy, true, true),\n        b: () => dy.matMul(a3D, true, true)\n      };\n    }\n  };\n\n  const attrs = {transposeA, transposeB};\n  const res = ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.batchMatMul(a3D, b3D, transposeA, transposeB);\n    save([a3D, b3D]);\n    return res;\n  }, {a: a3D, b: b3D}, grad, 'BatchMatMul', attrs);\n  return res.reshape(outShape) as T;\n}\n\n/**\n * Computes the outer product of two vectors, `v1` and `v2`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([3, 4, 5]);\n *\n * tf.outerProduct(a, b).print();\n * ```\n * @param v1 The first vector in the outer product operation.\n * @param v2 The second vector in the outer product operation.\n */\n/** @doc {heading: 'Operations', subheading: 'Matrices'} */\nfunction outerProduct_(\n    v1: Tensor1D|TensorLike, v2: Tensor1D|TensorLike): Tensor2D {\n  const $v1 = convertToTensor(v1, 'v1', 'outerProduct');\n  const $v2 = convertToTensor(v2, 'v2', 'outerProduct');\n\n  util.assert(\n      $v1.rank === 1 && $v2.rank === 1,\n      () => `Error in outerProduct: inputs must be rank 1, but got ranks ` +\n          `${$v1.rank} and ${$v2.rank}.`);\n\n  return $v1.as2D(-1, 1).matMul($v2.as2D(1, -1));\n}\n\n/**\n * Computes the dot product of two matrices and/or vectors, `t1` and `t2`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor2d([[1, 2], [3, 4]]);\n * const c = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);\n *\n * a.dot(b).print();  // or tf.dot(a, b)\n * b.dot(a).print();\n * b.dot(c).print();\n * ```\n * @param t1 The first tensor in the dot operation.\n * @param t2 The second tensor in the dot operation.\n */\n/** @doc {heading: 'Operations', subheading: 'Matrices'} */\nfunction dot_(t1: Tensor|TensorLike, t2: Tensor|TensorLike): Tensor {\n  const $t1 = convertToTensor(t1, 't1', 'dot');\n  const $t2 = convertToTensor(t2, 't2', 'dot');\n  util.assert(\n      ($t1.rank === 1 || $t1.rank === 2) && ($t2.rank === 1 || $t2.rank === 2),\n      () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ` +\n          `${$t1.rank} and ${$t2.rank}.`);\n\n  const t1Inner = ($t1.rank === 1 ? $t1.size : $t1.shape[1]);\n  const t2Inner = ($t2.rank === 1 ? $t2.size : $t2.shape[0]);\n\n  util.assert(\n      t1Inner === t2Inner,\n      () => `Error in dot: inner dimensions of inputs must match, but got ` +\n          `${t1Inner} and ${t2Inner}.`);\n\n  if ($t1.rank === 1 && $t2.rank === 1) {\n    return $t1.as2D(1, -1).matMul($t2.as2D(-1, 1)).asScalar();\n  } else if ($t1.rank === 1 && $t2.rank === 2) {\n    return $t1.as2D(1, -1).matMul($t2.as2D($t2.shape[0], $t2.shape[1])).as1D();\n  } else if ($t1.rank === 2 && $t2.rank === 1) {\n    return $t1.matMul($t2.as2D(-1, 1)).as1D();\n  } else {\n    return $t1.matMul($t2.as2D($t2.shape[0], $t2.shape[1]));\n  }\n}\n\nexport const matMul = op({matMul_});\nexport const dot = op({dot_});\nexport const outerProduct = op({outerProduct_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport {op} from './operation';\n\n/**\n * Reverses a `tf.Tensor1D`.\n *\n * @param x The input tensor.\n */\nfunction reverse1d_(x: Tensor1D|TensorLike): Tensor1D {\n  const $x = convertToTensor(x, 'x', 'reverse');\n  util.assert(\n      $x.rank === 1,\n      () => `Error in reverse1D: x must be rank 1 but got rank ${$x.rank}.`);\n  return reverse($x, 0);\n}\n\n/**\n * Reverses a `tf.Tensor2D` along a specified axis.\n *\n * @param x The input tensor.\n * @param axis The set of dimensions to reverse. Must be in the\n *     range [-rank(x), rank(x)). Defaults to all axes.\n */\nfunction reverse2d_(x: Tensor2D|TensorLike, axis?: number|number[]): Tensor2D {\n  const $x = convertToTensor(x, 'x', 'reverse');\n  util.assert(\n      $x.rank === 2,\n      () => `Error in reverse2D: x must be rank 2 but got rank ${$x.rank}.`);\n  return reverse($x, axis);\n}\n\n/**\n * Reverses a `tf.Tensor3D` along a specified axis.\n *\n * @param x The input tensor.\n * @param axis The set of dimensions to reverse. Must be in the\n *     range [-rank(x), rank(x)). Defaults to all axes.\n */\nfunction reverse3d_(x: Tensor3D|TensorLike, axis?: number|number[]): Tensor3D {\n  const $x = convertToTensor(x, 'x', 'reverse');\n  util.assert(\n      $x.rank === 3,\n      () => `Error in reverse3D: x must be rank 3 but got rank ${$x.rank}.`);\n  return reverse($x, axis);\n}\n\n/**\n * Reverses a `tf.Tensor4D` along a specified axis.\n *\n * @param x The input tensor.\n * @param axis The set of dimensions to reverse. Must be in the\n *     range [-rank(x), rank(x)). Defaults to all axes.\n */\nfunction reverse4d_(x: Tensor4D|TensorLike, axis?: number|number[]): Tensor4D {\n  const $x = convertToTensor(x, 'x', 'reverse');\n  util.assert(\n      $x.rank === 4,\n      () => `Error in reverse4D: x must be rank 4 but got rank ${$x.rank}.`);\n  return reverse($x, axis);\n}\n\n/**\n * Reverses a `tf.Tensor` along a specified axis.\n *\n * Also available are stricter rank-specific methods that assert that `x` is\n * of the given rank:\n *   - `tf.reverse1d`\n *   - `tf.reverse2d`\n *   - `tf.reverse3d`\n *   - `tf.reverse4d`\n *\n * Except `tf.reverse1d` (which does not have axis param), all methods have\n * same signature as this method.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.reverse().print();\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.reverse(axis).print();\n * ```\n * @param x The input tensor to be reversed.\n * @param axis The set of dimensions to reverse. Must be in the\n *     range [-rank(x), rank(x)). Defaults to all axes.\n */\n/** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */\nfunction reverse_<T extends Tensor>(\n    x: T|TensorLike, axis?: number|number[]): T {\n  const $x = convertToTensor(x, 'x', 'reverse');\n\n  if ($x.rank === 0) {\n    return $x.clone();\n  }\n  const axes = util.parseAxisParam(axis, $x.shape);\n  const grad = (dy: T) => {\n    return {$x: () => dy.reverse(axes)};\n  };\n  const res =\n      ENGINE.runKernelFunc(backend => backend.reverse($x, axes), {$x}, grad);\n  return res.reshapeAs($x);\n}\n\nexport const reverse = op({reverse_});\nexport const reverse1d = op({reverse1d_});\nexport const reverse2d = op({reverse2d_});\nexport const reverse3d = op({reverse3d_});\nexport const reverse4d = op({reverse4d_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor, Tensor3D, Tensor4D, Tensor5D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport {batchToSpaceND, spaceToBatchND} from './array_ops';\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\n\n/**\n * Computes the 2D max pooling of an image.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in dilated pooling. Defaults to `[1, 1]`. If `dilations` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n */\nfunction maxPoolImpl_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filterSize: [number, number]|number,\n    strides: [number, number]|number, dilations: [number, number]|number,\n    pad: 'valid'|'same'|number, dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $x = convertToTensor(x, 'x', 'maxPool');\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);\n  }\n  if (dilations == null) {\n    dilations = [1, 1];\n  }\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in maxPool: input must be rank 4 but got rank ${x4D.rank}.`);\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in maxPool: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n  const convInfo = conv_util.computePool2DInfo(\n      x4D.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return $x.clone();\n  }\n\n  const grad = (dy: Tensor4D, saved: Tensor[]) => {\n    const [x4D, y] = saved;\n    return {\n      x: () => maxPoolBackprop(\n          dy, x4D as Tensor4D, y as Tensor4D, filterSize, strides, dilations,\n          pad)\n    };\n  };\n\n  const inputsToSave = [x4D];\n  const res = ENGINE.runKernelFunc((backend, save) => {\n    const y = backend.maxPool(x4D, convInfo);\n    save([x4D, y]);\n    return y;\n  }, {x: x4D}, grad, 'MaxPool', convInfo, inputsToSave);\n  if (reshapedTo4D) {\n    return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n  }\n  return res as T;\n}\n\n/**\n * Computes the 2D max pooling of an image.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n */\n/** @doc {heading: 'Operations', subheading: 'Convolution'} */\nfunction maxPool_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filterSize: [number, number]|number,\n    strides: [number, number]|number, pad: 'valid'|'same'|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  return maxPoolImpl_(x, filterSize, strides, 1, pad, dimRoundingMode);\n}\n\n/**\n * Computes the 2D average pooling of an image.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in dilated pooling. Defaults to `[1, 1]`. If `dilations` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param pad The type of padding algorithm:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *         https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n */\nfunction avgPoolImpl_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filterSize: [number, number]|number,\n    strides: [number, number]|number, dilations: [number, number]|number,\n    pad: 'valid'|'same'|number, dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $x = convertToTensor(x, 'x', 'avgPool', 'float32');\n  if (dilations == null) {\n    dilations = [1, 1];\n  }\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);\n  }\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in avgPool: x must be rank 4 but got rank ${x4D.rank}.`);\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in avgPool: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  const convInfo = conv_util.computePool2DInfo(\n      x4D.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return $x.clone();\n  }\n\n  const grad = (dy: Tensor4D) => {\n    return {\n      x: () => avgPoolBackprop(dy, x4D, filterSize, strides, dilations, pad)\n    };\n  };\n\n  let res = ENGINE.runKernelFunc(\n      backend => backend.avgPool(x4D, convInfo), {x: x4D}, grad, 'AvgPool',\n      convInfo);\n  res = res.cast($x.dtype);\n  if (reshapedTo4D) {\n    return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n  }\n  return res as T;\n}\n\n/**\n * Computes the 2D average pooling of an image.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *         https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n */\n/** @doc {heading: 'Operations', subheading: 'Convolution'} */\nfunction avgPool_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filterSize: [number, number]|number,\n    strides: [number, number]|number, pad: 'valid'|'same'|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  return avgPoolImpl_(x, filterSize, strides, 1, pad, dimRoundingMode);\n}\n\n/**\n * Performs an N-D pooling operation\n *\n * @param input The input tensor, of rank 4 or rank 3 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param windowShape The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param poolingType The type of pooling, either 'max' or 'avg'.\n * @param pad The type of padding algorithm:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *         https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in dilated pooling. Defaults to `[1, 1]`. If `dilationRate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n */\n/** @doc {heading: 'Operations', subheading: 'Convolution'} */\nfunction pool_<T extends Tensor3D|Tensor4D>(\n    input: T|TensorLike, windowShape: [number, number]|number,\n    poolingType: 'avg'|'max', pad: 'valid'|'same'|number,\n    dilations?: [number, number]|number, strides?: [number, number]|number) {\n  if (dilations == null) {\n    dilations = [1, 1];\n  }\n  if (strides == null) {\n    strides = 1;\n  }\n  if (pad === 0) {\n    pad = 'valid';\n  }\n  const $x = convertToTensor(input, 'x', 'maxPool');\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);\n  }\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in pool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n  const convInfo = conv_util.computePool2DInfo(\n      x4D.shape, windowShape, strides, dilations, pad);\n  const dilation: [number, number] =\n      [convInfo.dilationHeight, convInfo.dilationWidth];\n\n  // The following implementation does batchToSpace(pool(spaceToBatch(x)))\n  // whenever dilation > 1 since the TF kernels do not support dilation > 1.\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L1037\n\n  let basePadding: number[][];\n  if (pad === 'same') {\n    basePadding = withSpaceToBatchBasePaddings(\n        [convInfo.filterHeight, convInfo.filterWidth], dilation);\n  } else {\n    basePadding = [[0, 0], [0, 0]];\n  }\n  const isDilationOne = dilation[0] === 1 && dilation[1] === 1;\n  const [adjustedPadding, adjustedCrops] = requiredSpaceToBatchPaddings(\n      [convInfo.inHeight, convInfo.inWidth], dilation, basePadding);\n  const convertedPad = isDilationOne ? pad : 'valid';\n  const convertedX =\n      isDilationOne ? x4D : spaceToBatchND(x4D, dilation, adjustedPadding);\n  const forwardOp = poolingType === 'avg' ?\n      () => avgPoolImpl_(\n          convertedX, windowShape, strides, 1 /* dilation */, convertedPad) :\n      () => maxPoolImpl_(\n          convertedX, windowShape, strides, 1 /* dilation */, convertedPad);\n  const y = forwardOp();\n  const res = isDilationOne ? y : batchToSpaceND(y, dilation, adjustedCrops);\n  if (reshapedTo4D) {\n    return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n  }\n  return res as T;\n}\n\n/**\n * Computes the backprop of a 2D max pool.\n *\n * @param dy The dy error, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param input The original input image, of rank 4, of shape\n *     [batchSize, height, width, channels].\n * @param output The original output image, of rank 4, of shape\n *     [batchSize, outHeight, outWidth, channels].\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The\n *     rounding mode used when computing output dimensions if pad is a\n *     number. If none is provided, it will not round and error if the output\n *     is of fractional size.\n */\nfunction maxPoolBackprop(\n    dy: Tensor4D|TensorLike, input: Tensor4D|TensorLike,\n    output: Tensor4D|TensorLike, filterSize: [number, number]|number,\n    strides: [number, number]|number, dilations: [number, number]|number,\n    pad: 'valid'|'same'|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): Tensor4D {\n  const $dy = convertToTensor(dy, 'dy', 'maxPoolBackprop');\n  const $input = convertToTensor(input, 'input', 'maxPoolBackprop');\n  const $output = convertToTensor(output, 'output', 'maxPoolBackprop');\n  util.assert(\n      $input.rank === $dy.rank,\n      () => `Rank of input (${$input.rank}) does not match rank of dy ` +\n          `(${$dy.rank})`);\n  if (dilations == null) {\n    dilations = [1, 1];\n  }\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () =>\n          'Error in maxPoolBackProp: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  util.assert(\n      $dy.rank === 4,\n      () => `Error in maxPoolBackprop: dy must be rank 4 but got rank ` +\n          `${$dy.rank}.`);\n  util.assert(\n      $input.rank === 4,\n      () => `Error in maxPoolBackprop: input must be rank 4 but got rank ` +\n          `${$input.rank}.`);\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in maxPoolBackprop: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  const convInfo = conv_util.computePool2DInfo(\n      $input.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n  const res = ENGINE.runKernelFunc(\n      backend => backend.maxPoolBackprop($dy, $input, $output, convInfo),\n      {$dy, $input});\n  return res;\n}\n\n/**\n * Computes the backprop of an 2D avg pool.\n *\n * @param dy The dy error, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param input The input image, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n */\nfunction avgPoolBackprop<T extends Tensor3D|Tensor4D>(\n    dy: T|TensorLike, input: T|TensorLike, filterSize: [number, number]|number,\n    strides: [number, number]|number, dilations: [number, number]|number,\n    pad: 'valid'|'same'|number): T {\n  const $dy = convertToTensor(dy, 'dy', 'avgPoolBackprop');\n  const $input = convertToTensor(input, 'input', 'avgPoolBackprop');\n  util.assert(\n      $input.rank === $dy.rank,\n      () => `Rank of input (${$input.rank}) does not match rank of dy (${\n          $dy.rank})`);\n  if (dilations == null) {\n    dilations = [1, 1];\n  }\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () =>\n          'Error in avgPoolBackprop: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  let input4D = $input as Tensor4D;\n  let dy4D = $dy as Tensor4D;\n  let reshapedTo4D = false;\n  if ($input.rank === 3) {\n    reshapedTo4D = true;\n    input4D = $input.as4D(1, $input.shape[0], $input.shape[1], $input.shape[2]);\n    dy4D = $dy.as4D(1, $dy.shape[0], $dy.shape[1], $dy.shape[2]);\n  }\n\n  util.assert(\n      dy4D.rank === 4,\n      () => `Error in avgPoolBackprop: dy must be rank 4 but got rank ` +\n          `${dy4D.rank}.`);\n  util.assert(\n      input4D.rank === 4,\n      () => `Error in avgPoolBackprop: input must be rank 4 but got rank ` +\n          `${input4D.rank}.`);\n\n  const convInfo = conv_util.computePool2DInfo(\n      input4D.shape, filterSize, strides, dilations, pad);\n  const res = ENGINE.runKernelFunc(\n      backend => backend.avgPoolBackprop(dy4D, input4D, convInfo),\n      {dy4D, input4D});\n  if (reshapedTo4D) {\n    return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n  }\n  return res as T;\n}\n\n// Helper function to compute crops and paddings for pool with dilation > 1.\n// tslint:disable-next-line:max-line-length\n// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/array_ops.py#L2184\nfunction requiredSpaceToBatchPaddings(\n    inputShape: [number, number], blockShape: [number, number],\n    basePadding: number[][]) {\n  const padStart = basePadding.map(b => b[0]);\n  const origPadEnd = basePadding.map(b => b[1]);\n  const fullInputShape = inputShape.concat(padStart, origPadEnd);\n  const padEndExtra = blockShape.map((b, i) => (b - fullInputShape[i] % b) % b);\n  const padEnd = origPadEnd.map((s, i) => s + padEndExtra[i]);\n  const paddings = blockShape.map((_, i) => [padStart[i], padEnd[i]]);\n  const crops = blockShape.map((_, i) => [0, padEndExtra[i]]);\n  return [paddings, crops];\n}\n\n// Helper function to compute base paddings for pool with dilation > 1.\n// tslint:disable-next-line:max-line-length\n// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L524\nfunction withSpaceToBatchBasePaddings(\n    filterShape: [number, number], dilation: [number, number]) {\n  // Spatial dimensions of the filters and the upsampled filters in which we\n  // introduce (rate - 1) zeros between consecutive filter values.\n  const dilatedFilterShape = filterShape.map((s, i) => {\n    return s + (s - 1) * (dilation[i] - 1);\n  });\n  const padExtraShape = dilatedFilterShape.map(s => s - 1);\n\n  // When padding is odd, we pad more at end, following the same\n  // convention as conv2d.\n  const padExtraStart = padExtraShape.map(s => Math.floor(s / 2));\n  const padExtraEnd = padExtraShape.map((s, i) => s - padExtraStart[i]);\n  return padExtraShape.map((_, i) => {\n    return [padExtraStart[i], padExtraEnd[i]];\n  });\n}\n\n/**\n * Computes the 3D average pooling.\n *\n * ```js\n * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);\n * const result = tf.avgPool3d(x, 2, 1, 'valid');\n * result.print();\n * ```\n *\n * @param x The input tensor, of rank 5 or rank 4 of shape\n *     `[batch, depth, height, width, inChannels]`.\n * @param filterSize The filter size:\n *     `[filterDepth, filterHeight, filterWidth]`.\n *     If `filterSize` is a single number,\n *     then `filterDepth == filterHeight == filterWidth`.\n * @param strides The strides of the pooling:\n *     `[strideDepth, strideHeight, strideWidth]`.\n *     If `strides` is a single number,\n *     then `strideDepth == strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1*1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n * @param dataFormat An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\n *     \"NDHWC\". Specify the data format of the input and output data. With the\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\n * @param dilations The dilation rates:\n *     `[dilationDepth, dilationHeight, dilationWidth]`\n *     in which we sample input values across the depth, height and width\n *     dimensions in dilated pooling.\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\n *     then `dilationDepth == dilationHeight == dilationWidth`.\n *     If it is greater than 1, then all values of `strides` must be 1.\n */\n/** @doc {heading: 'Operations', subheading: 'Convolution'} */\nfunction avgPool3d_<T extends Tensor4D|Tensor5D>(\n    x: T|TensorLike,\n    filterSize: [number, number, number]|number,\n    strides: [number, number, number]|number,\n    pad: 'valid'|'same'|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil',\n    dataFormat: 'NDHWC'|'NCDHW' = 'NDHWC',\n    dilations?: [number, number, number]|number,\n    ): T {\n  const $x = convertToTensor(x, 'x', 'avgPool3d', 'float32');\n\n  let x5D = $x as Tensor5D;\n  let reshapedTo5D = false;\n  if ($x.rank === 4) {\n    reshapedTo5D = true;\n    x5D = $x.as5D(1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]);\n  }\n\n  if (dilations == null) {\n    dilations = [1, 1, 1];\n  }\n  util.assert(\n      x5D.rank === 5,\n      () => `Error in avgPool3d: x must be rank 5 but got rank ${x5D.rank}.`);\n  util.assert(\n      dataFormat === 'NDHWC',\n      () => `Error in avgPool3d: Only NDHWC is currently supported, ` +\n          `but got dataFormat of ${dataFormat}`);\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool3d: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in avgPool3d: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  const convInfo = conv_util.computePool3DInfo(\n      x5D.shape, filterSize, strides, dilations, pad, dimRoundingMode,\n      dataFormat);\n\n  const grad = (dy: Tensor5D) => {\n    return {\n      x: () => avgPool3dBackprop(\n          dy, x5D, filterSize, strides, dilations, pad, dimRoundingMode)\n    };\n  };\n\n  let res = ENGINE.runKernelFunc(\n      backend => backend.avgPool3d(x5D, convInfo), {x: x5D}, grad);\n  res = res.cast(x5D.dtype);\n  if (reshapedTo5D) {\n    return res.as4D(res.shape[1], res.shape[2], res.shape[3], res.shape[4]) as\n        T;\n  }\n\n  return res as T;\n}\n\n/**\n * Computes the backprop of a 3d avg pool.\n *\n * @param dy The dy error, of rank 5 of shape\n *     [batchSize, depth, height, width, channels].\n * assumed.\n * @param input The original input image, of rank 5 or rank4 of shape\n *     [batchSize, depth, height, width, channels].\n * @param filterSize The filter size:\n *     `[filterDepth, filterHeight, filterWidth]`.\n *     `filterSize` is a single number,\n *     then `filterDepth == filterHeight == filterWidth`.\n * @param strides The strides of the pooling:\n *     `[strideDepth, strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param dilations The dilation rates:\n *     `[dilationDepth, dilationHeight, dilationWidth]`\n *     in which we sample input values across the depth, height and width\n *     dimensions in dilated pooling.\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\n *     then `dilationDepth == dilationHeight == dilationWidth`.\n *     If it is greater than 1, then all values of `strides` must be 1.\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The\n *     rounding mode used when computing output dimensions if pad is a\n *     number. If none is provided, it will not round and error if the output\n *     is of fractional size.\n */\nfunction avgPool3dBackprop<T extends Tensor4D|Tensor5D>(\n    dy: T|TensorLike, input: T|TensorLike,\n    filterSize: [number, number, number]|number,\n    strides: [number, number, number]|number,\n    dilations: [number, number, number]|number, pad: 'valid'|'same'|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $dy = convertToTensor(dy, 'dy', 'avgPool3dBackprop');\n  const $input = convertToTensor(input, 'input', 'avgPool3dBackprop');\n\n  let dy5D = $dy as Tensor5D;\n  let input5D = $input as Tensor5D;\n  let reshapedTo5D = false;\n  if ($input.rank === 4) {\n    reshapedTo5D = true;\n    dy5D = $dy.as5D(1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]);\n    input5D = $input.as5D(\n        1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]);\n  }\n\n  util.assert(\n      dy5D.rank === 5,\n      () => `Error in avgPool3dBackprop: dy must be rank 5 but got rank ` +\n          `${dy5D.rank}.`);\n  util.assert(\n      input5D.rank === 5,\n      () => `Error in avgPool3dBackprop: input must be rank 5 but got rank ` +\n          `${input5D.rank}.`);\n  if (dilations == null) {\n    dilations = [1, 1, 1];\n  }\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool3dBackprop: Either strides or dilations ' +\n          `must be 1. Got strides ${strides} and dilations '${dilations}'`);\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in maxPool3dBackprop: pad must be an integer when ` +\n            `using, dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  const convInfo = conv_util.computePool3DInfo(\n      input5D.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n  const res = ENGINE.runKernelFunc(\n      backend => backend.avgPool3dBackprop(dy5D, input5D, convInfo),\n      {dy5D, input5D});\n  if (reshapedTo5D) {\n    return res.as4D(res.shape[1], res.shape[2], res.shape[3], res.shape[4]) as\n        T;\n  }\n\n  return res as T;\n}\n\n/**\n * Computes the 3D max pooling.\n *\n * ```js\n * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);\n * const result = tf.maxPool3d(x, 2, 1, 'valid');\n * result.print();\n * ```\n *\n * @param x The input tensor, of rank 5 or rank 4 of shape\n *     `[batch, depth, height, width, inChannels]`.\n * @param filterSize The filter size:\n *     `[filterDepth, filterHeight, filterWidth]`.\n *     If `filterSize` is a single number,\n *     then `filterDepth == filterHeight == filterWidth`.\n * @param strides The strides of the pooling:\n *     `[strideDepth, strideHeight, strideWidth]`.\n *     If `strides` is a single number,\n *     then `strideDepth == strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1*1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n * @param dataFormat An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\n *     \"NDHWC\". Specify the data format of the input and output data. With the\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\n * @param dilations The dilation rates:\n *     `[dilationDepth, dilationHeight, dilationWidth]`\n *     in which we sample input values across the depth, height and width\n *     dimensions in dilated pooling.\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\n *     then `dilationDepth == dilationHeight == dilationWidth`.\n *     If it is greater than 1, then all values of `strides` must be 1.\n */\n/** @doc {heading: 'Operations', subheading: 'Convolution'} */\nfunction maxPool3d_<T extends Tensor4D|Tensor5D>(\n    x: T|TensorLike, filterSize: [number, number, number]|number,\n    strides: [number, number, number]|number, pad: 'valid'|'same'|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil',\n    dataFormat: 'NDHWC'|'NCDHW' = 'NDHWC',\n    dilations?: [number, number, number]|number): T {\n  const $x = convertToTensor(x, 'x', 'maxPool3d');\n\n  let x5D = $x as Tensor5D;\n  let reshapedTo5D = false;\n  if ($x.rank === 4) {\n    reshapedTo5D = true;\n    x5D = $x.as5D(1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]);\n  }\n\n  if (dilations == null) {\n    dilations = [1, 1, 1];\n  }\n  util.assert(\n      x5D.rank === 5,\n      () => `Error in maxPool3d: x must be rank 5 but got rank ${x5D.rank}.`);\n  util.assert(\n      dataFormat === 'NDHWC',\n      () => `Error in maxPool3d: Only NDHWC is currently supported, ` +\n          `but got dataFormat of ${dataFormat}`);\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool3d: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in maxPool3d: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  const convInfo = conv_util.computePool3DInfo(\n      x5D.shape, filterSize, strides, dilations, pad, dimRoundingMode,\n      dataFormat);\n\n  const grad = (dy: Tensor5D, saved: Tensor[]) => {\n    const [x5D, y] = saved;\n    return {\n      x: () => maxPool3dBackprop(\n          dy, x5D as Tensor5D, y as Tensor5D, filterSize, strides, dilations,\n          pad, dimRoundingMode)\n    };\n  };\n\n  const res = ENGINE.runKernelFunc((backend, save) => {\n    const y = backend.maxPool3d(x5D, convInfo);\n    save([x5D, y]);\n    return y;\n  }, {x: x5D}, grad);\n  if (reshapedTo5D) {\n    return res.as4D(res.shape[1], res.shape[2], res.shape[3], res.shape[4]) as\n        T;\n  }\n\n  return res as T;\n}\n\n/**\n * Computes the backprop of a 3d max pool.\n *\n * @param dy The dy error, of rank 5 of shape\n *     [batchSize, depth, height, width, channels].\n * assumed.\n * @param input The original input image, of rank 5 or rank 4 of shape\n *     [batchSize, depth, height, width, channels].\n * @param output The original output image, of rank 5 of shape\n *     [batchSize, outDepth, outHeight, outWidth, channels].\n * @param filterSize The filter size:\n *     `[filterDepth, filterHeight, filterWidth]`.\n *     `filterSize` is a single number,\n *     then `filterDepth == filterHeight == filterWidth`.\n * @param strides The strides of the pooling:\n *     `[strideDepth, strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param dilations The dilation rates:\n *     `[dilationDepth, dilationHeight, dilationWidth]`\n *     in which we sample input values across the depth, height and width\n *     dimensions in dilated pooling.\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\n *     then `dilationDepth == dilationHeight == dilationWidth`.\n *     If it is greater than 1, then all values of `strides` must be 1.\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The\n *     rounding mode used when computing output dimensions if pad is a\n *     number. If none is provided, it will not round and error if the output\n *     is of fractional size.\n */\nfunction maxPool3dBackprop<T extends Tensor4D|Tensor5D>(\n    dy: T|TensorLike, input: T|TensorLike, output: T|TensorLike,\n    filterSize: [number, number, number]|number,\n    strides: [number, number, number]|number,\n    dilations: [number, number, number]|number, pad: 'valid'|'same'|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $dy = convertToTensor(dy, 'dy', 'maxPool3dBackprop');\n  const $input = convertToTensor(input, 'input', 'maxPool3dBackprop');\n  const $output = convertToTensor(output, 'output', 'maxPool3dBackprop');\n\n  let dy5D = $dy as Tensor5D;\n  let input5D = $input as Tensor5D;\n  let output5D = $output as Tensor5D;\n  let reshapedTo5D = false;\n  if ($input.rank === 4) {\n    reshapedTo5D = true;\n    dy5D = $dy.as5D(1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]);\n    input5D = $input.as5D(\n        1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]);\n    output5D = $output.as5D(\n        1, $output.shape[0], $output.shape[1], $output.shape[2],\n        $output.shape[3]);\n  }\n\n  util.assert(\n      dy5D.rank === 5,\n      () => `Error in maxPool3dBackprop: dy must be rank 5 but got rank ` +\n          `${dy5D.rank}.`);\n  util.assert(\n      input5D.rank === 5,\n      () => `Error in maxPool3dBackprop: input must be rank 5 but got rank ` +\n          `${input5D.rank}.`);\n  util.assert(\n      output5D.rank === 5,\n      () => `Error in maxPool3dBackprop: output must be rank 5 but got rank ` +\n          `${output5D.rank}.`);\n  if (dilations == null) {\n    dilations = [1, 1, 1];\n  }\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool3dBackprop: Either strides or dilations ' +\n          `must be 1. Got strides ${strides} and dilations '${dilations}'`);\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in maxPool3dBackprop: pad must be an integer when ` +\n            `using, dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  const convInfo = conv_util.computePool3DInfo(\n      input5D.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n  const res = ENGINE.runKernelFunc(\n      backend => backend.maxPool3dBackprop(dy5D, input5D, output5D, convInfo),\n      {dy5D, input5D});\n\n  if (reshapedTo5D) {\n    return res.as4D(res.shape[1], res.shape[2], res.shape[3], res.shape[4]) as\n        T;\n  }\n\n  return res as T;\n}\n\nexport const maxPool = op({maxPool_});\nexport const avgPool = op({avgPool_});\nexport const pool = op({pool_});\nexport const maxPool3d = op({maxPool3d_});\nexport const avgPool3d = op({avgPool3d_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {Rank, TensorLike} from '../types';\nimport * as util from '../util';\nimport {op} from './operation';\nimport * as slice_util from './slice_util';\n\n/**\n * Extracts a 1D slice from 1D array starting at coordinates `begin` and is\n * of length `size`. See `slice` for details.\n */\nfunction slice1d_(\n    x: Tensor1D|TensorLike, begin: number, size: number): Tensor1D {\n  const $x = convertToTensor(x, 'x', 'slice1d');\n  util.assert(\n      $x.rank === 1,\n      () =>\n          `slice1d expects a rank-1 tensor, but got a rank-${$x.rank} tensor`);\n  return slice($x, [begin], [size]);\n}\n\n/**\n * Extracts a 2D slice from a 2D array starting at coordinates `begin` and\n * is of size `size`. See `slice` for details.\n */\nfunction slice2d_(\n    x: Tensor2D|TensorLike, begin: [number, number],\n    size: [number, number]): Tensor2D {\n  const $x = convertToTensor(x, 'x', 'slice2d');\n  util.assert(\n      $x.rank === 2,\n      () =>\n          `slice2d expects a rank-2 tensor, but got a rank-${$x.rank} tensor`);\n  return slice($x, begin, size);\n}\n\n/**\n * Extracts a 3D slice from a 3D array starting at coordinates `begin` and\n * is of size `size`. See `slice` for details.\n */\nfunction slice3d_(\n    x: Tensor3D|TensorLike, begin: [number, number, number],\n    size: [number, number, number]): Tensor3D {\n  const $x = convertToTensor(x, 'x', 'slice3d');\n  util.assert(\n      $x.rank === 3,\n      () =>\n          `slice3d expects a rank-3 tensor, but got a rank-${$x.rank} tensor`);\n  return slice($x, begin, size);\n}\n\n/**\n * Extracts a 4D slice from a 4D array starting at coordinates `begin` and\n * is of size `size`. See `slice` for details.\n */\nfunction slice4d_(\n    x: Tensor4D|TensorLike, begin: [number, number, number, number],\n    size: [number, number, number, number]): Tensor4D {\n  const $x = convertToTensor(x, 'x', 'slice4d');\n  util.assert(\n      $x.rank === 4,\n      () =>\n          `slice4d expects a rank-4 tensor, but got a rank-${$x.rank} tensor`);\n  return slice($x, begin, size);\n}\n\n/**\n * Extracts a slice from a `tf.Tensor` starting at coordinates `begin`\n * and is of size `size`.\n *\n * Also available are stricter rank-specific methods with the same signature\n * as this method that assert that `x` is of the given rank:\n *   - `tf.slice1d`\n *   - `tf.slice2d`\n *   - `tf.slice3d`\n *   - `tf.slice4d`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.slice([1], [2]).print();\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * x.slice([1, 0], [1, 2]).print();\n * ```\n * @param x The input `tf.Tensor` to slice from.\n * @param begin The coordinates to start the slice from. The length can be\n *     less than the rank of x - the rest of the axes will have implicit 0 as\n *     start. Can also be a single number, in which case it specifies the\n *     first axis.\n * @param size The size of the slice. The length can be less than the rank of\n *     x - the rest of the axes will have implicit -1. A value of -1 requests\n *     the rest of the dimensions in the axis. Can also be a single number,\n *     in which case it specifies the size of the first axis.\n */\n/** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */\nfunction slice_<R extends Rank, T extends Tensor<R>>(\n    x: T|TensorLike, begin: number|number[], size?: number|number[]): T {\n  const $x = convertToTensor(x, 'x', 'slice');\n\n  if ($x.rank === 0) {\n    throw new Error('Slicing scalar is not possible');\n  }\n  // The following logic allows for more ergonomic calls.\n  let begin_: number[];\n  if (typeof begin === 'number') {\n    begin_ = [begin, ...new Array($x.rank - 1).fill(0)];\n  } else if (begin.length < $x.rank) {\n    begin_ = begin.concat(new Array($x.rank - begin.length).fill(0));\n  } else {\n    begin_ = begin.slice();\n  }\n  begin_.forEach(d => {\n    util.assert(\n        d !== -1, () => 'slice() does not support negative begin indexing.');\n  });\n  let size_: number[];\n  if (size == null) {\n    size_ = new Array($x.rank).fill(-1);\n  } else if (typeof size === 'number') {\n    size_ = [size, ...new Array($x.rank - 1).fill(-1)];\n  } else if (size.length < $x.rank) {\n    size_ = size.concat(new Array($x.rank - size.length).fill(-1));\n  } else {\n    size_ = size;\n  }\n  size_ = size_.map((d, i) => {\n    if (d >= 0) {\n      return d;\n    } else {\n      util.assert(\n          d === -1,\n          () => `Negative size values should be exactly -1 but got ` +\n              `${d} for the slice() size at index ${i}.`);\n      return $x.shape[i] - begin_[i];\n    }\n  });\n  slice_util.assertParamsValid($x, begin_, size_);\n  const inputShape = $x.shape;\n  const grad = (dy: T) => {\n    // Create an Nx2 padding where the first column represents how many\n    // zeros are prepended (at start) for each dimension, and the second\n    // column indicates how many zeros are appended (at end).\n\n    // The number of zeros to append is the shape of the input\n    // elementwise-subtracted by both the begin vector and sizes vector.\n    const paddings: Array<[number, number]> = [];\n    for (let i = 0; i < dy.rank; i++) {\n      paddings.push([begin_[i], inputShape[i] - begin_[i] - size_[i]]);\n    }\n    return {x: () => dy.pad(paddings)};\n  };\n  const attrs = {begin: begin_, size: size_};\n  return ENGINE.runKernelFunc(\n      backend => backend.slice($x, begin_, size_), {x: $x}, grad, 'Slice',\n      attrs);\n}\n\nexport const slice = op({slice_});\nexport const slice1d = op({slice1d_});\nexport const slice2d = op({slice2d_});\nexport const slice3d = op({slice3d_});\nexport const slice4d = op({slice4d_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {customGrad} from '../gradients';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport * as axis_util from './axis_util';\nimport {op} from './operation';\nimport {ones, scalar, zerosLike} from './tensor_ops';\n\n/**\n * Computes the log(sum(exp(elements across the reduction dimensions)).\n *\n * Reduces the input along the dimensions given in `axis`. Unless `keepDims`\n * is true, the rank of the array is reduced by 1 for each entry in `axis`.\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\n * If `axis` has no entries, all dimensions are reduced, and an array with a\n * single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.logSumExp().print();  // or tf.logSumExp(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.logSumExp(axis).print();  // or tf.logSumExp(a, axis)\n * ```\n * @param x The input tensor.\n * @param axis The dimension(s) to reduce. If null (the default),\n *     reduces all dimensions.\n * @param keepDims If true, retains reduced dimensions with length\n *     of 1. Defaults to false.\n */\n/** @doc {heading: 'Operations', subheading: 'Reduction'} */\nfunction logSumExp_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  const $x = convertToTensor(x, 'x', 'logSumExp');\n\n  const axes = util.parseAxisParam(axis, $x.shape);\n  const xMax = $x.max(axes, true /* keepDims */);\n  const a = $x.sub(xMax);\n  const b = a.exp();\n  const c = b.sum(axes);\n  const d = c.log();\n  const res = xMax.reshape(d.shape).add(d);\n\n  if (keepDims) {\n    const newShape = axis_util.expandShapeToKeepDim(res.shape, axes);\n    return res.reshape(newShape) as T;\n  }\n  return res as T;\n}\n\n/**\n * Computes the sum of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If axes has no entries, all dimensions are reduced, and a\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.sum().print();  // or tf.sum(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.sum(axis).print();  // or tf.sum(x, axis)\n * ```\n *\n * @param x The input tensor to compute the sum over. If the dtype is `bool`\n *   it will be converted to `int32` and the output dtype will be `int32`.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n */\n/** @doc {heading: 'Operations', subheading: 'Reduction'} */\nfunction sum_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  let $x = convertToTensor(x, 'x', 'sum');\n\n  if ($x.dtype === 'bool') {\n    $x = $x.toInt();\n  }\n  const axes = util.parseAxisParam(axis, $x.shape);\n\n  // Use a custom gradient to bypass 2 gradient backprops since sum is used\n  // extremely often.\n  const customOp = customGrad((x: Tensor) => {\n    const permutation = axis_util.getAxesPermutation(axes, x.rank);\n    let reductionAxes = axes;\n    let permutedX = x;\n    if (permutation != null) {\n      permutedX = x.transpose(permutation);\n      reductionAxes = axis_util.getInnerMostAxes(reductionAxes.length, x.rank);\n    }\n\n    const gradFunc = (dy: Tensor) => {\n      const expandedDyShape = x.shape.slice();\n      axes.forEach(axis => {\n        expandedDyShape[axis] = 1;\n      });\n      const expandedDy = dy.reshape(expandedDyShape);\n      const derX = expandedDy.mul(ones(x.shape, 'float32'));\n      return derX;\n    };\n\n    const gradInputs = (dy: Tensor) => {\n      return {x: () => gradFunc(dy)};\n    };\n\n    const attrs = {axes: reductionAxes};\n    let value = ENGINE.runKernelFunc(\n        backend => backend.sum(permutedX, reductionAxes), {x: permutedX},\n        gradInputs, 'Sum', attrs);\n\n    if (keepDims) {\n      const newShape = axis_util.expandShapeToKeepDim(value.shape, axes);\n      value = value.reshape(newShape);\n    }\n\n    return {value, gradFunc};\n  });\n\n  return customOp($x) as T;\n}\n\n/**\n * Computes the product of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If `axes` has no entries, all dimensions are reduced, and a\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.prod().print();  // or tf.prod(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.prod(axis).print();  // or tf.prod(x, axis)\n * ```\n *\n * @param x The input tensor to compute the product over. If the dtype is `bool`\n *   it will be converted to `int32` and the output dtype will be `int32`.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n */\n/** @doc {heading: 'Operations', subheading: 'Reduction'} */\nfunction prod_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  let $x = convertToTensor(x, 'x', 'prod');\n\n  if ($x.dtype === 'bool') {\n    $x = $x.toInt();\n  }\n  const axes = util.parseAxisParam(axis, $x.shape);\n\n  const permutation = axis_util.getAxesPermutation(axes, $x.rank);\n  let reductionAxes = axes;\n  let permutedX = $x;\n  if (permutation != null) {\n    permutedX = $x.transpose(permutation);\n    reductionAxes = axis_util.getInnerMostAxes(reductionAxes.length, $x.rank);\n  }\n  let value = ENGINE.runKernelFunc(\n      backend => backend.prod(permutedX, reductionAxes), {permutedX});\n  if (keepDims) {\n    const newShape = axis_util.expandShapeToKeepDim(value.shape, axes);\n    value = value.reshape(newShape);\n  }\n\n  return value as T;\n}\n/**\n * Computes the mean of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces `x` along the dimensions given in `axis`. Unless `keepDims` is\n * true, the rank of the `tf.Tensor` is reduced by 1 for each entry in `axis`.\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\n * If `axis` has no entries, all dimensions are reduced, and a `tf.Tensor` with\n * a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.mean().print();  // or tf.mean(a)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.mean(axis).print();  // or tf.mean(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n */\n/** @doc {heading: 'Operations', subheading: 'Reduction'} */\nfunction mean_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  const $x = convertToTensor(x, 'x', 'mean');\n\n  const axes = util.parseAxisParam(axis, $x.shape);\n  const shapes = axis_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceShape = shapes[1];\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  // Use a custom gradient to bypass 2 gradient backprops since mean is used\n  // extremely often.\n  const customOp = customGrad((x: Tensor) => {\n    const reduceSizeScalar = scalar(reduceSize);\n    // Cast if needed.\n    const xReduce =\n        reduceSizeScalar.dtype === x.dtype ? x : x.cast(reduceSizeScalar.dtype);\n    const res = xReduce.div(reduceSizeScalar);\n    const value = res.sum(axis, keepDims);\n\n    const gradFunc = (dy: Tensor) => {\n      const expandedDyShape = x.shape.slice();\n      axes.forEach(axis => {\n        expandedDyShape[axis] = 1;\n      });\n      const expandedDy = dy.reshape(expandedDyShape);\n      const derX = expandedDy.mul(ones(x.shape, 'float32')).div(reduceSize);\n      return derX;\n    };\n    return {value, gradFunc};\n  });\n\n  return customOp($x) as T;\n}\n\n/**\n * Gradient helper function for the min and max operations.\n */\nfunction gradForMinAndMax<T extends Tensor>(\n    dy: T, y: T, xOrig: Tensor, origAxes: number[], permutedAxes: number[]) {\n  if (y.rank < xOrig.rank) {\n    y = y.reshape(axis_util.expandShapeToKeepDim(y.shape, origAxes)) as T;\n  }\n  if (dy.rank < xOrig.rank) {\n    dy = dy.reshape(axis_util.expandShapeToKeepDim(dy.shape, origAxes)) as T;\n  }\n  return {\n    x: () => {\n      const dx = dy.mul(xOrig.equal(y).cast(dy.dtype));\n      return permutedAxes == null ? dx : dx.transpose(permutedAxes);\n    }\n  };\n}\n\n/**\n * Computes the minimum value from the input.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the array is reduced by 1 for each entry in `axes`.\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\n * If `axes` has no entries, all dimensions are reduced, and an array with a\n * single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.min().print();  // or tf.min(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.min(axis).print();  // or tf.min(x, axis)\n * ```\n *\n * @param x The input Tensor.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n */\n/** @doc {heading: 'Operations', subheading: 'Reduction'} */\nfunction min_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  let $x = convertToTensor(x, 'x', 'min');\n  const xOrig = $x;\n\n  const origAxes = util.parseAxisParam(axis, $x.shape);\n  let axes = origAxes;\n  const permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);\n  if (permutedAxes != null) {\n    $x = $x.transpose(permutedAxes);\n    axes = axis_util.getInnerMostAxes(axes.length, $x.rank);\n  }\n\n  const grad = (dy: T, saved: Tensor[]) =>\n      gradForMinAndMax(dy, saved[1], saved[0], origAxes, permutedAxes);\n\n  const inputsToSave = [$x];\n  const outputsToSave: boolean[] = [true];\n  let res = ENGINE.runKernelFunc((backend, save) => {\n    const y = backend.min($x, axes);\n    save([xOrig, y]);\n    return y as T;\n  }, {x: $x}, grad, 'Min', {axes}, inputsToSave, outputsToSave);\n  if (keepDims) {\n    const newShape = axis_util.expandShapeToKeepDim(res.shape, origAxes);\n    res = res.reshape(newShape) as T;\n  }\n  return res;\n}\n\n/**\n * Computes the maximum of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If `axes` has no entries, all dimensions are reduced, and an\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.max().print();  // or tf.max(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.max(axis).print();  // or tf.max(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n */\n/** @doc {heading: 'Operations', subheading: 'Reduction'} */\nfunction max_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  let $x = convertToTensor(x, 'x', 'max');\n  const xOrig = $x;\n\n  const origAxes = util.parseAxisParam(axis, $x.shape);\n  let axes = origAxes;\n  const permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);\n  if (permutedAxes != null) {\n    $x = $x.transpose(permutedAxes);\n    axes = axis_util.getInnerMostAxes(axes.length, $x.rank);\n  }\n\n  const grad = (dy: T, saved: Tensor[]) =>\n      gradForMinAndMax(dy, saved[1], saved[0], origAxes, permutedAxes);\n\n  const inputsToSave = [$x];\n  const outputsToSave: boolean[] = [true];\n  let res = ENGINE.runKernelFunc((backend, save) => {\n    const y = backend.max($x, axes);\n    save([xOrig, y]);\n    return y;\n  }, {x: $x}, grad, 'Max', {axes}, inputsToSave, outputsToSave);\n  if (keepDims) {\n    const newShape = axis_util.expandShapeToKeepDim(res.shape, origAxes);\n    res = res.reshape(newShape) as T;\n  }\n  return res as T;\n}\n\n/**\n * Returns the indices of the minimum values along an `axis`.\n *\n * The result has the same shape as `input` with the dimension along `axis`\n * removed.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.argMin().print();  // or tf.argMin(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);\n *\n * const axis = 1;\n * x.argMin(axis).print();  // or tf.argMin(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).\n *\n */\n/** @doc {heading: 'Operations', subheading: 'Reduction'} */\nfunction argMin_<T extends Tensor>(x: Tensor|TensorLike, axis = 0): T {\n  let $x = convertToTensor(x, 'x', 'argMin');\n\n  if (axis == null) {\n    axis = 0;\n  }\n  let axes = util.parseAxisParam(axis, $x.shape);\n  const permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);\n  if (permutedAxes != null) {\n    $x = $x.transpose(permutedAxes);\n    axes = axis_util.getInnerMostAxes(axes.length, $x.rank);\n  }\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {$x: () => zerosLike($x)};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.argMin($x, axes[0]);\n    save([$x]);\n    return res;\n  }, {$x}, grad) as T;\n}\n\n/**\n * Returns the indices of the maximum values along an `axis`.\n *\n * The result has the same shape as `input` with the dimension along `axis`\n * removed.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.argMax().print();  // or tf.argMax(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);\n *\n * const axis = 1;\n * x.argMax(axis).print();  // or tf.argMax(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).\n */\n/** @doc {heading: 'Operations', subheading: 'Reduction'} */\nfunction argMax_<T extends Tensor>(x: Tensor|TensorLike, axis = 0): T {\n  let $x = convertToTensor(x, 'x', 'argMax');\n\n  if (axis == null) {\n    axis = 0;\n  }\n  let axes = util.parseAxisParam(axis, $x.shape);\n  const permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);\n  if (permutedAxes != null) {\n    $x = $x.transpose(permutedAxes);\n    axes = axis_util.getInnerMostAxes(axes.length, $x.rank);\n  }\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {x: () => zerosLike($x)};\n  };\n  const attrs = {axis: axes[0]};\n  const inputsToSave = [$x];\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.argMax($x, axes[0]);\n    save([$x]);\n    return res;\n  }, {x: $x}, grad, 'ArgMax', attrs, inputsToSave) as T;\n}\n\n/**\n * Computes the logical and of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If `axes` has no entries, all dimensions are reduced, and an\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 1, 1], 'bool');\n *\n * x.all().print();  // or tf.all(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');\n *\n * const axis = 1;\n * x.all(axis).print();  // or tf.all(x, axis)\n * ```\n *\n * @param x The input tensor. Must be of dtype bool.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n */\n/** @doc {heading: 'Operations', subheading: 'Reduction'} */\nfunction all_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  let $x = convertToTensor(x, 'x', 'all', 'bool');\n\n  const origAxes = util.parseAxisParam(axis, $x.shape);\n  let axes = origAxes;\n  const permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);\n  if (permutedAxes != null) {\n    $x = $x.transpose(permutedAxes);\n    axes = axis_util.getInnerMostAxes(axes.length, $x.rank);\n  }\n  const res = ENGINE.runKernelFunc(backend => backend.all($x, axes), {$x});\n  if (keepDims) {\n    const newShape = axis_util.expandShapeToKeepDim(res.shape, origAxes);\n    return res.reshape(newShape) as T;\n  }\n  return res as T;\n}\n\n/**\n * Computes the logical or of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If `axes` has no entries, all dimensions are reduced, and an\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 1, 1], 'bool');\n *\n * x.any().print();  // or tf.any(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');\n *\n * const axis = 1;\n * x.any(axis).print();  // or tf.any(x, axis)\n * ```\n *\n * @param x The input tensor. Must be of dtype bool.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n */\n/** @doc {heading: 'Operations', subheading: 'Reduction'} */\nfunction any_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  let $x = convertToTensor(x, 'x', 'any', 'bool');\n\n  const origAxes = util.parseAxisParam(axis, $x.shape);\n  let axes = origAxes;\n  const permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);\n  if (permutedAxes != null) {\n    $x = $x.transpose(permutedAxes);\n    axes = axis_util.getInnerMostAxes(axes.length, $x.rank);\n  }\n  const res = ENGINE.runKernelFunc(backend => backend.any($x, axes), {$x});\n  if (keepDims) {\n    const newShape = axis_util.expandShapeToKeepDim(res.shape, origAxes);\n    return res.reshape(newShape) as T;\n  }\n  return res as T;\n}\n\n/**\n * Calculates the mean and variance of `x`. The mean and variance are\n * calculated by aggregating the contents of `x` across `axes`. If `x` is\n * 1-D and `axes = [0]` this is just the mean and variance of a vector.\n *\n * @param x The input tensor.\n * @param axis The dimension(s) along with to compute mean and\n *     variance. By default it reduces all dimensions.\n * @param keepDims If true, the moments have the same dimensionality as the\n *     input.\n * @return An object with two keys: `mean` and `variance`.\n */\n/** @doc {heading: 'Operations', subheading: 'Normalization'} */\nfunction moments_(\n    x: Tensor|TensorLike, axis: number|number[] = null,\n    keepDims = false): {mean: Tensor, variance: Tensor} {\n  x = convertToTensor(x, 'x', 'moments');\n  const axes = util.parseAxisParam(axis, x.shape);\n  const mean = x.mean(axes, keepDims);\n  let keepDimsShape = mean.shape;\n  if (!keepDims) {\n    keepDimsShape = axis_util.expandShapeToKeepDim(mean.shape, axes);\n  }\n  const devSquared = x.toFloat().sub(mean.reshape(keepDimsShape)).square();\n  const variance = devSquared.mean(axes, keepDims);\n  return {mean, variance};\n}\n\nexport const all = op({all_});\n// tslint:disable-next-line:variable-name\nexport const any = op({any_});\nexport const argMax = op({argMax_});\nexport const argMin = op({argMin_});\nexport const logSumExp = op({logSumExp_});\nexport const max = op({max_});\nexport const mean = op({mean_});\nexport const min = op({min_});\nexport const moments = op({moments_});\nexport const sum = op({sum_});\nexport const prod = op({prod_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {maximum} from './binary_ops';\nimport {getReductionAxes} from './broadcast_util';\nimport {where} from './logical_ops';\nimport {op} from './operation';\nimport {SELU_SCALE, SELU_SCALEALPHA} from './selu_util';\nimport {scalar, zerosLike} from './tensor_ops';\n\n/**\n * Computes rectified linear element-wise: `max(x, 0)`.\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.relu().print();  // or tf.relu(x)\n * ```\n * @param x The input tensor. If the dtype is `bool`, the output dtype will be\n *     `int32'.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction relu_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'relu');\n\n  if ($x.dtype === 'bool') {\n    return $x.toInt();\n  }\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {x: () => dy.mulStrict($x.step().toFloat() as T)};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.relu($x);\n    save([$x]);\n    return res;\n  }, {x: $x}, grad, 'Relu');\n}\n\n/**\n * Computes rectified linear 6 element-wise: `min(max(x, 0), 6)`.\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 8]);\n *\n * x.relu6().print();  // or tf.relu6(x)\n * ```\n * @param x The input tensor. If the dtype is `bool`, the output dtype will be\n *     `int32'.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction relu6_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'relu6');\n\n  if ($x.dtype === 'bool') {\n    return $x.toInt();\n  }\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    const mask = $x.lessEqual(6).mul($x.step());\n    return {x: () => dy.mulStrict(mask.toFloat() as T)};\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.relu6($x);\n    save([$x]);\n    return res;\n  }, {x: $x}, grad, 'Relu6');\n}\n\n/**\n * Computes exponential linear element-wise: `x > 0 ? e ^ x - 1 : 0`.\n *\n * ```js\n * const x = tf.tensor1d([-1, 1, -3, 2]);\n *\n * x.elu().print();  // or tf.elu(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction elu_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'elu');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [y] = saved;\n    return {\n      $x: () =>\n          ENGINE.runKernelFunc(backend => backend.eluDer(dy, y), {dy, y}) as T\n    };\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const y = backend.elu($x);\n    save([y]);\n    return y;\n  }, {$x}, grad);\n}\n\n/**\n * Computes scaled exponential linear element-wise.\n *\n * `x < 0 ? scale * alpha * (exp(x) - 1) : x`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.selu().print();  // or tf.selu(x)\n * ```\n * @param x The input tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction selu_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'selu');\n\n  const grad = (dy: T, saved: Tensor[]) => {\n    const [$x] = saved;\n    return {\n      $x: () => {\n        const mask = $x.greater(scalar(0));\n\n        const scaleAlpha = scalar(SELU_SCALEALPHA);\n        const scale = scalar(SELU_SCALE);\n\n        const greaterThanZeroDer = dy.mul(scale);\n        const lessEqualZeroDer = dy.mul(scaleAlpha).mul($x.toFloat().exp());\n\n        return where(mask, greaterThanZeroDer, lessEqualZeroDer) as T;\n      }\n    };\n  };\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.selu($x);\n    save([$x]);\n    return res;\n  }, {$x}, grad);\n}\n\n/**\n * Computes leaky rectified linear element-wise.\n *\n * See\n * [http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf](\n *     http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf)\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.leakyRelu(0.1).print();  // or tf.leakyRelu(x, 0.1)\n * ```\n * @param x The input tensor.\n * @param alpha The scaling factor for negative values, defaults to 0.2.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction leakyRelu_<T extends Tensor>(x: T|TensorLike, alpha = 0.2): T {\n  const $x = convertToTensor(x, 'x', 'leakyRelu');\n  return maximum(scalar(alpha).mul($x), $x);\n}\n\n/**\n * Computes leaky rectified linear element-wise with parametric alphas.\n *\n * `x < 0 ? alpha * x : f(x) = x`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n * const alpha = tf.scalar(0.1);\n *\n * x.prelu(alpha).print();  // or tf.prelu(x, alpha)\n * ```\n * @param x The input tensor.\n * @param alpha Scaling factor for negative values.\n */\n/** @doc {heading: 'Operations', subheading: 'Basic math'} */\nfunction prelu_<T extends Tensor>(x: T|TensorLike, alpha: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'prelu');\n  const $alpha = convertToTensor(alpha, 'alpha', 'prelu');\n\n  const grad = (dy: Tensor, saved: Tensor[]) => {\n    const [$x, $alpha] = saved;\n    const mask = $x.greater(0);\n\n    return {\n      x: () => where(mask, dy, dy.mul($alpha)) as T,\n      alpha: () => {\n        let res = where(mask, zerosLike(dy), dy.mul($x));\n        const reduceAxes = getReductionAxes($alpha.shape, dy.shape);\n        if (reduceAxes.length > 0) {\n          res = res.sum(reduceAxes);\n        }\n        return res.reshape($alpha.shape) as T;\n      }\n    };\n  };\n\n  return ENGINE.runKernelFunc((backend, save) => {\n    const res = backend.prelu($x, $alpha);\n    save([$x, $alpha]);\n    return res;\n  }, {x: $x, alpha: $alpha}, grad, 'Prelu') as T;\n}\n\nexport const elu = op({elu_});\nexport const leakyRelu = op({leakyRelu_});\nexport const prelu = op({prelu_});\nexport const relu = op({relu_});\nexport const relu6 = op({relu6_});\nexport const selu = op({selu_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport * as axis_util from './axis_util';\nimport {op} from './operation';\n\n/**\n * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.\n *\n * The returned `tf.Tensor`'s dimension `i` will correspond to the input\n * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,\n * where `n` is the rank of the input `tf.Tensor`. Hence by default, this\n * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);\n *\n * a.transpose().print();  // or tf.transpose(a)\n * ```\n *\n * @param x The tensor to transpose.\n * @param perm The permutation of the dimensions of a.\n */\n/** @doc {heading: 'Operations', subheading: 'Matrices'} */\nfunction transpose_<T extends Tensor>(x: T|TensorLike, perm?: number[]): T {\n  const $x = convertToTensor(x, 'x', 'transpose');\n\n  if (perm == null) {\n    perm = $x.shape.map((s, i) => i).reverse();\n  }\n  util.assert(\n      $x.rank === perm.length,\n      () => `Error in transpose: rank of input ${$x.rank} ` +\n          `must match length of perm ${perm}.`);\n  perm.forEach(axis => {\n    util.assert(\n        axis >= 0 && axis < $x.rank,\n        () => `All entries in 'perm' must be between 0 and ${$x.rank - 1}` +\n            ` but got ${perm}`);\n  });\n\n  if ($x.rank <= 1) {\n    return $x.clone();\n  }\n\n  const der = (dy: T) => {\n    const undoPerm = axis_util.getUndoAxesPermutation(perm);\n    return {x: () => dy.transpose(undoPerm)};\n  };\n  const attrs = {perm};\n  return ENGINE.runKernelFunc(\n      backend => backend.transpose($x, perm), {x: $x}, der, 'Transpose', attrs);\n}\n\nexport const transpose = op({transpose_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor, Tensor3D, Tensor4D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport {op} from './operation';\n\n/**\n * Normalizes the activation of a local neighborhood across or within\n * channels.\n *\n * @param x The input tensor. The 4-D input tensor is treated as a 3-D array\n *     of 1D vectors (along the last dimension), and each vector is\n *     normalized independently.\n * @param depthRadius The number of adjacent channels in the 1D normalization\n *     window.\n * @param bias A constant bias term for the basis.\n * @param alpha A scale factor, usually positive.\n * @param beta An exponent.\n */\n/** @doc {heading: 'Operations', subheading: 'Normalization'} */\nfunction localResponseNormalization_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, depthRadius = 5, bias = 1, alpha = 1, beta = 0.5): T {\n  const $x = convertToTensor(x, 'x', 'localResponseNormalization');\n  util.assert(\n      $x.rank === 4 || $x.rank === 3,\n      () => `Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${$x.rank}.`);\n  util.assert(\n      util.isInt(depthRadius),\n      () => `Error in localResponseNormalization: depthRadius must be an ` +\n          `integer but got depthRadius ${depthRadius}.`);\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);\n  }\n  const backward = (dy: Tensor4D, saved: Tensor[]) => {\n    const [x4D, y] = saved;\n    return {\n      x4D: () => ENGINE.runKernelFunc(\n          backend => backend.LRNGrad(\n              dy, x4D as Tensor4D, y as Tensor4D, depthRadius, bias, alpha,\n              beta),\n          {})\n    };\n  };\n  const res = ENGINE.runKernelFunc((backend, save) => {\n    const y = backend.localResponseNormalization4D(\n        x4D, depthRadius, bias, alpha, beta);\n    save([x4D, y]);\n    return y;\n  }, {x4D}, backward);\n  if (reshapedTo4D) {\n    return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n  } else {\n    return res as T;\n  }\n}\n\nexport const localResponseNormalization = op({localResponseNormalization_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {parseAxisParam} from '../util';\n\nimport * as axis_util from './axis_util';\nimport {op} from './operation';\nimport {scalar} from './tensor_ops';\n\n/**\n * Computes the norm of scalar, vectors, and matrices.\n * This function can compute several different vector norms (the 1-norm, the\n * Euclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)\n * and matrix norms (Frobenius, 1-norm, and inf-norm).\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.norm().print();  // or tf.norm(x)\n * ```\n *\n * @param x The input array.\n * @param ord Optional. Order of the norm. Supported norm types are\n * following:\n *\n *  | ord        | norm for matrices         | norm for vectors\n *  |------------|---------------------------|---------------------\n *  |'euclidean' |Frobenius norm             |2-norm\n *  |'fro'       |Frobenius norm\t           |\n *  |Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))\n *  |-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))\n *  |1           |max(sum(abs(x), axis=0))   |sum(abs(x))\n *  |2           |                           |sum(abs(x)^2)^1/2*\n *\n * @param axis Optional. If axis is null (the default), the input is\n * considered a vector and a single vector norm is computed over the entire\n * set of values in the Tensor, i.e. norm(x, ord) is equivalent\n * to norm(x.reshape([-1]), ord). If axis is a integer, the input\n * is considered a batch of vectors, and axis determines the axis in x\n * over which to compute vector norms. If axis is a 2-tuple of integer it is\n * considered a batch of matrices and axis determines the axes in NDArray\n * over which to compute a matrix norm.\n * @param keepDims Optional. If true, the norm have the same dimensionality\n * as the input.\n */\n/** @doc {heading: 'Operations', subheading: 'Matrices'} */\nfunction norm_(\n    x: Tensor|TensorLike, ord: number|'euclidean'|'fro' = 'euclidean',\n    axis: number|number[] = null, keepDims = false): Tensor {\n  x = convertToTensor(x, 'x', 'norm');\n\n  const norm = normImpl(x, ord, axis);\n  let keepDimsShape = norm.shape;\n  if (keepDims) {\n    const axes = parseAxisParam(axis, x.shape);\n    keepDimsShape = axis_util.expandShapeToKeepDim(norm.shape, axes);\n  }\n  return norm.reshape(keepDimsShape);\n}\n\nfunction normImpl(\n    x: Tensor, p: number|string, axis: number|number[] = null): Tensor {\n  if (x.rank === 0) {\n    return x.abs();\n  }\n\n  // consider vector when no axis is specified\n  if (x.rank !== 1 && axis === null) {\n    return normImpl(x.reshape([-1]), p, axis);\n  }\n\n  // vector\n  if (x.rank === 1 || typeof axis === 'number' ||\n      Array.isArray(axis) && axis.length === 1) {\n    if (p === 1) {\n      return x.abs().sum(axis);\n    }\n    if (p === Infinity) {\n      return x.abs().max(axis);\n    }\n    if (p === -Infinity) {\n      return x.abs().min(axis);\n    }\n    if (p === 'euclidean' || p === 2) {\n      // norm(x, 2) = sum(abs(xi) ^ 2) ^ 1/2\n      return x.abs().pow(scalar(2, 'int32')).sum(axis).sqrt();\n    }\n\n    throw new Error(`Error in norm: invalid ord value: ${p}`);\n  }\n\n  // matrix (assumption axis[0] < axis[1])\n  if (Array.isArray(axis) && axis.length === 2) {\n    if (p === 1) {\n      return x.abs().sum(axis[0]).max(axis[1] - 1);\n    }\n    if (p === Infinity) {\n      return x.abs().sum(axis[1]).max(axis[0]);\n    }\n    if (p === -Infinity) {\n      return x.abs().sum(axis[1]).min(axis[0]);\n    }\n    if (p === 'fro' || p === 'euclidean') {\n      // norm(x) = sqrt(sum(pow(x, 2)))\n      return x.square().sum(axis).sqrt();\n    }\n\n    throw new Error(`Error in norm: invalid ord value: ${p}`);\n  }\n\n  throw new Error(`Error in norm: invalid axis: ${axis}`);\n}\n\nexport const norm = op({norm_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor1D, Tensor2D} from '../tensor';\nimport {convertToTensor, convertToTensorArray} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * @docalias (data: Tensor2D, c: Tensor2D, h: Tensor2D): [Tensor2D, Tensor2D]\n */\nexport type LSTMCellFunc = {\n  (data: Tensor2D, c: Tensor2D, h: Tensor2D): [Tensor2D, Tensor2D];\n};\n\n/**\n * Computes the next states and outputs of a stack of LSTMCells.\n *\n * Each cell output is used as input to the next cell.\n *\n * Returns `[cellState, cellOutput]`.\n *\n * Derived from tf.contrib.rn.MultiRNNCell.\n *\n * @param lstmCells Array of LSTMCell functions.\n * @param data The input to the cell.\n * @param c Array of previous cell states.\n * @param h Array of previous cell outputs.\n */\n/** @doc {heading: 'Operations', subheading: 'RNN'} */\nfunction multiRNNCell_(\n    lstmCells: LSTMCellFunc[], data: Tensor2D|TensorLike,\n    c: Array<Tensor2D|TensorLike>,\n    h: Array<Tensor2D|TensorLike>): [Tensor2D[], Tensor2D[]] {\n  const $data = convertToTensor(data, 'data', 'multiRNNCell');\n  const $c = convertToTensorArray(c, 'c', 'multiRNNCell');\n  const $h = convertToTensorArray(h, 'h', 'multiRNNCell');\n\n  let input = $data;\n  const newStates = [];\n  for (let i = 0; i < lstmCells.length; i++) {\n    const output = lstmCells[i](input, $c[i], $h[i]);\n    newStates.push(output[0]);\n    newStates.push(output[1]);\n    input = output[1];\n  }\n  const newC: Tensor2D[] = [];\n  const newH: Tensor2D[] = [];\n  for (let i = 0; i < newStates.length; i += 2) {\n    newC.push(newStates[i]);\n    newH.push(newStates[i + 1]);\n  }\n  return [newC, newH];\n}\n\n/**\n * Computes the next state and output of a BasicLSTMCell.\n *\n * Returns `[newC, newH]`.\n *\n * Derived from tf.contrib.rnn.BasicLSTMCell.\n *\n * @param forgetBias Forget bias for the cell.\n * @param lstmKernel The weights for the cell.\n * @param lstmBias The bias for the cell.\n * @param data The input to the cell.\n * @param c Previous cell state.\n * @param h Previous cell output.\n */\n/** @doc {heading: 'Operations', subheading: 'RNN'} */\nfunction basicLSTMCell_(\n    forgetBias: Scalar|TensorLike, lstmKernel: Tensor2D|TensorLike,\n    lstmBias: Tensor1D|TensorLike, data: Tensor2D|TensorLike,\n    c: Tensor2D|TensorLike, h: Tensor2D|TensorLike): [Tensor2D, Tensor2D] {\n  const $forgetBias =\n      convertToTensor(forgetBias, 'forgetBias', 'basicLSTMCell');\n  const $lstmKernel =\n      convertToTensor(lstmKernel, 'lstmKernel', 'basicLSTMCell');\n  const $lstmBias = convertToTensor(lstmBias, 'lstmBias', 'basicLSTMCell');\n  const $data = convertToTensor(data, 'data', 'basicLSTMCell');\n  const $c = convertToTensor(c, 'c', 'basicLSTMCell');\n  const $h = convertToTensor(h, 'h', 'basicLSTMCell');\n\n  const combined = $data.concat($h, 1);\n  const weighted = combined.matMul($lstmKernel);\n  const res: Tensor2D = weighted.add($lstmBias);\n\n  // i = input_gate, j = new_input, f = forget_gate, o = output_gate\n  const batchSize = res.shape[0];\n  const sliceCols = res.shape[1] / 4;\n  const sliceSize: [number, number] = [batchSize, sliceCols];\n  const i = res.slice([0, 0], sliceSize);\n  const j = res.slice([0, sliceCols], sliceSize);\n  const f = res.slice([0, sliceCols * 2], sliceSize);\n  const o = res.slice([0, sliceCols * 3], sliceSize);\n\n  const newC = i.sigmoid().mulStrict(j.tanh()).addStrict(\n      $c.mulStrict($forgetBias.add(f).sigmoid() as Tensor2D));\n  const newH = newC.tanh().mulStrict(o.sigmoid());\n  return [newC, newH];\n}\n\nexport const basicLSTMCell = op({basicLSTMCell_});\nexport const multiRNNCell = op({multiRNNCell_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor} from '../tensor';\nimport {assertTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport {pow} from './binary_ops';\nimport {op} from './operation';\nimport {scalar} from './tensor_ops';\n\n/**\n * Compute the moving average of a variable.\n *\n * Without zeroDebias, the moving average operation is defined by:\n *   `v += delta`\n * where\n *   `delta = (1 - decay) * (x - v)`\n *\n * With zeroDebias (default), the `delta` term is scaled to debias the\n * effect of the (assumed) zero-initialization of `v`.\n *   `delta /= (1 - decay ^ step)`\n *\n * For more details on the zero-debiasing algorithm, see:\n *   https://arxiv.org/abs/1412.6980\n *\n * Note that this function is completely stateless and does not keep track of\n * step count. The step count needs to be maintained by the caller and passed\n * in as `step`.\n *\n * @param v The current moving average value.\n * @param x New input value, must have the same shape and dtype as `v`.\n * @param decay The decay factor. Typical values are 0.95 and 0.99.\n * @param step Step count.\n * @param zeroDebias: Whether zeroDebias is to be performed (default: `true`).\n * @returns The new moving average value.\n */\n/** @doc {heading: 'Operations', subheading: 'Moving Average'} */\nfunction movingAverage_<T extends Tensor>(\n    v: T|TensorLike, x: T|TensorLike, decay: number|Scalar,\n    step?: number|Scalar, zeroDebias = true): T {\n  const $v = convertToTensor(v, 'v', 'movingAverage');\n  const $x = convertToTensor(x, 'x', 'movingAverage');\n  const $decay = convertToTensor(decay, 'decay', 'movingAverage');\n\n  assertTypesMatch($v, $x);\n  util.assert(\n      util.arraysEqual($v.shape, $x.shape), () => 'Shape mismatch in v and x');\n\n  const one = scalar(1);\n  const oneMinusDecay = one.sub($decay);\n\n  let update = $x.sub($v).mul(oneMinusDecay);\n  if (zeroDebias) {\n    util.assert(\n        step != null, () => 'When using zeroDebias: true, step is required.');\n    const $step = convertToTensor(step, 'step', 'movingAverage');\n    update = update.div(one.sub(pow($decay, $step)));\n  }\n  return $v.add(update);\n}\n\nexport const movingAverage = op({movingAverage_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\nimport {slice} from './slice';\nimport {computeOutShape, maskToAxes, startForAxis, stopForAxis} from './slice_util';\n\n/**\n * Extracts a strided slice of a tensor.\n *\n * Roughly speaking, this op extracts a slice of size (end-begin)/stride from\n * the given input tensor (x). Starting at the location specified by begin the\n * slice continues by adding stride to the index until all dimensions are not\n * less than end. Note that a stride can be negative, which causes a reverse\n * slice.\n *\n * ```js\n * const t = tf.tensor3d([1, 1, 1 ,2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6],\n *    [3, 2, 3]);\n * t.stridedSlice([1, 0, 0], [2, 1, 3], [1, 1, 1]).print()  // [[[3, 3, 3]]]\n * t.stridedSlice([1, 0, 0], [2, 2, 3], [1, 1, 1]).print()  // [[[3, 3, 3],\n *                                                     // [4, 4, 4]]]\n * t.stridedSlice([1, -1, 0], [2, -3, 3], [1, -1, 1]).print() // [[[4, 4, 4],\n *                                                     // [3, 3, 3]]]\n * ```\n *\n * @param x The tensor to stride slice.\n * @param begin The coordinates to start the slice from.\n * @param end: The coordinates to end the slice at.\n * @param strides: The size of the slice.\n * @param beginMask: If the ith bit of beginMask is set, begin[i] is ignored\n *      and the fullest possible range in that dimension is used instead.\n * @param endMask: If the ith bit of endMask is set, end[i] is ignored\n *      and the fullest possible range in that dimension is used instead.\n * @param shrinkAxisMask: a bitmask where bit i implies that\n * the ith specification should shrink the dimensionality. begin and end must\n * imply a slice of size 1 in the dimension.\n */\n/** @doc {heading: 'Operations', subheading: 'Slicing and Joining'} */\nfunction stridedSlice_(\n    x: Tensor|TensorLike, begin: number[], end: number[], strides?: number[],\n    beginMask = 0, endMask = 0, ellipsisMask = 0, newAxisMask = 0,\n    shrinkAxisMask = 0): Tensor {\n  if (strides == null) {\n    strides = new Array(begin.length);\n  }\n  if (ellipsisMask !== 0) {\n    throw new Error('ellipsis mask is not yet supported');\n  }\n  let $x = convertToTensor(x, 'x', 'stridedSlice');\n\n  // Expand the dims of x based on the newAxisMask.\n  const expandAxes = maskToAxes(newAxisMask);\n  const newShape = $x.shape.slice();\n  expandAxes.forEach(axis => {\n    begin[axis] = 0;\n    end[axis] = 1;\n    newShape.splice(axis, 0, 1);\n  });\n  $x = $x.reshape(newShape);\n\n  // Normalize the start, end and strides.\n  for (let axis = 0; axis < $x.rank; axis++) {\n    begin[axis] = startForAxis(beginMask, begin, strides, $x.shape, axis);\n    end[axis] = stopForAxis(endMask, end, strides, $x.shape, axis);\n    strides[axis] = strides[axis] || 1;\n  }\n\n  const shrinkAxes = maskToAxes(shrinkAxisMask);\n  // Adjust the ends based on the shrink mask.\n  shrinkAxes.forEach(axis => {\n    end[axis] = begin[axis] + 1;\n    strides[axis] = 1;\n  });\n\n  // Figure out the output shape.\n  const size = computeOutShape(begin, end, strides);\n  // Remove the axes based on shrinkMask.\n  const outShape = size.filter((_, axis) => shrinkAxes.indexOf(axis) === -1);\n\n  const nonStrided = strides.every(v => v === 1);\n  if (nonStrided) {\n    return slice($x, begin, size).reshape(outShape);\n  }\n  const res = ENGINE.runKernelFunc(\n      backend => backend.stridedSlice($x, begin, end, strides), {$x});\n  return res.reshape(outShape);\n}\n\nexport const stridedSlice = op({stridedSlice_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {NumericTensor, Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * Finds the values and indices of the `k` largest entries along the last\n * dimension.\n *\n * If the input is a vector (rank=1), finds the k largest entries in the vector\n * and outputs their values and indices as vectors. Thus values[j] is the j-th\n * largest entry in input, and its index is indices[j].\n * For higher rank inputs, computes the top k entries along the last dimension.\n *\n * If two elements are equal, the lower-index element appears first.\n *\n * ```js\n * const a = tf.tensor2d([[1, 5], [4, 3]]);\n * const {values, indices} = tf.topk(a);\n * values.print();\n * indices.print();\n * ```\n * @param x 1-D or higher `tf.Tensor` with last dimension being at least `k`.\n * @param k Number of top elements to look for along the last dimension.\n * @param sorted If true, the resulting `k` elements will be sorted by the\n *     values in descending order.\n */\n/** @doc {heading: 'Operations', subheading: 'Evaluation'} */\nfunction topk_<T extends Tensor>(\n    x: T|TensorLike, k = 1, sorted = true): {values: T, indices: T} {\n  const $x = convertToTensor(x, 'x', 'topk');\n  if ($x.rank === 0) {\n    throw new Error('topk() expects the input to be of rank 1 or higher');\n  }\n  const lastDim = $x.shape[$x.shape.length - 1];\n  if (k > lastDim) {\n    throw new Error(\n        `'k' passed to topk() must be <= the last dimension (${lastDim}) ` +\n        `but got ${k}`);\n  }\n\n  const [values, indices] =\n      ENGINE.runKernelFunc(b => b.topk($x as NumericTensor, k, sorted), {$x});\n  return {values, indices} as {values: T, indices: T};\n}\n\nexport const topk = op({topk_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {Rank, ShapeMap, TensorLike} from '../types';\nimport {op} from './operation';\nimport * as scatter_nd_util from './scatter_nd_util';\n\n/**\n * Creates a new tensor by applying sparse updates to individual\n * values or slices within a zero tensor of the given shape tensor according to\n * indices. This operator is the inverse of the `tf.gatherND` operator which\n * extracts values or slices from a given tensor.\n *\n * ```js\n * const indices = tf.tensor2d([4, 3, 1, 7], [4, 1], 'int32');\n * const updates = tf.tensor1d([9, 10, 11, 12]);\n * const shape = [8];\n * tf.scatterND(indices, updates, shape).print() //[0, 11, 0, 10, 9, 0, 0, 12]\n * ```\n *\n * @param indices The tensor contains the indices into the output tensor.\n * @param updates The tensor contains the value for the indices.\n * @param shape: The shape of the output tensor.\n */\n/** @doc {heading: 'Operations', subheading: 'Slicing and Joining'} */\nfunction scatterND_<R extends Rank>(\n    indices: Tensor|TensorLike, updates: Tensor|TensorLike,\n    shape: ShapeMap[R]): Tensor<R> {\n  const $indices = convertToTensor(indices, 'indices', 'scatterND', 'int32');\n  const $updates = convertToTensor(updates, 'updates', 'scatterND');\n  scatter_nd_util.validateInput($updates, $indices, shape);\n\n  return ENGINE.runKernelFunc(\n      backend => backend.scatterND($indices, $updates, shape),\n      {indices: $indices, updates: $updates}, null /* backward */, 'ScatterNd',\n      {shape});\n}\n\nexport const scatterND = op({scatterND_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {complex, imag, real} from '../ops/complex_ops';\nimport {op} from '../ops/operation';\nimport {Tensor, Tensor2D} from '../tensor';\nimport {assert} from '../util';\nimport {scalar, zeros} from './tensor_ops';\n\n/**\n * Fast Fourier transform.\n *\n * Computes the 1-dimensional discrete Fourier transform over the inner-most\n * dimension of input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([1, 2, 3]);\n * const x = tf.complex(real, imag);\n *\n * x.fft().print();  // tf.spectral.fft(x).print();\n * ```\n * @param input The complex input to compute an fft over.\n */\n/**\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction fft_(input: Tensor): Tensor {\n  assert(\n      input.dtype === 'complex64',\n      () => `The dtype for tf.spectral.fft() must be complex64 ` +\n          `but got ${input.dtype}.`);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = input.size / innerDimensionSize;\n  const input2D = input.as2D(batch, innerDimensionSize);\n\n  const ret = ENGINE.runKernelFunc(backend => backend.fft(input2D), {input});\n\n  return ret.reshape(input.shape);\n}\n\n/**\n * Inverse fast Fourier transform.\n *\n * Computes the inverse 1-dimensional discrete Fourier transform over the\n * inner-most dimension of input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([1, 2, 3]);\n * const x = tf.complex(real, imag);\n *\n * x.ifft().print();  // tf.spectral.ifft(x).print();\n * ```\n * @param input The complex input to compute an ifft over.\n */\n/**\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction ifft_(input: Tensor): Tensor {\n  assert(\n      input.dtype === 'complex64',\n      () => `The dtype for tf.spectral.ifft() must be complex64 ` +\n          `but got ${input.dtype}.`);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = input.size / innerDimensionSize;\n  const input2D = input.as2D(batch, innerDimensionSize);\n\n  const ret = ENGINE.runKernelFunc(backend => backend.ifft(input2D), {input});\n\n  return ret.reshape(input.shape);\n}\n\n/**\n * Real value input fast Fourier transform.\n *\n * Computes the 1-dimensional discrete Fourier transform over the\n * inner-most dimension of the real input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n *\n * real.rfft().print();\n * ```\n * @param input The real value input to compute an rfft over.\n */\n/**\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction rfft_(input: Tensor, fftLength?: number): Tensor {\n  assert(\n      input.dtype === 'float32',\n      () => `The dtype for rfft() must be real value but got ${input.dtype}`);\n\n  let innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = input.size / innerDimensionSize;\n\n  let adjustedInput: Tensor;\n  if (fftLength != null && fftLength < innerDimensionSize) {\n    // Need to crop\n    const begin = input.shape.map(v => 0);\n    const size = input.shape.map(v => v);\n    size[input.shape.length - 1] = fftLength;\n    adjustedInput = input.slice(begin, size);\n    innerDimensionSize = fftLength;\n  } else if (fftLength != null && fftLength > innerDimensionSize) {\n    // Need to pad with zeros\n    const zerosShape = input.shape.map(v => v);\n    zerosShape[input.shape.length - 1] = fftLength - innerDimensionSize;\n    adjustedInput = input.concat(zeros(zerosShape), input.shape.length - 1);\n    innerDimensionSize = fftLength;\n  } else {\n    adjustedInput = input;\n  }\n\n  // Complement the input with zero imaginary numbers.\n  const zerosInput = adjustedInput.zerosLike();\n  const complexInput =\n      complex(adjustedInput, zerosInput).as2D(batch, innerDimensionSize);\n\n  const ret = fft(complexInput);\n\n  // Exclude complex conjugations. These conjugations are put symmetrically.\n  const half = Math.floor(innerDimensionSize / 2) + 1;\n  const realValues = real(ret);\n  const imagValues = imag(ret);\n  const realComplexConjugate = realValues.split(\n      [half, innerDimensionSize - half], realValues.shape.length - 1);\n  const imagComplexConjugate = imagValues.split(\n      [half, innerDimensionSize - half], imagValues.shape.length - 1);\n\n  const outputShape = adjustedInput.shape.slice();\n  outputShape[adjustedInput.shape.length - 1] = half;\n\n  return complex(realComplexConjugate[0], imagComplexConjugate[0])\n      .reshape(outputShape);\n}\n\n/**\n * Inversed real value input fast Fourier transform.\n *\n * Computes the 1-dimensional inversed discrete Fourier transform over the\n * inner-most dimension of the real input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([0, 0, 0]);\n * const x = tf.complex(real, imag);\n *\n * x.irfft().print();\n * ```\n * @param input The real value input to compute an irfft over.\n */\n/**\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction irfft_(input: Tensor): Tensor {\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = input.size / innerDimensionSize;\n\n  if (innerDimensionSize <= 2) {\n    const complexInput = input.as2D(batch, innerDimensionSize);\n    const ret = ifft(complexInput);\n    return real(ret);\n  } else {\n    // The length of unique components of the DFT of a real-valued signal\n    // is 2 * (input_len - 1)\n    const outputShape = [batch, 2 * (innerDimensionSize - 1)];\n    const realInput = real(input).as2D(batch, innerDimensionSize);\n    const imagInput = imag(input).as2D(batch, innerDimensionSize);\n\n    const realConjugate =\n        realInput.slice([0, 1], [batch, innerDimensionSize - 2]).reverse(1);\n    const imagConjugate: Tensor2D =\n        imagInput.slice([0, 1], [batch, innerDimensionSize - 2])\n            .reverse(1)\n            .mul(scalar(-1));\n\n    const r = realInput.concat(realConjugate, 1);\n    const i = imagInput.concat(imagConjugate, 1);\n    const complexInput = complex(r, i).as2D(outputShape[0], outputShape[1]);\n    const ret = ifft(complexInput);\n    return real(ret);\n  }\n}\n\nexport const fft = op({fft_});\nexport const ifft = op({ifft_});\nexport const rfft = op({rfft_});\nexport const irfft = op({irfft_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport * as sparse_to_dense from '../ops/sparse_to_dense_util';\nimport {Scalar, Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {Rank, ScalarLike, ShapeMap, TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * Converts a sparse representation into a dense tensor.\n *\n * Builds an array dense with shape outputShape such that:\n *\n * // If sparseIndices is scalar\n * dense[i] = (i == sparseIndices ? sparseValues : defaultValue)\n *\n * // If sparseIndices is a vector, then for each i\n * dense[sparseIndices[i]] = sparseValues[i]\n *\n * // If sparseIndices is an n by d matrix, then for each i in [0, n)\n * dense[sparseIndices[i][0], ..., sparseIndices[i][d-1]] = sparseValues[i]\n * All other values in dense are set to defaultValue. If sparseValues is a\n * scalar, all sparse indices are set to this single value.\n *\n * If indices are repeated the final value is summed over all values for those\n * indices.\n *\n * ```js\n * const indices = tf.tensor1d([4, 5, 6, 1, 2, 3], 'int32');\n * const values = tf.tensor1d([10, 11, 12, 13, 14, 15], 'float32');\n * const shape = [8];\n * tf.sparseToDense(indices, values, shape).print();\n * ```\n *\n * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.\n * sparseIndices[i] contains the complete index where sparseValues[i] will be\n * placed.\n * @param sparseValues A 0-D or 1-D Tensor. Values\n * corresponding to each row of sparseIndices, or a scalar value to be used for\n * all sparse indices.\n * @param outputShape Shape of the dense output tensor. the type is inferred.\n * @param defaultValue Scalar. Value to set for indices not specified in\n * sparseIndices. Defaults to zero.\n */\n/** @doc {heading: 'Operations', subheading: 'Normalization'} */\nfunction sparseToDense_<R extends Rank>(\n    sparseIndices: Tensor|TensorLike, sparseValues: Tensor|TensorLike,\n    outputShape: ShapeMap[R], defaultValue: Scalar|ScalarLike = 0): Tensor<R> {\n  const $sparseIndices =\n      convertToTensor(sparseIndices, 'sparseIndices', 'sparseToDense', 'int32');\n  const $sparseValues =\n      convertToTensor(sparseValues, 'sparseValues', 'sparseToDense');\n  const $defaultValue = convertToTensor(\n      defaultValue, 'defaultValue', 'sparseToDense', $sparseValues.dtype);\n\n  sparse_to_dense.validateInput(\n      $sparseIndices, $sparseValues, outputShape, $defaultValue);\n\n  return ENGINE.runKernelFunc(\n      backend => backend.sparseToDense(\n          $sparseIndices, $sparseValues, outputShape, $defaultValue),\n      {$sparseIndices, $sparseValues, $defaultValue});\n}\n\nexport const sparseToDense = op({sparseToDense_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '../tensor';\n\n/**\n * Validate sparseToDense inputs.\n *\n * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.\n * sparseIndices[i] contains the complete index where sparseValues[i] will be\n * placed.\n * @param sparseValues A 0-D or 1-D Tensor. Values\n * corresponding to each row of sparseIndices, or a scalar value to be used for\n * all sparse indices.\n * @param outputShape number[]. Shape of the dense output tensor.\n * @param validateIndices boolean. indice validation is not supported, error\n * will be thrown if it is set.\n */\nexport function validateInput(\n    sparseIndices: Tensor, sparseValues: Tensor, outputShape: number[],\n    defaultValues: Tensor) {\n  if (sparseIndices.dtype !== 'int32') {\n    throw new Error(\n        'tf.sparseToDense() expects the indices to be int32 type,' +\n        ` but the dtype was ${sparseIndices.dtype}.`);\n  }\n  if (sparseIndices.rank > 2) {\n    throw new Error(\n        'sparseIndices should be a scalar, vector, or matrix,' +\n        ` but got shape ${sparseIndices.shape}.`);\n  }\n\n  const numElems = sparseIndices.rank > 0 ? sparseIndices.shape[0] : 1;\n  const numDims = sparseIndices.rank > 1 ? sparseIndices.shape[1] : 1;\n\n  if (outputShape.length !== numDims) {\n    throw new Error(\n        'outputShape has incorrect number of elements:,' +\n        ` ${outputShape.length}, should be: ${numDims}.`);\n  }\n\n  const numValues = sparseValues.size;\n  if (!(sparseValues.rank === 0 ||\n        sparseValues.rank === 1 && numValues === numElems)) {\n    throw new Error(\n        'sparseValues has incorrect shape ' +\n        `${sparseValues.shape}, should be [] or [${numElems}]`);\n  }\n\n  if (sparseValues.dtype !== defaultValues.dtype) {\n    throw new Error('sparseValues.dtype must match defaultValues.dtype');\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * Gather slices from input tensor into a Tensor with shape specified by\n * `indices`.\n *\n * `indices` is an K-dimensional integer tensor, best thought of as a\n * (K-1)-dimensional tensor of indices into input, where each element defines a\n * slice of input:\n * output[\\\\(i_0, ..., i_{K-2}\\\\)] = input[indices[\\\\(i_0, ..., i_{K-2}\\\\)]]\n *\n * Whereas in `tf.gather`, `indices` defines slices into the first dimension of\n * input, in `tf.gatherND`, `indices` defines slices into the first N dimensions\n * of input, where N = indices.shape[-1].\n *\n * The last dimension of indices can be at most the rank of input:\n * indices.shape[-1] <= input.rank\n *\n * The last dimension of `indices` corresponds to elements\n * (if indices.shape[-1] == input.rank) or slices\n * (if indices.shape[-1] < input.rank) along dimension indices.shape[-1] of\n * input.\n * The output tensor has shape\n * indices.shape[:-1] + input.shape[indices.shape[-1]:]\n *\n * Note that on CPU, if an out of bound index is found, an error is returned. On\n * GPU, if an out of bound index is found, a 0 is stored in the corresponding\n * output value.\n *\n * ```js\n * const indices = tf.tensor2d([0, 1, 1, 0], [2,2], 'int32');\n * const input = tf.tensor2d([9, 10, 11, 12], [2, 2]);\n * tf.gatherND(input, indices).print() // [10, 11]\n * ```\n *\n * @param x The tensor from which to gather values.\n * @param indices Index tensor, must be of type int32.\n */\n/** @doc {heading: 'Operations', subheading: 'Slicing and Joining'} */\nfunction gatherND_(x: Tensor|TensorLike, indices: Tensor|TensorLike): Tensor {\n  const $indices = convertToTensor(indices, 'indices', 'gatherND', 'int32');\n  const $x = convertToTensor(x, 'x', 'gatherND');\n  return ENGINE.runKernelFunc(\n      backend => backend.gatherND($x, $indices), {x: $x, indices: $indices},\n      null /* backward */, 'GatherNd');\n}\nexport const gatherND = op({gatherND_});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {op} from './operation';\n\n/**\n * Returns a diagonal tensor with a given diagonal values.\n *\n * Given a diagonal, this operation returns a tensor with the diagonal and\n * everything else padded with zeros.\n *\n * Assume the input has dimensions `[D1,..., Dk]`, then the output is a tensor\n * of rank 2k with dimensions `[D1,..., Dk, D1,..., Dk]`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * tf.diag(x).print()\n * ```\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4, 5, 6, 6, 8], [4, 2])\n *\n * tf.diag(x).print()\n * ```\n * @param x The input tensor.\n */\nfunction diag_(x: Tensor): Tensor {\n  const $x = convertToTensor(x, 'x', 'diag').flatten();\n  const outShape = [...x.shape, ...x.shape];\n  return ENGINE.runKernelFunc(backend => backend.diag($x), {$x})\n      .reshape(outShape);\n}\n\nexport const diag = op({diag_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {randomUniform} from './array_ops';\nimport {getNoiseShape} from './dropout_util';\nimport {op} from './operation';\n\n/**\n * Computes dropout.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 2, 1]);\n * const rate = 0.75;\n * const output = tf.dropout(x, rate);\n * output.print();\n * ```\n *\n * @param x A floating point Tensor or TensorLike.\n * @param rate A float in the range [0, 1). The probability that each element\n *   of x is discarded.\n * @param noiseShape An array of numbers of type int32, representing the\n * shape for randomly generated keep/drop flags. If the noiseShape has null\n * value, it will be automatically replaced with the x's relative dimension\n * size. Optional.\n * @param seed Used to create random seeds. Optional.\n * @returns A Tensor of the same shape of x.\n */\n/** @doc {heading: 'Operations', subheading: 'Dropout'} */\nfunction dropout_(\n    x: Tensor|TensorLike, rate: number, noiseShape?: number[],\n    seed?: number|string): Tensor {\n  const $x = convertToTensor(x, 'x', 'dropout');\n\n  util.assert(\n      $x.dtype === 'float32',\n      () => `x has to be a floating point tensor since it's going to be ` +\n          `scaled, but got a ${$x.dtype} tensor instead.`);\n  util.assert(\n      rate >= 0 && rate < 1,\n      () => `rate must be a float in the range [0, 1), but got ${rate}.`);\n\n  if (rate === 0) {\n    return x instanceof Tensor ? $x.clone() : $x;\n  }\n\n  const $noiseShape = getNoiseShape($x, noiseShape);\n  const keepProb = 1 - rate;\n  const multiplier = randomUniform($noiseShape, 0, 1, 'float32', seed)\n                         .add(keepProb)\n                         .floor()\n                         .div(keepProb);\n\n  return $x.mul(multiplier);\n}\n\nexport const dropout = op({dropout_});\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport * as util from '../util';\n\n/**\n * Normalize noise shape based on provided tensor and noise shape.\n *\n * @param x Tensor.\n * @param noiseShape The shape for the randomly generated keep/drop flags, as\n *   an array of numbers. Optional.\n * @returns Normalized noise shape.\n */\nexport function getNoiseShape(x: Tensor, noiseShape?: number[]): number[] {\n  if (noiseShape == null) {\n    return x.shape.slice();\n  }\n  if (util.arraysEqual(x.shape, noiseShape)) {\n    return noiseShape;\n  }\n  if (x.shape.length === noiseShape.length) {\n    const newDimension: number[] = [];\n    for (let i = 0; i < x.shape.length; i++) {\n      if (noiseShape[i] == null && x.shape[i] != null) {\n        newDimension.push(x.shape[i]);\n      } else {\n        newDimension.push(noiseShape[i]);\n      }\n    }\n    return newDimension;\n  }\n\n  return noiseShape;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {op} from '../ops/operation';\nimport {Tensor, Tensor1D} from '../tensor';\n\nimport {mul} from './binary_ops';\nimport {concat} from './concat_split';\nimport {slice} from './slice';\nimport {rfft} from './spectral_ops';\nimport {fill, tensor1d, tensor2d} from './tensor_ops';\n\n/**\n * Generate a Hann window.\n *\n * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows\n *\n * ```js\n * tf.signal.hannWindow(10).print();\n * ```\n * @param The length of window\n */\n/**\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction hannWindow_(windowLength: number): Tensor1D {\n  return cosineWindow(windowLength, 0.5, 0.5);\n}\n\n/**\n * Generate a hamming window.\n *\n * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows\n *\n * ```js\n * tf.signal.hammingWindow(10).print();\n * ```\n * @param The length of window\n */\n/**\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction hammingWindow_(windowLength: number): Tensor1D {\n  return cosineWindow(windowLength, 0.54, 0.46);\n}\n\n/**\n * Expands input into frames of frameLength.\n * Slides a window size with frameStep.\n *\n * ```js\n * tf.signal.frame([1, 2, 3], 2, 1).print();\n * ```\n * @param signal The input tensor to be expanded\n * @param frameLength Length of each frame\n * @param frameStep The frame hop size in samples.\n * @param padEnd Whether to pad the end of signal with padValue.\n * @param padValue An number to use where the input signal does\n *     not exist when padEnd is True.\n */\n/**\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction frame_(\n    signal: Tensor1D, frameLength: number, frameStep: number, padEnd = false,\n    padValue = 0): Tensor {\n  let start = 0;\n  const output: Tensor[] = [];\n  while (start + frameLength <= signal.size) {\n    output.push(slice(signal, start, frameLength));\n    start += frameStep;\n  }\n\n  if (padEnd) {\n    while (start < signal.size) {\n      const padLen = (start + frameLength) - signal.size;\n      const pad = concat(\n          [slice(signal, start, frameLength - padLen),\n           fill([padLen], padValue)]);\n      output.push(pad);\n      start += frameStep;\n    }\n  }\n\n  if (output.length === 0) {\n    return tensor2d([], [0, frameLength]);\n  }\n\n  return concat(output).as2D(output.length, frameLength);\n}\n\n/**\n * Computes the Short-time Fourier Transform of signals\n * See: https://en.wikipedia.org/wiki/Short-time_Fourier_transform\n *\n * ```js\n * const input = tf.tensor1d([1, 1, 1, 1, 1])\n * tf.signal.stft(input, 3, 1).print();\n * ```\n * @param signal 1-dimensional real value tensor.\n * @param frameLength The window length of samples.\n * @param frameStep The number of samples to step.\n * @param fftLength The size of the FFT to apply.\n * @param windowFn A callable that takes a window length and returns 1-d tensor.\n */\n/**\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction stft_(\n    signal: Tensor1D, frameLength: number, frameStep: number,\n    fftLength?: number,\n    windowFn: (length: number) => Tensor1D = hannWindow): Tensor {\n  if (fftLength == null) {\n    fftLength = enclosingPowerOfTwo(frameLength);\n  }\n  const framedSignal = frame(signal, frameLength, frameStep);\n  const windowedSignal = mul(framedSignal, windowFn(frameLength));\n  const output: Tensor[] = [];\n  for (let i = 0; i < framedSignal.shape[0]; i++) {\n    output.push(rfft(windowedSignal.slice([i, 0], [1, frameLength]),\n      fftLength));\n  }\n  return concat(output);\n}\n\nfunction enclosingPowerOfTwo(value: number) {\n  // Return 2**N for integer N such that 2**N >= value.\n  return Math.floor(Math.pow(2, Math.ceil(Math.log(value) / Math.log(2.0))));\n}\n\nfunction cosineWindow(windowLength: number, a: number, b: number): Tensor1D {\n  const even = 1 - windowLength % 2;\n  const newValues = new Float32Array(windowLength);\n  for (let i = 0; i < windowLength; ++i) {\n    const cosArg = (2.0 * Math.PI * i) / (windowLength + even - 1);\n    newValues[i] = a - b * Math.cos(cosArg);\n  }\n  return tensor1d(newValues, 'float32');\n}\n\nexport const hannWindow = op({hannWindow_});\nexport const hammingWindow = op({hammingWindow_});\nexport const frame = op({frame_});\nexport const stft = op({stft_});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {assert, assertShapesMatch, getTypedArrayFromDType} from '../util';\nimport {tensor} from './tensor_ops';\n\n/**\n * Returns whether the targets are in the top K predictions.\n *\n * ```js\n * const predictions = tf.tensor2d([[20, 10, 40, 30], [30, 50, -20, 10]]);\n * const targets = tf.tensor1d([2, 0]);\n * const precision = await tf.inTopKAsync(predictions, targets);\n * precision.print();\n * ```\n * @param predictions 2-D or higher `tf.Tensor` with last dimension being\n *     at least `k`.\n * @param targets 1-D or higher `tf.Tensor`.\n * @param k Optional Number of top elements to look at for computing precision,\n *     default to 1.\n */\n/** @doc {heading: 'Operations', subheading: 'Evaluation'} */\nasync function inTopKAsync_<T extends Tensor, U extends Tensor>(\n    predictions: T|TensorLike, targets: U|TensorLike, k = 1): Promise<U> {\n  const $predictions = convertToTensor(predictions, 'predictions', 'inTopK');\n  const $targets = convertToTensor(targets, 'targets', 'inTopK');\n\n  assert(\n      $predictions.rank > 1,\n      () => 'inTopK() expects the predictions to be of rank 2 or higher, ' +\n          `but got ${$predictions.rank}`);\n  assert(\n      $predictions.rank - 1 === $targets.rank,\n      () => `predictions rank should be 1 larger than ` +\n          `targets rank, but got predictions rank ` +\n          `${$predictions.rank} and targets rank ${$targets.rank}`);\n  assertShapesMatch(\n      $predictions.shape.slice(0, $predictions.shape.length - 1),\n      $targets.shape,\n      `predictions's shape should be align with the targets' shape, ` +\n          'except the last dimension.');\n  const lastDim = $predictions.shape[$predictions.shape.length - 1];\n  assert(\n      k > 0 && k <= lastDim,\n      () => `'k' passed to inTopK() must be > 0 && <= the predictions last ` +\n          `dimension (${lastDim}), but got ${k}`);\n\n  const predictionsVals = await $predictions.data();\n  const targetsVals = await $targets.data();\n\n  // Reshape predictionsVals into a 2d tensor [batch, lastDim]\n  // and look up topK along lastDim.\n  const [batch, size] = [predictionsVals.length / lastDim, lastDim];\n  const precision = getTypedArrayFromDType('bool', batch);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = predictionsVals.subarray(offset, offset + size);\n    const valAndInd: Array<{value: number, index: number}> = [];\n    for (let i = 0; i < vals.length; i++) {\n      valAndInd.push({value: vals[i], index: i});\n    }\n    valAndInd.sort((a, b) => b.value - a.value);\n\n    precision[b] = 0;\n    for (let i = 0; i < k; i++) {\n      if (valAndInd[i].index === targetsVals[b]) {\n        precision[b] = 1;\n        break;\n      }\n    }\n  }\n\n  if (predictions !== $predictions) {\n    $predictions.dispose();\n  }\n  if (targets !== $targets) {\n    $targets.dispose();\n  }\n\n  // Output precision has the same shape as targets.\n  return tensor(precision, $targets.shape, 'bool') as U;\n}\n\nexport const inTopKAsync = inTopKAsync_;\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {customGrad} from '../gradients';\nimport {Tensor} from '../tensor';\nimport {GradSaveFunc} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {assertShapesMatch} from '../util';\nimport {expandShapeToKeepDim} from './axis_util';\nimport {minimum} from './binary_ops';\nimport {op} from './operation';\nimport {ones, scalar} from './tensor_ops';\n\nexport enum Reduction {\n  NONE,\n  MEAN,\n  SUM,\n  SUM_BY_NONZERO_WEIGHTS\n}\n\n/**\n * Computes the weighted loss between two tensors.\n *\n * @param losses Tensor of shape `[batch_size, d1, ... dN]`.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `losses`, and must be broadcastable to `losses` (i.e., all\n *    dimensions must be either `1`, or the same as the corresponding\n *    `losses` dimension).\n */\n/** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */\nfunction computeWeightedLoss_<T extends Tensor, O extends Tensor>(\n    losses: T|TensorLike, weights?: Tensor|TensorLike,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  const $losses = convertToTensor(losses, 'losses', 'computeWeightedLoss');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'computeWeightedLoss');\n  }\n\n  const weightedLoss = ($weights == null) ? $losses : $losses.mul($weights);\n\n  if (reduction === Reduction.NONE) {\n    return weightedLoss as O;\n  }\n  if (reduction === Reduction.SUM) {\n    return weightedLoss.sum();\n  }\n  if (reduction === Reduction.MEAN) {\n    if ($weights == null) {\n      return weightedLoss.mean();\n    } else {\n      const broadcastFactor = $losses.size / $weights.size;\n      const result = weightedLoss.sum().div($weights.sum());\n      return broadcastFactor > 1 ? result.div(scalar(broadcastFactor)) :\n                                   result as O;\n    }\n  }\n  if (reduction === Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    if ($weights == null) {\n      return weightedLoss.sum().div(scalar($losses.size));\n    } else {\n      const broadcastedWeights = $weights.mul(ones($losses.shape));\n\n      const numNonZeros =\n          broadcastedWeights.notEqual(scalar(0)).sum().toFloat();\n      return weightedLoss.sum().div(numNonZeros);\n    }\n  }\n\n  throw Error(`Unknown reduction: ${reduction}`);\n}\n\n/**\n * Computes the absolute difference loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n */\n/** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */\nfunction absoluteDifference_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, predictions: T|TensorLike,\n    weights?: Tensor|TensorLike,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  const $labels = convertToTensor(labels, 'labels', 'absoluteDifference');\n  const $predictions =\n      convertToTensor(predictions, 'predictions', 'absoluteDifference');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'absoluteDifference');\n  }\n  assertShapesMatch(\n      $labels.shape, $predictions.shape, 'Error in absoluteDifference: ');\n\n  const losses = $labels.sub($predictions).abs();\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\n/**\n * Computes the mean squared error between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n */\n/** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */\nfunction meanSquaredError_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, predictions: T|TensorLike,\n    weights?: Tensor|TensorLike,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  const $labels = convertToTensor(labels, 'labels', 'meanSquaredError');\n  const $predictions =\n      convertToTensor(predictions, 'predictions', 'meanSquaredError');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'meanSquaredError');\n  }\n  assertShapesMatch(\n      $labels.shape, $predictions.shape, 'Error in meanSquaredError: ');\n\n  const losses = $labels.squaredDifference($predictions);\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\n/**\n * Computes the cosine distance loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param axis The dimension along which the cosine distance is computed.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n */\n/** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */\nfunction cosineDistance_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, predictions: T|TensorLike, axis: number,\n    weights?: Tensor|TensorLike,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  const $labels = convertToTensor(labels, 'labels', 'cosineDistance');\n  const $predictions =\n      convertToTensor(predictions, 'predictions', 'cosineDistance');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'cosineDistance');\n  }\n  assertShapesMatch(\n      $labels.shape, $predictions.shape, 'Error in cosineDistance: ');\n\n  const one = scalar(1);\n  const losses = one.sub($labels.mul($predictions).sum(axis, true));\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\n/**\n * Computes the Hinge loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n */\n/** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */\nfunction hingeLoss_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, predictions: T|TensorLike,\n    weights?: Tensor|TensorLike,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  let $labels = convertToTensor(labels, 'labels', 'hingeLoss');\n  const $predictions = convertToTensor(predictions, 'predictions', 'hingeLoss');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'hingeLoss');\n  }\n  assertShapesMatch($labels.shape, $predictions.shape, 'Error in hingeLoss: ');\n\n  const one = scalar(1);\n  // Convert binary labels to (-1, 1)\n  $labels = scalar(2).mul($labels).sub(one);\n  const losses = one.sub($labels.mul($predictions)).relu();\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\n/**\n * Computes the log loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param epsilon A small increment to avoid taking log of zero\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n */\n/** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */\nfunction logLoss_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, predictions: T|TensorLike,\n    weights?: Tensor|TensorLike, epsilon = 1e-7,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  const $labels = convertToTensor(labels, 'labels', 'logLoss');\n  const $predictions = convertToTensor(predictions, 'predictions', 'logLoss');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'logLoss');\n  }\n  assertShapesMatch($labels.shape, $predictions.shape, 'Error in logLoss: ');\n\n  const one = scalar(1);\n  const epsilonScalar = scalar(epsilon);\n  const losses = $labels.mul($predictions.add(epsilonScalar).log())\n                     .neg()\n                     .sub(one.sub($labels).mul(\n                         one.sub($predictions).add(epsilonScalar).log()));\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\nfunction sigmoidCrossEntropyWithLogits_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, logits: T|TensorLike): O {\n  const $labels =\n      convertToTensor(labels, 'labels', 'sigmoidCrossEntropyWithLogits');\n  const $logits =\n      convertToTensor(logits, 'logits', 'sigmoidCrossEntropyWithLogits');\n  assertShapesMatch(\n      $labels.shape, $logits.shape, 'Error in sigmoidCrossEntropyWithLogits: ');\n\n  /**\n   * Implementation Details:\n   *\n   * For brevity, let `x = logits`, `z = labels`.  The logistic loss is\n   *     z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))\n   *   = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))\n   *   = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))\n   *   = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))\n   *   = (1 - z) * x + log(1 + exp(-x))\n   *   = x - x * z + log(1 + exp(-x))\n   *\n   *   For x < 0, to avoid overflow in exp(-x), we reformulate the above\n   *     x - x * z + log(1 + exp(-x))\n   *   = log(exp(x)) - x * z + log(1 + exp(-x))\n   *   = - x * z + log(1 + exp(x))\n   *\n   * Hence, to ensure stability and avoid overflow, the implementation uses\n   * this equivalent formulation:\n   *     max(x, 0) - x * z + log(1 + exp(-abs(x)))\n   */\n  const maxOutput = $logits.relu();\n  const outputXTarget = $logits.mul($labels);\n  const sigmoidOutput = $logits.abs().neg().exp().log1p();\n\n  return maxOutput.sub(outputXTarget).add(sigmoidOutput);\n}\n\n/**\n * Computes the sigmoid cross entropy loss between two tensors.\n *\n * If labelSmoothing is nonzero, smooth the labels towards 1/2:\n *\n *   newMulticlassLabels = multiclassLabels * (1 - labelSmoothing)\n *                         + 0.5 * labelSmoothing\n *\n * @param multiClassLabels The ground truth output tensor of shape\n * [batch_size, num_classes], same dimensions as 'predictions'.\n * @param logits The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param labelSmoothing If greater than 0, then smooth the labels.\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n */\n/** @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' } */\nfunction sigmoidCrossEntropy_<T extends Tensor, O extends Tensor>(\n    multiClassLabels: T|TensorLike, logits: T|TensorLike,\n    weights?: Tensor|TensorLike, labelSmoothing = 0,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  let $multiClassLabels = convertToTensor(\n      multiClassLabels, 'multiClassLabels', 'sigmoidCrossEntropy');\n  const $logits = convertToTensor(logits, 'logits', 'sigmoidCrossEntropy');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'sigmoidCrossEntropy');\n  }\n  assertShapesMatch(\n      $multiClassLabels.shape, $logits.shape, 'Error in sigmoidCrossEntropy: ');\n\n  if (labelSmoothing > 0) {\n    const labelSmoothingScalar = scalar(labelSmoothing);\n    const one = scalar(1);\n    const half = scalar(0.5);\n\n    $multiClassLabels = $multiClassLabels.mul(one.sub(labelSmoothingScalar))\n                            .add(half.mul(labelSmoothingScalar));\n  }\n  const losses = sigmoidCrossEntropyWithLogits_($multiClassLabels, $logits);\n\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\n/**\n * Computes the huber loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param delta Point where huber loss changes from quadratic to linear.\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`.\n */\n/** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */\nfunction huberLoss_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, predictions: T|TensorLike,\n    weights?: Tensor|TensorLike, delta = 1.0,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  const $labels = convertToTensor(labels, 'labels', 'huberLoss');\n  const $predictions = convertToTensor(predictions, 'predictions', 'huberLoss');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'huberLoss');\n  }\n  assertShapesMatch($labels.shape, $predictions.shape, 'Error in huberLoss: ');\n\n  const deltaScalar = scalar(delta);\n  const error = $predictions.sub($labels).abs();\n  const quadratic = minimum(error, deltaScalar);\n  const linear = error.sub(quadratic);\n\n  const losses =\n      scalar(0.5).mul(quadratic.square()).add(deltaScalar.mul(linear));\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\n/**\n * Computes softmax cross entropy between logits and labels.\n *\n * Measures the probability error in discrete classification tasks in which\n * the classes are mutually exclusive (each entry is in exactly one class).\n * For example, each CIFAR-10 image is labeled with one and only one label: an\n * image can be a dog or a truck, but not both.\n *\n * `NOTE`: While the classes are mutually exclusive, their probabilities need\n * not be. All that is required is that each row of labels is a valid\n * probability distribution. If they are not, the computation of the gradient\n * will be incorrect.\n *\n * `WARNING`: This op expects unscaled logits, since it performs a softmax on\n * logits internally for efficiency. Do not call this op with the output of\n * softmax, as it will produce incorrect results.\n *\n * logits and labels must have the same shape, e.g. [batch_size, num_classes]\n * and the same dtype.\n * @param labels The labels array.\n * @param logits The logits array.\n * @param dim The dimension softmax would be performed on. Defaults to `-1`\n *     which indicates the last dimension.\n */\nfunction softmaxCrossEntropyWithLogits_<T extends Tensor, O extends Tensor>(\n    labels: T, logits: T, dim = -1): O {\n  if (dim === -1) {\n    dim = logits.rank - 1;\n  }\n\n  if (dim !== logits.rank - 1) {\n    throw Error(\n        `Softmax cross entropy along a non-last dimension is not yet ` +\n        `supported. Labels / logits was rank ${logits.rank} ` +\n        `and dim was ${dim}`);\n  }\n  // Use a custom gradient for numerical stability.\n  const customOp =\n      customGrad((labels: Tensor, logits: Tensor, save: GradSaveFunc) => {\n        // Reference:\n        //   1. http://cs231n.github.io/linear-classify/#softmax\n        //   2. https://blog.feedly.com/tricks-of-the-trade-logsumexp/\n        const keepDims = true;\n        const lse = logits.logSumExp([dim], keepDims);\n        const logResult = logits.toFloat().sub(lse);\n        save([labels, logResult]);\n\n        const costVector = logResult.mul(labels).neg();\n        const value: O = costVector.sum([dim]);\n\n        const gradFunc = (dy: O, saved: Tensor[]) => {\n          const [labels, logResult] = saved;\n          const dyShape = expandShapeToKeepDim(dy.shape, [dim]);\n          return [\n            dy.reshape(dyShape).mul(labels.toFloat().sub(logResult.exp())),\n            dy.reshape(dyShape).mul(logResult.exp().sub(labels.toFloat())),\n          ];\n        };\n        return {value, gradFunc};\n      });\n\n  return customOp(labels, logits);\n}\n\n/**\n * Computes the softmax cross entropy loss between two tensors.\n *\n * If labelSmoothing is nonzero, smooth the labels towards 1/2:\n *\n *   newOnehotLabels = onehotLabels * (1 - labelSmoothing)\n *                         + labelSmoothing / numClasses\n *\n * @param onehotLabels One hot encoded labels\n *    [batch_size, num_classes], same dimensions as 'predictions'.\n * @param logits The predicted outputs.\n * @param weights Tensor whose rank is either 0, or 1, and must be\n *    broadcastable to `loss`  of shape [batch_size]\n * @param labelSmoothing If greater than 0, then smooth the labels.\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n */\n/** @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' } */\nfunction softmaxCrossEntropy_<T extends Tensor, O extends Tensor>(\n    onehotLabels: T|TensorLike, logits: T|TensorLike,\n    weights?: Tensor|TensorLike, labelSmoothing = 0,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  let $onehotLabels =\n      convertToTensor(onehotLabels, 'onehotLabels', 'softmaxCrossEntropy');\n  const $logits = convertToTensor(logits, 'logits', 'softmaxCrossEntropy');\n  let $weights: Tensor = null;\n\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'softmaxCrossEntropy');\n  }\n\n  assertShapesMatch(\n      $onehotLabels.shape, $logits.shape, 'Error in softmaxCrossEntropy: ');\n\n  if (labelSmoothing > 0) {\n    const labelSmoothingScalar = scalar(labelSmoothing);\n    const one = scalar(1);\n    const numClasses = scalar($onehotLabels.shape[1]);\n\n    $onehotLabels = $onehotLabels.mul(one.sub(labelSmoothingScalar))\n                        .add(labelSmoothingScalar.div(numClasses));\n  }\n\n  const losses = softmaxCrossEntropyWithLogits_($onehotLabels, $logits);\n\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\nexport const absoluteDifference = op({absoluteDifference_});\nexport const computeWeightedLoss = op({computeWeightedLoss_});\nexport const cosineDistance = op({cosineDistance_});\nexport const hingeLoss = op({hingeLoss_});\nexport const huberLoss = op({huberLoss_});\nexport const logLoss = op({logLoss_});\nexport const meanSquaredError = op({meanSquaredError_});\nexport const sigmoidCrossEntropy = op({sigmoidCrossEntropy_});\nexport const softmaxCrossEntropy = op({softmaxCrossEntropy_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Linear algebra ops.\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose} from '../globals';\nimport {Tensor, Tensor1D, Tensor2D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {assert} from '../util';\nimport {eye, squeeze, stack, unstack} from './array_ops';\nimport {sub} from './binary_ops';\nimport {split} from './concat_split';\nimport {logicalAnd, where} from './logical_ops';\nimport {norm} from './norm';\nimport {op} from './operation';\nimport {sum} from './reduction_ops';\nimport {range, scalar, tensor2d, zeros} from './tensor_ops';\n\n/**\n * Copy a tensor setting everything outside a central band in each innermost\n * matrix to zero.\n *\n * The band part is computed as follows: Assume input has `k` dimensions\n * `[I, J, K, ..., M, N]`, then the output is a tensor with the same shape where\n * `band[i, j, k, ..., m, n] = in_band(m, n) * input[i, j, k, ..., m, n]`.\n * The indicator function\n * `in_band(m, n) = (num_lower < 0 || (m-n) <= num_lower))`\n * `&& (num_upper < 0 || (n-m) <= num_upper)`\n *\n * ```js\n * const x = tf.tensor2d([[ 0,  1,  2, 3],\n *                        [-1,  0,  1, 2],\n *                        [-2, -1,  0, 1],\n *                        [-3, -2, -1, 0]]);\n * let y = tf.linalg.bandPart(x, 1, -1);\n * y.print(); // [[ 0,  1,  2, 3],\n *            //  [-1,  0,  1, 2],\n *            //  [ 0, -1,  0, 1],\n *            //  [ 0, 0 , -1, 0]]\n * let z = tf.linalg.bandPart(x, 2, 1);\n * z.print(); // [[ 0,  1,  0, 0],\n *            //  [-1,  0,  1, 0],\n *            //  [-2, -1,  0, 1],\n *            //  [ 0, -2, -1, 0]]\n * ```\n *\n * @param x Rank `k` tensor\n * @param numLower Number of subdiagonals to keep.\n *   If negative, keep entire lower triangle.\n * @param numUpper Number of subdiagonals to keep.\n *   If negative, keep entire upper triangle.\n * @returns Rank `k` tensor of the same shape as input.\n *   The extracted banded tensor.\n */\n/**\n * @doc {heading:'Operations',\n *       subheading:'Linear Algebra',\n *       namespace:'linalg'}\n */\nfunction bandPart_<T extends Tensor>(\n  a: T|TensorLike, numLower: number, numUpper: number\n): T\n{\n  if( numLower%1 !== 0 ){\n    throw new Error(\n      `bandPart(): numLower must be an integer, got ${numLower}.`\n    );\n  }\n  if( numUpper%1 !== 0 ){\n    throw new Error(\n      `bandPart(): numUpper must be an integer, got ${numUpper}.`\n    );\n  }\n\n  const $a = convertToTensor(a,'a','bandPart');\n\n  if( $a.rank < 2 ) {\n    throw new Error(`bandPart(): Rank must be at least 2, got ${$a.rank}.`);\n  }\n\n  const shape = $a.shape,\n        [M,N] = $a.shape.slice(-2);\n\n  if( !(numLower <= M) ) {\n    throw new Error(\n      `bandPart(): numLower (${numLower})` +\n      ` must not be greater than the number of rows (${M}).`\n    );\n  }\n  if( !(numUpper <= N) ) {\n    throw new Error(\n      `bandPart(): numUpper (${numUpper})` +\n      ` must not be greater than the number of columns (${N}).`\n    );\n  }\n\n  if( numLower < 0 ) { numLower = M; }\n  if( numUpper < 0 ) { numUpper = N; }\n\n  const i = range(0,M, 1, 'int32').reshape([-1,1]),\n        j = range(0,N, 1, 'int32'),\n       ij = sub(i,j);\n\n  const inBand = logicalAnd(\n    ij.   lessEqual( scalar(+numLower,'int32') ),\n    ij.greaterEqual( scalar(-numUpper,'int32') )\n  );\n\n  const zero = zeros([M,N], $a.dtype);\n\n  return stack(\n    unstack( $a.reshape([-1,M,N]) ).map(\n      mat => where(inBand, mat, zero)\n    )\n  ).reshape(shape) as T;\n}\n\n/**\n * Gram-Schmidt orthogonalization.\n *\n * ```js\n * const x = tf.tensor2d([[1, 2], [3, 4]]);\n * let y = tf.linalg.gramSchmidt(x);\n * y.print();\n * console.log('Othogonalized:');\n * y.dot(y.transpose()).print();  // should be nearly the identity matrix.\n * console.log('First row direction maintained:');\n * const data = await y.array();\n * console.log(data[0][1] / data[0][0]);  // should be nearly 2.\n * ```\n *\n * @param xs The vectors to be orthogonalized, in one of the two following\n *   formats:\n *   - An Array of `tf.Tensor1D`.\n *   - A `tf.Tensor2D`, i.e., a matrix, in which case the vectors are the rows\n *     of `xs`.\n *   In each case, all the vectors must have the same length and the length\n *   must be greater than or equal to the number of vectors.\n * @returns The orthogonalized and normalized vectors or matrix.\n *   Orthogonalization means that the vectors or the rows of the matrix\n *   are orthogonal (zero inner products). Normalization means that each\n *   vector or each row of the matrix has an L2 norm that equals `1`.\n */\n/**\n * @doc {heading:'Operations',\n *       subheading:'Linear Algebra',\n *       namespace:'linalg'}\n */\nfunction gramSchmidt_(xs: Tensor1D[]|Tensor2D): Tensor1D[]|Tensor2D {\n  let inputIsTensor2D: boolean;\n  if (Array.isArray(xs)) {\n    inputIsTensor2D = false;\n    assert(\n        xs != null && xs.length > 0,\n        () => 'Gram-Schmidt process: input must not be null, undefined, or ' +\n            'empty');\n    const dim = xs[0].shape[0];\n    for (let i = 1; i < xs.length; ++i) {\n      assert(\n          xs[i].shape[0] === dim,\n          () =>\n              'Gram-Schmidt: Non-unique lengths found in the input vectors: ' +\n              `(${(xs as Tensor1D[])[i].shape[0]} vs. ${dim})`);\n    }\n  } else {\n    inputIsTensor2D = true;\n    xs = split(xs, xs.shape[0], 0).map(x => squeeze(x, [0]));\n  }\n\n  assert(\n      xs.length <= xs[0].shape[0],\n      () => `Gram-Schmidt: Number of vectors (${\n                (xs as Tensor1D[]).length}) exceeds ` +\n          `number of dimensions (${(xs as Tensor1D[])[0].shape[0]}).`);\n\n  const ys: Tensor1D[] = [];\n  const xs1d = xs;\n  for (let i = 0; i < xs.length; ++i) {\n    ys.push(ENGINE.tidy(() => {\n      let x = xs1d[i];\n      if (i > 0) {\n        for (let j = 0; j < i; ++j) {\n          const proj = sum(ys[j].mulStrict(x)).mul(ys[j]);\n          x = x.sub(proj);\n        }\n      }\n      return x.div(norm(x, 'euclidean'));\n    }));\n  }\n\n  if (inputIsTensor2D) {\n    return stack(ys, 0) as Tensor2D;\n  } else {\n    return ys;\n  }\n}\n\n/**\n * Compute QR decomposition of m-by-n matrix using Householder transformation.\n *\n * Implementation based on\n *   [http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf]\n * (http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf)\n *\n * ```js\n * const a = tf.tensor2d([[1, 2], [3, 4]]);\n * let [q, r] = tf.linalg.qr(a);\n * console.log('Q');\n * q.print();\n * console.log('R');\n * r.print();\n * console.log('Orthogonalized');\n * q.dot(q.transpose()).print()  // should be nearly the identity matrix.\n * console.log('Reconstructed');\n * q.dot(r).print(); // should be nearly [[1, 2], [3, 4]];\n * ```\n *\n * @param x The `tf.Tensor` to be QR-decomposed. Must have rank >= 2. Suppose\n *   it has the shape `[..., M, N]`.\n * @param fullMatrices An optional boolean parameter. Defaults to `false`.\n *   If `true`, compute full-sized `Q`. If `false` (the default),\n *   compute only the leading N columns of `Q` and `R`.\n * @returns An `Array` of two `tf.Tensor`s: `[Q, R]`. `Q` is a unitary matrix,\n *   i.e., its columns all have unit norm and are mutually orthogonal.\n *   If `M >= N`,\n *     If `fullMatrices` is `false` (default),\n *       - `Q` has a shape of `[..., M, N]`,\n *       - `R` has a shape of `[..., N, N]`.\n *     If `fullMatrices` is `true` (default),\n *       - `Q` has a shape of `[..., M, M]`,\n *       - `R` has a shape of `[..., M, N]`.\n *   If `M < N`,\n *     - `Q` has a shape of `[..., M, M]`,\n *     - `R` has a shape of `[..., M, N]`.\n * @throws If the rank of `x` is less than 2.\n */\n/**\n * @doc {heading:'Operations',\n *       subheading:'Linear Algebra',\n *       namespace:'linalg'}\n */\nfunction qr_(x: Tensor, fullMatrices = false): [Tensor, Tensor] {\n  if (x.rank < 2) {\n    throw new Error(\n        `qr() requires input tensor to have a rank >= 2, but got rank ${\n            x.rank}`);\n  } else if (x.rank === 2) {\n    return qr2d(x as Tensor2D, fullMatrices);\n  } else {\n    // Rank > 2.\n    // TODO(cais): Below we split the input into individual 2D tensors,\n    //   perform QR decomposition on them and then stack the results back\n    //   together. We should explore whether this can be parallelized.\n    const outerDimsProd = x.shape.slice(0, x.shape.length - 2)\n                              .reduce((value, prev) => value * prev);\n    const x2ds = unstack(\n        x.reshape([\n          outerDimsProd, x.shape[x.shape.length - 2],\n          x.shape[x.shape.length - 1]\n        ]),\n        0);\n    const q2ds: Tensor2D[] = [];\n    const r2ds: Tensor2D[] = [];\n    x2ds.forEach(x2d => {\n      const [q2d, r2d] = qr2d(x2d as Tensor2D, fullMatrices);\n      q2ds.push(q2d);\n      r2ds.push(r2d);\n    });\n    const q = stack(q2ds, 0).reshape(x.shape);\n    const r = stack(r2ds, 0).reshape(x.shape);\n    return [q, r];\n  }\n}\n\nfunction qr2d(x: Tensor2D, fullMatrices = false): [Tensor2D, Tensor2D] {\n  return ENGINE.tidy(() => {\n    if (x.shape.length !== 2) {\n      throw new Error(\n          `qr2d() requires a 2D Tensor, but got a ${x.shape.length}D Tensor.`);\n    }\n\n    const m = x.shape[0];\n    const n = x.shape[1];\n\n    let q = eye(m);     // Orthogonal transform so far.\n    let r = x.clone();  // Transformed matrix so far.\n\n    const one2D = tensor2d([[1]], [1, 1]);\n    let w: Tensor2D = one2D.clone();\n\n    const iters = m >= n ? n : m;\n    for (let j = 0; j < iters; ++j) {\n      // This tidy within the for-loop ensures we clean up temporary\n      // tensors as soon as they are no longer needed.\n      const rTemp = r;\n      const wTemp = w;\n      const qTemp = q;\n      [w, r, q] = ENGINE.tidy((): [Tensor2D, Tensor2D, Tensor2D] => {\n        // Find H = I - tau * w * w', to put zeros below R(j, j).\n        const rjEnd1 = r.slice([j, j], [m - j, 1]);\n        const normX = rjEnd1.norm();\n        const rjj = r.slice([j, j], [1, 1]);\n\n        // The sign() function returns 0 on 0, which causes division by zero.\n        const s = tensor2d([[-1]]).where(rjj.greater(0), tensor2d([[1]]));\n\n        const u1 = rjj.sub(s.mul(normX));\n        const wPre = rjEnd1.div(u1);\n        if (wPre.shape[0] === 1) {\n          w = one2D.clone();\n        } else {\n          w = one2D.concat(\n              wPre.slice([1, 0], [wPre.shape[0] - 1, wPre.shape[1]]) as\n                  Tensor2D,\n              0);\n        }\n        const tau = s.matMul(u1).div(normX).neg() as Tensor2D;\n\n        // -- R := HR, Q := QH.\n        const rjEndAll = r.slice([j, 0], [m - j, n]);\n        const tauTimesW: Tensor2D = tau.mul(w);\n        if (j === 0) {\n          r = rjEndAll.sub(tauTimesW.matMul(w.transpose().matMul(rjEndAll)));\n        } else {\n          const rTimesTau: Tensor2D =\n              rjEndAll.sub(tauTimesW.matMul(w.transpose().matMul(rjEndAll)));\n          r = r.slice([0, 0], [j, n]).concat(rTimesTau, 0);\n        }\n        const qAllJEnd = q.slice([0, j], [m, q.shape[1] - j]);\n        if (j === 0) {\n          q = qAllJEnd.sub(qAllJEnd.matMul(w).matMul(tauTimesW.transpose()));\n        } else {\n          const qTimesTau: Tensor2D =\n              qAllJEnd.sub(qAllJEnd.matMul(w).matMul(tauTimesW.transpose()));\n          q = q.slice([0, 0], [m, j]).concat(qTimesTau, 1);\n        }\n        return [w, r, q];\n      });\n      dispose([rTemp, wTemp, qTemp]);\n    }\n\n    if (!fullMatrices && m > n) {\n      q = q.slice([0, 0], [m, n]);\n      r = r.slice([0, 0], [n, n]);\n    }\n\n    return [q, r];\n  }) as [Tensor2D, Tensor2D];\n}\n\nexport const bandPart = op({bandPart_});\nexport const gramSchmidt = op({gramSchmidt_});\nexport const qr = op({qr_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {nonMaxSuppressionV3, nonMaxSuppressionV5} from '../backends/non_max_suppression_impl';\nimport {ENGINE, ForwardFunc} from '../engine';\nimport {Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Bilinear resize a batch of 3D images to a new shape.\n *\n * @param images The images, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param size The new shape `[newHeight, newWidth]` to resize the\n *     images to. Each channel is resized individually.\n * @param alignCorners Defaults to False. If true, rescale\n *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\n *     corners of images and resized images. If false, rescale by\n *     `new_height / height`. Treat similarly the width dimension.\n */\n/** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */\nfunction resizeBilinear_<T extends Tensor3D|Tensor4D>(\n    images: T|TensorLike, size: [number, number], alignCorners = false): T {\n  const $images = convertToTensor(images, 'images', 'resizeBilinear');\n  util.assert(\n      $images.rank === 3 || $images.rank === 4,\n      () => `Error in resizeBilinear: x must be rank 3 or 4, but got ` +\n          `rank ${$images.rank}.`);\n  util.assert(\n      size.length === 2,\n      () => `Error in resizeBilinear: new shape must 2D, but got shape ` +\n          `${size}.`);\n\n  let batchImages = $images as Tensor4D;\n  let reshapedTo4D = false;\n  if ($images.rank === 3) {\n    reshapedTo4D = true;\n    batchImages =\n        $images.as4D(1, $images.shape[0], $images.shape[1], $images.shape[2]);\n  }\n\n  const [newHeight, newWidth] = size;\n  const forward: ForwardFunc<Tensor4D> = (backend, save) => {\n    save([batchImages]);\n    return backend.resizeBilinear(\n        batchImages, newHeight, newWidth, alignCorners);\n  };\n\n  const backward = (dy: Tensor4D, saved: Tensor[]) => {\n    return {\n      x: () => ENGINE.runKernelFunc(\n          backend => backend.resizeBilinearBackprop(\n              dy, saved[0] as Tensor4D, alignCorners),\n          {})\n    };\n  };\n\n  const res = ENGINE.runKernelFunc(\n      forward, {x: batchImages}, backward, 'ResizeBilinear',\n      {alignCorners, newHeight, newWidth});\n  if (reshapedTo4D) {\n    return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n  }\n  return res as T;\n}\n\n/**\n * NearestNeighbor resize a batch of 3D images to a new shape.\n *\n * @param images The images, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param size The new shape `[newHeight, newWidth]` to resize the\n *     images to. Each channel is resized individually.\n * @param alignCorners Defaults to False. If true, rescale\n *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\n *     corners of images and resized images. If false, rescale by\n *     `new_height / height`. Treat similarly the width dimension.\n */\n/** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */\nfunction resizeNearestNeighbor_<T extends Tensor3D|Tensor4D>(\n    images: T|TensorLike, size: [number, number], alignCorners = false): T {\n  const $images = convertToTensor(images, 'images', 'resizeNearestNeighbor');\n  util.assert(\n      $images.rank === 3 || $images.rank === 4,\n      () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got ` +\n          `rank ${$images.rank}.`);\n  util.assert(\n      size.length === 2,\n      () =>\n          `Error in resizeNearestNeighbor: new shape must 2D, but got shape ` +\n          `${size}.`);\n  util.assert(\n      $images.dtype === 'float32' || $images.dtype === 'int32',\n      () => '`images` must have `int32` or `float32` as dtype');\n\n  let batchImages = $images as Tensor4D;\n  let reshapedTo4D = false;\n  if ($images.rank === 3) {\n    reshapedTo4D = true;\n    batchImages =\n        $images.as4D(1, $images.shape[0], $images.shape[1], $images.shape[2]);\n  }\n  const [newHeight, newWidth] = size;\n\n  const forward: ForwardFunc<Tensor4D> = (backend, save) => {\n    save([batchImages]);\n    return backend.resizeNearestNeighbor(\n        batchImages, newHeight, newWidth, alignCorners);\n  };\n\n  const backward = (dy: Tensor4D, saved: Tensor[]) => {\n    return {\n      batchImages: () => ENGINE.runKernelFunc(\n          backend => backend.resizeNearestNeighborBackprop(\n              dy, saved[0] as Tensor4D, alignCorners),\n          {})\n    };\n  };\n\n  const res = ENGINE.runKernelFunc(forward, {batchImages}, backward);\n\n  if (reshapedTo4D) {\n    return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n  }\n  return res as T;\n}\n\n/**\n * Performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @return A 1D tensor with the selected box indices.\n */\n/** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */\nfunction nonMaxSuppression_(\n    boxes: Tensor2D|TensorLike, scores: Tensor1D|TensorLike,\n    maxOutputSize: number, iouThreshold = 0.5,\n    scoreThreshold = Number.NEGATIVE_INFINITY): Tensor1D {\n  const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppression');\n  const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppression');\n\n  const inputs = nonMaxSuppSanityCheck(\n      $boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);\n  maxOutputSize = inputs.maxOutputSize;\n  iouThreshold = inputs.iouThreshold;\n  scoreThreshold = inputs.scoreThreshold;\n\n  const attrs = {maxOutputSize, iouThreshold, scoreThreshold};\n  return ENGINE.runKernelFunc(\n      b => b.nonMaxSuppression(\n          $boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold),\n      {boxes: $boxes, scores: $scores}, null /* grad */, 'NonMaxSuppressionV3',\n      attrs);\n}\n\n/** This is the async version of `nonMaxSuppression` */\nasync function nonMaxSuppressionAsync_(\n    boxes: Tensor2D|TensorLike, scores: Tensor1D|TensorLike,\n    maxOutputSize: number, iouThreshold = 0.5,\n    scoreThreshold = Number.NEGATIVE_INFINITY): Promise<Tensor1D> {\n  const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n  const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n\n  const inputs = nonMaxSuppSanityCheck(\n      $boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);\n  maxOutputSize = inputs.maxOutputSize;\n  iouThreshold = inputs.iouThreshold;\n  scoreThreshold = inputs.scoreThreshold;\n\n  const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);\n  const boxesVals = boxesAndScores[0];\n  const scoresVals = boxesAndScores[1];\n\n  const res = nonMaxSuppressionV3(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n  if ($boxes !== boxes) {\n    $boxes.dispose();\n  }\n  if ($scores !== scores) {\n    $scores.dispose();\n  }\n  return res;\n}\n\n/**\n * Performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This op also supports a Soft-NMS mode (c.f.\n * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score\n * of other overlapping boxes, therefore favoring different regions of the image\n * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`\n * parameter to be larger than 0.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param softNmsSigma A float representing the sigma parameter for Soft NMS.\n *     When sigma is 0, it falls back to nonMaxSuppression.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - selectedScores: A 1D tensor with the corresponding scores for each\n *       selected box.\n */\n/** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */\nfunction nonMaxSuppressionWithScore_(\n    boxes: Tensor2D|TensorLike, scores: Tensor1D|TensorLike,\n    maxOutputSize: number, iouThreshold = 0.5,\n    scoreThreshold = Number.NEGATIVE_INFINITY,\n    softNmsSigma = 0.0): NamedTensorMap {\n  const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppression');\n  const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppression');\n\n  const inputs = nonMaxSuppSanityCheck(\n      $boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold,\n      softNmsSigma);\n  maxOutputSize = inputs.maxOutputSize;\n  iouThreshold = inputs.iouThreshold;\n  scoreThreshold = inputs.scoreThreshold;\n  softNmsSigma = inputs.softNmsSigma;\n\n  const attrs = {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma};\n\n  const result = ENGINE.runKernel(\n                     'NonMaxSuppressionV5', {boxes: $boxes, scores: $scores},\n                     attrs) as Tensor[];\n\n  return {selectedIndices: result[0], selectedScores: result[1]};\n}\n\n/** This is the async version of `nonMaxSuppressionWithScore` */\nasync function nonMaxSuppressionWithScoreAsync_(\n    boxes: Tensor2D|TensorLike, scores: Tensor1D|TensorLike,\n    maxOutputSize: number, iouThreshold = 0.5,\n    scoreThreshold = Number.NEGATIVE_INFINITY,\n    softNmsSigma = 0.0): Promise<NamedTensorMap> {\n  const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n  const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n\n  const inputs = nonMaxSuppSanityCheck(\n      $boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold,\n      softNmsSigma);\n  maxOutputSize = inputs.maxOutputSize;\n  iouThreshold = inputs.iouThreshold;\n  scoreThreshold = inputs.scoreThreshold;\n  softNmsSigma = inputs.softNmsSigma;\n\n  const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);\n  const boxesVals = boxesAndScores[0];\n  const scoresVals = boxesAndScores[1];\n\n  const res = nonMaxSuppressionV5(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      softNmsSigma);\n\n  if ($boxes !== boxes) {\n    $boxes.dispose();\n  }\n  if ($scores !== scores) {\n    $scores.dispose();\n  }\n  return res;\n}\n\nfunction nonMaxSuppSanityCheck(\n    boxes: Tensor2D, scores: Tensor1D, maxOutputSize: number,\n    iouThreshold: number, scoreThreshold: number, softNmsSigma?: number): {\n  maxOutputSize: number,\n  iouThreshold: number,\n  scoreThreshold: number,\n  softNmsSigma: number\n} {\n  if (iouThreshold == null) {\n    iouThreshold = 0.5;\n  }\n  if (scoreThreshold == null) {\n    scoreThreshold = Number.NEGATIVE_INFINITY;\n  }\n  if (softNmsSigma == null) {\n    softNmsSigma = 0.0;\n  }\n\n  const numBoxes = boxes.shape[0];\n  maxOutputSize = Math.min(maxOutputSize, numBoxes);\n\n  util.assert(\n      0 <= iouThreshold && iouThreshold <= 1,\n      () => `iouThreshold must be in [0, 1], but was '${iouThreshold}'`);\n  util.assert(\n      boxes.rank === 2,\n      () => `boxes must be a 2D tensor, but was of rank '${boxes.rank}'`);\n  util.assert(\n      boxes.shape[1] === 4,\n      () =>\n          `boxes must have 4 columns, but 2nd dimension was ${boxes.shape[1]}`);\n  util.assert(scores.rank === 1, () => 'scores must be a 1D tensor');\n  util.assert(\n      scores.shape[0] === numBoxes,\n      () => `scores has incompatible shape with boxes. Expected ${numBoxes}, ` +\n          `but was ${scores.shape[0]}`);\n  util.assert(\n      0 <= softNmsSigma && softNmsSigma <= 1,\n      () => `softNmsSigma must be in [0, 1], but was '${softNmsSigma}'`);\n  return {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma};\n}\n\n/**\n * Extracts crops from the input image tensor and resizes them using bilinear\n * sampling or nearest neighbor sampling (possibly with aspect ratio change)\n * to a common output size specified by crop_size.\n *\n * @param image 4d tensor of shape `[batch,imageHeight,imageWidth, depth]`,\n *     where imageHeight and imageWidth must be positive, specifying the\n *     batch of images from which to take crops\n * @param boxes 2d float32 tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the normalized\n *     coordinates of the box in the boxInd[i]'th image in the batch\n * @param boxInd 1d int32 tensor of shape `[numBoxes]` with values in range\n *     `[0, batch)` that specifies the image that the `i`-th box refers to.\n * @param cropSize 1d int32 tensor of 2 elements `[cropHeigh, cropWidth]`\n *     specifying the size to which all crops are resized to.\n * @param method Optional string from `'bilinear' | 'nearest'`,\n *     defaults to bilinear, which specifies the sampling method for resizing\n * @param extrapolationValue A threshold for deciding when to remove boxes based\n *     on score. Defaults to 0.\n * @return A 4D tensor of the shape `[numBoxes,cropHeight,cropWidth,depth]`\n */\n/** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */\nfunction cropAndResize_(\n    image: Tensor4D|TensorLike,\n    boxes: Tensor2D|TensorLike,\n    boxInd: Tensor1D|TensorLike,\n    cropSize: [number, number],\n    method?: 'bilinear'|'nearest',\n    extrapolationValue?: number,\n    ): Tensor4D {\n  const $image = convertToTensor(image, 'image', 'cropAndResize');\n  const $boxes = convertToTensor(boxes, 'boxes', 'cropAndResize', 'float32');\n  const $boxInd = convertToTensor(boxInd, 'boxInd', 'cropAndResize', 'int32');\n  method = method || 'bilinear';\n  extrapolationValue = extrapolationValue || 0;\n\n  const numBoxes = $boxes.shape[0];\n\n  util.assert(\n      $image.rank === 4,\n      () => 'Error in cropAndResize: image must be rank 4,' +\n          `but got rank ${$image.rank}.`);\n  util.assert(\n      $boxes.rank === 2 && $boxes.shape[1] === 4,\n      () => `Error in cropAndResize: boxes must be have size [${numBoxes},4] ` +\n          `but had shape ${$boxes.shape}.`);\n  util.assert(\n      $boxInd.rank === 1 && $boxInd.shape[0] === numBoxes,\n      () => `Error in cropAndResize: boxInd must be have size [${numBoxes}] ` +\n          `but had shape ${$boxes.shape}.`);\n  util.assert(\n      cropSize.length === 2,\n      () => `Error in cropAndResize: cropSize must be of length 2, but got ` +\n          `length ${cropSize.length}.`);\n  util.assert(\n      cropSize[0] >= 1 && cropSize[1] >= 1,\n      () => `cropSize must be atleast [1,1], but was ${cropSize}`);\n  util.assert(\n      method === 'bilinear' || method === 'nearest',\n      () => `method must be bilinear or nearest, but was ${method}`);\n\n  const forward: ForwardFunc<Tensor4D> = (backend, save) =>\n      backend.cropAndResize(\n          $image, $boxes, $boxInd, cropSize, method, extrapolationValue);\n\n  const res = ENGINE.runKernelFunc(\n      forward, {images: $image, boxes: $boxes, boxInd: $boxInd}, null /* der */,\n      'CropAndResize', {method, extrapolationValue, cropSize});\n  return res;\n}\n\nexport const resizeBilinear = op({resizeBilinear_});\nexport const resizeNearestNeighbor = op({resizeNearestNeighbor_});\nexport const nonMaxSuppression = op({nonMaxSuppression_});\nexport const nonMaxSuppressionAsync = nonMaxSuppressionAsync_;\nexport const nonMaxSuppressionWithScore = op({nonMaxSuppressionWithScore_});\nexport const nonMaxSuppressionWithScoreAsync = nonMaxSuppressionWithScoreAsync_;\nexport const cropAndResize = op({cropAndResize_});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor3D, Tensor4D} from '../tensor';\n\nimport {Conv2DInfo} from './conv_util';\n\nexport type Activation = 'linear'|'relu'|'prelu'|'elu'|'relu6';\n\nexport type FusedBatchMatMulConfig = {\n  a: Tensor3D,\n  b: Tensor3D,\n  transposeA: boolean,\n  transposeB: boolean,\n  bias?: Tensor,\n  activation?: Activation,\n  preluActivationWeights?: Tensor\n};\n\nexport type FusedConv2DConfig = {\n  input: Tensor4D,\n  filter: Tensor4D,\n  convInfo: Conv2DInfo,\n  bias?: Tensor,\n  activation?: Activation,\n  preluActivationWeights?: Tensor\n};\n\n// Whether we should call fused ops.\nexport const shouldFuse = (gradientDepth: number, activation: Activation) => {\n  const gradientMode = gradientDepth > 0;\n  return !gradientMode || activation === 'linear';\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {conv2dDerFilter, conv2dDerInput, depthwiseConv2dDerFilter, depthwiseConv2dDerInput} from '../ops/conv';\nimport * as conv_util from '../ops/conv_util';\nimport {op} from '../ops/operation';\nimport {Tensor, Tensor3D, Tensor4D} from '../tensor';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {add} from './binary_ops';\nimport * as broadcast_util from './broadcast_util';\nimport {conv2d as unfusedConv2d, depthwiseConv2d as unfusedDepthwiseConv2d} from './conv';\nimport {Activation, shouldFuse} from './fused_util';\nimport {matMul as unfusedMatMul} from './matmul';\n\nimport {elu, prelu, relu, relu6} from './relu_ops';\n\n// Returns gradient for fused activation.\nconst getFusedDyActivation =\n    (dy: Tensor, y: Tensor, activation: Activation): Tensor => {\n      if (activation == null || activation === 'linear') {\n        return dy;\n      }\n      if (activation === 'relu') {\n        return dy.mul(y.step());\n      }\n      throw new Error(\n          `Gradient for activation ${activation} has not been ` +\n          `implemented yet.`);\n    };\n\n// Returns gradient for fused bias.\nconst getFusedBiasGradient = (bias: Tensor, dyActivation: Tensor): Tensor => {\n  let res = dyActivation;\n  const reduceAxes =\n      broadcast_util.getReductionAxes(bias.shape, dyActivation.shape);\n  if (reduceAxes.length > 0) {\n    res = res.sum(reduceAxes);\n  }\n  return res.reshape(bias.shape);\n};\n\nconst applyActivation =\n    (x: Tensor, activation: Activation, preluActivationWeights?: Tensor):\n        Tensor => {\n          if (activation === 'linear') {\n            return x;\n          } else if (activation === 'relu') {\n            return relu(x);\n          } else if (activation === 'elu') {\n            return elu(x);\n          } else if (activation === 'relu6') {\n            return relu6(x);\n          } else if (activation === 'prelu') {\n            return prelu(x, preluActivationWeights);\n          }\n          throw new Error(`Unknown fused activation ${activation}.`);\n        };\n\n/**\n * Computes the dot product of two matrices with optional activation and bias.\n *\n * ```js\n * const a = tf.tensor2d([-1, -2], [1, 2]);\n * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const bias = tf.tensor2d([1, 2], [1, 2]);\n *\n * tf.fused.matMul({a, b, bias, activation: 'relu'}).print();\n * ```\n *\n * @param obj An object with the following properties:\n * - `a` First matrix in dot product operation.\n * - `b` Second matrix in dot product operation.\n * - `transposeA` If true, `a` is transposed before multiplication.\n * - `transposeB` If true, `b` is transposed before multiplication.\n * - `bias` Matrix to be added to the result.\n * - `activation` Name of activation kernel (defaults to `linear`).\n * - `preluActivationWeights` Tensor of prelu weights.\n */\nfunction fusedMatMul_<T extends Tensor>({\n  a,\n  b,\n  transposeA = false,\n  transposeB = false,\n  bias,\n  activation = 'linear',\n  preluActivationWeights\n}: {\n  a: T|TensorLike,\n  b: T|TensorLike,\n  transposeA?: boolean,\n  transposeB?: boolean,\n  bias?: Tensor|TensorLike,\n  activation?: Activation,\n  preluActivationWeights?: Tensor\n}): T {\n  if (shouldFuse(ENGINE.state.gradientDepth, activation) === false) {\n    let result = unfusedMatMul(a, b, transposeA, transposeB);\n    if (bias != null) {\n      result = add(result, bias);\n    }\n\n    return applyActivation(result, activation, preluActivationWeights) as T;\n  }\n\n  let $a = convertToTensor(a, 'a', 'fused matMul');\n  let $b = convertToTensor(b, 'b', 'fused matMul');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const innerShapeA =\n      transposeA ? $a.shape[$a.rank - 2] : $a.shape[$a.rank - 1];\n  const innerShapeB =\n      transposeB ? $b.shape[$b.rank - 1] : $b.shape[$b.rank - 2];\n\n  const outerShapeA =\n      transposeA ? $a.shape[$a.rank - 1] : $a.shape[$a.rank - 2];\n  const outerShapeB =\n      transposeB ? $b.shape[$b.rank - 2] : $b.shape[$b.rank - 1];\n\n  const outerDimsA = $a.shape.slice(0, -2);\n  const outerDimsB = $b.shape.slice(0, -2);\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  util.assert(\n      $a.rank >= 2 && $b.rank >= 2 && $a.rank === $b.rank,\n      () =>\n          `Error in fused matMul: inputs must have the same rank of at least ` +\n          `2, got ranks ${$a.rank} and ${$b.rank}.`);\n\n  util.assert(\n      util.arraysEqual(outerDimsA, outerDimsB),\n      () => `Error in fused matMul: outer dimensions (${outerDimsA}) and (` +\n          `${outerDimsB}) of Tensors with shapes ${$a.shape} and ` +\n          `${$b.shape} must match.`);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in fused matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${$a.shape} and ` +\n          `${$b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const outShape = $a.shape.slice(0, -2).concat([outerShapeA, outerShapeB]);\n\n  const a3D = transposeA ? $a.as3D(batchDimA, innerShapeA, outerShapeA) :\n                           $a.as3D(batchDimA, outerShapeA, innerShapeA);\n  const b3D = transposeB ? $b.as3D(batchDimB, outerShapeB, innerShapeB) :\n                           $b.as3D(batchDimB, innerShapeB, outerShapeB);\n\n  let $bias: Tensor;\n  if (bias != null) {\n    $bias = convertToTensor(bias, 'bias', 'fused matMul');\n    [$bias] = makeTypesMatch($bias, $a);\n\n    broadcast_util.assertAndGetBroadcastShape(outShape, $bias.shape);\n  }\n\n  let $preluActivationWeights: Tensor;\n  if (preluActivationWeights != null) {\n    $preluActivationWeights = convertToTensor(\n        preluActivationWeights, 'prelu weights', 'fused matMul');\n  }\n\n  const grad = (dy: Tensor3D, saved: Tensor[]) => {\n    const [a3D, b3D, y] = saved;\n    const dyActivation = getFusedDyActivation(dy, y, activation);\n\n    let biasGradient = {};\n    if (bias != null) {\n      biasGradient = {$bias: () => getFusedBiasGradient($bias, dyActivation)};\n    }\n\n    if (!transposeA && !transposeB) {\n      return Object.assign(\n          {\n            $a: () => dyActivation.matMul(b3D as Tensor3D, false, true),\n            $b: () => a3D.matMul(dyActivation, true, false)\n          },\n          biasGradient);\n    } else if (!transposeA && transposeB) {\n      return Object.assign(\n          {\n            $a: () => dyActivation.matMul(b3D as Tensor3D, false, false),\n            $b: () => dyActivation.matMul(a3D as Tensor3D, true, false)\n          },\n          biasGradient);\n    } else if (transposeA && !transposeB) {\n      return Object.assign(\n          {\n            $a: () => b3D.matMul(dyActivation, false, true),\n            $b: () => a3D.matMul(dyActivation, false, false)\n          },\n          biasGradient);\n    } else {\n      return Object.assign(\n          {\n            $a: () => b3D.matMul(dyActivation, true, true),\n            $b: () => dyActivation.matMul(a3D as Tensor3D, true, true)\n          },\n          biasGradient);\n    }\n  };\n\n  const inputs: {\n    $a: Tensor,\n    $b: Tensor,\n    $bias?: Tensor,\n    $preluActivationWeights?: Tensor\n  } = {$a: a3D, $b: b3D};\n  if (bias != null) {\n    inputs.$bias = $bias;\n  }\n  if (preluActivationWeights != null) {\n    inputs.$preluActivationWeights = $preluActivationWeights;\n  }\n\n  const res = ENGINE.runKernelFunc((backend, save) => {\n    const y = backend.fusedBatchMatMul({\n      a: a3D,\n      b: b3D,\n      transposeA,\n      transposeB,\n      bias: $bias,\n      activation,\n      preluActivationWeights: $preluActivationWeights\n    });\n    save([a3D, b3D, y]);\n    return y;\n  }, inputs, grad);\n  return res.reshape(outShape) as T;\n}\n\n/**\n * Computes a 2D convolution over the input x, optionally fused with adding a\n * bias and applying an activation.\n *\n * ```js\n * const inputDepth = 2;\n * const inShape = [2, 2, 2, inputDepth];\n * const outputDepth = 2;\n * const fSize = 1;\n * const pad = 0;\n * const strides = 1;\n *\n * const x = tf.tensor4d( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n * 16], inShape);\n * const w = tf.tensor4d([-1, 1, -2, 0.5], [fSize, fSize, inputDepth,\n * outputDepth]);\n *\n * tf.fused.conv2d({ x, filter: w, strides, pad, dataFormat: 'NHWC',\n * dilations: [1, 1], bias: tf.scalar(5), activation: 'relu' }).print();\n * ```\n *\n * @param obj An object with the following properties:\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid` output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dataFormat An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n * @param bias Tensor to be added to the result.\n * @param activation Name of activation kernel (defaults to `linear`) to be\n *     applied\n *      after biasAdd.\n * @param preluActivationWeights Tensor of prelu weights to be applied as part\n *     of a `prelu` activation, typically the same shape as `x`.\n */\nfunction fusedConv2d_<T extends Tensor3D|Tensor4D>({\n  x,\n  filter,\n  strides,\n  pad,\n  dataFormat = 'NHWC',\n  dilations = [1, 1],\n  dimRoundingMode,\n  bias,\n  activation = 'linear',\n  preluActivationWeights\n}: {\n  x: T|TensorLike,\n  filter: Tensor4D|TensorLike,\n  strides: [number, number]|number,\n  pad: 'valid'|'same'|number,\n  dataFormat?: 'NHWC'|'NCHW',\n  dilations?: [number, number]|number,\n  dimRoundingMode?: 'floor'|'round'|'ceil',\n  bias?: Tensor|TensorLike,\n  activation?: Activation,\n  preluActivationWeights?: Tensor\n}): T {\n  activation = activation || 'linear';\n  if (shouldFuse(ENGINE.state.gradientDepth, activation) === false) {\n    let result = unfusedConv2d(\n        x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);\n    if (bias != null) {\n      result = add(result, bias);\n    }\n\n    return applyActivation(result, activation, preluActivationWeights) as T;\n  }\n\n  const $x = convertToTensor(x, 'x', 'conv2d');\n  const $filter = convertToTensor(filter, 'filter', 'conv2d');\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);\n  }\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in fused conv2d: input must be rank 4, but got rank ` +\n          `${x4D.rank}.`);\n  util.assert(\n      $filter.rank === 4,\n      () => `Error in fused conv2d: filter must be rank 4, but got rank ` +\n          `${$filter.rank}.`);\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in fused conv2d: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  util.assert(\n      x4D.shape[3] === $filter.shape[2],\n      () => `Error in conv2d: depth of input (${x4D.shape[3]}) must match ` +\n          `input depth for filter ${$filter.shape[2]}.`);\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in conv2D: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n  util.assert(\n      dataFormat === 'NHWC',\n      () => `Error in conv2d: got dataFormat of ${\n          dataFormat} but only NHWC is currently supported.`);\n\n  const convInfo = conv_util.computeConv2DInfo(\n      x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode);\n\n  let $bias: Tensor;\n  if (bias != null) {\n    $bias = convertToTensor(bias, 'bias', 'fused conv2d');\n    [$bias] = makeTypesMatch($bias, $x);\n\n    broadcast_util.assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);\n  }\n\n  let $preluActivationWeights: Tensor;\n  if (preluActivationWeights != null) {\n    $preluActivationWeights = convertToTensor(\n        preluActivationWeights, 'prelu weights', 'fused conv2d');\n  }\n\n  const grad = (dy: Tensor4D, saved: Tensor[]) => {\n    const [$filter, x4D, y] = saved as [Tensor4D, Tensor4D, Tensor4D];\n\n    const dyActivation = getFusedDyActivation(dy, y, activation) as Tensor4D;\n\n    util.assert(\n        conv_util.tupleValuesAreOne(dilations),\n        () => 'Error in gradient of fused conv2D: ' +\n            `dilation rates greater than 1 ` +\n            `are not yet supported in gradients. Got dilations '${dilations}'`);\n\n    let biasGradient = {};\n    if (bias != null) {\n      biasGradient = {bias: () => getFusedBiasGradient($bias, dyActivation)};\n    }\n\n    return Object.assign(\n        {\n          x: () =>\n              conv2dDerInput(x4D.shape, dyActivation, $filter, strides, pad),\n          filter: () =>\n              conv2dDerFilter(x4D, dyActivation, $filter.shape, strides, pad)\n        },\n        biasGradient);\n  };\n\n  const inputs: {\n    x: Tensor,\n    filter: Tensor,\n    bias?: Tensor,\n    preluActivationWeights?: Tensor\n  } = {x: x4D, filter: $filter};\n  if (bias != null) {\n    inputs.bias = $bias;\n  }\n  if (preluActivationWeights != null) {\n    inputs.preluActivationWeights = $preluActivationWeights;\n  }\n\n  const inputsToSave = [$filter, x4D];\n  const outputsToSave = [true];  // Save the only output.\n  const res = ENGINE.runKernelFunc(\n      (backend, save) => {\n        const res = backend.fusedConv2d({\n          input: x4D,\n          filter: $filter,\n          convInfo,\n          bias: $bias,\n          activation,\n          preluActivationWeights: $preluActivationWeights\n        });\n        save([$filter, x4D, res]);\n        return res;\n      },\n      inputs, grad, 'FusedConv2D', {convInfo, activation}, inputsToSave,\n      outputsToSave);\n\n  if (reshapedTo4D) {\n    return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n  }\n\n  return res as T;\n}\n\n/**\n * Computes depthwise 2D convolution, optionally fused with adding a\n * bias and applying an activation.\n *\n * Given a 4D `input` array and a `filter` array of shape\n * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing\n * `inChannels` convolutional filters of depth 1, this op applies a\n * different filter to each input channel (expanding from 1 channel to\n * `channelMultiplier` channels for each), then concatenates the results\n * together. The output has `inChannels * channelMultiplier` channels.\n *\n * See\n * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](\n *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)\n * for more details.\n *\n * @param obj An object with the following properties:\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter tensor, rank 4, of shape\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`. If strides is a single number, then `strideHeight ==\n * strideWidth`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n * @param bias Tensor to be added to the result.\n * @param activation Name of activation kernel (defaults to `linear`).\n * @param preluActivationWeights Tensor of prelu weights to be applied as part\n *     of a `prelu` activation, typically the same shape as `x`.\n */\nfunction fusedDepthwiseConv2d_<T extends Tensor3D|Tensor4D>({\n  x,\n  filter,\n  strides,\n  pad,\n  dataFormat = 'NHWC',\n  dilations = [1, 1],\n  dimRoundingMode,\n  bias,\n  activation = 'linear',\n  preluActivationWeights\n}: {\n  x: T|TensorLike,\n  filter: Tensor4D|TensorLike,\n  strides: [number, number]|number,\n  pad: 'valid'|'same'|number,\n  dataFormat?: 'NHWC'|'NCHW',\n  dilations?: [number, number]|number,\n  dimRoundingMode?: 'floor'|'round'|'ceil',\n  bias?: Tensor|TensorLike,\n  activation?: Activation,\n  preluActivationWeights?: Tensor\n}): T {\n  if (shouldFuse(ENGINE.state.gradientDepth, activation) === false) {\n    let result = unfusedDepthwiseConv2d(\n        x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);\n    if (bias != null) {\n      result = add(result, bias);\n    }\n\n    return applyActivation(result, activation, preluActivationWeights) as T;\n  }\n\n  const $x = convertToTensor(x, 'x', 'depthwiseConv2d');\n  const $filter = convertToTensor(filter, 'filter', 'depthwiseConv2d');\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);\n  }\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in fused depthwiseConv2d: input must be rank 4, but got ` +\n          `rank ${x4D.rank}.`);\n  util.assert(\n      $filter.rank === 4,\n      () => `Error in fused depthwiseConv2d: filter must be rank 4, ` +\n          `but got rank ${$filter.rank}.`);\n  util.assert(\n      x4D.shape[3] === $filter.shape[2],\n      () => `Error in fused depthwiseConv2d: number of input channels ` +\n          `(${x4D.shape[3]}) must match the inChannels dimension in ` +\n          `filter ${$filter.shape[2]}.`);\n  if (dilations == null) {\n    dilations = [1, 1];\n  }\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () =>\n          'Error in fused depthwiseConv2d: Either strides or dilations must ' +\n          `be 1. Got strides ${strides} and dilations '${dilations}'`);\n\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in fused depthwiseConv2d: pad must be an integer when ` +\n            `using dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  const convInfo = conv_util.computeConv2DInfo(\n      x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode,\n      true /* depthwise */);\n\n  let $bias: Tensor;\n  if (bias != null) {\n    $bias = convertToTensor(bias, 'bias', 'fused conv2d');\n    [$bias] = makeTypesMatch($bias, $x);\n\n    broadcast_util.assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);\n  }\n\n  let $preluActivationWeights: Tensor;\n  if (preluActivationWeights != null) {\n    $preluActivationWeights = convertToTensor(\n        preluActivationWeights, 'prelu weights', 'fused depthwiseConv2d');\n  }\n\n  const grad = (dy: Tensor4D, saved: Tensor[]) => {\n    util.assert(\n        conv_util.tupleValuesAreOne(dilations),\n        () => 'Error in gradient of fused depthwiseConv2d: dilation rates ' +\n            `greater than 1 are not yet supported. Got dilations ` +\n            `'${dilations}'`);\n    const [$filter, x4D, y] = saved;\n\n    const dyActivation = getFusedDyActivation(dy, y, activation) as Tensor4D;\n\n    let biasGradient = {};\n    if (bias != null) {\n      biasGradient = {bias: () => getFusedBiasGradient($bias, dyActivation)};\n    }\n\n    return Object.assign(\n        {\n          x: () => depthwiseConv2dDerInput(\n              (x4D as Tensor4D).shape, dyActivation, $filter as Tensor4D,\n              convInfo),\n          filter: () => depthwiseConv2dDerFilter(\n              x4D as Tensor4D, dyActivation, ($filter as Tensor4D).shape,\n              convInfo),\n        },\n        biasGradient);\n  };\n\n  const inputs: {\n    x: Tensor,\n    filter: Tensor,\n    bias?: Tensor,\n    preluActivationWeights?: Tensor\n  } = {x: x4D, filter: $filter};\n  if (bias != null) {\n    inputs.bias = $bias;\n  }\n  if (preluActivationWeights != null) {\n    inputs.preluActivationWeights = $preluActivationWeights;\n  }\n\n  const inputsToSave = [$filter, x4D];\n  const outputsToSave = [true];\n  const res = ENGINE.runKernelFunc(\n      (backend, save) => {\n        const res = backend.fusedDepthwiseConv2D({\n          input: x4D,\n          filter: $filter,\n          convInfo,\n          bias: $bias,\n          activation,\n          preluActivationWeights: $preluActivationWeights\n        });\n        save([$filter, x4D, res]);\n        return res;\n      },\n      inputs, grad, 'FusedDepthwiseConv2D', {convInfo, activation},\n      inputsToSave, outputsToSave);\n  if (reshapedTo4D) {\n    return res.as3D(res.shape[1], res.shape[2], res.shape[3]) as T;\n  }\n  return res as T;\n}\n\nexport const matMul = op({fusedMatMul_});\nexport const conv2d = op({fusedConv2d_});\nexport const depthwiseConv2d = op({fusedDepthwiseConv2d_});\n\nexport {Activation};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '../../kernel_registry';\nimport {assert} from '../../util';\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      assert(\n          t.dtype !== 'complex64',\n          () => `${opName} does not support complex64 tensors.`);\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as seedrandom from 'seedrandom';\n\nimport {ENGINE} from '../../engine';\nimport {env} from '../../environment';\n\nimport {warn} from '../../log';\nimport * as array_ops_util from '../../ops/array_ops_util';\nimport * as axis_util from '../../ops/axis_util';\nimport * as broadcast_util from '../../ops/broadcast_util';\nimport {complex, imag, real} from '../../ops/complex_ops';\nimport * as concat_util from '../../ops/concat_util';\nimport {Conv2DInfo, Conv3DInfo} from '../../ops/conv_util';\nimport * as erf_util from '../../ops/erf_util';\nimport {Activation, FusedBatchMatMulConfig, FusedConv2DConfig} from '../../ops/fused_util';\nimport * as gather_nd_util from '../../ops/gather_nd_util';\nimport * as ops from '../../ops/ops';\nimport {buffer, scalar, tensor, tensor4d} from '../../ops/ops';\nimport * as scatter_nd_util from '../../ops/scatter_nd_util';\nimport * as selu_util from '../../ops/selu_util';\nimport {computeFlatOffset, computeOutShape, isSliceContinous} from '../../ops/slice_util';\nimport {DataId, Scalar, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, Tensor5D, TensorBuffer} from '../../tensor';\nimport {BackendValues, DataType, DataValues, NumericDataType, Rank, ShapeMap, TypedArray, upcastType} from '../../types';\nimport * as util from '../../util';\nimport {getArrayFromDType, inferDtype, now, sizeFromShape} from '../../util';\nimport {BackendTimingInfo, DataStorage, EPSILON_FLOAT32, KernelBackend} from '../backend';\nimport * as backend_util from '../backend_util';\nimport * as complex_util from '../complex_util';\nimport {nonMaxSuppressionV3} from '../non_max_suppression_impl';\nimport {split} from '../split_shared';\nimport {tile} from '../tile_impl';\nimport {topkImpl} from '../topk_impl';\nimport {whereImpl} from '../where_impl';\nimport {assertNotComplex} from './cpu_util';\n\nfunction mapActivation(\n    backend: MathBackendCPU, x: Tensor, activation: Activation,\n    preluActivationWeights?: Tensor): Tensor {\n  if (activation === 'linear') {\n    return backend.linear(x);\n  } else if (activation === 'relu') {\n    return backend.relu(x);\n  } else if (activation === 'elu') {\n    return backend.elu(x);\n  } else if (activation === 'relu6') {\n    return backend.relu6(x);\n  } else if (activation === 'prelu') {\n    return backend.prelu(x, preluActivationWeights);\n  }\n  throw new Error(\n      `Activation ${activation} has not been implemented for the CPU backend.`);\n}\n\nexport interface TensorData<D extends DataType> {\n  values?: BackendValues;\n  dtype: D;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensors field.\n  // TODO(smilkov): Replace Tensor with TensorInfo when you modularize ops\n  // that work with complex tensors.\n  complexTensors?: {real: Tensor, imag: Tensor};\n}\n\nexport class MathBackendCPU extends KernelBackend {\n  public blockSize = 48;\n\n  data: DataStorage<TensorData<DataType>>;\n  private firstUse = true;\n\n  constructor() {\n    super();\n    this.data = new DataStorage(this, ENGINE);\n  }\n\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId {\n    if (this.firstUse) {\n      this.firstUse = false;\n      if (env().get('IS_NODE')) {\n        warn(\n            '\\n============================\\n' +\n            'Hi there 👋. Looks like you are running TensorFlow.js in ' +\n            'Node.js. To speed things up dramatically, install our node ' +\n            'backend, which binds to TensorFlow C++, by running ' +\n            'npm i @tensorflow/tfjs-node, ' +\n            'or npm i @tensorflow/tfjs-node-gpu if you have CUDA. ' +\n            'Then call require(\\'@tensorflow/tfjs-node\\'); (-gpu ' +\n            'suffix for CUDA) at the start of your program. ' +\n            'Visit https://github.com/tensorflow/tfjs-node for more details.' +\n            '\\n============================');\n      }\n    }\n    const dataId = {};\n    this.data.set(dataId, {values, dtype});\n    return dataId;\n  }\n\n  move(dataId: DataId, values: BackendValues, shape: number[], dtype: DataType):\n      void {\n    this.data.set(dataId, {values, dtype});\n  }\n\n  numDataIds(): number {\n    return this.data.numDataIds();\n  }\n\n  async read(dataId: DataId): Promise<BackendValues> {\n    return this.readSync(dataId);\n  }\n  readSync(dataId: DataId): BackendValues {\n    const {dtype, complexTensors} = this.data.get(dataId);\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensors.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensors.imag.dataId) as Float32Array;\n      return complex_util.mergeRealAndImagArrays(realValues, imagValues);\n    }\n    return this.data.get(dataId).values;\n  }\n\n  private bufferSync<R extends Rank>(t: Tensor<R>): TensorBuffer<R> {\n    const data = this.readSync(t.dataId);\n    let decodedData = data as DataValues;\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = (data as Uint8Array[]).map(d => util.decodeString(d));\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape, t.dtype, decodedData) as TensorBuffer<R>;\n  }\n\n  private makeOutput<T extends Tensor>(\n      values: BackendValues, shape: number[], dtype: DataType): T {\n    const dataId = this.write(values, shape, dtype);\n    return ENGINE.makeTensorFromDataId(dataId, shape, dtype, this) as T;\n  }\n\n  disposeData(dataId: DataId): void {\n    if (this.data.has(dataId)) {\n      const {complexTensors} = this.data.get(dataId);\n      if (complexTensors != null) {\n        complexTensors.real.dispose();\n        complexTensors.imag.dispose();\n      }\n      this.data.delete(dataId);\n    }\n  }\n\n  async time(f: () => void): Promise<BackendTimingInfo> {\n    const start = now();\n    f();\n    const kernelMs = now() - start;\n    return {kernelMs};\n  }\n\n  memory() {\n    return {\n      // Unreliable due to automatic gc. The numbers above are cumulative.\n      unreliable: true,\n      reasons:\n          ['The reported memory is an upper bound. Due to automatic garbage ' +\n           'collection, the true allocated memory may be less.']\n    };\n  }\n\n  complex<T extends Tensor>(real: T, imag: T): T {\n    const result = this.makeOutput(null, real.shape, 'complex64');\n\n    const resultData = this.data.get(result.dataId);\n    // The backend owns the reference to the underlying real and imaginary\n    // clones. These will explicitly get disposed when the complex tensor is\n    // disposed.\n    resultData.complexTensors = {\n      real: ENGINE.keep(real.clone()),\n      imag: ENGINE.keep(imag.clone())\n    };\n\n    return result as T;\n  }\n  real<T extends Tensor>(input: T): T {\n    const resultData = this.data.get(input.dataId);\n    return resultData.complexTensors.real.clone() as T;\n  }\n  imag<T extends Tensor>(input: T): T {\n    const resultData = this.data.get(input.dataId);\n    return resultData.complexTensors.imag.clone() as T;\n  }\n\n  slice<T extends Tensor>(x: T, begin: number[], size: number[]): T {\n    assertNotComplex(x, 'slice');\n\n    const isContinous = isSliceContinous(x.shape, begin, size);\n    if (isContinous) {\n      const flatOffset = computeFlatOffset(begin, x.strides);\n      const length = util.sizeFromShape(size);\n      const vals = this.readSync(x.dataId) as TypedArray;\n      return tensor(\n                 vals.subarray(flatOffset, flatOffset + length), size,\n                 x.dtype) as T;\n    }\n\n    const buffer = ops.buffer(size, x.dtype);\n    const xBuf = this.bufferSync(x);\n    for (let i = 0; i < buffer.size; ++i) {\n      const loc = buffer.indexToLoc(i);\n      const xLoc = loc.map((idx, j) => idx + begin[j]);\n      buffer.values[i] = xBuf.get(...xLoc);\n    }\n    return buffer.toTensor() as T;\n  }\n\n  stridedSlice<T extends Tensor>(\n      x: T, begin: number[], end: number[], strides: number[]): T {\n    assertNotComplex(x, 'stridedSlice');\n\n    const outShape = computeOutShape(begin, end, strides);\n\n    if (outShape.some(axis => axis === 0)) {\n      return ops.tensor([], outShape) as T;\n    }\n\n    const buffer = ops.buffer(outShape, x.dtype);\n    const xBuf = this.bufferSync(x);\n    for (let i = 0; i < buffer.size; i++) {\n      const loc = buffer.indexToLoc(i);\n\n      const newLoc: number[] = new Array(loc.length);\n      for (let j = 0; j < newLoc.length; j++) {\n        newLoc[j] = loc[j] * strides[j] + begin[j];\n      }\n      buffer.set(xBuf.get(...newLoc), ...loc);\n    }\n\n    return buffer.toTensor() as T;\n  }\n\n  diag(x: Tensor): Tensor {\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    const buffer = ops.buffer([x.size, x.size], x.dtype);\n    const vals = buffer.values;\n    for (let i = 0; i < xVals.length; i++) {\n      vals[i * x.size + i] = xVals[i];\n    }\n    return buffer.toTensor();\n  }\n\n  unstack(x: Tensor, axis: number): Tensor[] {\n    const num = x.shape[axis];\n    const outShape: number[] = new Array(x.rank - 1);\n    let outIndex = 0;\n    for (let i = 0; i < x.rank; i++) {\n      if (i !== axis) {\n        outShape[outIndex++] = x.shape[i];\n      }\n    }\n\n    const begin = new Array(x.rank).fill(0);\n    const size = x.shape.slice();\n    size[axis] = 1;\n    const res = new Array(num);\n    for (let i = 0; i < res.length; i++) {\n      begin[axis] = i;\n      res[i] = this.slice(x, begin, size).reshape(outShape);\n    }\n    return res;\n  }\n\n  reverse<T extends Tensor>(x: T, axis: number[]): T {\n    assertNotComplex(x, 'reverse');\n\n    const buffer = ops.buffer(x.shape, x.dtype);\n    const xBuf = this.bufferSync(x);\n\n    for (let i = 0; i < buffer.size; i++) {\n      const outLoc = buffer.indexToLoc(i);\n      const inLoc = outLoc.slice();\n      axis.forEach(ax => inLoc[ax] = x.shape[ax] - 1 - inLoc[ax]);\n      buffer.set(xBuf.get(...inLoc), ...outLoc);\n    }\n\n    return buffer.toTensor() as T;\n  }\n\n  concat(tensors: Tensor[], axis: number): Tensor {\n    if (tensors[0].dtype === 'complex64') {\n      const reals = tensors.map((t) => real(t));\n      const imags = tensors.map((t) => imag(t));\n      return complex(this.concat(reals, axis), this.concat(imags, axis));\n    }\n    const tensors2D = tensors.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      return t.as2D(-1, innerSize);\n    });\n    const outShape =\n        concat_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis */);\n    const values =\n        ops.buffer(outShape as [number, number], tensors[0].dtype as 'float32')\n            .values;\n    if (tensors2D[0].shape[0] === 1) {\n      // Use built-in TypedArray.set() method for speed.\n      let offset = 0;\n      tensors2D.forEach(t => {\n        values.set(this.readSync(t.dataId) as TypedArray, offset);\n        offset += t.size;\n      });\n    } else {\n      let colOffset = 0;\n      tensors2D.forEach(t => {\n        const tVals = this.readSync(t.dataId) as TypedArray;\n        let tIdx = 0;\n        for (let row = 0; row < t.shape[0]; ++row) {\n          const resIdx = row * outShape[1] + colOffset;\n          for (let col = 0; col < t.shape[1]; ++col) {\n            values[resIdx + col] = tVals[tIdx++];\n          }\n        }\n        colOffset += t.shape[1];\n      });\n    }\n    const finalOutShape =\n        concat_util.computeOutShape(tensors.map(t => t.shape), axis);\n    return tensor(values, finalOutShape, tensors[0].dtype);\n  }\n\n  neg<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'neg');\n\n    return this.multiply(ops.scalar(-1), x) as T;\n  }\n\n  add(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      return this.broadcastedBinaryComplexOp(\n          a.cast('complex64'), b.cast('complex64'),\n          (aReal, aImag, bReal, bImag) => {\n            return {real: aReal + bReal, imag: aImag + bImag};\n          });\n    }\n\n    return this.broadcastedBinaryOp(\n        a, b, upcastType(a.dtype, b.dtype),\n        (aValue, bValue) => aValue + bValue);\n  }\n\n  addN<T extends Tensor>(tensors: T[]): T {\n    assertNotComplex(tensors, 'addN');\n\n    const vals = tensors.map(t => this.readSync(t.dataId) as TypedArray);\n    const result = ops.buffer(tensors[0].shape, tensors[0].dtype as 'float32');\n    const resultVals = result.values;\n    for (let i = 0; i < tensors.length; i++) {\n      const currVals = vals[i];\n      for (let j = 0; j < resultVals.length; j++) {\n        resultVals[j] += currVals[j];\n      }\n    }\n    return result.toTensor() as T;\n  }\n\n  subtract(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      return this.broadcastedBinaryComplexOp(\n          a.cast('complex64'), b.cast('complex64'),\n          (aReal, aImag, bReal, bImag) => {\n            return {real: aReal - bReal, imag: aImag - bImag};\n          });\n    }\n\n    return this.broadcastedBinaryOp(\n        a, b, upcastType(a.dtype, b.dtype),\n        (aValue, bValue) => aValue - bValue);\n  }\n\n  pow<T extends Tensor>(a: T, b: Tensor): T {\n    assertNotComplex([a, b], 'pow');\n\n    return this.broadcastedBinaryOp(\n               a, b, a.dtype, (aValue, bValue) => Math.pow(aValue, bValue)) as\n        T;\n  }\n\n  batchMatMul(\n      a: Tensor3D, b: Tensor3D, transposeA: boolean,\n      transposeB: boolean): Tensor3D {\n    assertNotComplex([a, b], 'matMul');\n\n    const sharedDim = transposeA ? a.shape[1] : a.shape[2];\n    const leftDim = transposeA ? a.shape[2] : a.shape[1];\n    const rightDim = transposeB ? b.shape[1] : b.shape[2];\n    const batchDim = a.shape[0];\n\n    const aValues = this.readSync(a.dataId) as TypedArray;\n    const bValues = this.readSync(b.dataId) as TypedArray;\n    const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n        [a.strides[0], 1, a.strides[1]] :\n        [a.strides[0], a.strides[1], 1];\n    const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n        [1, b.strides[1], b.strides[0]] :\n        [b.strides[1], 1, b.strides[0]];\n\n    const size = leftDim * rightDim;\n    const result = buffer([batchDim, leftDim, rightDim], a.dtype);\n    const resVals = result.values as TypedArray;\n    const blockSize = this.blockSize;\n\n    for (let b = 0; b < batchDim; b++) {\n      for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n        for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n          for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n            // for when blockSize doesn't evenly divide the input\n            const iBlock = Math.min(i0 + blockSize, leftDim);\n            const jBlock = Math.min(j0 + blockSize, rightDim);\n            const kBlock = Math.min(k0 + blockSize, sharedDim);\n\n            for (let i = i0; i < iBlock; i++) {\n              for (let j = j0; j < jBlock; j++) {\n                let sum = 0.0;\n\n                for (let k = k0; k < kBlock; k++) {\n                  sum += aValues[b * aBatch + i * aOuterStep + k * aInnerStep] *\n                      bValues[k * bInnerStep + j * bOuterStep + b * bBatch];\n                }\n                resVals[b * size + (i * rightDim + j)] += sum;\n              }\n            }\n          }\n        }\n      }\n    }\n    return result.toTensor() as Tensor3D;\n  }\n\n  fusedBatchMatMul(\n      {a, b, transposeA, transposeB, bias, activation, preluActivationWeights}:\n          FusedBatchMatMulConfig): Tensor3D {\n    let result = this.batchMatMul(a, b, transposeA, transposeB);\n    if (bias) {\n      result = this.add(result, bias) as Tensor3D;\n    }\n    if (activation) {\n      result =\n          mapActivation(this, result, activation, preluActivationWeights) as\n          Tensor3D;\n    }\n    return result;\n  }\n\n  multiply(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      return this.broadcastedBinaryComplexOp(\n          a.cast('complex64'), b.cast('complex64'),\n          (aReal, aImag, bReal, bImag) => {\n            return {\n              real: aReal * bReal - aImag * bImag,\n              imag: aReal * bImag + aImag * bReal\n            };\n          });\n    }\n\n    return this.broadcastedBinaryOp(\n        a, b, upcastType(a.dtype, b.dtype),\n        (aValue, bValue) => aValue * bValue);\n  }\n\n  realDivide(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'realDivide');\n\n    const op = (a: number, b: number) => a / b;\n    const outputDtype = 'float32';\n    return this.broadcastedBinaryOp(a, b, outputDtype, op);\n  }\n\n  floorDiv(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'floorDiv');\n\n    const op = (a: number, b: number) => Math.floor(a / b);\n    const outputDtype = 'int32';\n    return this.broadcastedBinaryOp(a, b, outputDtype, op);\n  }\n\n  sum(x: Tensor, axes: number[]): Tensor {\n    assertNotComplex(x, 'sum');\n\n    axis_util.assertAxesAreInnerMostDims('sum', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const resultDtype = upcastType(x.dtype, 'int32');\n    const result = ops.zeros(outShape, resultDtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let sum = 0;\n      for (let j = 0; j < reduceSize; ++j) {\n        sum += aVals[offset + j];\n      }\n      vals[i] = sum;\n    }\n    return result;\n  }\n\n  prod(x: Tensor, axes: number[]): Tensor {\n    assertNotComplex(x, 'sum');\n\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const resultDtype = upcastType(x.dtype, 'int32');\n    const result = ops.zeros(outShape, resultDtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let prod = 1;\n      for (let j = 0; j < reduceSize; ++j) {\n        prod *= aVals[offset + j];\n      }\n      vals[i] = prod;\n    }\n    return result;\n  }\n\n  unsortedSegmentSum<T extends Tensor>(\n      x: T, segmentIds: Tensor1D, numSegments: number): Tensor {\n    assertNotComplex(x, 'unsortedSegmentSum');\n\n    const res = [];\n\n    // Reshape the segment id's so that they can be broadcast with\n    // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n    const numIters = x.rank - segmentIds.rank;\n    for (let i = 0; i < numIters; ++i) {\n      segmentIds = segmentIds.expandDims(i + 1);\n    }\n\n    for (let i = 0; i < numSegments; ++i) {\n      const segmentId = ops.scalar(i, 'int32');\n      const mask = ops.equal(segmentId, segmentIds).asType('float32');\n      const sum = mask.mul(x).sum(0);\n      res.push(sum);\n    }\n\n    return ops.stack(res);\n  }\n\n  argMin(x: Tensor, axis: number): Tensor {\n    assertNotComplex(x, 'argMin');\n\n    const axes = [axis];\n    axis_util.assertAxesAreInnerMostDims('argMin', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = ops.zeros(outShape, 'int32');\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let min = aVals[offset];\n      let minIndex = 0;\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        if (value < min) {\n          min = value;\n          minIndex = j;\n        }\n      }\n      vals[i] = minIndex;\n    }\n    return result;\n  }\n\n  argMax(x: Tensor, axis: number): Tensor {\n    assertNotComplex(x, 'argMax');\n\n    const axes = [axis];\n    axis_util.assertAxesAreInnerMostDims('argMax', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = ops.zeros(outShape, 'int32');\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let max = aVals[offset];\n      let maxIndex = 0;\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        if (value > max) {\n          max = value;\n          maxIndex = j;\n        }\n      }\n      vals[i] = maxIndex;\n    }\n    return result;\n  }\n\n  cumsum(x: Tensor, axis: number, exclusive: boolean, reverse: boolean):\n      Tensor {\n    assertNotComplex(x, 'cumsum');\n\n    if (axis !== x.rank - 1) {\n      throw new Error(\n          `backend.cumsum in CPU expects an inner-most axis=${x.rank - 1} ` +\n          `but got axis=${axis}`);\n    }\n    const resultDtype = upcastType(x.dtype, 'int32');\n    const result = ops.zeros(x.shape, resultDtype);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    const finalDim = x.shape[x.rank - 1];\n    const indexAdjuster = reverse ?\n        (i: number, j: number) => i + finalDim - j - 1 :\n        (i: number, j: number) => i + j;\n    for (let i = 0; i < aVals.length; i += finalDim) {\n      for (let j = 0; j < finalDim; j++) {\n        const idx = indexAdjuster(i, j);\n        if (j === 0) {\n          vals[idx] = exclusive ? 0 : aVals[idx];\n        } else {\n          const prevIdx = indexAdjuster(i, j - 1);\n          vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                                  aVals[idx] + vals[prevIdx];\n        }\n      }\n    }\n    return result;\n  }\n\n  equal(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'equal');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal === bVal) ? 1 : 0;\n    });\n  }\n\n  notEqual(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'notEqual');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal !== bVal) ? 1 : 0;\n    });\n  }\n\n  less(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'less');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal < bVal) ? 1 : 0;\n    });\n  }\n\n  lessEqual(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'lessEqual');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal <= bVal) ? 1 : 0;\n    });\n  }\n\n  greater(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'greater');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal > bVal) ? 1 : 0;\n    });\n  }\n\n  greaterEqual(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'greaterEqual');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal >= bVal) ? 1 : 0;\n    });\n  }\n\n  logicalNot<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'logicalNot');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Uint8Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = values[i] ? 0 : 1;\n    }\n    return this.makeOutput(newValues, x.shape, 'bool');\n  }\n\n  logicalAnd(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'logicalAnd');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return aVal && bVal;\n    });\n  }\n\n  logicalOr(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'logicalOr');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return aVal || bVal;\n    });\n  }\n\n  select(condition: Tensor, a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([condition, a, b], 'select');\n\n    const values = this.readSync(condition.dataId) as TypedArray;\n    const aValues = this.readSync(a.dataId) as TypedArray;\n    const bValues = this.readSync(b.dataId) as TypedArray;\n    const result = ops.zeros(a.shape, upcastType(a.dtype, b.dtype));\n    const newValues = this.readSync(result.dataId) as TypedArray;\n    let index = 0;\n    const offset = condition.rank === 0 || condition.rank > 1 || a.rank === 1 ?\n        1 :\n        util.sizeFromShape(a.shape.slice(1));\n\n    for (let i = 0; i < values.length; i++) {\n      for (let j = 0; j < offset; j++) {\n        if (values[i] === 1) {\n          newValues[index++] = aValues[i];\n        } else {\n          newValues[index++] = bValues[i];\n        }\n      }\n    }\n\n    return result;\n  }\n\n  where(condition: Tensor): Tensor2D {\n    assertNotComplex([condition], 'where');\n\n    const condVals = this.readSync(condition.dataId) as TypedArray;\n    return whereImpl(condition.shape, condVals);\n  }\n\n  topk<T extends Tensor>(x: T, k: number, sorted: boolean): [T, T] {\n    assertNotComplex(x, 'topk');\n\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    return topkImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n  }\n\n  min(x: Tensor, axes: number[]): Tensor {\n    assertNotComplex(x, 'min');\n\n    axis_util.assertAxesAreInnerMostDims('min', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = ops.zeros(outShape, x.dtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let min = aVals[offset];\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        if (value < min) {\n          min = value;\n        }\n      }\n      vals[i] = min;\n    }\n    return result;\n  }\n\n  minimum(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'minimum');\n\n    return this.broadcastedBinaryOp(\n        a, b, a.dtype, (aVal, bVal) => Math.min(aVal, bVal));\n  }\n\n  mod(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'mod');\n\n    return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => {\n      const rem = aVal % bVal;\n      if ((aVal < 0 && bVal < 0) || (aVal >= 0 && bVal >= 0)) {\n        return rem;\n      } else {\n        return (rem + bVal) % bVal;\n      }\n    });\n  }\n\n  max(x: Tensor, axes: number[]): Tensor {\n    assertNotComplex(x, 'max');\n\n    axis_util.assertAxesAreInnerMostDims('max', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = ops.zeros(outShape, x.dtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let max = aVals[offset];\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        if (value > max) {\n          max = value;\n        }\n      }\n      vals[i] = max;\n    }\n    return result;\n  }\n\n  maximum(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'maximum');\n\n    return this.broadcastedBinaryOp(\n        a, b, a.dtype, (aVal, bVal) => Math.max(aVal, bVal));\n  }\n\n  all(x: Tensor, axes: number[]): Tensor {\n    assertNotComplex(x, 'all');\n\n    axis_util.assertAxesAreInnerMostDims('all', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = ops.zeros(outShape, x.dtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let all = aVals[offset];\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        all = all && value;\n      }\n      vals[i] = all;\n    }\n    return result;\n  }\n\n  any(x: Tensor, axes: number[]): Tensor {\n    assertNotComplex(x, 'any');\n\n    axis_util.assertAxesAreInnerMostDims('any', axes, x.rank);\n    const [outShape, reduceShape] =\n        axis_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = ops.zeros(outShape, x.dtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let anyVal = aVals[offset];\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        anyVal = anyVal || value;\n      }\n      vals[i] = anyVal;\n    }\n    return result;\n  }\n\n  squaredDifference(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'squaredDifference');\n\n    return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => {\n      const diff = aVal - bVal;\n      return diff * diff;\n    });\n  }\n\n  ceil<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'ceil');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = Math.ceil(values[i]);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  floor<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'floor');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = Math.floor(values[i]);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  sign<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'x');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      if (values[i] < 0) {\n        newValues[i] = -1;\n      } else if (values[i] > 0) {\n        newValues[i] = 1;\n      } else {\n        newValues[i] = 0;\n      }\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  isNaN<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'x');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Uint8Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      if (Number.isNaN(values[i])) {\n        newValues[i] = 1;\n      }\n    }\n    return this.makeOutput(newValues, x.shape, 'bool');\n  }\n\n  isInf<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'x');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Uint8Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      if (Math.abs(values[i]) === Infinity) {\n        newValues[i] = 1;\n      }\n    }\n    return this.makeOutput(newValues, x.shape, 'bool');\n  }\n\n  isFinite<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'x');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Uint8Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      if (Number.isFinite(values[i])) {\n        newValues[i] = 1;\n      }\n    }\n    return this.makeOutput(newValues, x.shape, 'bool');\n  }\n\n  round<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'round');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      // The algorithm is based on banker's rounding.\n      const base = Math.floor(values[i]);\n      if (values[i] - base < 0.5) {\n        newValues[i] = Math.floor(values[i]);\n      } else if (values[i] - base > 0.5) {\n        newValues[i] = Math.ceil(values[i]);\n      } else {\n        if (base % 2.0 === 0.0) {\n          newValues[i] = base;\n        } else {\n          newValues[i] = base + 1.0;\n        }\n      }\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  exp<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'exp');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = Math.exp(values[i]);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  expm1<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'expm1');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = Math.expm1(values[i]);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  log<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'log');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = Math.log(value);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  log1p<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'log1p');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = Math.log1p(value);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  sqrt<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'sqrt');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = Math.sqrt(value);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  rsqrt<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'rsqrt');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = 1 / Math.sqrt(value);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  reciprocal<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'reciprocal');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = 1 / values[i];\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  linear<T extends Tensor>(x: T): T {\n    return x;\n  }\n\n  relu<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'relu');\n\n    const res = ops.zeros(x.shape, x.dtype);\n    const resVals = this.readSync(res.dataId) as TypedArray;\n    const inVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < inVals.length; ++i) {\n      resVals[i] = Math.max(0, inVals[i]);\n    }\n    return res as T;\n  }\n\n  relu6<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'relu');\n\n    const res = ops.zeros(x.shape, x.dtype);\n    const resVals = this.readSync(res.dataId) as TypedArray;\n    const inVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < inVals.length; ++i) {\n      resVals[i] = Math.min(Math.max(0, inVals[i]), 6);\n    }\n    return res as T;\n  }\n\n  prelu<T extends Tensor>(x: T, a: T): T {\n    assertNotComplex([x, a], 'prelu');\n\n    return this.broadcastedBinaryOp(\n               x, a, x.dtype,\n               (xValue, aValue) => xValue < 0 ? aValue * xValue : xValue) as T;\n  }\n\n  elu<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'elu');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      const v = values[i];\n      if (v >= 0) {\n        resultValues[i] = v;\n      } else {\n        resultValues[i] = (Math.exp(v) - 1);\n      }\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  eluDer<T extends Tensor>(dy: T, y: T): T {\n    assertNotComplex([dy, y], 'eluDer');\n\n    const resultValues = new Float32Array(y.size);\n    const values = this.readSync(y.dataId) as TypedArray;\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      const v = values[i];\n      if (v >= 1) {\n        resultValues[i] = dyValues[i];\n      } else {\n        resultValues[i] = dyValues[i] * (v + 1);\n      }\n    }\n    return this.makeOutput(resultValues, y.shape, 'float32');\n  }\n\n  selu<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'selu');\n\n    // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n    // see: https://arxiv.org/abs/1706.02515\n    const scaleAlpha = selu_util.SELU_SCALEALPHA;\n    const scale = selu_util.SELU_SCALE;\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      const v = values[i];\n      if (v >= 0) {\n        resultValues[i] = scale * v;\n      } else {\n        resultValues[i] = scaleAlpha * (Math.exp(v) - 1);\n      }\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  clip<T extends Tensor>(x: T, min: number, max: number): T {\n    assertNotComplex(x, 'clip');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      const v = values[i];\n      resultValues[i] = v > max ? max : (v < min ? min : v);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  abs<T extends Tensor>(x: T): T {\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.abs(values[i]);\n    }\n\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  complexAbs<T extends Tensor>(x: T): T {\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n\n    for (let i = 0; i < x.size; ++i) {\n      const real = values[i * 2];\n      const imag = values[i * 2 + 1];\n      resultValues[i] = Math.hypot(real, imag);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  int<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'int');\n\n    const resultValues = new Int32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = values[i];\n    }\n    return this.makeOutput(resultValues, x.shape, 'int32');\n  }\n\n  sigmoid<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'sigmoid');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = 1 / (1 + Math.exp(-values[i]));\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  softplus<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'softplus');\n\n    // mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n\n    // epsilon is the difference between 1.0 and the next representable float.\n    // For a single precision 32 bit float this should be 2^-23, see:\n    // https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\n    const epsilon = 1.1920928955078125e-7;\n    const threshold = Math.log(epsilon) + 2.0;\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n\n    for (let i = 0; i < values.length; ++i) {\n      // Value above which exp(x) may overflow, but softplus(x) == x\n      // is within machine epsilon.\n      const tooLarge = values[i] > -threshold;\n\n      // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n      // is within machine epsilon.\n      const tooSmall = values[i] < threshold;\n\n      const expX = Math.exp(values[i]);\n      let result;\n\n      if (tooSmall) {\n        result = expX;\n      } else if (tooLarge) {\n        result = values[i];\n      } else {\n        result = Math.log(1.0 + expX);\n      }\n      resultValues[i] = result;\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  sin<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'sin');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.sin(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  cos<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'cos');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.cos(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  tan<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'tan');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.tan(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  asin<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'asin');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.asin(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  acos<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'acos');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.acos(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  atan<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'atan');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.atan(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  atan2<T extends Tensor>(a: T, b: T): T {\n    assertNotComplex([a, b], 'atan2');\n\n    return this.broadcastedBinaryOp(\n               a, b, a.dtype, (aValue, bValue) => Math.atan2(aValue, bValue)) as\n        T;\n  }\n\n  sinh<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'sinh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.sinh(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  cosh<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'cosh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.cosh(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  tanh<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'tanh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = util.tanh(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  asinh<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'asinh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.asinh(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  acosh<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'acosh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.acosh(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  atanh<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'atanh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.atanh(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  erf<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'erf');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    const p = erf_util.ERF_P;\n    const a1 = erf_util.ERF_A1;\n    const a2 = erf_util.ERF_A2;\n    const a3 = erf_util.ERF_A3;\n    const a4 = erf_util.ERF_A4;\n    const a5 = erf_util.ERF_A5;\n    for (let i = 0; i < values.length; ++i) {\n      const sign = Math.sign(values[i]);\n      const v = Math.abs(values[i]);\n      const t = 1.0 / (1.0 + p * v);\n      resultValues[i] = sign *\n          (1.0 -\n           (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\n               Math.exp(-v * v));\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  step<T extends Tensor>(x: T, alpha = 0): T {\n    assertNotComplex(x, 'step');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      if (isNaN(value)) {\n        resultValues[i] = NaN;\n      } else {\n        resultValues[i] = value > 0 ? 1 : alpha;\n      }\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  fusedConv2d(\n      {input, filter, convInfo, bias, activation, preluActivationWeights}:\n          FusedConv2DConfig): Tensor4D {\n    let result = this.conv2d(input, filter, convInfo);\n\n    if (bias) {\n      result = this.add(result, bias) as Tensor4D;\n    }\n    if (activation) {\n      result =\n          mapActivation(this, result, activation, preluActivationWeights) as\n          Tensor4D;\n    }\n    return result;\n  }\n\n  conv2d(x: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    assertNotComplex([x, filter], 'conv2d');\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const padLeft = convInfo.padInfo.left;\n    const padTop = convInfo.padInfo.top;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const y = ops.buffer(convInfo.outShape, x.dtype as 'float32');\n\n    const xBatchStride = x.strides[0];\n    const xRowStride = isChannelsLast ? x.strides[1] : x.strides[2];\n    const xColStride = isChannelsLast ? x.strides[2] : 1;\n    const xChannelStride = isChannelsLast ? 1 : x.strides[1];\n    const yBatchStride = y.strides[0];\n    const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n    const yColStride = isChannelsLast ? y.strides[2] : 1;\n    const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    const wVals = this.readSync(filter.dataId) as TypedArray;\n    const yVals = y.values;\n\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      const xOffset1 = b * xBatchStride;\n      const yOffset1 = b * yBatchStride;\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const yOffset2 = yOffset1 + yR * yRowStride;\n        const xRCorner = yR * convInfo.strideHeight - padTop;\n        for (let wR = 0; wR < filterHeight; wR++) {\n          const xR = xRCorner + wR * dilationHeight;\n          if (xR < 0 || xR >= convInfo.inHeight) {\n            continue;\n          }\n          const wOffset1 = wR * filter.strides[0];\n          const xOffset2 = xOffset1 + xR * xRowStride;\n          for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n            const yOffset3 = yOffset2 + yC * yColStride;\n            const xCCorner = yC * convInfo.strideWidth - padLeft;\n            for (let wC = 0; wC < filterWidth; wC++) {\n              const xC = xCCorner + wC * dilationWidth;\n              if (xC < 0 || xC >= convInfo.inWidth) {\n                continue;\n              }\n              const wOffset2 = wOffset1 + wC * filter.strides[1];\n              const xOffset3 = xOffset2 + xC * xColStride;\n              let wOffset3 = wOffset2;\n              for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                const xVal = xVals[xOffset3 + d1 * xChannelStride];\n                for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                  yVals[yOffset3 + d2 * yChannelStride] +=\n                      xVal * wVals[wOffset3 + d2];\n                }\n                wOffset3 += convInfo.outChannels;\n              }\n            }\n          }\n        }\n      }\n    }\n    return y.toTensor() as Tensor4D;\n  }\n\n  conv3d(x: Tensor5D, filter: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const padFront = convInfo.padInfo.front;\n    const padLeft = convInfo.padInfo.left;\n    const padTop = convInfo.padInfo.top;\n    const y = ops.buffer<Rank.R5>(convInfo.outShape, x.dtype as 'float32');\n\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    const wVals = this.readSync(filter.dataId) as TypedArray;\n    const yVals = y.values;\n\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      const xOffset1 = b * x.strides[0];\n      const yOffset1 = b * y.strides[0];\n      for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n        const yOffset2 = yOffset1 + yF * y.strides[1];\n        const xFCorner = yF * convInfo.strideDepth - padFront;\n        for (let wF = 0; wF < filterDepth; wF++) {\n          const xF = xFCorner + wF * dilationDepth;\n          if (xF < 0 || xF >= convInfo.inDepth) {\n            continue;\n          }\n          const wOffset1 = wF * filter.strides[0];\n          const xOffset2 = xOffset1 + xF * x.strides[1];\n\n          for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n            const yOffset3 = yOffset2 + yR * y.strides[2];\n            const xRCorner = yR * convInfo.strideHeight - padTop;\n            for (let wR = 0; wR < filterHeight; wR++) {\n              const xR = xRCorner + wR * dilationHeight;\n              if (xR < 0 || xR >= convInfo.inHeight) {\n                continue;\n              }\n              const wOffset2 = wOffset1 + wR * filter.strides[1];\n              const xOffset3 = xOffset2 + xR * x.strides[2];\n              for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n                const xCCorner = yC * convInfo.strideWidth - padLeft;\n                for (let wC = 0; wC < filterWidth; wC++) {\n                  const xC = xCCorner + wC * dilationWidth;\n                  if (xC < 0 || xC >= convInfo.inWidth) {\n                    continue;\n                  }\n                  const wOffset3 = wOffset2 + wC * filter.strides[2];\n                  const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                  let wOffset4 = wOffset3;\n                  for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                    const xVal = xVals[xOffset4 + d1];\n                    for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                      yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                    }\n                    wOffset4 += convInfo.outChannels;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    return y.toTensor();\n  }\n\n  conv2dDerInput(dy: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    assertNotComplex([dy, filter], 'conv2dDerInput');\n\n    const dx = ops.buffer<Rank.R4>(convInfo.inShape, 'float32');\n    const dxValues = dx.values;\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    const fltValues = this.readSync(filter.dataId) as TypedArray;\n    const [fltS0, fltS1, fltS2] = filter.strides;\n    const {\n      batchSize,\n      filterHeight,\n      filterWidth,\n      inChannels,\n      inHeight,\n      inWidth,\n      outChannels,\n      outHeight,\n      outWidth,\n      strideHeight,\n      strideWidth,\n      dataFormat\n    } = convInfo;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const xBatchStride = dx.strides[0];\n    const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n    const xColStride = isChannelsLast ? dx.strides[2] : 1;\n    const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n    const yBatchStride = dy.strides[0];\n    const yRowStride = isChannelsLast ? dy.strides[1] : dy.strides[2];\n    const yColStride = isChannelsLast ? dy.strides[2] : 1;\n    const yChannelStride = isChannelsLast ? 1 : dy.strides[1];\n\n    for (let b = 0; b < batchSize; ++b) {\n      for (let d1 = 0; d1 < inChannels; ++d1) {\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yR = xRMin; yR < yRMax; ++yR) {\n              const wR = yR * strideHeight - xRCorner;\n\n              for (let yC = xCMin; yC < yCMax; ++yC) {\n                const wC = yC * strideWidth - xCCorner;\n                const dyOffset =\n                    yBatchStride * b + yRowStride * yR + yColStride * yC;\n                const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                    fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n                for (let d2 = 0; d2 < outChannels; ++d2) {\n                  const pixel = dyValues[dyOffset + yChannelStride * d2];\n                  const weight = fltValues[fltOffset + d2];\n                  dotProd += pixel * weight;\n                }\n              }\n            }\n            const dxOffset = xBatchStride * b + xRowStride * xR +\n                xColStride * xC + xChannelStride * d1;\n            dxValues[dxOffset] = dotProd;\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  conv3dDerInput(dy: Tensor5D, filter: Tensor5D, convInfo: Conv3DInfo):\n      Tensor5D {\n    const dx = ops.buffer<Rank.R5>(convInfo.inShape, 'float32');\n    const dxValues = dx.values;\n    const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    const [dyS0, dyS1, dyS2, dyS3] = dy.strides;\n    const fltValues = this.readSync(filter.dataId) as TypedArray;\n    const [fltS0, fltS1, fltS2, fltS3] = filter.strides;\n    const {\n      batchSize,\n      filterDepth,\n      filterHeight,\n      filterWidth,\n      inChannels,\n      inDepth,\n      inHeight,\n      inWidth,\n      outChannels,\n      outDepth,\n      outHeight,\n      outWidth,\n      strideDepth,\n      strideHeight,\n      strideWidth\n    } = convInfo;\n    const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n    for (let b = 0; b < batchSize; ++b) {\n      for (let d1 = 0; d1 < inChannels; ++d1) {\n        // Frames of depth\n        for (let xF = 0; xF < inDepth; ++xF) {\n          const xFCorner = xF - frontPad;\n          const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n          const yFMax =\n              Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n\n          // Rows as per standard 2d matrix notation\n          for (let xR = 0; xR < inHeight; ++xR) {\n            const xRCorner = xR - topPad;\n            const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n            const yRMax =\n                Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n            // Columns as per standard 2d matrix notation\n            for (let xC = 0; xC < inWidth; ++xC) {\n              const xCCorner = xC - leftPad;\n              const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n              const yCMax =\n                  Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n              let dotProd = 0;\n              for (let yF = xFMin; yF < yFMax; ++yF) {\n                const wF = yF * strideDepth - xFCorner;\n\n                for (let yR = xRMin; yR < yRMax; ++yR) {\n                  const wR = yR * strideHeight - xRCorner;\n\n                  for (let yC = xCMin; yC < yCMax; ++yC) {\n                    const wC = yC * strideWidth - xCCorner;\n                    const dyOffset =\n                        dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                    const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                        fltS1 * (filterHeight - 1 - wR) +\n                        fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n\n                    for (let d2 = 0; d2 < outChannels; ++d2) {\n                      const pixel = dyValues[dyOffset + d2];\n                      const weight = fltValues[fltOffset + d2];\n                      dotProd += pixel * weight;\n                    }\n                  }\n                }\n              }\n              dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                  dotProd;\n            }\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  conv2dDerFilter(x: Tensor4D, dy: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    assertNotComplex([x, dy], 'conv2dDerFilter');\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    const dW = ops.buffer<Rank.R4>(convInfo.filterShape, 'float32');\n\n    const leftPad = convInfo.padInfo.left;\n    const topPad = convInfo.padInfo.top;\n    const xBuf = this.bufferSync(x);\n    const dyBuf = this.bufferSync(dy);\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            // Need to convolve.\n            let dotProd = 0;\n            for (let b = 0; b < convInfo.batchSize; ++b) {\n              for (let yR = yRMin; yR < yRMax; ++yR) {\n                const xR = wR + yR * strideHeight - topPad;\n                for (let yC = yCMin; yC < yCMax; ++yC) {\n                  const xC = wC + yC * strideWidth - leftPad;\n                  if (isChannelsLast) {\n                    dotProd +=\n                        xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n                  } else {\n                    dotProd +=\n                        xBuf.get(b, d1, xR, xC) * dyBuf.get(b, d2, yR, yC);\n                  }\n                }\n              }\n            }\n            dW.set(dotProd, wR, wC, d1, d2);\n          }\n        }\n      }\n    }\n    return dW.toTensor();\n  }\n\n  conv3dDerFilter(x: Tensor5D, dy: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const dw = ops.buffer<Rank.R5>(convInfo.filterShape, 'float32');\n    const dwValues = dw.values;\n    const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    const [dyS0, dyS1, dyS2, dyS3] = dy.strides;\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const [xS0, xS1, xS2, xS3] = x.strides;\n\n    const frontPad = convInfo.padInfo.front;\n    const leftPad = convInfo.padInfo.left;\n    const topPad = convInfo.padInfo.top;\n\n    for (let wF = 0; wF < filterDepth; ++wF) {\n      const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n      const yFMax = Math.min(\n          convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n      const wOffset1 = wF * dwS0;\n\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n        const yRMax = Math.min(\n            convInfo.outHeight,\n            (convInfo.inHeight + topPad - wR) / strideHeight);\n        const wOffset2 = wR * dwS1 + wOffset1;\n\n        for (let wC = 0; wC < filterWidth; ++wC) {\n          const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n          const yCMax = Math.min(\n              convInfo.outWidth,\n              (convInfo.inWidth + leftPad - wC) / strideWidth);\n          const wOffset3 = wC * dwS2 + wOffset2;\n\n          for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n            const wOffset4 = d1 * dwS3 + wOffset3;\n\n            for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n              let dotProd = 0;\n              for (let b = 0; b < convInfo.batchSize; ++b) {\n                const xOffset1 = b * xS0;\n                const yOffset1 = b * dyS0;\n\n                for (let yF = yFMin; yF < yFMax; ++yF) {\n                  const xF = wF + yF * strideDepth - frontPad;\n                  const xOffset2 = xF * xS1 + xOffset1;\n                  const yOffset2 = yF * dyS1 + yOffset1;\n\n                  for (let yR = yRMin; yR < yRMax; ++yR) {\n                    const xR = wR + yR * strideHeight - topPad;\n                    const xOffset3 = xR * xS2 + xOffset2;\n                    const yOffset3 = yR * dyS2 + yOffset2;\n\n                    for (let yC = yCMin; yC < yCMax; ++yC) {\n                      const xC = wC + yC * strideWidth - leftPad;\n                      const xOffset4 = xC * xS3 + xOffset3;\n                      const yOffset4 = yC * dyS3 + yOffset3;\n\n                      dotProd +=\n                          xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                    }\n                  }\n                }\n              }\n              dwValues[wOffset4 + d2] = dotProd;\n            }\n          }\n        }\n      }\n    }\n    return dw.toTensor();\n  }\n\n  fusedDepthwiseConv2D(\n      {input, filter, convInfo, bias, activation, preluActivationWeights}:\n          FusedConv2DConfig): Tensor4D {\n    let result = this.depthwiseConv2D(input, filter, convInfo);\n\n    if (bias) {\n      result = this.add(result, bias) as Tensor4D;\n    }\n    if (activation) {\n      result =\n          mapActivation(this, result, activation, preluActivationWeights) as\n          Tensor4D;\n    }\n    return result;\n  }\n\n  depthwiseConv2D(x: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    assertNotComplex([x, filter], 'depthwiseConv2D');\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const padLeft = convInfo.padInfo.left;\n    const padTop = convInfo.padInfo.top;\n    const chMul = convInfo.outChannels / convInfo.inChannels;\n    const y = ops.buffer(convInfo.outShape, x.dtype as 'float32');\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    const wVals = this.readSync(filter.dataId) as TypedArray;\n    const yVals = y.values;\n\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      const xOffset1 = b * x.strides[0];\n      const yOffset1 = b * y.strides[0];\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const yOffset2 = yOffset1 + yR * y.strides[1];\n        const xRCorner = yR * convInfo.strideHeight - padLeft;\n        for (let wR = 0; wR < filterHeight; ++wR) {\n          const xR = xRCorner + wR * dilationHeight;\n          if (xR < 0 || xR >= convInfo.inHeight) {\n            continue;\n          }\n          const wOffset1 = wR * filter.strides[0];\n          const xOffset2 = xOffset1 + xR * x.strides[1];\n          for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n            const yOffset3 = yOffset2 + yC * y.strides[2];\n            const xCCorner = yC * convInfo.strideWidth - padTop;\n            for (let wC = 0; wC < filterWidth; ++wC) {\n              const xC = xCCorner + wC * dilationWidth;\n              if (xC < 0 || xC >= convInfo.inWidth) {\n                continue;\n              }\n              const wOffset2 = wOffset1 + wC * filter.strides[1];\n              const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n              let yOffset4 = yOffset3;\n              let wOffset3 = wOffset2;\n              for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                const xVal = xVals[xOffset3 + d1];\n                for (let q = 0; q < chMul; ++q) {\n                  yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n                }\n                yOffset4 += chMul;\n                wOffset3 += chMul;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return y.toTensor() as Tensor4D;\n  }\n\n  depthwiseConv2DDerInput(dy: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    assertNotComplex([dy, filter], 'depthwiseConv2DDerInput');\n\n    const dx = ops.buffer<Rank.R4>(convInfo.inShape, 'float32');\n    const dxValues = dx.values;\n    const [dxS0, dxS1, dxS2] = dx.strides;\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    const [dyS0, dyS1, dyS2] = dy.strides;\n    const fltValues = this.readSync(filter.dataId) as TypedArray;\n    const [fltS0, fltS1, fltS2] = filter.strides;\n    const {\n      batchSize,\n      filterHeight,\n      filterWidth,\n      inChannels,\n      inHeight,\n      inWidth,\n      outChannels,\n      outHeight,\n      outWidth,\n      strideHeight,\n      strideWidth\n    } = convInfo;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n    const chMul = outChannels / inChannels;\n\n    for (let b = 0; b < batchSize; ++b) {\n      for (let d1 = 0; d1 < inChannels; ++d1) {\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yR = xRMin; yR < yRMax; ++yR) {\n              const wR = yR * strideHeight - xRCorner;\n\n              for (let yC = xCMin; yC < yCMax; ++yC) {\n                const wC = yC * strideWidth - xCCorner;\n                const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n                const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                    fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n                for (let dm = 0; dm < chMul; ++dm) {\n                  const d2 = d1 * chMul + dm;\n                  const pixel = dyValues[dyOffset + d2];\n                  const weight = fltValues[fltOffset + dm];\n                  dotProd += pixel * weight;\n                }\n              }\n            }\n            dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  depthwiseConv2DDerFilter(x: Tensor4D, dy: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    assertNotComplex([x, dy], 'depthwiseConv2DDerFilter');\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dW = ops.buffer<Rank.R4>(convInfo.filterShape, 'float32');\n\n    const leftPad = convInfo.padInfo.left;\n    const topPad = convInfo.padInfo.top;\n    const chMul = convInfo.outChannels / convInfo.inChannels;\n\n    const xBuf = this.bufferSync(x);\n    const dyBuf = this.bufferSync(dy);\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          const d1 = Math.trunc(d2 / chMul);\n          const dm = d2 % chMul;\n\n          let dotProd = 0;\n          for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let yR = yRMin; yR < yRMax; ++yR) {\n              const xR = wR + yR * strideHeight - topPad;\n              for (let yC = yCMin; yC < yCMax; ++yC) {\n                const xC = wC + yC * strideWidth - leftPad;\n                dotProd += xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n              }\n            }\n          }\n          dW.set(dotProd, wR, wC, d1, dm);\n        }\n      }\n    }\n    return dW.toTensor();\n  }\n\n  tile<T extends Tensor>(x: T, reps: number[]): T {\n    assertNotComplex(x, 'tile');\n    return tile(this.bufferSync(x), reps) as T;\n  }\n\n  pad<T extends Tensor>(\n      x: T, paddings: Array<[number, number]>, constantValue: number): T {\n    assertNotComplex(x, 'pad');\n\n    const outShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n    const start = paddings.map(p => p[0]);\n    const xBuffer = this.bufferSync(x);\n    const buffer = ops.buffer(outShape, x.dtype as 'float32');\n    if (constantValue !== 0) {\n      buffer.values.fill(constantValue);\n    }\n\n    for (let i = 0; i < x.size; i++) {\n      const coords = xBuffer.indexToLoc(i);\n      const outCoords = coords.map((c, i) => c + start[i]);\n      buffer.set(xBuffer.get(...coords), ...outCoords);\n    }\n    return buffer.toTensor() as T;\n  }\n\n  transpose<T extends Tensor>(x: T, perm: number[]): T {\n    assertNotComplex(x, 'transpose');\n\n    const newShape: number[] = new Array(x.rank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = x.shape[perm[i]];\n    }\n    const values = this.readSync(x.dataId) as TypedArray;\n    const result = buffer(newShape, x.dtype);\n\n    const xBuf = this.bufferSync(x);\n    for (let i = 0; i < x.size; ++i) {\n      const loc = xBuf.indexToLoc(i);\n\n      // Permute location.\n      const newLoc: number[] = new Array(loc.length);\n      for (let i = 0; i < newLoc.length; i++) {\n        newLoc[i] = loc[perm[i]];\n      }\n\n      const newIndex = result.locToIndex(newLoc);\n      result.values[newIndex] = values[i];\n    }\n    return result.toTensor() as T;\n  }\n\n  gather<T extends Tensor>(x: T, indices: Tensor1D, axis: number): T {\n    assertNotComplex([x, indices], 'gather');\n\n    const newShape: number[] = x.shape.slice();\n    const indicesValues = this.readSync(indices.dataId) as TypedArray;\n    newShape[axis] = indicesValues.length;\n    const result = buffer(newShape, x.dtype);\n    const xBuf = this.bufferSync(x);\n\n    for (let i = 0; i < result.size; ++i) {\n      const newLoc = result.indexToLoc(i);\n\n      const originalLoc: number[] = newLoc.slice();\n      originalLoc[axis] = indicesValues[newLoc[axis]];\n\n      const originalIndex = xBuf.locToIndex(originalLoc);\n      result.values[i] = xBuf.values[originalIndex];\n    }\n    return result.toTensor() as T;\n  }\n\n  batchToSpaceND<T extends Tensor>(\n      x: T, blockShape: number[], crops: number[][]): T {\n    assertNotComplex([x], 'batchToSpaceND');\n\n    const prod = blockShape.reduce((a, b) => a * b);\n\n    const reshaped = array_ops_util.getReshaped(x.shape, blockShape, prod);\n    const permuted =\n        array_ops_util.getPermuted(reshaped.length, blockShape.length);\n    const reshapedPermuted =\n        array_ops_util.getReshapedPermuted(x.shape, blockShape, prod);\n    const sliceBeginCoords =\n        array_ops_util.getSliceBeginCoords(crops, blockShape.length);\n    const sliceSize =\n        array_ops_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n    return x.reshape(reshaped)\n               .transpose(permuted)\n               .reshape(reshapedPermuted)\n               .slice(sliceBeginCoords, sliceSize) as T;\n  }\n\n  spaceToBatchND<T extends Tensor>(\n      x: T, blockShape: number[], paddings: Array<[number, number]>): T {\n    assertNotComplex([x], 'spaceToBatchND');\n\n    const prod = blockShape.reduce((a, b) => a * b);\n\n    const completePaddings: Array<[number, number]> = [[0, 0]];\n    completePaddings.push(...paddings);\n    for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n      completePaddings.push([0, 0]);\n    }\n\n    const paddedX = x.pad(completePaddings);\n\n    const reshapedPaddedShape =\n        array_ops_util.getReshaped(paddedX.shape, blockShape, prod, false);\n    const permutedReshapedPaddedPermutation = array_ops_util.getPermuted(\n        reshapedPaddedShape.length, blockShape.length, false);\n    const flattenShape = array_ops_util.getReshapedPermuted(\n        paddedX.shape, blockShape, prod, false);\n\n    return paddedX.reshape(reshapedPaddedShape)\n               .transpose(permutedReshapedPaddedPermutation)\n               .reshape(flattenShape) as T;\n  }\n\n  private pool(x: Tensor4D, convInfo: Conv2DInfo, poolType: 'max'|'avg'):\n      Tensor4D {\n    assertNotComplex(x, 'pool');\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    const initialValue =\n        (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                              Number.POSITIVE_INFINITY);\n\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const output = ops.buffer(convInfo.outShape, x.dtype);\n    const outputVals = output.values;\n\n    const outputBatchStrides =\n        convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n    const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n    const outputColStrides = convInfo.outShape[3];\n\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      const outputBatchOffset = b * outputBatchStrides;\n      const inputBatchOffset = b * x.strides[0];\n      for (let d = 0; d < convInfo.inChannels; ++d) {\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n          const xRCorner = yR * strideHeight - padTop;\n          const xRMin = Math.max(0, xRCorner);\n          const xRMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n          const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n          for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n            const xCCorner = yC * strideWidth - padLeft;\n            const xCMin = Math.max(0, xCCorner);\n            const xCMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n            let minMaxValue = initialValue;\n            let avgValue = 0;\n            let count = 0;\n            for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n              const xROffset = inputBatchOffset + xR * x.strides[1];\n              for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n                const xCOffset = xROffset + xC * x.strides[2];\n                const pixel = xValues[xCOffset + d];\n                if ((poolType === 'max' && pixel > minMaxValue)) {\n                  minMaxValue = pixel;\n                } else if (poolType === 'avg') {\n                  avgValue += pixel;\n                  count++;\n                }\n              }\n              if (isNaN(minMaxValue)) {\n                break;\n              }\n            }\n            const outputOffset = outputRowOffset + yC * outputColStrides + d;\n            outputVals[outputOffset] =\n                poolType === 'avg' ? avgValue / count : minMaxValue;\n          }\n        }\n      }\n    }\n    return output.toTensor() as Tensor4D;\n  }\n\n  maxPool(x: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    return this.pool(x, convInfo, 'max');\n  }\n\n  private maxPoolPositions(x: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    const maxPositions = ops.buffer(convInfo.outShape, 'int32');\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    const xBuf = this.bufferSync(x);\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      for (let d = 0; d < convInfo.inChannels; ++d) {\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n          const xRCorner = yR * strideHeight - padTop;\n          let xRMin = xRCorner;\n          while (xRMin < 0) {\n            xRMin += dilationHeight;\n          }\n          // const xRMin = Math.max(0, xRCorner);\n          const xRMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n          for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n            const xCCorner = yC * strideWidth - padLeft;\n            let xCMin = xCCorner;\n            while (xCMin < 0) {\n              xCMin += dilationWidth;\n            }\n            const xCMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n            let maxValue = Number.NEGATIVE_INFINITY;\n            let maxPosition = -1;\n\n            for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n              const wR = xR - xRCorner;\n              for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n                const wC = xC - xCCorner;\n                const pixel = xBuf.get(b, xR, xC, d);\n                if (pixel > maxValue) {\n                  maxValue = pixel;\n                  maxPosition = wR * effectiveFilterWidth + wC;\n                }\n              }\n            }\n            maxPositions.set(maxPosition, b, yR, yC, d);\n          }\n        }\n      }\n    }\n    return maxPositions.toTensor() as Tensor4D;\n  }\n\n  maxPoolBackprop(dy: Tensor4D, x: Tensor4D, y: Tensor4D, convInfo: Conv2DInfo):\n      Tensor4D {\n    assertNotComplex([x, y], 'maxPoolBackprop');\n\n    const maxPositions = this.maxPoolPositions(x, convInfo);\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = ops.buffer<Rank.R4>(x.shape, 'float32');\n\n    const maxPosBuf = this.bufferSync(maxPositions);\n    const dyBuf = this.bufferSync(dy);\n\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      for (let d = 0; d < convInfo.inChannels; ++d) {\n        for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n          for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n            // Shader code begins.\n            const dyRCorner = dxR - padTop;\n            const dyCCorner = dxC - padLeft;\n            let dotProd = 0;\n            for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n              const dyR = (dyRCorner + wR) / strideHeight;\n              if (dyR < 0 || dyR >= convInfo.outHeight ||\n                  Math.floor(dyR) !== dyR) {\n                continue;\n              }\n              for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n                const dyC = (dyCCorner + wC) / strideWidth;\n                if (dyC < 0 || dyC >= convInfo.outWidth ||\n                    Math.floor(dyC) !== dyC) {\n                  continue;\n                }\n                const maxPos = effectiveFilterHeight * effectiveFilterWidth -\n                    1 - maxPosBuf.get(b, dyR, dyC, d);\n                const curPos = wR * effectiveFilterWidth + wC;\n\n                const mask = maxPos === curPos ? 1 : 0;\n                if (mask === 0) {\n                  continue;\n                }\n\n                const pixel = dyBuf.get(b, dyR, dyC, d);\n                dotProd += pixel * mask;\n              }\n            }\n            dx.set(dotProd, b, dxR, dxC, d);\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  avgPoolBackprop(dy: Tensor4D, x: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    assertNotComplex([dy, x], 'avgPoolBackprop');\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = ops.buffer<Rank.R4>(x.shape, 'float32');\n\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n    const dyBuf = this.bufferSync(dy);\n\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      for (let d = 0; d < convInfo.inChannels; ++d) {\n        for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n          for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n            // Shader code begins.\n            const dyRCorner = dxR - padTop;\n            const dyCCorner = dxC - padLeft;\n            let dotProd = 0;\n            for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n              const dyR = (dyRCorner + wR) / strideHeight;\n              if (dyR < 0 || dyR >= convInfo.outHeight ||\n                  Math.floor(dyR) !== dyR) {\n                continue;\n              }\n              for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n                const dyC = (dyCCorner + wC) / strideWidth;\n                if (dyC < 0 || dyC >= convInfo.outWidth ||\n                    Math.floor(dyC) !== dyC) {\n                  continue;\n                }\n\n                const pixel = dyBuf.get(b, dyR, dyC, d);\n                dotProd += pixel;\n              }\n            }\n            dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  private pool3d(x: Tensor5D, convInfo: Conv3DInfo, poolType: 'max'|'avg'):\n      Tensor5D {\n    assertNotComplex(x, 'pool3d');\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    const initialValue =\n        (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                              Number.POSITIVE_INFINITY);\n\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const output = ops.buffer(convInfo.outShape, x.dtype);\n    const outputVals = output.values;\n\n    const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n        convInfo.outShape[3] * convInfo.outShape[4];\n    const outputDepthStrides =\n        convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n    const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n    const outputColStrides = convInfo.outShape[4];\n\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n      const outputBatchOffset = batch * outputBatchStrides;\n      const inputBatchOffset = batch * x.strides[0];\n      for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n        for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n          const xDepthCorner = yDepth * strideDepth - padFront;\n          let xDepthMin = xDepthCorner;\n          while (xDepthMin < 0) {\n            xDepthMin += dilationDepth;\n          }\n          const xDepthMax =\n              Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n          const outputDepthOffset =\n              outputBatchOffset + yDepth * outputDepthStrides;\n          for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n            const xRowCorner = yRow * strideHeight - padTop;\n            let xRowMin = xRowCorner;\n            while (xRowMin < 0) {\n              xRowMin += dilationHeight;\n            }\n            const xRowMax =\n                Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n            const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n            for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n              const xColCorner = yCol * strideWidth - padLeft;\n              let xColMin = xColCorner;\n              while (xColMin < 0) {\n                xColMin += dilationWidth;\n              }\n              const xColMax =\n                  Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n              // Shader code begins\n              const outputColOffset = outputRowOffset + yCol * outputColStrides;\n              let minMaxValue = initialValue;\n              let avgValue = 0;\n              let count = 0;\n              for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                   xDepth += dilationDepth) {\n                const xDepthOffset = inputBatchOffset + xDepth * x.strides[1];\n                for (let xRow = xRowMin; xRow < xRowMax;\n                     xRow += dilationHeight) {\n                  const xRowOffset = xDepthOffset + xRow * x.strides[2];\n                  for (let xCol = xColMin; xCol < xColMax;\n                       xCol += dilationWidth) {\n                    const xColOffset = xRowOffset + xCol * x.strides[3];\n                    const pixel = xValues[xColOffset + channel];\n                    if ((poolType === 'max' && pixel > minMaxValue)) {\n                      minMaxValue = pixel;\n                    } else if (poolType === 'avg') {\n                      avgValue += pixel;\n                      count++;\n                    }\n                    if (isNaN(minMaxValue)) {\n                      break;\n                    }\n                  }\n                  if (isNaN(minMaxValue)) {\n                    break;\n                  }\n                }\n                if (isNaN(minMaxValue)) {\n                  break;\n                }\n              }\n              const outputOffset = outputColOffset + channel;\n              outputVals[outputOffset] =\n                  poolType === 'avg' ? avgValue / count : minMaxValue;\n            }\n          }\n        }\n      }\n    }\n    return output.toTensor() as Tensor5D;\n  }\n\n  avgPool3d(x: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    assertNotComplex(x, 'avgPool3d');\n\n    return this.pool3d(x, convInfo, 'avg').toFloat();\n  }\n\n  avgPool3dBackprop(dy: Tensor5D, x: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    assertNotComplex([dy, x], 'avgPool3dBackprop');\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = ops.buffer<Rank.R5>(x.shape, 'float32');\n\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n    const dyBuf = this.bufferSync(dy);\n\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n      for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n        for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n          for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n            for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n              // Shader code begins.\n              const dyDepthCorner = dxDepth - padFront;\n              const dyRowCorner = dxRow - padTop;\n              const dyColCorner = dxCol - padLeft;\n              let dotProd = 0;\n              for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                   wDepth += dilationDepth) {\n                const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n                if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                    Math.floor(dyDepth) !== dyDepth) {\n                  continue;\n                }\n                for (let wRow = 0; wRow < effectiveFilterHeight;\n                     wRow += dilationHeight) {\n                  const dyRow = (dyRowCorner + wRow) / strideHeight;\n                  if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                      Math.floor(dyRow) !== dyRow) {\n                    continue;\n                  }\n                  for (let wCol = 0; wCol < effectiveFilterWidth;\n                       wCol += dilationWidth) {\n                    const dyCol = (dyColCorner + wCol) / strideWidth;\n                    if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                        Math.floor(dyCol) !== dyCol) {\n                      continue;\n                    }\n\n                    const pixel =\n                        dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                    dotProd += pixel;\n                  }\n                }\n              }\n              dx.set(\n                  dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol,\n                  channel);\n            }\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  maxPool3d(x: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    assertNotComplex(x, 'maxPool3d');\n\n    return this.pool3d(x, convInfo, 'max').toFloat();\n  }\n\n  private maxPool3dPositions(x: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    const maxPositions = ops.buffer(convInfo.outShape, 'int32');\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    const xBuf = this.bufferSync(x);\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n      for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n        for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n          const xDepthCorner = yDepth * strideDepth - padFront;\n          let xDepthMin = xDepthCorner;\n          while (xDepthMin < 0) {\n            xDepthMin += dilationDepth;\n          }\n          const xDepthMax =\n              Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n          for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n            const xRowCorner = yRow * strideHeight - padTop;\n            let xRowMin = xRowCorner;\n            while (xRowMin < 0) {\n              xRowMin += dilationHeight;\n            }\n            const xRowMax =\n                Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n            for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n              const xColCorner = yCol * strideWidth - padLeft;\n              let xColMin = xColCorner;\n              while (xColMin < 0) {\n                xColMin += dilationWidth;\n              }\n              const xColMax =\n                  Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n\n              // Shader code begins\n              let maxValue = Number.NEGATIVE_INFINITY;\n              let maxPosition = -1;\n\n              for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                   xDepth += dilationDepth) {\n                const wDepth = xDepth - xDepthCorner;\n                for (let xRow = xRowMin; xRow < xRowMax;\n                     xRow += dilationHeight) {\n                  const wRow = xRow - xRowCorner;\n                  for (let xCol = xColMin; xCol < xColMax;\n                       xCol += dilationWidth) {\n                    const wCol = xCol - xColCorner;\n                    const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                    if (pixel >= maxValue) {\n                      maxValue = pixel;\n                      maxPosition = wDepth * effectiveFilterHeight *\n                              effectiveFilterWidth +\n                          wRow * effectiveFilterHeight + wCol;\n                    }\n                  }\n                }\n              }\n\n              maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n            }\n          }\n        }\n      }\n    }\n    return maxPositions.toTensor() as Tensor5D;\n  }\n\n  maxPool3dBackprop(\n      dy: Tensor5D, x: Tensor5D, y: Tensor5D, convInfo: Conv3DInfo): Tensor5D {\n    assertNotComplex([x, y], 'maxPool3dBackprop');\n\n    const maxPositions = this.maxPool3dPositions(x, convInfo);\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = ops.buffer<Rank.R5>(x.shape, 'float32');\n\n    const maxPosBuf = this.bufferSync(maxPositions);\n    const dyBuf = this.bufferSync(dy);\n\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n      for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n        for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n          for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n            for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n              // Shader code begins\n              const dyDepthCorner = dxDepth - padFront;\n              const dyRowCorner = dxRow - padTop;\n              const dyColCorner = dxCol - padLeft;\n              let dotProd = 0;\n              for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                   wDepth += dilationDepth) {\n                const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n                if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                    Math.floor(dyDepth) !== dyDepth) {\n                  continue;\n                }\n                for (let wRow = 0; wRow < effectiveFilterHeight;\n                     wRow += dilationHeight) {\n                  const dyRow = (dyRowCorner + wRow) / strideHeight;\n                  if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                      Math.floor(dyRow) !== dyRow) {\n                    continue;\n                  }\n                  for (let wCol = 0; wCol < effectiveFilterWidth;\n                       wCol += dilationWidth) {\n                    const dyCol = (dyColCorner + wCol) / strideWidth;\n                    if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                        Math.floor(dyCol) !== dyCol) {\n                      continue;\n                    }\n\n                    const maxPos = effectiveFilterDepth *\n                            effectiveFilterHeight * effectiveFilterWidth -\n                        1 -\n                        maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                    const curPos =\n                        wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                        wRow * effectiveFilterWidth + wCol;\n\n                    const mask = maxPos === curPos ? 1 : 0;\n                    if (mask === 0) {\n                      continue;\n                    }\n\n                    const pixel =\n                        dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                    dotProd += pixel * mask;\n                  }\n                }\n              }\n              dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n            }\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  cast<T extends Tensor>(x: T, dtype: DataType): T {\n    return backend_util.castTensor(x, dtype, this);\n  }\n\n  reshape<R extends Rank>(x: Tensor, shape: ShapeMap[R]): Tensor<R> {\n    return backend_util.reshapeTensor(x, shape);\n  }\n\n  avgPool(x: Tensor4D, convInfo: Conv2DInfo): Tensor4D {\n    assertNotComplex(x, 'avgPool');\n\n    return this.pool(x, convInfo, 'avg').toFloat();\n  }\n\n  resizeBilinear(\n      x: Tensor4D, newHeight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    assertNotComplex(x, 'resizeBilinear');\n\n    const [batch, oldHeight, oldWidth, numChannels] = x.shape;\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const result = new Float32Array(\n        util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n\n    const effectiveInputSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutputSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n    let outputIdx = 0;\n    const effectiveRowSizeRatio =\n        effectiveInputSize[0] / effectiveOutputSize[0];\n    const effectiveColSizeRatio =\n        effectiveInputSize[1] / effectiveOutputSize[1];\n    for (let b = 0; b < batch; b++) {\n      for (let r = 0; r < newHeight; r++) {\n        const sourceFracRow = effectiveRowSizeRatio * r;\n        const sourceRowFloor = Math.floor(sourceFracRow);\n        const rowFrac = sourceFracRow - sourceRowFloor;\n        const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n        const topRowOffset = b * x.strides[0] + sourceRowFloor * x.strides[1];\n        const botRowOffset = b * x.strides[0] + sourceRowCeil * x.strides[1];\n        for (let c = 0; c < newWidth; c++) {\n          const sourceFracCol = effectiveColSizeRatio * c;\n          const sourceColFloor = Math.floor(sourceFracCol);\n          const colFrac = sourceFracCol - sourceColFloor;\n          const sourceColCeil =\n              Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n          const topLeftOffest = topRowOffset + sourceColFloor * x.strides[2];\n          const botLeftOffset = botRowOffset + sourceColFloor * x.strides[2];\n          const topRightOffset = topRowOffset + sourceColCeil * x.strides[2];\n          const botRightOffest = botRowOffset + sourceColCeil * x.strides[2];\n          for (let d = 0; d < numChannels; d++) {\n            // Begin shader.\n\n            // Compute the fractional index of the source.\n            const topLeft = xValues[topLeftOffest + d];\n            const bottomLeft = xValues[botLeftOffset + d];\n            const topRight = xValues[topRightOffset + d];\n            const bottomRight = xValues[botRightOffest + d];\n\n            const top = topLeft + (topRight - topLeft) * colFrac;\n            const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n            const newValue = top + (bottom - top) * rowFrac;\n\n            result[outputIdx++] = newValue;\n          }\n        }\n      }\n    }\n    return ops.tensor(result, [batch, newHeight, newWidth, numChannels]);\n  }\n\n  resizeBilinearBackprop(dy: Tensor4D, x: Tensor4D, alignCorners: boolean) {\n    assertNotComplex([dy, x], 'resizeBilinearBackprop');\n\n    const [batch, xHeight, xWidth, depth] = x.shape;\n    const [, yHeight, yWidth] = dy.shape;\n\n    const output = new Float32Array(batch * xHeight * xWidth * depth);\n\n    // In the backwards pass, we want to find the pixels that were generated\n    // for each pixel in the input image the forward pass and add the\n    // corresponding coefficient from dy to the gradient (with some\n    // interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    let offset = 0;\n    for (let b = 0; b < batch; b++) {\n      const bOffset = b * x.strides[0];\n      for (let r = 0; r < yHeight; r++) {\n        const dxR = r * heightScale;\n        const topDxRIndex = Math.floor(dxR);\n        const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n\n        const topDxROffset = bOffset + topDxRIndex * x.strides[1];\n        const bottomDxROffset = bOffset + bottomDxRIndex * x.strides[1];\n\n        const dxRLerp = dxR - topDxRIndex;\n        const inverseDxRLerp = 1.0 - dxRLerp;\n        for (let c = 0; c < yWidth; c++) {\n          const dxC = c * widthScale;\n          const leftDxCIndex = Math.floor(dxC);\n          const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n          const dxCLerp = dxC - leftDxCIndex;\n          const inverseDxCLerp = 1.0 - dxCLerp;\n\n          const topLeftRCOffset = topDxROffset + leftDxCIndex * x.strides[2];\n          const topRightRCOffset = topDxROffset + rightDxCIndex * x.strides[2];\n          const bottomLeftRCOffset =\n              bottomDxROffset + leftDxCIndex * x.strides[2];\n          const bottomRightRCOffset =\n              bottomDxROffset + rightDxCIndex * x.strides[2];\n\n          const inverseDxRLerpTimesInverseDxCLerp =\n              inverseDxRLerp * inverseDxCLerp;\n          const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n          const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n          const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n          for (let d = 0; d < depth; d++) {\n            const dyVal = dyValues[offset++];\n            output[topLeftRCOffset + d] +=\n                dyVal * inverseDxRLerpTimesInverseDxCLerp;\n            output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n            output[bottomLeftRCOffset + d] +=\n                dyVal * dxRLerpTimesInverseDxCLerp;\n            output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n          }\n        }\n      }\n    }\n    return ops.tensor4d(output, [batch, xWidth, xHeight, depth], x.dtype);\n  }\n\n  resizeNearestNeighbor(\n      x: Tensor4D, newHeight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    assertNotComplex(x, 'resizeNearestNeighbor');\n\n    const [batch, oldHeight, oldWidth, numChannels] = x.shape;\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n\n    const effectiveInputSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutputSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    const effectiveRowSizeRatio =\n        effectiveInputSize[0] / effectiveOutputSize[0];\n    const effectiveColSizeRatio =\n        effectiveInputSize[1] / effectiveOutputSize[1];\n\n    let outputOffset = 0;\n    for (let b = 0; b < batch; b++) {\n      const batchOffset = b * x.strides[0];\n      for (let r = 0; r < newHeight; r++) {\n        const sourceFracRow = effectiveRowSizeRatio * r;\n        const sourceNearestRow = Math.min(\n            oldHeight - 1,\n            alignCorners ? Math.round(sourceFracRow) :\n                           Math.floor(sourceFracRow));\n        const rowOffset = batchOffset + sourceNearestRow * x.strides[1];\n        for (let c = 0; c < newWidth; c++) {\n          const sourceFracCol = effectiveColSizeRatio * c;\n          const sourceNearestCol = Math.min(\n              oldWidth - 1,\n              alignCorners ? Math.round(sourceFracCol) :\n                             Math.floor(sourceFracCol));\n          const colOffset = rowOffset + sourceNearestCol * x.strides[2];\n          for (let d = 0; d < numChannels; d++) {\n            // Begin shader.\n            // Compute the fractional index of the source.\n            const newVal = xValues[colOffset + d];\n            output[outputOffset++] = newVal;\n          }\n        }\n      }\n    }\n    return ops.tensor(\n        output, [batch, newHeight, newWidth, numChannels], x.dtype);\n  }\n\n  resizeNearestNeighborBackprop(\n      dy: Tensor4D, x: Tensor4D, alignCorners: boolean) {\n    assertNotComplex([dy, x], 'resizeNearestNeighborBackprop');\n\n    const [batch, xHeight, xWidth, depth] = x.shape;\n    const [, yHeight, yWidth] = dy.shape;\n\n    const output = new Float32Array(batch * xHeight * xWidth * depth);\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n\n    // In the backwards pass, we want to find the pixels that were generated\n    // for each pixel in the input image the forward pass\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    // Loop over the output space.\n    for (let b = 0; b < batch; b++) {\n      const batchOffset = b * x.strides[0];\n      for (let r = 0; r < xHeight; r++) {\n        const rowOffset = batchOffset + r * x.strides[1];\n\n        // Compute bounds for where in dy we will look\n        const startRLerp = Math.floor(r * invHeightScale);\n        const startDyR = Math.floor(startRLerp - (winHeight / 2));\n        for (let c = 0; c < xWidth; c++) {\n          const colOffset = rowOffset + c * x.strides[2];\n\n          // Compute bounds for where in dy we will look\n          const startCLerp = Math.floor(c * invWidthScale);\n          const startDyC = Math.floor(startCLerp - (winWidth / 2));\n\n          for (let d = 0; d < depth; d++) {\n            let accum = 0;\n            // loop over dy\n\n            for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n              const dyR = dyRIndex + startDyR;\n              // Guard against the window exceeding the bounds of dy\n              if (dyR < 0 || dyR >= yHeight) {\n                continue;\n              }\n\n              const dyROffset = batchOffset + dyR * dy.strides[1];\n              const sourceFracRow = dyR * heightScale;\n              const sourceNearestRow = Math.min(\n                  xHeight - 1,\n                  alignCorners ? Math.round(sourceFracRow) :\n                                 Math.floor(sourceFracRow));\n              if (r !== sourceNearestRow) {\n                continue;\n              }\n              for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n                const dyC = dyCIndex + startDyC;\n                // Guard against the window exceeding the bounds of dy\n                if (dyC < 0 || dyC >= yWidth) {\n                  continue;\n                }\n\n                const dyCOffset = dyROffset + dyC * dy.strides[2];\n                const sourceFracCol = dyC * widthScale;\n                const sourceNearestCol = Math.min(\n                    xWidth - 1,\n                    alignCorners ? Math.round(sourceFracCol) :\n                                   Math.floor(sourceFracCol));\n\n                if (c === sourceNearestCol) {\n                  accum += dyValues[dyCOffset + d];\n                }\n              }\n            }\n            output[colOffset + d] = accum;\n          }\n        }\n      }\n    }\n    return ops.tensor4d(output, x.shape, x.dtype);\n  }\n\n  batchNormalization(\n      x: Tensor4D, mean: Tensor4D|Tensor1D, variance: Tensor4D|Tensor1D,\n      varianceEpsilon: number, scale?: Tensor4D|Tensor1D,\n      offset?: Tensor4D|Tensor1D): Tensor4D {\n    assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    const mVals = this.readSync(mean.dataId) as TypedArray;\n    const varVals = this.readSync(variance.dataId) as TypedArray;\n    const sVals = scale ? this.readSync(scale.dataId) as TypedArray :\n                          new Float32Array([1]);\n    const offVals = offset ? this.readSync(offset.dataId) as TypedArray :\n                             new Float32Array([0]);\n    const outVals = new Float32Array(xVals.length);\n\n    const offValsLength = offVals.length;\n    const sValsLength = sVals.length;\n    const varValsLength = varVals.length;\n    const mValsLength = mVals.length;\n\n    let offi = 0;\n    let mi = 0;\n    let si = 0;\n    let vi = 0;\n    for (let i = 0; i < xVals.length; ++i) {\n      outVals[i] = offVals[offi++] +\n          (xVals[i] - mVals[mi++]) * sVals[si++] /\n              Math.sqrt(varVals[vi++] + varianceEpsilon);\n      if (offi >= offValsLength) {\n        offi = 0;\n      }\n      if (mi >= mValsLength) {\n        mi = 0;\n      }\n      if (si >= sValsLength) {\n        si = 0;\n      }\n      if (vi >= varValsLength) {\n        vi = 0;\n      }\n    }\n    return tensor4d(outVals, x.shape);\n  }\n\n  localResponseNormalization4D(\n      x: Tensor4D, depthRadius: number, bias: number, alpha: number,\n      beta: number): Tensor4D {\n    assertNotComplex(x, 'localResponseNormalization4D');\n\n    const channels = x.shape[3];\n    const maxD = channels - 1;\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const size = x.size;\n    const result = new Float32Array(size);\n\n    function sumAcrossChannels(offset: number) {\n      const currentChannel = offset % channels;\n      let beginSumOffset =\n          offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n      const endSumOffset = offset - currentChannel +\n          Math.min(currentChannel + depthRadius, maxD);\n\n      let sum = 0.0;\n      for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n        const z = xValues[beginSumOffset];\n        sum += z * z;\n      }\n      return sum;\n    }\n\n    for (let offset = 0; offset < size; offset++) {\n      const sum = sumAcrossChannels(offset);\n      const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n      result[offset] = val;\n    }\n\n    return ops.tensor4d(result, x.shape);\n  }\n\n  LRNGrad(\n      dy: Tensor4D, inputImage: Tensor4D, outputImage: Tensor4D,\n      depthRadius: number, bias: number, alpha: number,\n      beta: number): Tensor4D {\n    assertNotComplex(dy, 'LRNGrad');\n    const channels = dy.shape[3];\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    const inputImageValues = this.readSync(inputImage.dataId) as TypedArray;\n    const outputImageValues = this.readSync(outputImage.dataId) as TypedArray;\n    const result = new Float32Array(dy.size);\n    const size = dy.size;\n\n    for (let offset = 0; offset < size; offset++) {\n      const currentChannel = offset % channels;\n      const depthBegin =\n          (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n      const depthEnd = (offset - currentChannel) +\n          Math.min(channels, currentChannel + depthRadius + 1);\n\n      let norm = 0;\n      for (let k = depthBegin; k < depthEnd; k++) {\n        norm += Math.pow(inputImageValues[k], 2);\n      }\n      norm = alpha * norm + bias;\n\n      for (let k = depthBegin; k < depthEnd; k++) {\n        let dyi = -2 * alpha * beta * inputImageValues[k] *\n            outputImageValues[offset] / norm;\n        if (offset === k) {\n          dyi += Math.pow(norm, -beta);\n        }\n        dyi *= dyValues[offset];\n        result[k] += dyi;\n      }\n    }\n    return ops.tensor4d(result, dy.shape);\n  }\n\n  multinomial(\n      logits: Tensor2D, normalized: boolean, numSamples: number,\n      seed: number): Tensor2D {\n    assertNotComplex(logits, 'multinomial');\n\n    const probabilities = normalized ? logits : ops.softmax(logits);\n    const batchSize = probabilities.shape[0];\n    const numEvents = probabilities.shape[1];\n    const res = ops.zeros<Rank.R2>([batchSize, numSamples], 'int32');\n    const resVals = this.readSync(res.dataId) as TypedArray;\n    const probVals = this.readSync(probabilities.dataId) as TypedArray;\n\n    for (let b = 0; b < batchSize; ++b) {\n      const offset = b * numEvents;\n      // The cdf won't include the last event. It will be implicit if no other\n      // event happened.\n      const cdf = new Float32Array(numEvents - 1);\n      cdf[0] = probVals[offset];\n      for (let event = 1; event < cdf.length; ++event) {\n        cdf[event] = cdf[event - 1] + probVals[offset + event];\n      }\n\n      const random = seedrandom.alea(seed.toString());\n      const outOffset = b * numSamples;\n      for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n        const r = random();\n\n        // Assume last event happened by default.\n        resVals[outOffset + sampleId] = cdf.length;\n\n        for (let event = 0; event < cdf.length; event++) {\n          if (r < cdf[event]) {\n            resVals[outOffset + sampleId] = event;\n            break;\n          }\n        }\n      }\n    }\n    return res;\n  }\n\n  oneHot(indices: Tensor1D, depth: number, onValue: number, offValue: number):\n      Tensor2D {\n    assertNotComplex(indices, 'oneHot');\n\n    const res = new Float32Array(indices.size * depth);\n    res.fill(offValue);\n    const indicesVal = this.readSync(indices.dataId) as TypedArray;\n\n    for (let event = 0; event < indices.size; ++event) {\n      if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n        res[event * depth + indicesVal[event]] = onValue;\n      }\n    }\n    return ops.tensor2d(res, [indices.size, depth], 'int32');\n  }\n\n  nonMaxSuppression(\n      boxes: Tensor2D, scores: Tensor1D, maxOutputSize: number,\n      iouThreshold: number, scoreThreshold: number): Tensor1D {\n    assertNotComplex(boxes, 'nonMaxSuppression');\n\n    const boxesVals = this.readSync(boxes.dataId) as TypedArray;\n    const scoresVals = this.readSync(scores.dataId) as TypedArray;\n    return nonMaxSuppressionV3(\n        boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n  }\n\n  fft(x: Tensor2D): Tensor2D {\n    return this.fftBatch(x, false);\n  }\n\n  ifft(x: Tensor2D): Tensor2D {\n    return this.fftBatch(x, true);\n  }\n\n  /**\n   * Calculate FFT of inner most elements of batch tensor.\n   */\n  private fftBatch(x: Tensor2D, inverse: boolean): Tensor2D {\n    const batch = x.shape[0];\n    const innerDim = x.shape[1];\n    // Collects real and imaginary values separately.\n    const realResult = ops.buffer(x.shape, 'float32');\n    const imagResult = ops.buffer(x.shape, 'float32');\n\n    const real = ops.real(x).as2D(batch, innerDim);\n    const imag = ops.imag(x).as2D(batch, innerDim);\n\n    for (let b = 0; b < batch; b++) {\n      // TODO: Support slice ops for complex type.\n      const r = real.slice([b, 0], [1, innerDim]);\n      const i = imag.slice([b, 0], [1, innerDim]);\n      const input = ops.complex(r, i);\n      // Run FFT by batch element.\n      const res =\n          this.readSync(this.fftImpl(input, inverse).dataId) as Float32Array;\n      for (let d = 0; d < innerDim; d++) {\n        const c = complex_util.getComplexWithIndex(res, d);\n        realResult.values[b * innerDim + d] = c.real;\n        imagResult.values[b * innerDim + d] = c.imag;\n      }\n    }\n\n    const t = ops.complex(realResult.toTensor(), imagResult.toTensor());\n    return t.as2D(batch, innerDim);\n  }\n\n  private fftImpl(x: Tensor2D, inverse: boolean): Tensor2D {\n    const x1D = x.as1D();\n\n    const n = x1D.size;\n\n    if (this.isExponentOf2(n)) {\n      let result = this.fftRadix2(x1D, n, inverse).as2D(x.shape[0], x.shape[1]);\n      if (inverse) {\n        result = ops.complex(\n                     ops.real(result).div(scalar(n)),\n                     ops.imag(result).div(scalar(n))) as Tensor2D;\n      }\n      return result;\n    } else {\n      const data = this.readSync(x.dataId) as TypedArray;\n      const rawOutput =\n          this.fourierTransformByMatmul(data, n, inverse) as Float32Array;\n      const output = complex_util.splitRealAndImagArrays(rawOutput);\n      return ops.complex(output.real, output.imag).as2D(x.shape[0], x.shape[1]);\n    }\n  }\n\n  private isExponentOf2(size: number): boolean {\n    return (size & size - 1) === 0;\n  }\n\n  // FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\n  private fftRadix2(input: Tensor1D, size: number, inverse: boolean): Tensor1D {\n    if (size === 1) {\n      return input;\n    }\n    const data = this.readSync(input.dataId) as TypedArray as Float32Array;\n    const half = size / 2;\n    const evenComplex = complex_util.complexWithEvenIndex(data);\n    let evenTensor = ops.complex(evenComplex.real, evenComplex.imag).as1D();\n    const oddComplex = complex_util.complexWithOddIndex(data);\n    let oddTensor = ops.complex(oddComplex.real, oddComplex.imag).as1D();\n\n    // Recursive call for half part of original input.\n    evenTensor = this.fftRadix2(evenTensor, half, inverse);\n    oddTensor = this.fftRadix2(oddTensor, half, inverse);\n\n    const e = complex_util.exponents(size, inverse);\n    const exponent = ops.complex(e.real, e.imag).mul(oddTensor);\n\n    const addPart = evenTensor.add(exponent);\n    const subPart = evenTensor.sub(exponent);\n\n    const realTensor = ops.real(addPart).concat(ops.real(subPart));\n    const imagTensor = ops.imag(addPart).concat(ops.imag(subPart));\n\n    return ops.complex(realTensor, imagTensor).as1D();\n  }\n\n  // Calculate fourier transform by multplying sinusoid matrix.\n  private fourierTransformByMatmul(\n      data: TypedArray, size: number, inverse: boolean): TypedArray {\n    const ret = new Float32Array(size * 2);\n    // TODO: Use matmul instead once it supports complex64 type.\n    for (let r = 0; r < size; r++) {\n      let real = 0.0;\n      let imag = 0.0;\n      for (let c = 0; c < size; c++) {\n        const e = complex_util.exponent(r * c, size, inverse);\n        const term = complex_util.getComplexWithIndex(data as Float32Array, c);\n        real += term.real * e.real - term.imag * e.imag;\n        imag += term.real * e.imag + term.imag * e.real;\n      }\n      if (inverse) {\n        real /= size;\n        imag /= size;\n      }\n      complex_util.assignToTypedArray(ret, real, imag, r);\n    }\n    return ret;\n  }\n\n  depthToSpace(x: Tensor4D, blockSize: number, dataFormat: 'NHWC'|'NCHW'):\n      Tensor4D {\n    util.assert(\n        dataFormat === 'NHWC',\n        () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${\n            dataFormat}`);\n    util.assert(\n        blockSize > 1,\n        () =>\n            `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n\n    const batchSize = x.shape[0];\n    const inputHeight = x.shape[1];\n    const inputWidth = x.shape[2];\n    const inputDepth = x.shape[3];\n\n    const outputHeight = inputHeight * blockSize;\n    const outputWidth = inputWidth * blockSize;\n    const outputDepth = inputDepth / (blockSize * blockSize);\n\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const result =\n        new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n\n    let outputIdx = 0;\n    for (let b = 0; b < batchSize; ++b) {\n      for (let h = 0; h < outputHeight; ++h) {\n        const inH = Math.floor(h / blockSize);\n        const offsetH = (h % blockSize);\n        for (let w = 0; w < outputWidth; ++w) {\n          const inW = Math.floor(w / blockSize);\n          const offsetW = (w % blockSize);\n          const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n          for (let d = 0; d < outputDepth; ++d) {\n            const inD = d + offsetD;\n            const inputIdx =\n                inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n            result[outputIdx++] = xValues[inputIdx];\n          }\n        }\n      }\n    }\n    return ops.tensor4d(\n        result, [batchSize, outputHeight, outputWidth, outputDepth]);\n  }\n\n  private broadcastedBinaryOp(\n      a: Tensor, b: Tensor, dtype: DataType,\n      op: (a: number, b: number) => number): Tensor {\n    const newShape =\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    const result = ops.buffer(newShape, dtype);\n    const aVals = this.readSync(a.dataId) as TypedArray;\n    const bVals = this.readSync(b.dataId) as TypedArray;\n    const aBroadcastDims = broadcast_util.getBroadcastDims(a.shape, newShape);\n    const bBroadcastDims = broadcast_util.getBroadcastDims(b.shape, newShape);\n\n    const resVals = result.values;\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resVals.length; ++i) {\n        resVals[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      const aBuf = this.bufferSync(a);\n      const bBuf = this.bufferSync(b);\n      for (let i = 0; i < resVals.length; ++i) {\n        const loc = result.indexToLoc(i);\n\n        const aLoc = loc.slice(-a.rank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = aBuf.locToIndex(aLoc);\n\n        const bLoc = loc.slice(-b.rank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = bBuf.locToIndex(bLoc);\n\n        resVals[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n    return result.toTensor();\n  }\n\n  private broadcastedBinaryComplexOp(\n      a: Tensor, b: Tensor,\n      op:\n          (aReal: number, aImag: number, bReal: number,\n           bImag: number) => {real: number, imag: number}): Tensor {\n    const newShape =\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    const realResult = ops.buffer(newShape, 'float32');\n    const imagResult = ops.buffer(newShape, 'float32');\n\n    const aVals = this.readSync(a.dataId) as TypedArray;\n    const bVals = this.readSync(b.dataId) as TypedArray;\n    const aBroadcastDims = broadcast_util.getBroadcastDims(a.shape, newShape);\n    const bBroadcastDims = broadcast_util.getBroadcastDims(b.shape, newShape);\n\n    const realVals = realResult.values;\n    const imagVals = imagResult.values;\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < realVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n\n        const result =\n            op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2],\n               bVals[bIdx * 2 + 1]);\n\n        realVals[i] = result.real;\n        imagVals[i] = result.imag;\n      }\n    } else {\n      const aRealBuf =\n          this.bufferSync(this.data.get(a.dataId).complexTensors.real);\n      const bRealBuf =\n          this.bufferSync(this.data.get(b.dataId).complexTensors.real);\n      for (let i = 0; i < realVals.length; i++) {\n        const loc = realResult.indexToLoc(i);\n\n        const aLoc = loc.slice(-a.rank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = aRealBuf.locToIndex(aLoc);\n\n        const bLoc = loc.slice(-b.rank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = bRealBuf.locToIndex(bLoc);\n\n        const opResult =\n            op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2],\n               bVals[bIndex * 2 + 1]);\n\n        realVals[i] = opResult.real;\n        imagVals[i] = opResult.imag;\n      }\n    }\n    return this.complex(realResult.toTensor(), imagResult.toTensor());\n  }\n\n  split<T extends Tensor>(x: T, sizeSplits: number[], axis: number): T[] {\n    return split(x, sizeSplits, axis);\n  }\n\n  dispose() {}\n\n  floatPrecision(): 16|32 {\n    return 32;\n  }\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return EPSILON_FLOAT32;\n  }\n\n  cropAndResize(\n      images: Tensor4D,\n      boxes: Tensor2D,\n      boxIndex: Tensor1D,\n      cropSize: [number, number],\n      method: string,\n      extrapolationValue: number,\n  ) {\n    const [batch, imageHeight, imageWidth, numChannels] = images.shape;\n    const numBoxes = boxes.shape[0];\n\n    const [cropHeight, cropWidth] = cropSize;\n    const output =\n        ops.buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n\n    const boxVals = this.readSync(boxes.dataId) as TypedArray;\n    const boxIndVals = this.readSync(boxIndex.dataId) as TypedArray;\n    const imageVals = this.readSync(images.dataId) as TypedArray;\n\n    const inStride = images.strides;   // to calculate flat indexes into image\n    const outStride = output.strides;  // to calculate flat indexes into output\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n    for (let b = 0; b < numBoxes; b++) {\n      const startInd = b * 4;\n      const y1 = boxVals[startInd];\n      const x1 = boxVals[startInd + 1];\n      const y2 = boxVals[startInd + 2];\n      const x2 = boxVals[startInd + 3];\n\n      const bInd: number = boxIndVals[b];\n      if (bInd >= batch) {\n        continue;\n      }\n\n      const heightScale = (cropHeight > 1) ?\n          (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) :\n          0;\n      const widthScale =\n          (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n\n      for (let y = 0; y < cropHeight; y++) {\n        const yInd: number = (cropHeight > 1) ?\n            y1 * (imageHeight - 1) + y * (heightScale) :\n            0.5 * (y1 + y2) * (imageHeight - 1);\n\n        if (yInd < 0 || yInd > imageHeight - 1) {\n          for (let x = 0; x < cropWidth; x++) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n          }\n          continue;\n        }\n\n        if (method === 'bilinear') {\n          const topInd = Math.floor(yInd);\n          const bottomInd = Math.ceil(yInd);\n          const yLerp = yInd - topInd;\n\n          for (let x = 0; x < cropWidth; x++) {\n            const xInd = (cropWidth > 1) ?\n                x1 * (imageWidth - 1) + x * widthScale :\n                0.5 * (x1 + x2) * (imageWidth - 1);\n\n            if (xInd < 0 || xInd > imageWidth - 1) {\n              for (let c = 0; c < numChannels; c++) {\n                const ind =\n                    c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                output.values[ind] = extrapolationValue;\n              }\n              continue;\n            }\n\n            const leftInd = Math.floor(xInd);\n            const rightInd = Math.ceil(xInd);\n            const xLerp = xInd - leftInd;\n\n            for (let c = 0; c < numChannels; c++) {\n              let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                  bInd * inStride[0];\n              const topLeft = imageVals[ind];\n\n              ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                  bInd * inStride[0];\n              const topRight = imageVals[ind];\n\n              ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                  bInd * inStride[0];\n              const bottomLeft = imageVals[ind];\n\n              ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                  bInd * inStride[0];\n              const bottomRight = imageVals[ind];\n\n              const top = topLeft + (topRight - topLeft) * xLerp;\n              const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n\n              ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = top + ((bottom - top) * yLerp);\n            }\n          }\n        } else {  // method == \"nearest\"\n          for (let x = 0; x < cropWidth; ++x) {\n            const xInd = (cropWidth > 1) ?\n                x1 * (imageWidth - 1) + x * widthScale :\n                0.5 * (x1 + x2) * (imageWidth - 1);\n\n            if (xInd < 0 || xInd > imageWidth - 1) {\n              for (let c = 0; c < numChannels; c++) {\n                const ind =\n                    c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                output.values[ind] = extrapolationValue;\n              }\n              continue;\n            }\n\n            const closestX = Math.round(xInd);\n            const closestY = Math.round(yInd);\n            for (let c = 0; c < numChannels; c++) {\n              const inInd = c + closestX * inStride[2] +\n                  closestY * inStride[1] + bInd * inStride[0];\n              const outInd =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[outInd] = imageVals[inInd];\n            }\n          }\n        }\n      }\n    }\n    return output.toTensor() as Tensor4D;\n  }\n\n  sparseToDense<R extends Rank>(\n      sparseIndices: Tensor, sparseValues: Tensor, outputShape: ShapeMap[R],\n      defaultValue: Scalar): Tensor<R> {\n    const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n        scatter_nd_util.calculateShapes(\n            sparseValues, sparseIndices, outputShape);\n    const sumDupeIndices = false;\n    return this.scatter(\n        sparseIndices, sparseValues, outputShape, outputSize, sliceSize,\n        numUpdates, sliceRank, strides, defaultValue, sumDupeIndices);\n  }\n\n  gatherND(x: Tensor, indices: Tensor): Tensor {\n    const indicesShape = indices.shape;\n    const sliceRank = indicesShape[indicesShape.length - 1];\n\n    const [resultShape, numSlices, sliceSize, strides] =\n        gather_nd_util.prepareAndValidate(x, indices);\n    if (numSlices === 0) {\n      return tensor([], resultShape, x.dtype);\n    }\n\n    const buffer = new TensorBuffer([numSlices, sliceSize], x.dtype);\n    const indicesData = this.readSync(indices.dataId) as TypedArray;\n    const xData = this.readSync(x.dataId) as TypedArray;\n\n    for (let i = 0; i < numSlices; i++) {\n      const index = [];\n      let flattenIndex = 0;\n      for (let j = 0; j < sliceRank; j++) {\n        const dim = indicesData[i * sliceRank + j];\n        flattenIndex += dim * strides[j];\n        index.push(dim);\n      }\n      if (flattenIndex < 0 || flattenIndex >= x.size / sliceSize) {\n        throw new Error(\n            `Invalid indices: ${index} does not index into ${x.shape}`);\n      }\n\n      for (let k = 0; k < sliceSize; k++) {\n        buffer.values[i * sliceSize + k] = xData[flattenIndex * sliceSize + k];\n      }\n    }\n    return buffer.toTensor().reshape(resultShape);\n  }\n\n  scatterND<R extends Rank>(\n      indices: Tensor, updates: Tensor, shape: ShapeMap[R]): Tensor<R> {\n    const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n        scatter_nd_util.calculateShapes(updates, indices, shape);\n    const defaultValue = scalar(0);\n    const sumDupeIndices = true;\n    return this.scatter(\n        indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank,\n        strides, defaultValue, sumDupeIndices);\n  }\n\n  fill<R extends Rank>(\n      shape: ShapeMap[R], value: number|string, dtype?: DataType): Tensor<R> {\n    dtype = dtype || inferDtype(value);\n    const values = getArrayFromDType(dtype, sizeFromShape(shape)) as TypedArray;\n    values.fill(value as number);\n    return ENGINE.makeTensor(values, shape, dtype, this) as Tensor<R>;\n  }\n\n  onesLike<R extends Rank>(x: Tensor<R>): Tensor<R> {\n    if (x.dtype === 'string') {\n      throw new Error('onesLike is not supported for string tensors');\n    } else {\n      return this.fill(x.shape, 1, x.dtype);\n    }\n  }\n\n  zerosLike<R extends Rank>(x: Tensor<R>): Tensor<R> {\n    const values =\n        getArrayFromDType(x.dtype, sizeFromShape(x.shape)) as TypedArray;\n    return this.makeOutput(values, x.shape, x.dtype);\n  }\n\n  linspace(start: number, stop: number, num: number): Tensor1D {\n    return backend_util.linspaceImpl(start, stop, num);\n  }\n\n  private scatter<R extends Rank>(\n      indices: Tensor, updates: Tensor, shape: ShapeMap[R], outputSize: number,\n      sliceSize: number, numUpdates: number, sliceRank: number,\n      strides: number[], defaultValue: Scalar,\n      sumDupeIndices: boolean): Tensor<R> {\n    const flattenShape = [outputSize / sliceSize, sliceSize];\n\n    const indicesData = this.readSync(indices.dataId) as TypedArray;\n    const updatesData = this.readSync(updates.dataId) as TypedArray;\n\n    if (outputSize === 0) {\n      return tensor([], shape, updates.dtype);\n    }\n\n    const buffer = new TensorBuffer(flattenShape, updates.dtype as 'float32');\n    buffer.values.fill((this.readSync(defaultValue.dataId) as TypedArray)[0]);\n\n    for (let i = 0; i < numUpdates; i++) {\n      const index = [];\n      let flattenIndex = 0;\n      for (let j = 0; j < sliceRank; j++) {\n        const dim = indicesData[i * sliceRank + j];\n        index.push(dim);\n        flattenIndex += dim * strides[j];\n      }\n\n      if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n        throw new Error(\n            `Invalid indices: ${index} does not index into ${shape}`);\n      }\n\n      for (let k = 0; k < sliceSize; k++) {\n        if (sumDupeIndices) {\n          buffer.values[flattenIndex * sliceSize + k] +=\n              updatesData[i * sliceSize + k];\n        } else {\n          buffer.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n              updatesData[0] :\n              updatesData[i * sliceSize + k];\n        }\n      }\n    }\n    return buffer.toTensor().reshape(shape);\n  }\n}\n\nENGINE.registerBackend('cpu', () => new MathBackendCPU(), 1 /* priority */);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const ERF_P = 0.3275911;\nexport const ERF_A1 = 0.254829592;\nexport const ERF_A2 = -0.284496736;\nexport const ERF_A3 = 1.421413741;\nexport const ERF_A4 = -1.453152027;\nexport const ERF_A5 = 1.061405429;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NamedTensorInfoMap, registerKernel, TensorInfo} from '../../kernel_registry';\n\nimport {MathBackendCPU} from './backend_cpu';\nimport {assertNotComplex} from './cpu_util';\n\ninterface SquareInputs extends NamedTensorInfoMap {\n  x: TensorInfo;\n}\n\nregisterKernel({\n  kernelName: 'Square',\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'square');\n\n    const values = cpuBackend.data.get(x.dataId).values as Float32Array;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = value * value;\n    }\n    const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NamedAttrMap, NamedTensorInfoMap, registerKernel, TensorInfo} from '../../kernel_registry';\nimport {TypedArray} from '../../types';\nimport {nonMaxSuppressionV5} from '../non_max_suppression_impl';\n\nimport {MathBackendCPU} from './backend_cpu';\nimport {assertNotComplex} from './cpu_util';\n\ninterface NonMaxSuppressionWithScoreInputs extends NamedTensorInfoMap {\n  boxes: TensorInfo;\n  scores: TensorInfo;\n}\n\ninterface NonMaxSuppressionWithScoreAttrs extends NamedAttrMap {\n  maxOutputSize: number;\n  iouThreshold: number;\n  scoreThreshold: number;\n  softNmsSigma: number;\n}\n\nregisterKernel({\n  kernelName: 'NonMaxSuppressionV5',\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {boxes, scores} = inputs as NonMaxSuppressionWithScoreInputs;\n    const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} =\n        attrs as NonMaxSuppressionWithScoreAttrs;\n\n    const cpuBackend = backend as MathBackendCPU;\n\n    assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n\n    const boxesVals = cpuBackend.data.get(boxes.dataId).values as TypedArray;\n    const scoresVals = cpuBackend.data.get(scores.dataId).values as TypedArray;\n\n    const maxOutputSizeVal = maxOutputSize;\n    const iouThresholdVal = iouThreshold;\n    const scoreThresholdVal = scoreThreshold;\n    const softNmsSigmaVal = softNmsSigma;\n\n    const {selectedIndices, selectedScores} = nonMaxSuppressionV5(\n        boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n        scoreThresholdVal, softNmsSigmaVal);\n\n    return [selectedIndices, selectedScores];\n  }\n});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NamedTensorInfoMap, registerKernel, TensorInfo} from '../../kernel_registry';\n\nimport {MathBackendWebGL} from './backend_webgl';\nimport {SQUARE, UnaryOpProgram} from './unaryop_gpu';\n\ninterface SquareInputs extends NamedTensorInfoMap {\n  x: TensorInfo;\n}\n\nregisterKernel({\n  kernelName: 'Square',\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const webglBackend = backend as MathBackendWebGL;\n    const program = new UnaryOpProgram(x.shape, SQUARE);\n    return webglBackend.runWebGLProgram(program, [x], x.dtype);\n  }\n});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FromPixelsProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);\n\n        vec4 values = ${glsl.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '../../environment';\nimport {KernelFunc, registerKernel, TensorInfo} from '../../kernel_registry';\nimport {PixelData} from '../../types';\n\nimport {MathBackendWebGL} from './backend_webgl';\nimport {FromPixelsProgram} from './from_pixels_gpu';\nimport {FromPixelsPackedProgram} from './from_pixels_packed_gpu';\nimport {TextureUsage} from './tex_util';\n\ninterface FromPixelsInputs {\n  pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      HTMLVideoElement;\n}\n\ninterface FromPixelsAttrs {\n  numChannels: number;\n}\n\nregisterKernel({\n  kernelName: 'FromPixels',\n  backendName: 'webgl',\n  kernelFunc: fromPixels as {} as KernelFunc,\n});\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\n\nfunction fromPixels(args: {\n  inputs: FromPixelsInputs,\n  backend: MathBackendWebGL,\n  attrs: FromPixelsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  let {pixels} = inputs;\n  const {numChannels} = attrs;\n\n  const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement;\n  const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement;\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n\n  const texShape: [number, number] = [height, width];\n  const outShape = [height, width, numChannels];\n\n  if (isImage || isVideo) {\n    if (fromPixels2DContext == null) {\n      fromPixels2DContext = document.createElement('canvas').getContext('2d');\n    }\n\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(\n        pixels as HTMLVideoElement | HTMLImageElement, 0, 0, width, height);\n    pixels = fromPixels2DContext.canvas;\n  }\n\n  const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n  // This is a byte texture with pixels.\n  backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n  backend.gpgpu.uploadPixelDataToTexture(\n      backend.getTexture(tempPixelHandle.dataId), pixels as ImageData);\n  const program = env().getBool('WEBGL_PACK') ?\n      new FromPixelsPackedProgram(outShape) :\n      new FromPixelsProgram(outShape);\n  const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n  backend.disposeData(tempPixelHandle.dataId);\n  return res;\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FromPixelsPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${width}.0, ${height}.0);\n            vec4 values = ${glsl.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NamedAttrMap, NamedTensorInfoMap, registerKernel, TensorInfo} from '../../kernel_registry';\nimport {warn} from '../../log';\nimport {TypedArray} from '../../types';\nimport {nonMaxSuppressionV5} from '../non_max_suppression_impl';\n\nimport {MathBackendWebGL} from './backend_webgl';\n\ninterface NonMaxSuppressionWithScoreInputs extends NamedTensorInfoMap {\n  boxes: TensorInfo;\n  scores: TensorInfo;\n}\n\ninterface NonMaxSuppressionWithScoreAttrs extends NamedAttrMap {\n  maxOutputSize: number;\n  iouThreshold: number;\n  scoreThreshold: number;\n  softNmsSigma: number;\n}\n\nregisterKernel({\n  kernelName: 'NonMaxSuppressionV5',\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    warn(\n        'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n        'Call tf.nonMaxSuppressionAsync() instead');\n\n    const {boxes, scores} = inputs as NonMaxSuppressionWithScoreInputs;\n    const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} =\n        attrs as NonMaxSuppressionWithScoreAttrs;\n\n    const gpuBackend = backend as MathBackendWebGL;\n\n    const boxesVals = gpuBackend.readSync(boxes.dataId) as TypedArray;\n    const scoresVals = gpuBackend.readSync(scores.dataId) as TypedArray;\n\n    const maxOutputSizeVal = maxOutputSize;\n    const iouThresholdVal = iouThreshold;\n    const scoreThresholdVal = scoreThreshold;\n    const softNmsSigmaVal = softNmsSigma;\n\n    const {selectedIndices, selectedScores} = nonMaxSuppressionV5(\n        boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n        scoreThresholdVal, softNmsSigmaVal);\n\n    return [selectedIndices, selectedScores];\n  }\n});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '../environment';\n\nimport {Platform} from './platform';\n\nexport class PlatformBrowser implements Platform {\n  // According to the spec, the built-in encoder can do only UTF-8 encoding.\n  // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder\n  private textEncoder: TextEncoder;\n\n  fetch(path: string, init?: RequestInit): Promise<Response> {\n    return fetch(path, init);\n  }\n\n  now(): number {\n    return performance.now();\n  }\n\n  encode(text: string, encoding: string): Uint8Array {\n    if (encoding !== 'utf-8' && encoding !== 'utf8') {\n      throw new Error(\n          `Browser's encoder only supports utf-8, but got ${encoding}`);\n    }\n    if (this.textEncoder == null) {\n      this.textEncoder = new TextEncoder();\n    }\n    return this.textEncoder.encode(text);\n  }\n  decode(bytes: Uint8Array, encoding: string): string {\n    return new TextDecoder(encoding).decode(bytes);\n  }\n}\n\nif (env().get('IS_BROWSER')) {\n  env().setPlatform('browser', new PlatformBrowser());\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from '../environment';\n\nimport {Platform} from './platform';\n\n// We are wrapping this within an object so it can be stubbed by Jasmine.\nexport const getNodeFetch = {\n  // tslint:disable-next-line:no-require-imports\n  importFetch: () => require('node-fetch')\n};\n\ntype FetchFn = (url: string, init?: RequestInit) => Promise<Response>;\nlet systemFetch: FetchFn;\n// These getters and setters are for testing so we don't export a mutable\n// variable.\nexport function resetSystemFetch() {\n  systemFetch = null;\n}\nexport function setSystemFetch(fetchFn: FetchFn) {\n  systemFetch = fetchFn;\n}\nexport function getSystemFetch(): FetchFn {\n  return systemFetch;\n}\n\nexport class PlatformNode implements Platform {\n  private textEncoder: TextEncoder;\n  // tslint:disable-next-line:no-any\n  util: any;\n\n  constructor() {\n    // tslint:disable-next-line:no-require-imports\n    this.util = require('util');\n    // According to the spec, the built-in encoder can do only UTF-8 encoding.\n    // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder\n    this.textEncoder = new this.util.TextEncoder();\n  }\n\n  fetch(path: string, requestInits?: RequestInit): Promise<Response> {\n    if (env().global.fetch != null) {\n      return env().global.fetch(path, requestInits);\n    }\n\n    if (systemFetch == null) {\n      systemFetch = getNodeFetch.importFetch();\n    }\n    return systemFetch(path, requestInits);\n  }\n\n  now(): number {\n    const time = process.hrtime();\n    return time[0] * 1000 + time[1] / 1000000;\n  }\n\n  encode(text: string, encoding: string): Uint8Array {\n    if (encoding !== 'utf-8' && encoding !== 'utf8') {\n      throw new Error(\n          `Node built-in encoder only supports utf-8, but got ${encoding}`);\n    }\n    return this.textEncoder.encode(text);\n  }\n  decode(bytes: Uint8Array, encoding: string): string {\n    if (bytes.length === 0) {\n      return '';\n    }\n    return new this.util.TextDecoder(encoding).decode(bytes);\n  }\n}\n\nif (env().get('IS_NODE')) {\n  env().setPlatform('node', new PlatformNode());\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/* Type definitions for exporting and importing of models. */\n\n/**\n * A map from Tensor dtype to number of bytes per element of the Tensor.\n */\nexport const DTYPE_VALUE_SIZE_MAP: {[dtype: string]: number} = {\n  'float32': 4,\n  'int32': 4,\n  'uint16': 2,\n  'uint8': 1,\n  'bool': 1,\n};\n\n/**\n * A weight manifest.\n *\n * The weight manifest consists of an ordered list of weight-manifest groups.\n * Each weight-manifest group (\"group\" for short hereafter) consists of a\n * number of weight values stored in a number of paths.\n * See the documentation of `WeightManifestGroupConfig` below for more details.\n */\nexport declare type WeightsManifestConfig = WeightsManifestGroupConfig[];\n\n/**\n * A weight-manifest group.\n *\n * Consists of an ordered list of weight values encoded in binary format,\n * stored in an ordered list of paths.\n */\nexport declare interface WeightsManifestGroupConfig {\n  /**\n   * An ordered list of paths.\n   *\n   * Paths are intentionally abstract in order to be general. For example, they\n   * can be relative URL paths or relative paths on the file system.\n   */\n  paths: string[];\n\n  /**\n   * Specifications of the weights stored in the paths.\n   */\n  weights: WeightsManifestEntry[];\n}\n\n/**\n * Group to which the weight belongs.\n *\n * - 'optimizer': Weight from a stateful optimizer.\n */\nexport type WeightGroup = 'model'|'optimizer';\n\n/**\n * An entry in the weight manifest.\n *\n * The entry contains specification of a weight.\n */\nexport declare interface WeightsManifestEntry {\n  /**\n   * Name of the weight, e.g., 'Dense_1/bias'\n   */\n  name: string;\n\n  /**\n   * Shape of the weight.\n   */\n  shape: number[];\n\n  /**\n   * Data type of the weight.\n   */\n  dtype: 'float32'|'int32'|'bool'|'string';\n\n  /**\n   * Type of the weight.\n   *\n   * Optional.\n   *\n   * The value 'optimizer' indicates the weight belongs to an optimizer\n   * (i.e., used only during model training and not during inference).\n   */\n  group?: WeightGroup;\n\n  /**\n   * Information for dequantization of the weight.\n   */\n  quantization?: {\n    scale: number,           // The scaling constant to multiply by.\n    min: number,             // The (possibly nudged) minimum weight to add.\n    dtype: 'uint16'|'uint8'  // The dtype of the quantized weights.\n  };\n}\n\n/**\n * Options for saving a model.\n * @innamespace io\n */\nexport interface SaveConfig {\n  /**\n   * Whether to save only the trainable weights of the model, ignoring the\n   * non-trainable ones.\n   */\n  trainableOnly?: boolean;\n\n  /**\n   * Whether the optimizer will be saved (if exists).\n   *\n   * Default: `false`.\n   */\n  includeOptimizer?: boolean;\n}\n\n/**\n * Result of a saving operation.\n */\nexport interface SaveResult {\n  /**\n   * Information about the model artifacts saved.\n   */\n  modelArtifactsInfo: ModelArtifactsInfo;\n\n  /**\n   * HTTP responses from the server that handled the model-saving request (if\n   * any). This is applicable only to server-based saving routes.\n   */\n  responses?: Response[];\n\n  /**\n   * Error messages and related data (if any).\n   */\n  errors?: Array<{}|string>;\n}\n\nexport declare interface ModelArtifactsInfo {\n  /**\n   * Timestamp for when the model is saved.\n   */\n  dateSaved: Date;\n\n  /**\n   * TODO (cais,yassogba) consider removing GraphDef as GraphDefs now\n   * come in a JSON format and none of our IOHandlers support a non json\n   * format. We could conder replacing this with 'Binary' if we want to\n   * allow future handlers to save to non json formats (though they will\n   * probably want more information than 'Binary').\n   * Type of the model topology\n   *\n   * Type of the model topology\n   *\n   * Possible values:\n   *   - JSON: JSON config (human-readable, e.g., Keras JSON).\n   *   - GraphDef: TensorFlow\n   *     [GraphDef](https://www.tensorflow.org/extend/tool_developers/#graphdef)\n   *     protocol buffer (binary).\n   */\n  modelTopologyType: 'JSON'|'GraphDef';\n\n  /**\n   * Size of model topology (Keras JSON or GraphDef), in bytes.\n   */\n  modelTopologyBytes?: number;\n\n  /**\n   * Size of weight specification or manifest, in bytes.\n   */\n  weightSpecsBytes?: number;\n\n  /**\n   * Size of weight value data, in bytes.\n   */\n  weightDataBytes?: number;\n}\n\n/** Model training configuration. */\nexport declare interface TrainingConfig {\n  // TODO(cais): Tighten the typing once keras spec is available to tfjs-core.\n  // See\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tfjs-layers/blob/master/src/keras_format/training_config.ts\n  /** Optimizer used for the model training. */\n  optimizer_config: {};\n\n  // TODO(cais): Tighten the typing once keras spec is available to tfjs-core.\n  /** Loss function(s) for the model's output(s). */\n  loss: string|string[]|{[key: string]: string};\n\n  // TODO(cais): Tighten the typing once keras spec is available to tfjs-core.\n  /** Metric function(s) for the model's output(s). */\n  metrics?: string[]|{[key: string]: string};\n\n  // TODO(cais): Tighten the typing once keras spec is available to tfjs-core.\n  weighted_metrics?: string[];\n\n  // TODO(cais): Tighten the typing once keras spec is available to tfjs-core.\n  sample_weight_mode?: string;\n\n  loss_weights?: number[]|{[key: string]: number};\n}\n\n/**\n * The serialized artifacts of a model, including topology and weights.\n *\n * The `modelTopology`, `trainingConfig`, `weightSpecs` and `weightData` fields\n * of this interface are optional, in order to support topology- or weights-only\n * saving and loading.\n *\n * Note this interface is used internally in IOHandlers.  For the file format\n * written to disk as `model.json`, see `ModelJSON`.\n */\nexport declare interface ModelArtifacts {\n  /**\n   * Model topology.\n   *\n   * For Keras-style `tf.Model`s, this is a JSON object.\n   * For TensorFlow-style models (e.g., `SavedModel`), this is the JSON\n   * encoding of the `GraphDef` protocol buffer.\n   */\n  modelTopology?: {}|ArrayBuffer;\n\n  /**\n   * Serialized configuration for the model's training.\n   */\n  trainingConfig?: TrainingConfig;\n\n  /**\n   * Weight specifications.\n   *\n   * This corresponds to the weightsData below.\n   */\n  weightSpecs?: WeightsManifestEntry[];\n\n  /**\n   * Binary buffer for all weight values concatenated in the order specified\n   * by `weightSpecs`.\n   */\n  weightData?: ArrayBuffer;\n\n  /**\n   * Hard-coded format name for models saved from TensorFlow.js or converted\n   * by TensorFlow.js Converter.\n   */\n  format?: string;\n\n  /**\n   * What library is responsible for originally generating this artifact.\n   *\n   * Used for debugging purposes. E.g., 'TensorFlow.js v1.0.0'.\n   */\n  generatedBy?: string;\n\n  /**\n   * What library or tool is responsible for converting the original model\n   * to this format, applicable only if the model is output by a converter.\n   *\n   * Used for debugging purposes.  E.g., 'TensorFlow.js Converter v1.0.0'.\n   *\n   * A value of `null` means the model artifacts are generated without any\n   * conversion process (e.g., saved directly from a TensorFlow.js\n   * `tf.LayersModel` instance.)\n   */\n  convertedBy?: string|null;\n\n  /**\n   * User-defined metadata about the model.\n   */\n  userDefinedMetadata?: {};\n}\n\n/**\n * The on-disk format of the `model.json` file.\n *\n * TF.js 1.0 always populates the optional fields when writing model.json.\n * Prior versions did not provide those fields.\n */\nexport declare interface ModelJSON {\n  /**\n   * Model topology.\n   *\n   * For Keras-style `tf.Model`s, this is a JSON object.\n   * For TensorFlow-style models (e.g., `SavedModel`), this is the JSON\n   * encoding of the `GraphDef` protocol buffer.\n   */\n  modelTopology: {};\n\n  /** Model training configuration. */\n  trainingConfig?: TrainingConfig;\n\n  /**\n   * Weights manifest.\n   *\n   * The weights manifest consists of an ordered list of weight-manifest\n   * groups. Each weight-manifest group consists of a number of weight values\n   * stored in a number of paths. See the documentation of\n   * `WeightsManifestConfig` for more details.\n   */\n  weightsManifest: WeightsManifestConfig;\n\n  /**\n   * Hard-coded format name for models saved from TensorFlow.js or converted\n   * by TensorFlow.js Converter.\n   */\n  format?: string;\n\n  /**\n   * What library is responsible for originally generating this artifact.\n   *\n   * Used for debugging purposes. E.g., 'TensorFlow.js v1.0.0'.\n   */\n  generatedBy?: string;\n\n  /**\n   * What library or tool is responsible for converting the original model\n   * to this format, applicable only if the model is output by a converter.\n   *\n   * Used for debugging purposes.  E.g., 'TensorFlow.js Converter v1.0.0'.\n   *\n   * A value of `null` means the model artifacts are generated without any\n   * conversion process (e.g., saved directly from a TensorFlow.js\n   * `tf.LayersModel` instance.)\n   */\n  convertedBy?: string|null;\n\n  /**\n   * User-defined metadata about the model.\n   */\n  userDefinedMetadata?: {};\n}\n\n/**\n * Type definition for handlers of loading operations.\n */\nexport type LoadHandler = () => Promise<ModelArtifacts>;\n\n/**\n * Type definition for handlers of saving operations.\n */\nexport type SaveHandler = (modelArtifact: ModelArtifacts) =>\n    Promise<SaveResult>;\n\n/**\n * Interface for a model import/export handler.\n *\n * The `save` and `load` handlers are both optional, in order to allow handlers\n * that support only saving or loading.\n */\n// tslint:disable-next-line:interface-name\nexport interface IOHandler {\n  save?: SaveHandler;\n  load?: LoadHandler;\n}\n\n/**\n * An interface for the manager of a model store.\n *\n * A model store is defined as a storage medium on which multiple models can\n * be stored. Each stored model has a unique `path` as its identifier.\n * A `ModelStoreManager` for the store allows actions including\n *\n * - Listing the models stored in the store.\n * - Deleting a model from the store.\n */\nexport interface ModelStoreManager {\n  /**\n   * List all models in the model store.\n   *\n   * @returns A dictionary mapping paths of existing models to their\n   *   model artifacts info. Model artifacts info include type of the model's\n   *   topology, byte sizes of the topology, weights, etc.\n   */\n  listModels(): Promise<{[path: string]: ModelArtifactsInfo}>;\n\n  /**\n   * Remove a model specified by `path`.\n   *\n   * @param path\n   * @returns ModelArtifactsInfo of the deleted model (if and only if deletion\n   *   is successful).\n   * @throws Error if deletion fails, e.g., if no model exists at `path`.\n   */\n  removeModel(path: string): Promise<ModelArtifactsInfo>;\n}\n\n/**\n * Callback for the progress of a long-running action such as an HTTP\n * request for a large binary object.\n *\n * `fraction` should be a number in the [0, 1] interval, indicating how\n * much of the action has completed.\n */\nexport type OnProgressCallback = (fraction: number) => void;\n\n/** @innamespace io */\nexport interface LoadOptions {\n  /**\n   * RequestInit (options) for HTTP requests.\n   *\n   * For detailed information on the supported fields, see\n   * [https://developer.mozilla.org/en-US/docs/Web/API/Request/Request](\n   *     https://developer.mozilla.org/en-US/docs/Web/API/Request/Request)\n   */\n  requestInit?: RequestInit;\n\n  /**\n   * Progress callback.\n   */\n  onProgress?: OnProgressCallback;\n\n  /**\n   * A function used to override the `window.fetch` function.\n   */\n  fetchFunc?: Function;\n\n  /**\n   * Strict loading model: whether extraneous weights or missing\n   * weights should trigger an `Error`.\n   *\n   * If `true`, require that the provided weights exactly match those\n   * required by the layers. `false` means that both extra weights\n   * and missing weights will be silently ignored.\n   *\n   * Default: `true`.\n   */\n  strict?: boolean;\n\n  /**\n   * Path prefix for weight files, by default this is calculated from the\n   * path of the model JSON file.\n   *\n   * For instance, if the path to the model JSON file is\n   * `http://localhost/foo/model.json`, then the default path prefix will be\n   * `http://localhost/foo/`. If a weight file has the path value\n   * `group1-shard1of2` in the weight manifest, then the weight file will be\n   * loaded from `http://localhost/foo/group1-shard1of2` by default. However,\n   * if you provide a `weightPathPrefix` value of\n   * `http://localhost/foo/alt-weights`, then the weight file will be loaded\n   * from the path `http://localhost/foo/alt-weights/group1-shard1of2` instead.\n   */\n  weightPathPrefix?: string;\n\n  /**\n   * Whether the module or model is to be loaded from TF Hub.\n   *\n   * Setting this to `true` allows passing a TF-Hub module URL, omitting the\n   * standard model file name and the query parameters.\n   *\n   * Default: `false`.\n   */\n  fromTFHub?: boolean;\n}\n\n/**\n * Additional options for Platform.fetch\n */\nexport interface RequestDetails {\n  /**\n   * Is this request for a binary file (as opposed to a json file)\n   */\n  isBinary?: boolean;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {tensor} from '../ops/tensor_ops';\nimport {NamedTensor, NamedTensorMap} from '../tensor_types';\nimport {TypedArray} from '../types';\nimport {sizeFromShape} from '../util';\n\nimport {DTYPE_VALUE_SIZE_MAP, ModelArtifacts, ModelArtifactsInfo, WeightGroup, WeightsManifestEntry} from './types';\n\n/** Number of bytes reserved for the length of the string. (32bit integer). */\nconst NUM_BYTES_STRING_LENGTH = 4;\n\n/**\n * Encode a map from names to weight values as an ArrayBuffer, along with an\n * `Array` of `WeightsManifestEntry` as specification of the encoded weights.\n *\n * This function does not perform sharding.\n *\n * This function is the reverse of `decodeWeights`.\n *\n * @param tensors A map (\"dict\") from names to tensors.\n * @param group Group to which the weights belong (optional).\n * @returns A `Promise` of\n *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s\n *     concatenated.\n *   - An `Array` of `WeightManifestEntry`s, carrying information including\n *     tensor names, `dtype`s and shapes.\n * @throws Error: on unsupported tensor `dtype`.\n */\nexport async function encodeWeights(\n    tensors: NamedTensorMap|NamedTensor[], group?: WeightGroup):\n    Promise<{data: ArrayBuffer, specs: WeightsManifestEntry[]}> {\n  // TODO(adarob, cais): Support quantization.\n  const specs: WeightsManifestEntry[] = [];\n  const dataPromises: Array<Promise<TypedArray>> = [];\n\n  const names: string[] = Array.isArray(tensors) ?\n      tensors.map(tensor => tensor.name) :\n      Object.keys(tensors);\n\n  for (let i = 0; i < names.length; ++i) {\n    const name = names[i];\n    const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];\n    if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' &&\n        t.dtype !== 'string') {\n      throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);\n    }\n    const spec: WeightsManifestEntry = {name, shape: t.shape, dtype: t.dtype};\n    if (t.dtype === 'string') {\n      const utf8bytes = new Promise<TypedArray>(async resolve => {\n        const vals = await t.bytes() as Uint8Array[];\n        const totalNumBytes = vals.reduce((p, c) => p + c.length, 0) +\n            NUM_BYTES_STRING_LENGTH * vals.length;\n        const bytes = new Uint8Array(totalNumBytes);\n        let offset = 0;\n        for (let i = 0; i < vals.length; i++) {\n          const val = vals[i];\n          const bytesOfLength =\n              new Uint8Array(new Uint32Array([val.length]).buffer);\n          bytes.set(bytesOfLength, offset);\n          offset += NUM_BYTES_STRING_LENGTH;\n          bytes.set(val, offset);\n          offset += val.length;\n        }\n        resolve(bytes);\n      });\n      dataPromises.push(utf8bytes);\n    } else {\n      dataPromises.push(t.data());\n    }\n    if (group != null) {\n      spec.group = group;\n    }\n    specs.push(spec);\n  }\n\n  const tensorValues = await Promise.all(dataPromises);\n  return {data: concatenateTypedArrays(tensorValues), specs};\n}\n\n/**\n * Decode flat ArrayBuffer as weights.\n *\n * This function does not handle sharding.\n *\n * This function is the reverse of `encodeWeights`.\n *\n * @param buffer A flat ArrayBuffer carrying the binary values of the tensors\n *   concatenated in the order specified in `specs`.\n * @param specs Specifications of the names, dtypes and shapes of the tensors\n *   whose value are encoded by `buffer`.\n * @return A map from tensor name to tensor value, with the names corresponding\n *   to names in `specs`.\n * @throws Error, if any of the tensors has unsupported dtype.\n */\nexport function decodeWeights(\n    buffer: ArrayBuffer, specs: WeightsManifestEntry[]): NamedTensorMap {\n  // TODO(adarob, cais): Support quantization.\n  const out: NamedTensorMap = {};\n  let offset = 0;\n  for (const spec of specs) {\n    const name = spec.name;\n    const dtype = spec.dtype;\n    const shape = spec.shape;\n    const size = sizeFromShape(shape);\n    let values: TypedArray|string[]|Uint8Array[];\n\n    if ('quantization' in spec) {\n      const quantization = spec.quantization;\n      if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {\n        throw new Error(\n            `Weight ${spec.name} has unknown ` +\n            `quantization dtype ${quantization.dtype}. ` +\n            `Supported quantization dtypes are: 'uint8' and 'uint16'.`);\n      }\n      const quantizationSizeFactor = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n      const byteBuffer =\n          buffer.slice(offset, offset + size * quantizationSizeFactor);\n      const quantizedArray = (quantization.dtype === 'uint8') ?\n          new Uint8Array(byteBuffer) :\n          new Uint16Array(byteBuffer);\n      if (dtype === 'float32') {\n        values = Float32Array.from(\n            quantizedArray, v => v * quantization.scale + quantization.min);\n      } else if (dtype === 'int32') {\n        values = Int32Array.from(\n            quantizedArray,\n            v => Math.round(v * quantization.scale + quantization.min));\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n      offset += size * quantizationSizeFactor;\n    } else if (dtype === 'string') {\n      const size = sizeFromShape(spec.shape);\n      values = [];\n      for (let i = 0; i < size; i++) {\n        const byteLength = new Uint32Array(\n            buffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];\n        offset += NUM_BYTES_STRING_LENGTH;\n        const bytes = new Uint8Array(buffer.slice(offset, offset + byteLength));\n        (values as Uint8Array[]).push(bytes);\n        offset += byteLength;\n      }\n    } else {\n      const dtypeFactor = DTYPE_VALUE_SIZE_MAP[dtype];\n      const byteBuffer = buffer.slice(offset, offset + size * dtypeFactor);\n\n      if (dtype === 'float32') {\n        values = new Float32Array(byteBuffer);\n      } else if (dtype === 'int32') {\n        values = new Int32Array(byteBuffer);\n      } else if (dtype === 'bool') {\n        values = new Uint8Array(byteBuffer);\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n      offset += size * dtypeFactor;\n    }\n\n    out[name] = tensor(values, shape, dtype);\n  }\n  return out;\n}\n\n/**\n * Concatenate TypedArrays into an ArrayBuffer.\n */\nexport function concatenateTypedArrays(xs: TypedArray[]): ArrayBuffer {\n  // TODO(adarob, cais): Support quantization.\n  if (xs === null) {\n    throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);\n  }\n\n  let totalByteLength = 0;\n\n  // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'\n  // can have a different byte length from that of the `TypedArray` itself,\n  // for example, when the `TypedArray` is created from an offset in an\n  // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match\n  // the `TypedArray` in byte length. If an element of `xs` does not show\n  // this property, a new `TypedArray` that satisfy this property will be\n  // constructed and pushed into `normalizedXs`.\n  const normalizedXs: TypedArray[] = [];\n  xs.forEach((x: TypedArray) => {\n    totalByteLength += x.byteLength;\n    // tslint:disable:no-any\n    normalizedXs.push(\n        x.byteLength === x.buffer.byteLength ? x :\n                                               new (x.constructor as any)(x));\n    if (!(x as any instanceof Float32Array || x as any instanceof Int32Array ||\n          x as any instanceof Uint8Array)) {\n      throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);\n    }\n    // tslint:enable:no-any\n  });\n\n  const y = new Uint8Array(totalByteLength);\n  let offset = 0;\n  normalizedXs.forEach((x: TypedArray) => {\n    y.set(new Uint8Array(x.buffer), offset);\n    offset += x.byteLength;\n  });\n\n  return y.buffer;\n}\n\n// Use Buffer on Node.js instead of Blob/atob/btoa\nconst useNodeBuffer = typeof Buffer !== 'undefined' &&\n    (typeof Blob === 'undefined' || typeof atob === 'undefined' ||\n     typeof btoa === 'undefined');\n\n/**\n * Calculate the byte length of a JavaScript string.\n *\n * Note that a JavaScript string can contain wide characters, therefore the\n * length of the string is not necessarily equal to the byte length.\n *\n * @param str Input string.\n * @returns Byte length.\n */\nexport function stringByteLength(str: string): number {\n  if (useNodeBuffer) {\n    return Buffer.byteLength(str);\n  }\n  return new Blob([str]).size;\n}\n\n/**\n * Encode an ArrayBuffer as a base64 encoded string.\n *\n * @param buffer `ArrayBuffer` to be converted.\n * @returns A string that base64-encodes `buffer`.\n */\nexport function arrayBufferToBase64String(buffer: ArrayBuffer): string {\n  if (useNodeBuffer) {\n    return Buffer.from(buffer).toString('base64');\n  }\n  const buf = new Uint8Array(buffer);\n  let s = '';\n  for (let i = 0, l = buf.length; i < l; i++) {\n    s += String.fromCharCode(buf[i]);\n  }\n  return btoa(s);\n}\n\n/**\n * Decode a base64 string as an ArrayBuffer.\n *\n * @param str Base64 string.\n * @returns Decoded `ArrayBuffer`.\n */\nexport function base64StringToArrayBuffer(str: string): ArrayBuffer {\n  if (useNodeBuffer) {\n    const buf = Buffer.from(str, 'base64');\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n  }\n  const s = atob(str);\n  const buffer = new Uint8Array(s.length);\n  for (let i = 0; i < s.length; ++i) {\n    buffer.set([s.charCodeAt(i)], i);\n  }\n  return buffer.buffer;\n}\n\n/**\n * Concatenate a number of ArrayBuffers into one.\n *\n * @param buffers A number of array buffers to concatenate.\n * @returns Result of concatenating `buffers` in order.\n */\nexport function concatenateArrayBuffers(buffers: ArrayBuffer[]): ArrayBuffer {\n  let totalByteLength = 0;\n  buffers.forEach((buffer: ArrayBuffer) => {\n    totalByteLength += buffer.byteLength;\n  });\n\n  const temp = new Uint8Array(totalByteLength);\n  let offset = 0;\n  buffers.forEach((buffer: ArrayBuffer) => {\n    temp.set(new Uint8Array(buffer), offset);\n    offset += buffer.byteLength;\n  });\n  return temp.buffer;\n}\n\n/**\n * Get the basename of a path.\n *\n * Behaves in a way analogous to Linux's basename command.\n *\n * @param path\n */\nexport function basename(path: string): string {\n  const SEPARATOR = '/';\n  path = path.trim();\n  while (path.endsWith(SEPARATOR)) {\n    path = path.slice(0, path.length - 1);\n  }\n  const items = path.split(SEPARATOR);\n  return items[items.length - 1];\n}\n\n/**\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\n * @param modelArtifacts\n * @returns A ModelArtifactsInfo object.\n */\nexport function getModelArtifactsInfoForJSON(modelArtifacts: ModelArtifacts):\n    ModelArtifactsInfo {\n  if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n    throw new Error('Expected JSON model topology, received ArrayBuffer.');\n  }\n\n  return {\n    dateSaved: new Date(),\n    modelTopologyType: 'JSON',\n    modelTopologyBytes: modelArtifacts.modelTopology == null ?\n        0 :\n        stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),\n    weightSpecsBytes: modelArtifacts.weightSpecs == null ?\n        0 :\n        stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),\n    weightDataBytes: modelArtifacts.weightData == null ?\n        0 :\n        modelArtifacts.weightData.byteLength,\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IOHandler} from './types';\n\nexport type IORouter = (url: string|string[], onProgress?: Function) =>\n    IOHandler;\n\nexport class IORouterRegistry {\n  // Singleton instance.\n  private static instance: IORouterRegistry;\n\n  private saveRouters: IORouter[];\n  private loadRouters: IORouter[];\n\n  private constructor() {\n    this.saveRouters = [];\n    this.loadRouters = [];\n  }\n\n  private static getInstance(): IORouterRegistry {\n    if (IORouterRegistry.instance == null) {\n      IORouterRegistry.instance = new IORouterRegistry();\n    }\n    return IORouterRegistry.instance;\n  }\n\n  /**\n   * Register a save-handler router.\n   *\n   * @param saveRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `save` method defined or `null`.\n   */\n  static registerSaveRouter(saveRouter: IORouter) {\n    IORouterRegistry.getInstance().saveRouters.push(saveRouter);\n  }\n\n  /**\n   * Register a load-handler router.\n   *\n   * @param loadRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `load` method defined or `null`.\n   */\n  static registerLoadRouter(loadRouter: IORouter) {\n    IORouterRegistry.getInstance().loadRouters.push(loadRouter);\n  }\n\n  /**\n   * Look up IOHandler for saving, given a URL-like string.\n   *\n   * @param url\n   * @returns If only one match is found, an instance of IOHandler with the\n   * `save` method defined. If no match is found, `null`.\n   * @throws Error, if more than one match is found.\n   */\n  static getSaveHandlers(url: string|string[]): IOHandler[] {\n    return IORouterRegistry.getHandlers(url, 'save');\n  }\n\n  /**\n   * Look up IOHandler for loading, given a URL-like string.\n   *\n   * @param url\n   * @param onProgress Optional, progress callback function, fired periodically\n   *   before the load is completed.\n   * @returns All valid handlers for `url`, given the currently registered\n   *   handler routers.\n   */\n  static getLoadHandlers(url: string|string[], onProgress?: Function):\n      IOHandler[] {\n    return IORouterRegistry.getHandlers(url, 'load', onProgress);\n  }\n\n  private static getHandlers(\n      url: string|string[], handlerType: 'save'|'load',\n      onProgress?: Function): IOHandler[] {\n    const validHandlers: IOHandler[] = [];\n    const routers = handlerType === 'load' ?\n        IORouterRegistry.getInstance().loadRouters :\n        IORouterRegistry.getInstance().saveRouters;\n    routers.forEach(router => {\n      const handler = router(url, onProgress);\n      if (handler !== null) {\n        validHandlers.push(handler);\n      }\n    });\n    return validHandlers;\n  }\n}\n\nexport const registerSaveRouter = (loudRouter: IORouter) =>\n    IORouterRegistry.registerSaveRouter(loudRouter);\nexport const registerLoadRouter = (loudRouter: IORouter) =>\n    IORouterRegistry.registerLoadRouter(loudRouter);\nexport const getSaveHandlers = (url: string|string[]) =>\n    IORouterRegistry.getSaveHandlers(url);\nexport const getLoadHandlers = (url: string|string[], onProgress?: Function) =>\n    IORouterRegistry.getLoadHandlers(url, onProgress);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Classes and functions for model management across multiple storage mediums.\n *\n * Supported client actions:\n * - Listing models on all registered storage mediums.\n * - Remove model by URL from any registered storage mediums, by using URL\n *   string.\n * - Moving or copying model from one path to another in the same medium or from\n *   one medium to another, by using URL strings.\n */\n\nimport {assert} from '../util';\n\nimport {IORouterRegistry} from './router_registry';\nimport {ModelArtifactsInfo, ModelStoreManager} from './types';\n\nconst URL_SCHEME_SUFFIX = '://';\n\nexport class ModelStoreManagerRegistry {\n  // Singleton instance.\n  private static instance: ModelStoreManagerRegistry;\n\n  private managers: {[scheme: string]: ModelStoreManager};\n\n  private constructor() {\n    this.managers = {};\n  }\n\n  private static getInstance(): ModelStoreManagerRegistry {\n    if (ModelStoreManagerRegistry.instance == null) {\n      ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();\n    }\n    return ModelStoreManagerRegistry.instance;\n  }\n\n  /**\n   * Register a save-handler router.\n   *\n   * @param saveRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `save` method defined or `null`.\n   */\n  static registerManager(scheme: string, manager: ModelStoreManager) {\n    assert(scheme != null, () => 'scheme must not be undefined or null.');\n    if (scheme.endsWith(URL_SCHEME_SUFFIX)) {\n      scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));\n    }\n    assert(scheme.length > 0, () => 'scheme must not be an empty string.');\n    const registry = ModelStoreManagerRegistry.getInstance();\n    assert(\n        registry.managers[scheme] == null,\n        () => `A model store manager is already registered for scheme '${\n            scheme}'.`);\n    registry.managers[scheme] = manager;\n  }\n\n  static getManager(scheme: string): ModelStoreManager {\n    const manager = this.getInstance().managers[scheme];\n    if (manager == null) {\n      throw new Error(`Cannot find model manager for scheme '${scheme}'`);\n    }\n    return manager;\n  }\n\n  static getSchemes(): string[] {\n    return Object.keys(this.getInstance().managers);\n  }\n}\n\n/**\n * Helper method for parsing a URL string into a scheme and a path.\n *\n * @param url E.g., 'localstorage://my-model'\n * @returns A dictionary with two fields: scheme and path.\n *   Scheme: e.g., 'localstorage' in the example above.\n *   Path: e.g., 'my-model' in the example above.\n */\nfunction parseURL(url: string): {scheme: string, path: string} {\n  if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {\n    throw new Error(\n        `The url string provided does not contain a scheme. ` +\n        `Supported schemes are: ` +\n        `${ModelStoreManagerRegistry.getSchemes().join(',')}`);\n  }\n  return {\n    scheme: url.split(URL_SCHEME_SUFFIX)[0],\n    path: url.split(URL_SCHEME_SUFFIX)[1],\n  };\n}\n\nasync function cloneModelInternal(\n    sourceURL: string, destURL: string,\n    deleteSource = false): Promise<ModelArtifactsInfo> {\n  assert(\n      sourceURL !== destURL,\n      () => `Old path and new path are the same: '${sourceURL}'`);\n\n  const loadHandlers = IORouterRegistry.getLoadHandlers(sourceURL);\n  assert(\n      loadHandlers.length > 0,\n      () => `Copying failed because no load handler is found for source URL ${\n          sourceURL}.`);\n  assert(\n      loadHandlers.length < 2,\n      () => `Copying failed because more than one (${loadHandlers.length}) ` +\n          `load handlers for source URL ${sourceURL}.`);\n  const loadHandler = loadHandlers[0];\n\n  const saveHandlers = IORouterRegistry.getSaveHandlers(destURL);\n  assert(\n      saveHandlers.length > 0,\n      () => `Copying failed because no save handler is found for destination ` +\n          `URL ${destURL}.`);\n  assert(\n      saveHandlers.length < 2,\n      () => `Copying failed because more than one (${loadHandlers.length}) ` +\n          `save handlers for destination URL ${destURL}.`);\n  const saveHandler = saveHandlers[0];\n\n  const sourceScheme = parseURL(sourceURL).scheme;\n  const sourcePath = parseURL(sourceURL).path;\n  const sameMedium = sourceScheme === parseURL(sourceURL).scheme;\n\n  const modelArtifacts = await loadHandler.load();\n\n  // If moving within the same storage medium, remove the old model as soon as\n  // the loading is done. Without doing this, it is possible that the combined\n  // size of the two models will cause the cloning to fail.\n  if (deleteSource && sameMedium) {\n    await ModelStoreManagerRegistry.getManager(sourceScheme)\n        .removeModel(sourcePath);\n  }\n\n  const saveResult = await saveHandler.save(modelArtifacts);\n\n  // If moving between mediums, the deletion is done after the save succeeds.\n  // This guards against the case in which saving to the destination medium\n  // fails.\n  if (deleteSource && !sameMedium) {\n    await ModelStoreManagerRegistry.getManager(sourceScheme)\n        .removeModel(sourcePath);\n  }\n\n  return saveResult.modelArtifactsInfo;\n}\n\n/**\n * List all models stored in registered storage mediums.\n *\n * For a web browser environment, the registered mediums are Local Storage and\n * IndexedDB.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @returns A `Promise` of a dictionary mapping URLs of existing models to\n * their model artifacts info. URLs include medium-specific schemes, e.g.,\n *   'indexeddb://my/model/1'. Model artifacts info include type of the\n * model's topology, byte sizes of the topology, weights, etc.\n */\n/**\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function listModels(): Promise<{[url: string]: ModelArtifactsInfo}> {\n  const schemes = ModelStoreManagerRegistry.getSchemes();\n  const out: {[url: string]: ModelArtifactsInfo} = {};\n  for (const scheme of schemes) {\n    const schemeOut =\n        await ModelStoreManagerRegistry.getManager(scheme).listModels();\n    for (const path in schemeOut) {\n      const url = scheme + URL_SCHEME_SUFFIX + path;\n      out[url] = schemeOut[path];\n    }\n  }\n  return out;\n}\n\n/**\n * Remove a model specified by URL from a reigstered storage medium.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @param url A URL to a stored model, with a scheme prefix, e.g.,\n *   'localstorage://my-model-1', 'indexeddb://my/model/2'.\n * @returns ModelArtifactsInfo of the deleted model (if and only if deletion\n *   is successful).\n * @throws Error if deletion fails, e.g., if no model exists at `path`.\n */\n/**\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function removeModel(url: string): Promise<ModelArtifactsInfo> {\n  const schemeAndPath = parseURL(url);\n  const manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);\n  return manager.removeModel(schemeAndPath.path);\n}\n\n/**\n * Copy a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Copying within a storage medium, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Copying between two storage mediums, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Copy the model, from Local Storage to IndexedDB.\n * await tf.io.copyModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove both models.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of copying.\n * @param destURL Destination URL of copying.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n */\n/**\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function copyModel(\n    sourceURL: string, destURL: string): Promise<ModelArtifactsInfo> {\n  const deleteSource = false;\n  return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\n\n/**\n * Move a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Moving within a storage medium, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Moving between two storage mediums, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Move the model, from Local Storage to IndexedDB.\n * await tf.io.moveModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove the moved model.\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of moving.\n * @param destURL Destination URL of moving.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n */\n/**\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function moveModel(\n    sourceURL: string, destURL: string): Promise<ModelArtifactsInfo> {\n  const deleteSource = true;\n  return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\n\nexport {moveModel, copyModel, removeModel, listModels};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '../environment';\n\nimport {getModelArtifactsInfoForJSON} from './io_utils';\nimport {ModelStoreManagerRegistry} from './model_management';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelArtifactsInfo, ModelStoreManager, SaveResult} from './types';\n\nconst DATABASE_NAME = 'tensorflowjs';\nconst DATABASE_VERSION = 1;\n\n// Model data and ModelArtifactsInfo (metadata) are stored in two separate\n// stores for efficient access of the list of stored models and their metadata.\n// 1. The object store for model data: topology, weights and weight manifests.\nconst MODEL_STORE_NAME = 'models_store';\n// 2. The object store for ModelArtifactsInfo, including meta-information such\n//    as the type of topology (JSON vs binary), byte size of the topology, byte\n//    size of the weights, etc.\nconst INFO_STORE_NAME = 'model_info_store';\n\n/**\n * Delete the entire database for tensorflow.js, including the models store.\n */\nexport async function deleteDatabase(): Promise<void> {\n  const idbFactory = getIndexedDBFactory();\n\n  return new Promise<void>((resolve, reject) => {\n    const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);\n    deleteRequest.onsuccess = () => resolve();\n    deleteRequest.onerror = error => reject(error);\n  });\n}\n\nfunction getIndexedDBFactory(): IDBFactory {\n  if (!env().getBool('IS_BROWSER')) {\n    // TODO(cais): Add more info about what IOHandler subtypes are available.\n    //   Maybe point to a doc page on the web and/or automatically determine\n    //   the available IOHandlers and print them in the error message.\n    throw new Error(\n        'Failed to obtain IndexedDB factory because the current environment' +\n        'is not a web browser.');\n  }\n  // tslint:disable-next-line:no-any\n  const theWindow: any = window;\n  const factory = theWindow.indexedDB || theWindow.mozIndexedDB ||\n      theWindow.webkitIndexedDB || theWindow.msIndexedDB ||\n      theWindow.shimIndexedDB;\n  if (factory == null) {\n    throw new Error(\n        'The current browser does not appear to support IndexedDB.');\n  }\n  return factory;\n}\n\nfunction setUpDatabase(openRequest: IDBRequest) {\n  const db = openRequest.result as IDBDatabase;\n  db.createObjectStore(MODEL_STORE_NAME, {keyPath: 'modelPath'});\n  db.createObjectStore(INFO_STORE_NAME, {keyPath: 'modelPath'});\n}\n\n/**\n * IOHandler subclass: Browser IndexedDB.\n *\n * See the doc string of `browserIndexedDB` for more details.\n */\nexport class BrowserIndexedDB implements IOHandler {\n  protected readonly indexedDB: IDBFactory;\n  protected readonly modelPath: string;\n\n  static readonly URL_SCHEME = 'indexeddb://';\n\n  constructor(modelPath: string) {\n    this.indexedDB = getIndexedDBFactory();\n\n    if (modelPath == null || !modelPath) {\n      throw new Error(\n          'For IndexedDB, modelPath must not be null, undefined or empty.');\n    }\n    this.modelPath = modelPath;\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    // TODO(cais): Support saving GraphDef models.\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserLocalStorage.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    }\n\n    return this.databaseAction(this.modelPath, modelArtifacts) as\n        Promise<SaveResult>;\n  }\n\n  async load(): Promise<ModelArtifacts> {\n    return this.databaseAction(this.modelPath) as Promise<ModelArtifacts>;\n  }\n\n  /**\n   * Perform database action to put model artifacts into or read model artifacts\n   * from IndexedDB object store.\n   *\n   * Whether the action is put or get depends on whether `modelArtifacts` is\n   * specified. If it is specified, the action will be put; otherwise the action\n   * will be get.\n   *\n   * @param modelPath A unique string path for the model.\n   * @param modelArtifacts If specified, it will be the model artifacts to be\n   *   stored in IndexedDB.\n   * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`\n   *   of `ModelArtifacts`, if the action is get.\n   */\n  private databaseAction(modelPath: string, modelArtifacts?: ModelArtifacts):\n      Promise<ModelArtifacts|SaveResult> {\n    return new Promise<ModelArtifacts|SaveResult>((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n\n        if (modelArtifacts == null) {\n          // Read model out from object store.\n          const modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');\n          const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n          const getRequest = modelStore.get(this.modelPath);\n          getRequest.onsuccess = () => {\n            if (getRequest.result == null) {\n              db.close();\n              return reject(new Error(\n                  `Cannot find model with path '${this.modelPath}' ` +\n                  `in IndexedDB.`));\n            } else {\n              resolve(getRequest.result.modelArtifacts);\n            }\n          };\n          getRequest.onerror = error => {\n            db.close();\n            return reject(getRequest.error);\n          };\n          modelTx.oncomplete = () => db.close();\n        } else {\n          // Put model into object store.\n          const modelArtifactsInfo: ModelArtifactsInfo =\n              getModelArtifactsInfoForJSON(modelArtifacts);\n          // First, put ModelArtifactsInfo into info store.\n          const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n          let infoStore = infoTx.objectStore(INFO_STORE_NAME);\n          const putInfoRequest =\n              infoStore.put({modelPath: this.modelPath, modelArtifactsInfo});\n          let modelTx: IDBTransaction;\n          putInfoRequest.onsuccess = () => {\n            // Second, put model data into model store.\n            modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n            const putModelRequest = modelStore.put({\n              modelPath: this.modelPath,\n              modelArtifacts,\n              modelArtifactsInfo\n            });\n            putModelRequest.onsuccess = () => resolve({modelArtifactsInfo});\n            putModelRequest.onerror = error => {\n              // If the put-model request fails, roll back the info entry as\n              // well.\n              infoStore = infoTx.objectStore(INFO_STORE_NAME);\n              const deleteInfoRequest = infoStore.delete(this.modelPath);\n              deleteInfoRequest.onsuccess = () => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n              deleteInfoRequest.onerror = error => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n            };\n          };\n          putInfoRequest.onerror = error => {\n            db.close();\n            return reject(putInfoRequest.error);\n          };\n          infoTx.oncomplete = () => {\n            if (modelTx == null) {\n              db.close();\n            } else {\n              modelTx.oncomplete = () => db.close();\n            }\n          };\n        }\n      };\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n}\n\nexport const indexedDBRouter: IORouter = (url: string|string[]) => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\n      return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(indexedDBRouter);\nIORouterRegistry.registerLoadRouter(indexedDBRouter);\n\n/**\n * Creates a browser IndexedDB IOHandler for saving and loading models.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save('indexeddb://MyModel'));\n * console.log(saveResult);\n * ```\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),\n *   which can be used with, e.g., `tf.Model.save`.\n */\nexport function browserIndexedDB(modelPath: string): IOHandler {\n  return new BrowserIndexedDB(modelPath);\n}\n\nfunction maybeStripScheme(key: string) {\n  return key.startsWith(BrowserIndexedDB.URL_SCHEME) ?\n      key.slice(BrowserIndexedDB.URL_SCHEME.length) :\n      key;\n}\n\nexport class BrowserIndexedDBManager implements ModelStoreManager {\n  private indexedDB: IDBFactory;\n\n  constructor() {\n    this.indexedDB = getIndexedDBFactory();\n  }\n\n  async listModels(): Promise<{[path: string]: ModelArtifactsInfo}> {\n    return new Promise<{[path: string]: ModelArtifactsInfo}>(\n        (resolve, reject) => {\n          const openRequest =\n              this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n          openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n          openRequest.onsuccess = () => {\n            const db = openRequest.result;\n            const tx = db.transaction(INFO_STORE_NAME, 'readonly');\n            const store = tx.objectStore(INFO_STORE_NAME);\n            // tslint:disable:max-line-length\n            // Need to cast `store` as `any` here because TypeScript's DOM\n            // library does not have the `getAll()` method even though the\n            // method is supported in the latest version of most mainstream\n            // browsers:\n            // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll\n            // tslint:enable:max-line-length\n            // tslint:disable-next-line:no-any\n            const getAllInfoRequest = (store as any).getAll() as IDBRequest;\n            getAllInfoRequest.onsuccess = () => {\n              const out: {[path: string]: ModelArtifactsInfo} = {};\n              for (const item of getAllInfoRequest.result) {\n                out[item.modelPath] = item.modelArtifactsInfo;\n              }\n              resolve(out);\n            };\n            getAllInfoRequest.onerror = error => {\n              db.close();\n              return reject(getAllInfoRequest.error);\n            };\n            tx.oncomplete = () => db.close();\n          };\n          openRequest.onerror = error => reject(openRequest.error);\n        });\n  }\n\n  async removeModel(path: string): Promise<ModelArtifactsInfo> {\n    path = maybeStripScheme(path);\n    return new Promise<ModelArtifactsInfo>((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n        const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n        const infoStore = infoTx.objectStore(INFO_STORE_NAME);\n\n        const getInfoRequest = infoStore.get(path);\n        let modelTx: IDBTransaction;\n        getInfoRequest.onsuccess = () => {\n          if (getInfoRequest.result == null) {\n            db.close();\n            return reject(new Error(\n                `Cannot find model with path '${path}' ` +\n                `in IndexedDB.`));\n          } else {\n            // First, delete the entry in the info store.\n            const deleteInfoRequest = infoStore.delete(path);\n            const deleteModelData = () => {\n              // Second, delete the entry in the model store.\n              modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n              const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n              const deleteModelRequest = modelStore.delete(path);\n              deleteModelRequest.onsuccess = () =>\n                  resolve(getInfoRequest.result.modelArtifactsInfo);\n              deleteModelRequest.onerror = error =>\n                  reject(getInfoRequest.error);\n            };\n            // Proceed with deleting model data regardless of whether deletion\n            // of info data succeeds or not.\n            deleteInfoRequest.onsuccess = deleteModelData;\n            deleteInfoRequest.onerror = error => {\n              deleteModelData();\n              db.close();\n              return reject(getInfoRequest.error);\n            };\n          }\n        };\n        getInfoRequest.onerror = error => {\n          db.close();\n          return reject(getInfoRequest.error);\n        };\n\n        infoTx.oncomplete = () => {\n          if (modelTx == null) {\n            db.close();\n          } else {\n            modelTx.oncomplete = () => db.close();\n          }\n        };\n      };\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n}\n\nif (env().getBool('IS_BROWSER')) {\n  // Wrap the construction and registration, to guard against browsers that\n  // don't support Local Storage.\n  try {\n    ModelStoreManagerRegistry.registerManager(\n        BrowserIndexedDB.URL_SCHEME, new BrowserIndexedDBManager());\n  } catch (err) {\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '../environment';\n\nimport {assert} from '../util';\nimport {arrayBufferToBase64String, base64StringToArrayBuffer, getModelArtifactsInfoForJSON} from './io_utils';\nimport {ModelStoreManagerRegistry} from './model_management';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelArtifactsInfo, ModelStoreManager, SaveResult} from './types';\n\nconst PATH_SEPARATOR = '/';\nconst PATH_PREFIX = 'tensorflowjs_models';\nconst INFO_SUFFIX = 'info';\nconst MODEL_TOPOLOGY_SUFFIX = 'model_topology';\nconst WEIGHT_SPECS_SUFFIX = 'weight_specs';\nconst WEIGHT_DATA_SUFFIX = 'weight_data';\nconst MODEL_METADATA_SUFFIX = 'model_metadata';\n\n/**\n * Purge all tensorflow.js-saved model artifacts from local storage.\n *\n * @returns Paths of the models purged.\n */\nexport function purgeLocalStorageArtifacts(): string[] {\n  if (!env().getBool('IS_BROWSER') ||\n      typeof window.localStorage === 'undefined') {\n    throw new Error(\n        'purgeLocalStorageModels() cannot proceed because local storage is ' +\n        'unavailable in the current environment.');\n  }\n  const LS = window.localStorage;\n  const purgedModelPaths: string[] = [];\n  for (let i = 0; i < LS.length; ++i) {\n    const key = LS.key(i);\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n    if (key.startsWith(prefix) && key.length > prefix.length) {\n      LS.removeItem(key);\n      const modelName = getModelPathFromKey(key);\n      if (purgedModelPaths.indexOf(modelName) === -1) {\n        purgedModelPaths.push(modelName);\n      }\n    }\n  }\n  return purgedModelPaths;\n}\n\nfunction getModelKeys(path: string): {\n  info: string,\n  topology: string,\n  weightSpecs: string,\n  weightData: string,\n  modelMetadata: string\n} {\n  return {\n    info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),\n    topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),\n    weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),\n    weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),\n    modelMetadata:\n        [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)\n  };\n}\n\n/**\n * Get model path from a local-storage key.\n *\n * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'\n *\n * @param key\n */\nfunction getModelPathFromKey(key: string) {\n  const items = key.split(PATH_SEPARATOR);\n  if (items.length < 3) {\n    throw new Error(`Invalid key format: ${key}`);\n  }\n  return items.slice(1, items.length - 1).join(PATH_SEPARATOR);\n}\n\nfunction maybeStripScheme(key: string) {\n  return key.startsWith(BrowserLocalStorage.URL_SCHEME) ?\n      key.slice(BrowserLocalStorage.URL_SCHEME.length) :\n      key;\n}\n\ndeclare type LocalStorageKeys = {\n  info: string,\n  topology: string,\n  weightSpecs: string,\n  weightData: string,\n  modelMetadata: string\n};\n\n/**\n * IOHandler subclass: Browser Local Storage.\n *\n * See the doc string to `browserLocalStorage` for more details.\n */\nexport class BrowserLocalStorage implements IOHandler {\n  protected readonly LS: Storage;\n  protected readonly modelPath: string;\n  protected readonly keys: LocalStorageKeys;\n\n  static readonly URL_SCHEME = 'localstorage://';\n\n  constructor(modelPath: string) {\n    if (!env().getBool('IS_BROWSER') ||\n        typeof window.localStorage === 'undefined') {\n      // TODO(cais): Add more info about what IOHandler subtypes are\n      // available.\n      //   Maybe point to a doc page on the web and/or automatically determine\n      //   the available IOHandlers and print them in the error message.\n      throw new Error(\n          'The current environment does not support local storage.');\n    }\n    this.LS = window.localStorage;\n\n    if (modelPath == null || !modelPath) {\n      throw new Error(\n          'For local storage, modelPath must not be null, undefined or empty.');\n    }\n    this.modelPath = modelPath;\n    this.keys = getModelKeys(this.modelPath);\n  }\n\n  /**\n   * Save model artifacts to browser local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @param modelArtifacts The model artifacts to be stored.\n   * @returns An instance of SaveResult.\n   */\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserLocalStorage.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    } else {\n      const topology = JSON.stringify(modelArtifacts.modelTopology);\n      const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);\n\n      const modelArtifactsInfo: ModelArtifactsInfo =\n          getModelArtifactsInfoForJSON(modelArtifacts);\n\n      try {\n        this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));\n        this.LS.setItem(this.keys.topology, topology);\n        this.LS.setItem(this.keys.weightSpecs, weightSpecs);\n        this.LS.setItem(\n            this.keys.weightData,\n            arrayBufferToBase64String(modelArtifacts.weightData));\n        this.LS.setItem(this.keys.modelMetadata, JSON.stringify({\n          format: modelArtifacts.format,\n          generatedBy: modelArtifacts.generatedBy,\n          convertedBy: modelArtifacts.convertedBy,\n          userDefinedMetadata: modelArtifacts.userDefinedMetadata\n        }));\n\n        return {modelArtifactsInfo};\n      } catch (err) {\n        // If saving failed, clean up all items saved so far.\n        this.LS.removeItem(this.keys.info);\n        this.LS.removeItem(this.keys.topology);\n        this.LS.removeItem(this.keys.weightSpecs);\n        this.LS.removeItem(this.keys.weightData);\n        this.LS.removeItem(this.keys.modelMetadata);\n\n        throw new Error(\n            `Failed to save model '${this.modelPath}' to local storage: ` +\n            `size quota being exceeded is a possible cause of this failure: ` +\n            `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` +\n            `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` +\n            `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);\n      }\n    }\n  }\n\n  /**\n   * Load a model from local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model (if loading succeeds).\n   */\n  async load(): Promise<ModelArtifacts> {\n    const info =\n        JSON.parse(this.LS.getItem(this.keys.info)) as ModelArtifactsInfo;\n    if (info == null) {\n      throw new Error(\n          `In local storage, there is no model with name '${this.modelPath}'`);\n    }\n\n    if (info.modelTopologyType !== 'JSON') {\n      throw new Error(\n          'BrowserLocalStorage does not support loading non-JSON model ' +\n          'topology yet.');\n    }\n\n    const out: ModelArtifacts = {};\n\n    // Load topology.\n    const topology = JSON.parse(this.LS.getItem(this.keys.topology));\n    if (topology == null) {\n      throw new Error(\n          `In local storage, the topology of model '${this.modelPath}' ` +\n          `is missing.`);\n    }\n    out.modelTopology = topology;\n\n    // Load weight specs.\n    const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));\n    if (weightSpecs == null) {\n      throw new Error(\n          `In local storage, the weight specs of model '${this.modelPath}' ` +\n          `are missing.`);\n    }\n    out.weightSpecs = weightSpecs;\n\n    // Load meta-data fields.\n    const metadataString = this.LS.getItem(this.keys.modelMetadata);\n    if (metadataString != null) {\n      const metadata = JSON.parse(metadataString) as ModelArtifacts;\n      out.format = metadata['format'];\n      out.generatedBy = metadata['generatedBy'];\n      out.convertedBy = metadata['convertedBy'];\n      out.userDefinedMetadata = metadata['userDefinedMetadata'];\n    }\n\n    // Load weight data.\n    const weightDataBase64 = this.LS.getItem(this.keys.weightData);\n    if (weightDataBase64 == null) {\n      throw new Error(\n          `In local storage, the binary weight values of model ` +\n          `'${this.modelPath}' are missing.`);\n    }\n    out.weightData = base64StringToArrayBuffer(weightDataBase64);\n\n    return out;\n  }\n}\n\nexport const localStorageRouter: IORouter = (url: string|string[]) => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {\n      return browserLocalStorage(\n          url.slice(BrowserLocalStorage.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(localStorageRouter);\nIORouterRegistry.registerLoadRouter(localStorageRouter);\n\n/**\n * Factory function for local storage IOHandler.\n *\n * This `IOHandler` supports both `save` and `load`.\n *\n * For each model's saved artifacts, four items are saved to local storage.\n *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the\n *     model, such as date saved, type of the topology, size in bytes, etc.\n *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-\n *     style models, this is a stringized JSON.\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the\n *     model, can be used to decode the saved binary weight values (see\n *     item below).\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary\n *     weight values, stored as a base64-encoded string.\n *\n * Saving may throw an `Error` if the total size of the artifacts exceed the\n * browser-specific quota.\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `IOHandler`, which can be used with, e.g.,\n *   `tf.Model.save`.\n */\nexport function browserLocalStorage(modelPath: string): IOHandler {\n  return new BrowserLocalStorage(modelPath);\n}\n\nexport class BrowserLocalStorageManager implements ModelStoreManager {\n  private readonly LS: Storage;\n\n  constructor() {\n    assert(\n        env().getBool('IS_BROWSER'),\n        () => 'Current environment is not a web browser');\n    assert(\n        typeof window.localStorage !== 'undefined',\n        () => 'Current browser does not appear to support localStorage');\n    this.LS = window.localStorage;\n  }\n\n  async listModels(): Promise<{[path: string]: ModelArtifactsInfo}> {\n    const out: {[path: string]: ModelArtifactsInfo} = {};\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n    const suffix = PATH_SEPARATOR + INFO_SUFFIX;\n    for (let i = 0; i < this.LS.length; ++i) {\n      const key = this.LS.key(i);\n      if (key.startsWith(prefix) && key.endsWith(suffix)) {\n        const modelPath = getModelPathFromKey(key);\n        out[modelPath] = JSON.parse(this.LS.getItem(key)) as ModelArtifactsInfo;\n      }\n    }\n    return out;\n  }\n\n  async removeModel(path: string): Promise<ModelArtifactsInfo> {\n    path = maybeStripScheme(path);\n    const keys = getModelKeys(path);\n    if (this.LS.getItem(keys.info) == null) {\n      throw new Error(`Cannot find model at path '${path}'`);\n    }\n    const info = JSON.parse(this.LS.getItem(keys.info)) as ModelArtifactsInfo;\n\n    this.LS.removeItem(keys.info);\n    this.LS.removeItem(keys.topology);\n    this.LS.removeItem(keys.weightSpecs);\n    this.LS.removeItem(keys.weightData);\n    return info;\n  }\n}\n\nif (env().getBool('IS_BROWSER')) {\n  // Wrap the construction and registration, to guard against browsers that\n  // don't support Local Storage.\n  try {\n    ModelStoreManagerRegistry.registerManager(\n        BrowserLocalStorage.URL_SCHEME, new BrowserLocalStorageManager());\n  } catch (err) {\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\n\nimport {env} from '../environment';\n\nimport {basename, concatenateArrayBuffers, getModelArtifactsInfoForJSON} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelJSON, SaveResult, WeightsManifestConfig, WeightsManifestEntry} from './types';\n\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\n\nfunction defer<T>(f: () => T): Promise<T> {\n  return new Promise(resolve => setTimeout(resolve)).then(f);\n}\n\nexport class BrowserDownloads implements IOHandler {\n  private readonly modelTopologyFileName: string;\n  private readonly weightDataFileName: string;\n  private readonly jsonAnchor: HTMLAnchorElement;\n  private readonly weightDataAnchor: HTMLAnchorElement;\n\n  static readonly URL_SCHEME = 'downloads://';\n\n  constructor(fileNamePrefix?: string) {\n    if (!env().getBool('IS_BROWSER')) {\n      // TODO(cais): Provide info on what IOHandlers are available under the\n      //   current environment.\n      throw new Error(\n          'browserDownloads() cannot proceed because the current environment ' +\n          'is not a browser.');\n    }\n\n    if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n      fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n    }\n    if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n      fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n    }\n\n    this.modelTopologyFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n    this.weightDataFileName =\n        fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (typeof (document) === 'undefined') {\n      throw new Error(\n          'Browser downloads are not supported in ' +\n          'this environment since `document` is not present');\n    }\n    const weightsURL = window.URL.createObjectURL(new Blob(\n        [modelArtifacts.weightData], {type: 'application/octet-stream'}));\n\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserDownloads.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    } else {\n      const weightsManifest: WeightsManifestConfig = [{\n        paths: ['./' + this.weightDataFileName],\n        weights: modelArtifacts.weightSpecs\n      }];\n      const modelTopologyAndWeightManifest: ModelJSON = {\n        modelTopology: modelArtifacts.modelTopology,\n        format: modelArtifacts.format,\n        generatedBy: modelArtifacts.generatedBy,\n        convertedBy: modelArtifacts.convertedBy,\n        weightsManifest\n      };\n      const modelTopologyAndWeightManifestURL =\n          window.URL.createObjectURL(new Blob(\n              [JSON.stringify(modelTopologyAndWeightManifest)],\n              {type: 'application/json'}));\n\n      // If anchor elements are not provided, create them without attaching them\n      // to parents, so that the downloaded file names can be controlled.\n      const jsonAnchor = this.jsonAnchor == null ? document.createElement('a') :\n                                                   this.jsonAnchor;\n      jsonAnchor.download = this.modelTopologyFileName;\n      jsonAnchor.href = modelTopologyAndWeightManifestURL;\n      // Trigger downloads by evoking a click event on the download anchors.\n      // When multiple downloads are started synchronously, Firefox will only\n      // save the last one.\n      await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n\n      if (modelArtifacts.weightData != null) {\n        const weightDataAnchor = this.weightDataAnchor == null ?\n            document.createElement('a') :\n            this.weightDataAnchor;\n        weightDataAnchor.download = this.weightDataFileName;\n        weightDataAnchor.href = weightsURL;\n        await defer(\n            () => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n      }\n\n      return {modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts)};\n    }\n  }\n}\n\nclass BrowserFiles implements IOHandler {\n  private readonly files: File[];\n\n  constructor(files: File[]) {\n    if (files == null || files.length < 1) {\n      throw new Error(\n          `When calling browserFiles, at least 1 file is required, ` +\n          `but received ${files}`);\n    }\n    this.files = files;\n  }\n\n  async load(): Promise<ModelArtifacts> {\n    const jsonFile = this.files[0];\n    const weightFiles = this.files.slice(1);\n\n    return new Promise<ModelArtifacts>((resolve, reject) => {\n      const jsonReader = new FileReader();\n      jsonReader.onload = (event: Event) => {\n        // tslint:disable-next-line:no-any\n        const modelJSON = JSON.parse((event.target as any).result) as ModelJSON;\n        const modelTopology = modelJSON.modelTopology;\n        if (modelTopology == null) {\n          reject(new Error(\n              `modelTopology field is missing from file ${jsonFile.name}`));\n          return;\n        }\n\n        if (weightFiles.length === 0) {\n          resolve({modelTopology});\n        }\n\n        const weightsManifest = modelJSON.weightsManifest;\n        if (weightsManifest == null) {\n          reject(new Error(\n              `weightManifest field is missing from file ${jsonFile.name}`));\n          return;\n        }\n\n        let pathToFile: {[path: string]: File};\n        try {\n          pathToFile =\n              this.checkManifestAndWeightFiles(weightsManifest, weightFiles);\n        } catch (err) {\n          reject(err);\n          return;\n        }\n\n        const weightSpecs: WeightsManifestEntry[] = [];\n        const paths: string[] = [];\n        const perFileBuffers: ArrayBuffer[] = [];\n        weightsManifest.forEach(weightsGroup => {\n          weightsGroup.paths.forEach(path => {\n            paths.push(path);\n            perFileBuffers.push(null);\n          });\n          weightSpecs.push(...weightsGroup.weights);\n        });\n\n        weightsManifest.forEach(weightsGroup => {\n          weightsGroup.paths.forEach(path => {\n            const weightFileReader = new FileReader();\n            weightFileReader.onload = (event: Event) => {\n              // tslint:disable-next-line:no-any\n              const weightData = (event.target as any).result as ArrayBuffer;\n              const index = paths.indexOf(path);\n              perFileBuffers[index] = weightData;\n              if (perFileBuffers.indexOf(null) === -1) {\n                resolve({\n                  modelTopology,\n                  weightSpecs,\n                  weightData: concatenateArrayBuffers(perFileBuffers),\n                  format: modelJSON.format,\n                  generatedBy: modelJSON.generatedBy,\n                  convertedBy: modelJSON.convertedBy,\n                  userDefinedMetadata: modelJSON.userDefinedMetadata\n                });\n              }\n            };\n            weightFileReader.onerror = error =>\n                reject(`Failed to weights data from file of path '${path}'.`);\n            weightFileReader.readAsArrayBuffer(pathToFile[path]);\n          });\n        });\n      };\n      jsonReader.onerror = error => reject(\n          `Failed to read model topology and weights manifest JSON ` +\n          `from file '${jsonFile.name}'. BrowserFiles supports loading ` +\n          `Keras-style tf.Model artifacts only.`);\n      jsonReader.readAsText(jsonFile);\n    });\n  }\n\n  /**\n   * Check the compatibility between weights manifest and weight files.\n   */\n  private checkManifestAndWeightFiles(\n      manifest: WeightsManifestConfig, files: File[]): {[path: string]: File} {\n    const basenames: string[] = [];\n    const fileNames = files.map(file => basename(file.name));\n    const pathToFile: {[path: string]: File} = {};\n    for (const group of manifest) {\n      group.paths.forEach(path => {\n        const pathBasename = basename(path);\n        if (basenames.indexOf(pathBasename) !== -1) {\n          throw new Error(\n              `Duplicate file basename found in weights manifest: ` +\n              `'${pathBasename}'`);\n        }\n        basenames.push(pathBasename);\n        if (fileNames.indexOf(pathBasename) === -1) {\n          throw new Error(\n              `Weight file with basename '${pathBasename}' is not provided.`);\n        } else {\n          pathToFile[path] = files[fileNames.indexOf(pathBasename)];\n        }\n      });\n    }\n\n    if (basenames.length !== files.length) {\n      throw new Error(\n          `Mismatch in the number of files in weights manifest ` +\n          `(${basenames.length}) and the number of weight files provided ` +\n          `(${files.length}).`);\n    }\n    return pathToFile;\n  }\n}\n\nexport const browserDownloadsRouter: IORouter = (url: string|string[]) => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n      return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n */\n/**\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserDownloads(fileNamePrefix = 'model'): IOHandler {\n  return new BrowserDownloads(fileNamePrefix);\n}\n\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, One or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n */\n/**\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserFiles(files: File[]): IOHandler {\n  return new BrowserFiles(files);\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {assert} from '../util';\n\nimport {OnProgressCallback} from './types';\n\n/**\n * Monitor Promise.all progress, fire onProgress callback function.\n *\n * @param promises Promise list going to be monitored\n * @param onProgress Callback function. Fired when a promise resolved.\n * @param startFraction Optional fraction start. Default to 0.\n * @param endFraction Optional fraction end. Default to 1.\n */\nexport function monitorPromisesProgress(\n    promises: Array<Promise<{}|void>>, onProgress: OnProgressCallback,\n    startFraction?: number, endFraction?: number) {\n  checkPromises(promises);\n  startFraction = startFraction == null ? 0 : startFraction;\n  endFraction = endFraction == null ? 1 : endFraction;\n  checkFraction(startFraction, endFraction);\n  let resolvedPromise = 0;\n\n  const registerMonitor = (promise: Promise<{}>) => {\n    promise.then(value => {\n      const fraction = startFraction +\n          ++resolvedPromise / promises.length * (endFraction - startFraction);\n      // pass fraction as parameter to callback function.\n      onProgress(fraction);\n      return value;\n    });\n    return promise;\n  };\n\n  function checkPromises(promises: Array<Promise<{}|void>>): void {\n    assert(\n        promises != null && Array.isArray(promises) && promises.length > 0,\n        () => 'promises must be a none empty array');\n  }\n\n  function checkFraction(startFraction: number, endFraction: number): void {\n    assert(\n        startFraction >= 0 && startFraction <= 1,\n        () => `Progress fraction must be in range [0, 1], but ` +\n            `got startFraction ${startFraction}`);\n    assert(\n        endFraction >= 0 && endFraction <= 1,\n        () => `Progress fraction must be in range [0, 1], but ` +\n            `got endFraction ${endFraction}`);\n    assert(\n        endFraction >= startFraction,\n        () => `startFraction must be no more than endFraction, but ` +\n            `got startFraction ${startFraction} and endFraction ` +\n            `${endFraction}`);\n  }\n\n  return Promise.all(promises.map(registerMonitor));\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '../environment';\n\nimport {NamedTensorMap} from '../tensor_types';\nimport * as util from '../util';\nimport {decodeWeights} from './io_utils';\nimport {monitorPromisesProgress} from './progress';\nimport {DTYPE_VALUE_SIZE_MAP, LoadOptions, WeightsManifestConfig, WeightsManifestEntry} from './types';\n\n/**\n * Reads binary weights data from a number of URLs.\n *\n * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.\n * @param requestOptions RequestInit (options) for the HTTP requests.\n * @param fetchFunc Optional overriding value for the `window.fetch` function.\n * @param onProgress Optional, progress callback function, fired periodically\n *   before the load is completed.\n * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same\n *   length as `fetchURLs`.\n */\nexport async function loadWeightsAsArrayBuffer(\n    fetchURLs: string[], loadOptions?: LoadOptions): Promise<ArrayBuffer[]> {\n  if (loadOptions == null) {\n    loadOptions = {};\n  }\n\n  const fetchFunc = loadOptions.fetchFunc == null ? env().platform.fetch :\n                                                    loadOptions.fetchFunc;\n\n  // Create the requests for all of the weights in parallel.\n  const requests = fetchURLs.map(\n      fetchURL =>\n          fetchFunc(fetchURL, loadOptions.requestInit, {isBinary: true}));\n\n  const fetchStartFraction = 0;\n  const fetchEndFraction = 0.5;\n\n  const responses = loadOptions.onProgress == null ?\n      await Promise.all(requests) :\n      await monitorPromisesProgress(\n          requests, loadOptions.onProgress, fetchStartFraction,\n          fetchEndFraction);\n\n  const bufferPromises = responses.map(response => response.arrayBuffer());\n\n  const bufferStartFraction = 0.5;\n  const bufferEndFraction = 1;\n\n  const buffers = loadOptions.onProgress == null ?\n      await Promise.all(bufferPromises) :\n      await monitorPromisesProgress(\n          bufferPromises, loadOptions.onProgress, bufferStartFraction,\n          bufferEndFraction);\n  return buffers;\n}\n\n/**\n * Reads a weights manifest JSON configuration, fetches the weights and\n * returns them as `Tensor`s.\n *\n * @param manifest The weights manifest JSON.\n * @param filePathPrefix The path prefix for filenames given in the manifest.\n *     Defaults to the empty string.\n * @param weightNames The names of the weights to be fetched.\n */\nexport async function loadWeights(\n    manifest: WeightsManifestConfig, filePathPrefix = '',\n    weightNames?: string[],\n    requestInit?: RequestInit): Promise<NamedTensorMap> {\n  // TODO(nsthorat): Groups are currently fetched atomically. If you need a\n  // single weight from a group, the whole group will be fetched. At a future\n  // date, we should support fetching only the individual shards within a\n  // group that are needed to reconstruct the requested weight.\n  // TODO(cais): Use `decodeWeights` for implementation.\n\n  const fetchWeights = (fetchUrls: string[]) =>\n      loadWeightsAsArrayBuffer(fetchUrls, {requestInit});\n  const loadWeights = weightsLoaderFactory(fetchWeights);\n\n  return loadWeights(manifest, filePathPrefix, weightNames);\n}\n\n/**\n * Creates a function, which reads a weights manifest JSON configuration,\n * fetches the weight files using the specified function and returns them as\n * `Tensor`s.\n *\n * ```js\n * // example for creating a nodejs weight loader, which reads the weight files\n * // from disk using fs.readFileSync\n *\n * import * as fs from 'fs'\n *\n * const fetchWeightsFromDisk = (filePaths: string[]) =>\n *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)\n *\n * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)\n *\n * const manifest = JSON.parse(\n *   fs.readFileSync('./my_model-weights_manifest').toString()\n * )\n * const weightMap = await loadWeights(manifest, './')\n * ```\n * @param fetchWeightsFunction The function used for fetching the weight files.\n * @returns Weight loading function.\n */\nexport function weightsLoaderFactory(\n    fetchWeightsFunction: (fetchUrls: string[]) => Promise<ArrayBuffer[]>):\n    (manifest: WeightsManifestConfig, filePathPrefix?: string,\n     weightNames?: string[]) => Promise<NamedTensorMap> {\n  return async(\n             manifest: WeightsManifestConfig, filePathPrefix = '',\n             weightNames?: string[]): Promise<NamedTensorMap> => {\n    // Collect all the groups, weights, and their relative offsets to be\n    // fetched.\n    const groupIndicesToFetchMap = manifest.map(() => false);\n    const groupWeightsToFetch: {\n      [group: number]: Array<{\n        manifestEntry: WeightsManifestEntry; groupOffset: number;\n        sizeBytes: number;\n      }>\n    } = {};\n    const weightsFound =\n        weightNames != null ? weightNames.map(() => false) : [];\n    const allManifestWeightNames: string[] = [];\n    manifest.forEach((manifestGroupConfig, groupIndex) => {\n      let groupOffset = 0;\n      manifestGroupConfig.weights.forEach(weightsEntry => {\n        const rawDtype = ('quantization' in weightsEntry) ?\n            weightsEntry.quantization.dtype :\n            weightsEntry.dtype;\n\n        const weightsBytes = DTYPE_VALUE_SIZE_MAP[rawDtype] *\n            util.sizeFromShape(weightsEntry.shape);\n\n        const enqueueWeightsForFetchingFn = () => {\n          groupIndicesToFetchMap[groupIndex] = true;\n          if (groupWeightsToFetch[groupIndex] == null) {\n            groupWeightsToFetch[groupIndex] = [];\n          }\n\n          groupWeightsToFetch[groupIndex].push({\n            manifestEntry: weightsEntry,\n            groupOffset,\n            sizeBytes: weightsBytes\n          });\n        };\n\n        if (weightNames != null) {\n          weightNames.forEach((weightName, weightIndex) => {\n            if (weightName === weightsEntry.name) {\n              enqueueWeightsForFetchingFn();\n              weightsFound[weightIndex] = true;\n            }\n          });\n        } else {\n          enqueueWeightsForFetchingFn();\n        }\n\n        allManifestWeightNames.push(weightsEntry.name);\n        groupOffset += weightsBytes;\n      });\n    });\n\n    if (!weightsFound.every(found => found)) {\n      const weightsNotFound = weightNames.filter((_, i) => !weightsFound[i]);\n      throw new Error(\n          `Could not find weights in manifest with names: ` +\n          `${weightsNotFound.join(', ')}. \\n` +\n          `Manifest JSON has weights with names: ` +\n          `${allManifestWeightNames.join(', ')}.`);\n    }\n\n    // Convert the one-hot boolean groupId => shouldFetch map to a list of group\n    // IDs.\n    const groupIndicesToFetch =\n        groupIndicesToFetchMap.reduce((accumulator, shouldFetch, i) => {\n          if (shouldFetch) {\n            accumulator.push(i);\n          }\n          return accumulator;\n        }, []);\n\n    const fetchUrls: string[] = [];\n    groupIndicesToFetch.forEach(i => {\n      manifest[i].paths.forEach(filepath => {\n        const fetchUrl = filePathPrefix +\n            (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;\n        fetchUrls.push(fetchUrl);\n      });\n    });\n    const buffers = await fetchWeightsFunction(fetchUrls);\n\n    const weightsTensorMap: NamedTensorMap = {};\n    let bufferIndexOffset = 0;\n    groupIndicesToFetch.forEach(i => {\n      const numBuffers = manifest[i].paths.length;\n\n      let groupBytes = 0;\n      for (let i = 0; i < numBuffers; i++) {\n        groupBytes += buffers[bufferIndexOffset + i].byteLength;\n      }\n\n      // Create a buffer for the whole group.\n      const groupBuffer = new ArrayBuffer(groupBytes);\n      const groupByteBuffer = new Uint8Array(groupBuffer);\n      let groupBufferOffset = 0;\n      for (let i = 0; i < numBuffers; i++) {\n        const buffer = new Uint8Array(buffers[bufferIndexOffset + i]);\n        groupByteBuffer.set(buffer, groupBufferOffset);\n        groupBufferOffset += buffer.byteLength;\n      }\n\n      const weightsEntries = groupWeightsToFetch[i];\n      weightsEntries.forEach(weightsEntry => {\n        const byteBuffer = groupBuffer.slice(\n            weightsEntry.groupOffset,\n            weightsEntry.groupOffset + weightsEntry.sizeBytes);\n        const nameToTensorMap =\n            decodeWeights(byteBuffer, [weightsEntry.manifestEntry]);\n        for (const name in nameToTensorMap) {\n          weightsTensorMap[name] = nameToTensorMap[name];\n        }\n      });\n\n      bufferIndexOffset += numBuffers;\n    });\n\n    return weightsTensorMap;\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandler implementations based on HTTP requests in the web browser.\n *\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n */\n\nimport {env} from '../environment';\n\nimport {assert} from '../util';\nimport {concatenateArrayBuffers, getModelArtifactsInfoForJSON} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, LoadOptions, ModelArtifacts, ModelJSON, OnProgressCallback, SaveResult, WeightsManifestConfig, WeightsManifestEntry} from './types';\nimport {loadWeightsAsArrayBuffer} from './weights_loader';\n\nconst OCTET_STREAM_MIME_TYPE = 'application/octet-stream';\nconst JSON_TYPE = 'application/json';\nexport class HTTPRequest implements IOHandler {\n  protected readonly path: string;\n  protected readonly requestInit: RequestInit;\n\n  private readonly fetch: Function;\n\n  readonly DEFAULT_METHOD = 'POST';\n\n  static readonly URL_SCHEME_REGEX = /^https?:\\/\\//;\n\n  private readonly weightPathPrefix: string;\n  private readonly onProgress: OnProgressCallback;\n\n  constructor(path: string, loadOptions?: LoadOptions) {\n    if (loadOptions == null) {\n      loadOptions = {};\n    }\n    this.weightPathPrefix = loadOptions.weightPathPrefix;\n    this.onProgress = loadOptions.onProgress;\n\n    if (loadOptions.fetchFunc != null) {\n      assert(\n          typeof loadOptions.fetchFunc === 'function',\n          () => 'Must pass a function that matches the signature of ' +\n              '`fetch` (see ' +\n              'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');\n      this.fetch = loadOptions.fetchFunc;\n    } else {\n      this.fetch = env().platform.fetch;\n    }\n\n    assert(\n        path != null && path.length > 0,\n        () => 'URL path for http must not be null, undefined or ' +\n            'empty.');\n\n    if (Array.isArray(path)) {\n      assert(\n          path.length === 2,\n          () => 'URL paths for http must have a length of 2, ' +\n              `(actual length is ${path.length}).`);\n    }\n    this.path = path;\n\n    if (loadOptions.requestInit != null &&\n        loadOptions.requestInit.body != null) {\n      throw new Error(\n          'requestInit is expected to have no pre-existing body, but has one.');\n    }\n    this.requestInit = loadOptions.requestInit || {};\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserHTTPRequest.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    }\n\n    const init = Object.assign({method: this.DEFAULT_METHOD}, this.requestInit);\n    init.body = new FormData();\n\n    const weightsManifest: WeightsManifestConfig = [{\n      paths: ['./model.weights.bin'],\n      weights: modelArtifacts.weightSpecs,\n    }];\n    const modelTopologyAndWeightManifest: ModelJSON = {\n      modelTopology: modelArtifacts.modelTopology,\n      format: modelArtifacts.format,\n      generatedBy: modelArtifacts.generatedBy,\n      convertedBy: modelArtifacts.convertedBy,\n      userDefinedMetadata: modelArtifacts.userDefinedMetadata,\n      weightsManifest\n    };\n\n    init.body.append(\n        'model.json',\n        new Blob(\n            [JSON.stringify(modelTopologyAndWeightManifest)],\n            {type: JSON_TYPE}),\n        'model.json');\n\n    if (modelArtifacts.weightData != null) {\n      init.body.append(\n          'model.weights.bin',\n          new Blob([modelArtifacts.weightData], {type: OCTET_STREAM_MIME_TYPE}),\n          'model.weights.bin');\n    }\n\n    const response = await this.fetch(this.path, init);\n\n    if (response.ok) {\n      return {\n        modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\n        responses: [response],\n      };\n    } else {\n      throw new Error(\n          `BrowserHTTPRequest.save() failed due to HTTP response status ` +\n          `${response.status}.`);\n    }\n  }\n\n  /**\n   * Load model artifacts via HTTP request(s).\n   *\n   * See the documentation to `tf.io.http` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model artifacts (if loading succeeds).\n   */\n  async load(): Promise<ModelArtifacts> {\n    const modelConfigRequest = await this.fetch(this.path, this.requestInit);\n\n    if (!modelConfigRequest.ok) {\n      throw new Error(\n          `Request to ${this.path} failed with status code ` +\n          `${modelConfigRequest.status}. Please verify this URL points to ` +\n          `the model JSON of the model to load.`);\n    }\n    let modelConfig: ModelJSON;\n    try {\n      modelConfig = await modelConfigRequest.json();\n    } catch (e) {\n      let message = `Failed to parse model JSON of response from ${this.path}.`;\n      // TODO(nsthorat): Remove this after some time when we're comfortable that\n      // .pb files are mostly gone.\n      if (this.path.endsWith('.pb')) {\n        message += ' Your path contains a .pb file extension. ' +\n            'Support for .pb models have been removed in TensorFlow.js 1.0 ' +\n            'in favor of .json models. You can re-convert your Python ' +\n            'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' +\n            'or you can convert your.pb models with the \\'pb2json\\'' +\n            'NPM script in the tensorflow/tfjs-converter repository.';\n      } else {\n        message += ' Please make sure the server is serving valid ' +\n            'JSON for this request.';\n      }\n      throw new Error(message);\n    }\n    const modelTopology = modelConfig.modelTopology;\n    const weightsManifest = modelConfig.weightsManifest;\n    const generatedBy = modelConfig.generatedBy;\n    const convertedBy = modelConfig.convertedBy;\n    const format = modelConfig.format;\n    const userDefinedMetadata = modelConfig.userDefinedMetadata;\n\n    // We do not allow both modelTopology and weightsManifest to be missing.\n    if (modelTopology == null && weightsManifest == null) {\n      throw new Error(\n          `The JSON from HTTP path ${this.path} contains neither model ` +\n          `topology or manifest for weights.`);\n    }\n\n    let weightSpecs: WeightsManifestEntry[];\n    let weightData: ArrayBuffer;\n    if (weightsManifest != null) {\n      const results = await this.loadWeights(weightsManifest);\n      [weightSpecs, weightData] = results;\n    }\n\n    return {\n      modelTopology,\n      weightSpecs,\n      weightData,\n      userDefinedMetadata,\n      generatedBy,\n      convertedBy,\n      format\n    };\n  }\n\n  private async loadWeights(weightsManifest: WeightsManifestConfig):\n      Promise<[WeightsManifestEntry[], ArrayBuffer]> {\n    const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;\n    const [prefix, suffix] = parseUrl(weightPath);\n    const pathPrefix = this.weightPathPrefix || prefix;\n\n    const weightSpecs = [];\n    for (const entry of weightsManifest) {\n      weightSpecs.push(...entry.weights);\n    }\n\n    const fetchURLs: string[] = [];\n    weightsManifest.forEach(weightsGroup => {\n      weightsGroup.paths.forEach(path => {\n        fetchURLs.push(pathPrefix + path + suffix);\n      });\n    });\n    const buffers = await loadWeightsAsArrayBuffer(fetchURLs, {\n      requestInit: this.requestInit,\n      fetchFunc: this.fetch,\n      onProgress: this.onProgress\n    });\n    return [weightSpecs, concatenateArrayBuffers(buffers)];\n  }\n}\n\n/**\n * Extract the prefix and suffix of the url, where the prefix is the path before\n * the last file, and suffix is the search params after the last file.\n * ```\n * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'\n * [prefix, suffix] = parseUrl(url)\n * // prefix = 'http://tfhub.dev/model/1/'\n * // suffix = '?tfjs-format=file'\n * ```\n * @param url the model url to be parsed.\n */\nexport function parseUrl(url: string): [string, string] {\n  const lastSlash = url.lastIndexOf('/');\n  const lastSearchParam = url.lastIndexOf('?');\n  const prefix = url.substring(0, lastSlash);\n  const suffix =\n      lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';\n  return [prefix + '/', suffix];\n}\n\nexport function isHTTPScheme(url: string): boolean {\n  return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;\n}\n\nexport const httpRouter: IORouter =\n    (url: string, onProgress?: OnProgressCallback) => {\n      if (typeof fetch === 'undefined') {\n        // `http` uses `fetch` or `node-fetch`, if one wants to use it in\n        // an environment that is not the browser or node they have to setup a\n        // global fetch polyfill.\n        return null;\n      } else {\n        let isHTTP = true;\n        if (Array.isArray(url)) {\n          isHTTP = url.every(urlItem => isHTTPScheme(urlItem));\n        } else {\n          isHTTP = isHTTPScheme(url);\n        }\n        if (isHTTP) {\n          return http(url, {onProgress});\n        }\n      }\n      return null;\n    };\nIORouterRegistry.registerSaveRouter(httpRouter);\nIORouterRegistry.registerLoadRouter(httpRouter);\n\n/**\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\n *\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\n * `path` URL. The form data includes artifacts that represent the topology\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\n * blobs (files) exist in form-data:\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\n *   - A binary weights file consisting of the concatenated weight values.\n * These files are in the same format as the one generated by\n * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\n *\n * The following code snippet exemplifies the client-side code that uses this\n * function:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save(tf.io.http(\n *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));\n * console.log(saveResult);\n * ```\n *\n * If the default `POST` method is to be used, without any custom parameters\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\n *\n * ```js\n * const saveResult = await model.save('http://model-server:5000/upload');\n * ```\n *\n * The following GitHub Gist\n * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864\n * implements a server based on [flask](https://github.com/pallets/flask) that\n * can receive the request. Upon receiving the model artifacts via the requst,\n * this particular server reconsistutes instances of [Keras\n * Models](https://keras.io/models/model/) in memory.\n *\n *\n * @param path A URL path to the model.\n *   Can be an absolute HTTP path (e.g.,\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\n *   './model-upload').\n * @param requestInit Request configurations to be used when sending\n *    HTTP request to server using `fetch`. It can contain fields such as\n *    `method`, `credentials`, `headers`, `mode`, etc. See\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n *    for more information. `requestInit` must not have a body, because the\n * body will be set by TensorFlow.js. File blobs representing the model\n * topology (filename: 'model.json') and the weights of the model (filename:\n * 'model.weights.bin') will be appended to the body. If `requestInit` has a\n * `body`, an Error will be thrown.\n * @param loadOptions Optional configuration for the loading. It includes the\n *   following fields:\n *   - weightPathPrefix Optional, this specifies the path prefix for weight\n *     files, by default this is calculated from the path param.\n *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,\n *     the `fetch` from node-fetch can be used here.\n *   - onProgress Optional, progress callback function, fired periodically\n *     before the load is completed.\n * @returns An instance of `IOHandler`.\n */\n/**\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function http(path: string, loadOptions?: LoadOptions): IOHandler {\n  return new HTTPRequest(path, loadOptions);\n}\n\n/**\n * Deprecated. Use `tf.io.http`.\n * @param path\n * @param loadOptions\n */\nexport function browserHTTPRequest(\n    path: string, loadOptions?: LoadOptions): IOHandler {\n  return http(path, loadOptions);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandlers that pass through the in-memory ModelArtifacts format.\n */\n\nimport {IOHandler, ModelArtifacts, SaveResult, TrainingConfig, WeightsManifestEntry} from './types';\n\nclass PassthroughLoader implements IOHandler {\n  constructor(private readonly modelArtifacts?: ModelArtifacts) {}\n\n  async load(): Promise<ModelArtifacts> {\n    return this.modelArtifacts;\n  }\n}\n\nclass PassthroughSaver implements IOHandler {\n  constructor(\n      private readonly saveHandler:\n          (artifacts: ModelArtifacts) => Promise<SaveResult>) {}\n\n  async save(modelArtifacts: ModelArtifacts) {\n    return this.saveHandler(modelArtifacts);\n  }\n}\n\n/**\n * Creates an IOHandler that loads model artifacts from memory.\n *\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * const model = await tf.loadLayersModel(tf.io.fromMemory(\n *     modelTopology, weightSpecs, weightData));\n * ```\n *\n * @param modelArtifacts a object containing model topology (i.e., parsed from\n *   the JSON format).\n * @param weightSpecs An array of `WeightsManifestEntry` objects describing the\n *   names, shapes, types, and quantization of the weight data.\n * @param weightData A single `ArrayBuffer` containing the weight data,\n *   concatenated in the order described by the weightSpecs.\n * @param trainingConfig Model training configuration. Optional.\n *\n * @returns A passthrough `IOHandler` that simply loads the provided data.\n */\nexport function fromMemory(\n    modelArtifacts: {}|ModelArtifacts, weightSpecs?: WeightsManifestEntry[],\n    weightData?: ArrayBuffer, trainingConfig?: TrainingConfig): IOHandler {\n  if (arguments.length === 1) {\n    const isModelArtifacts =\n        (modelArtifacts as ModelArtifacts).modelTopology != null ||\n        (modelArtifacts as ModelArtifacts).weightSpecs != null;\n    if (isModelArtifacts) {\n      return new PassthroughLoader(modelArtifacts as ModelArtifacts);\n    } else {\n      // Legacy support: with only modelTopology.\n      // TODO(cais): Remove this deprecated API.\n      console.warn(\n          'Please call tf.io.fromMemory() with only one argument. ' +\n          'The argument should be of type ModelArtifacts. ' +\n          'The multi-argument signature of tf.io.fromMemory() has been ' +\n          'deprecated and will be removed in a future release.');\n      return new PassthroughLoader({modelTopology: modelArtifacts as {}});\n    }\n  } else {\n    // Legacy support.\n    // TODO(cais): Remove this deprecated API.\n    console.warn(\n        'Please call tf.io.fromMemory() with only one argument. ' +\n        'The argument should be of type ModelArtifacts. ' +\n        'The multi-argument signature of tf.io.fromMemory() has been ' +\n        'deprecated and will be removed in a future release.');\n    return new PassthroughLoader({\n      modelTopology: modelArtifacts as {},\n      weightSpecs,\n      weightData,\n      trainingConfig\n    });\n  }\n}\n\n/**\n * Creates an IOHandler that passes saved model artifacts to a callback.\n *\n * ```js\n * function handleSave(artifacts) {\n *   // ... do something with the artifacts ...\n *   return {modelArtifactsInfo: {...}, ...};\n * }\n *\n * const saveResult = model.save(tf.io.withSaveHandler(handleSave));\n * ```\n *\n * @param saveHandler A function that accepts a `ModelArtifacts` and returns a\n *     `SaveResult`.\n */\nexport function withSaveHandler(\n    saveHandler: (artifacts: ModelArtifacts) =>\n        Promise<SaveResult>): IOHandler {\n  return new PassthroughSaver(saveHandler);\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor1D, Tensor2D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {oneHot} from './array_ops';\nimport {op} from './operation';\n\n/**\n * Computes the confusion matrix from true labels and predicted labels.\n *\n * ```js\n * const labels = tf.tensor1d([0, 1, 2, 1, 0], 'int32');\n * const predictions = tf.tensor1d([0, 2, 2, 1, 0], 'int32');\n * const numClasses = 3;\n * const out = tf.math.confusionMatrix(labels, predictions, numClasses);\n * out.print();\n * // Expected output matrix:\n * // [[2, 0, 0],\n * //  [0, 1, 1],\n * //  [0, 0, 1]]\n * ```\n *\n * @param labels The target labels, assumed to be 0-based integers\n *   for the classes. The shape is `[numExamples]`, where\n *   `numExamples` is the number of examples included.\n * @param predictions The predicted classes, assumed to be\n *   0-based integers for the classes. Must have the same shape as `labels`.\n * @param numClasses Number of all classes, as an integer.\n *   Its value must be larger than the largest element in `labels` and\n *   `predictions`.\n * @returns The confusion matrix as a int32-type 2D tensor. The value at\n *   row `r` and column `c` is the number of times examples of actual class\n *   `r` were predicted as class `c`.\n */\n/** @doc {heading: 'Operations', subheading: 'Evaluation'} */\nexport function confusionMatrix_(\n    labels: Tensor1D|TensorLike, predictions: Tensor1D|TensorLike,\n    numClasses: number): Tensor2D {\n  const $labels = convertToTensor(labels, 'labels', 'confusionMatrix');\n  const $predictions =\n      convertToTensor(predictions, 'predictions', 'confusionMatrix');\n\n  util.assert(\n      numClasses == null || numClasses > 0 && Number.isInteger(numClasses),\n      () => `If provided, numClasses must be a positive integer, ` +\n          `but got ${numClasses}`);\n  util.assert(\n      $labels.rank === 1,\n      () => `Expected the rank of labels to be 1, but got ${$labels.rank}`);\n  util.assert(\n      $predictions.rank === 1,\n      () => `Expected the rank of predictions to be 1, ` +\n          `but got ${$predictions.rank}`);\n  util.assert(\n      $labels.shape[0] === $predictions.shape[0],\n      () => `Mismatch in the number of examples: ` +\n          `${$labels.shape[0]} vs. ${$predictions.shape[0]}. ` +\n          `Labels and predictions should have the same number of elements.`);\n  util.assert(\n      numClasses > 0 && Number.isInteger(numClasses),\n      () => `numClasses is required to be a positive integer, but got ` +\n          `${numClasses}`);\n  // TODO(cais): In the future, if oneHot supports tensors inputs for\n  //   `numClasses`, `confusionMatrix` can make `numClasses` optional.\n\n  const oneHotLabels = oneHot($labels.asType('int32'), numClasses) as Tensor2D;\n  const oneHotPredictions =\n      oneHot($predictions.asType('int32'), numClasses) as Tensor2D;\n  return oneHotLabels.transpose().matMul(oneHotPredictions).asType('int32');\n}\n\nexport const confusionMatrix = op({confusionMatrix_});\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {getKernel} from '../kernel_registry';\nimport {Tensor, Tensor2D, Tensor3D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {PixelData, TensorLike} from '../types';\n\nimport {op} from './operation';\nimport {tensor3d} from './tensor_ops';\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\n\n/**\n * Creates a `tf.Tensor` from an image.\n *\n * ```js\n * const image = new ImageData(1, 1);\n * image.data[0] = 100;\n * image.data[1] = 150;\n * image.data[2] = 200;\n * image.data[3] = 255;\n *\n * tf.browser.fromPixels(image).print();\n * ```\n *\n * @param pixels The input image to construct the tensor from. The\n * supported image types are all 4-channel. You can also pass in an image\n * object with following attributes:\n * `{data: Uint8Array; width: number; height: number}`\n * @param numChannels The number of channels of the output tensor. A\n * numChannels value less than 4 allows you to ignore channels. Defaults to\n * 3 (ignores alpha channel of input image).\n */\n/** @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true} */\nfunction fromPixels_(\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement,\n    numChannels = 3): Tensor3D {\n  // Sanity checks.\n  if (numChannels > 4) {\n    throw new Error(\n        'Cannot construct Tensor with more than 4 channels from pixels.');\n  }\n  if (pixels == null) {\n    throw new Error('pixels passed to tf.browser.fromPixels() can not be null');\n  }\n  let isPixelData = false;\n  let isImageData = false;\n  let isVideo = false;\n  let isImage = false;\n  let isCanvasLike = false;\n  if ((pixels as PixelData).data instanceof Uint8Array) {\n    isPixelData = true;\n  } else if (\n      typeof (ImageData) !== 'undefined' && pixels instanceof ImageData) {\n    isImageData = true;\n  } else if (\n      typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement) {\n    isVideo = true;\n  } else if (\n      typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement) {\n    isImage = true;\n    // tslint:disable-next-line: no-any\n  } else if ((pixels as any).getContext != null) {\n    isCanvasLike = true;\n  } else {\n    throw new Error(\n        'pixels passed to tf.browser.fromPixels() must be either an ' +\n        `HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData ` +\n        `in browser, or OffscreenCanvas, ImageData in webworker` +\n        ` or {data: Uint32Array, width: number, height: number}, ` +\n        `but was ${(pixels as {}).constructor.name}`);\n  }\n  if (isVideo) {\n    const HAVE_CURRENT_DATA_READY_STATE = 2;\n    if (isVideo &&\n        (pixels as HTMLVideoElement).readyState <\n            HAVE_CURRENT_DATA_READY_STATE) {\n      throw new Error(\n          'The video element has not loaded data yet. Please wait for ' +\n          '`loadeddata` event on the <video> element.');\n    }\n  }\n  // If the current backend has 'FromPixels' registered, it has a more\n  // efficient way of handling pixel uploads, so we call that.\n  const kernel = getKernel('FromPixels', ENGINE.backendName);\n  if (kernel != null) {\n    return ENGINE.runKernel('FromPixels', {pixels} as {}, {numChannels}) as\n        Tensor3D;\n  }\n\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n  let vals: Uint8ClampedArray|Uint8Array;\n\n  if (isCanvasLike) {\n    vals =\n        // tslint:disable-next-line:no-any\n        (pixels as any).getContext('2d').getImageData(0, 0, width, height).data;\n  } else if (isImageData || isPixelData) {\n    vals = (pixels as PixelData | ImageData).data;\n  } else if (isImage || isVideo) {\n    if (fromPixels2DContext == null) {\n      fromPixels2DContext = document.createElement('canvas').getContext('2d');\n    }\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(\n        pixels as HTMLVideoElement, 0, 0, width, height);\n    vals = fromPixels2DContext.getImageData(0, 0, width, height).data;\n  }\n  let values: Int32Array;\n  if (numChannels === 4) {\n    values = new Int32Array(vals);\n  } else {\n    const numPixels = width * height;\n    values = new Int32Array(numPixels * numChannels);\n    for (let i = 0; i < numPixels; i++) {\n      for (let channel = 0; channel < numChannels; ++channel) {\n        values[i * numChannels + channel] = vals[i * 4 + channel];\n      }\n    }\n  }\n  const outShape: [number, number, number] = [height, width, numChannels];\n  return tensor3d(values, outShape, 'int32');\n}\n\n/**\n * Draws a `tf.Tensor` of pixel values to a byte array or optionally a\n * canvas.\n *\n * When the dtype of the input is 'float32', we assume values in the range\n * [0-1]. Otherwise, when input is 'int32', we assume values in the range\n * [0-255].\n *\n * Returns a promise that resolves when the canvas has been drawn to.\n *\n * @param img A rank-2 or rank-3 tensor. If rank-2, draws grayscale. If\n *     rank-3, must have depth of 1, 3 or 4. When depth of 1, draws\n * grayscale. When depth of 3, we draw with the first three components of\n * the depth dimension corresponding to r, g, b and alpha = 1. When depth of\n * 4, all four components of the depth dimension correspond to r, g, b, a.\n * @param canvas The canvas to draw to.\n */\n/** @doc {heading: 'Browser', namespace: 'browser'} */\nexport async function toPixels(\n    img: Tensor2D|Tensor3D|TensorLike,\n    canvas?: HTMLCanvasElement): Promise<Uint8ClampedArray> {\n  let $img = convertToTensor(img, 'img', 'toPixels');\n  if (!(img instanceof Tensor)) {\n    // Assume int32 if user passed a native array.\n    $img = $img.toInt();\n  }\n  if ($img.rank !== 2 && $img.rank !== 3) {\n    throw new Error(\n        `toPixels only supports rank 2 or 3 tensors, got rank ${$img.rank}.`);\n  }\n  const [height, width] = $img.shape.slice(0, 2);\n  const depth = $img.rank === 2 ? 1 : $img.shape[2];\n\n  if (depth > 4 || depth === 2) {\n    throw new Error(\n        `toPixels only supports depth of size ` +\n        `1, 3 or 4 but got ${depth}`);\n  }\n\n  const data = await $img.data();\n  const minTensor = $img.min();\n  const maxTensor = $img.max();\n  const vals = await Promise.all([minTensor.data(), maxTensor.data()]);\n  const minVals = vals[0];\n  const maxVals = vals[1];\n  const min = minVals[0];\n  const max = maxVals[0];\n  minTensor.dispose();\n  maxTensor.dispose();\n  if ($img.dtype === 'float32') {\n    if (min < 0 || max > 1) {\n      throw new Error(\n          `Tensor values for a float32 Tensor must be in the ` +\n          `range [0 - 1] but got range [${min} - ${max}].`);\n    }\n  } else if ($img.dtype === 'int32') {\n    if (min < 0 || max > 255) {\n      throw new Error(\n          `Tensor values for a int32 Tensor must be in the ` +\n          `range [0 - 255] but got range [${min} - ${max}].`);\n    }\n  } else {\n    throw new Error(\n        `Unsupported type for toPixels: ${$img.dtype}.` +\n        ` Please use float32 or int32 tensors.`);\n  }\n  const multiplier = $img.dtype === 'float32' ? 255 : 1;\n  const bytes = new Uint8ClampedArray(width * height * 4);\n\n  for (let i = 0; i < height * width; ++i) {\n    let r, g, b, a;\n    if (depth === 1) {\n      r = data[i] * multiplier;\n      g = data[i] * multiplier;\n      b = data[i] * multiplier;\n      a = 255;\n    } else if (depth === 3) {\n      r = data[i * 3] * multiplier;\n      g = data[i * 3 + 1] * multiplier;\n      b = data[i * 3 + 2] * multiplier;\n      a = 255;\n    } else if (depth === 4) {\n      r = data[i * 4] * multiplier;\n      g = data[i * 4 + 1] * multiplier;\n      b = data[i * 4 + 2] * multiplier;\n      a = data[i * 4 + 3] * multiplier;\n    }\n\n    const j = i * 4;\n    bytes[j + 0] = Math.round(r);\n    bytes[j + 1] = Math.round(g);\n    bytes[j + 2] = Math.round(b);\n    bytes[j + 3] = Math.round(a);\n  }\n\n  if (canvas != null) {\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    const imageData = new ImageData(bytes, width, height);\n    ctx.putImageData(imageData, 0, 0);\n  }\n  if ($img !== img) {\n    $img.dispose();\n  }\n  return bytes;\n}\n\nexport const fromPixels = op({fromPixels_});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {assert} from './util';\n\n/**\n * Types to support JSON-esque data structures internally.\n *\n * Internally ConfigDict's use camelCase keys and values where the\n * values are class names to be instantiated.  On the python side, these\n * will be snake_case.  Internally we allow Enums into the values for better\n * type safety, but these need to be converted to raw primitives (usually\n * strings) for round-tripping with python.\n *\n * toConfig returns the TS-friendly representation. model.toJSON() returns\n * the pythonic version as that's the portable format.  If you need to\n * python-ify a non-model level toConfig output, you'll need to use a\n * convertTsToPythonic from serialization_utils in -Layers.\n *\n */\nexport declare type ConfigDictValue =\n    boolean | number | string | null | ConfigDictArray | ConfigDict;\nexport declare interface ConfigDict {\n  [key: string]: ConfigDictValue;\n}\nexport declare interface ConfigDictArray extends Array<ConfigDictValue> {}\n\n/**\n * Type to represent the class-type of Serializable objects.\n *\n * Ie the class prototype with access to the constructor and any\n * static members/methods. Instance methods are not listed here.\n *\n * Source for this idea: https://stackoverflow.com/a/43607255\n */\nexport declare type SerializableConstructor<T extends Serializable> = {\n  // tslint:disable-next-line:no-any\n  new (...args: any[]): T; className: string; fromConfig: FromConfigMethod<T>;\n};\nexport declare type FromConfigMethod<T extends Serializable> =\n    (cls: SerializableConstructor<T>, config: ConfigDict) => T;\n\n/**\n * Serializable defines the serialization contract.\n *\n * TFJS requires serializable classes to return their className when asked\n * to avoid issues with minification.\n */\nexport abstract class Serializable {\n  /**\n   * Return the class name for this class to use in serialization contexts.\n   *\n   * Generally speaking this will be the same thing that constructor.name\n   * would have returned.  However, the class name needs to be robust\n   * against minification for serialization/deserialization to work properly.\n   *\n   * There's also places such as initializers.VarianceScaling, where\n   * implementation details between different languages led to different\n   * class hierarchies and a non-leaf node is used for serialization purposes.\n   */\n  getClassName(): string {\n    return (this.constructor as SerializableConstructor<Serializable>)\n        .className;\n  }\n\n  /**\n   * Return all the non-weight state needed to serialize this object.\n   */\n  abstract getConfig(): ConfigDict;\n\n  /**\n   * Creates an instance of T from a ConfigDict.\n   *\n   * This works for most descendants of serializable.  A few need to\n   * provide special handling.\n   * @param cls A Constructor for the class to instantiate.\n   * @param config The Configuration for the object.\n   */\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(config);\n  }\n}\n\n/**\n * Maps string keys to class constructors.\n *\n * Used during (de)serialization from the cross-language JSON format, which\n * requires the class name in the serialization format matches the class\n * names as used in Python, should it exist.\n */\nexport class SerializationMap {\n  private static instance: SerializationMap;\n  classNameMap: {\n    [className: string]:\n        [SerializableConstructor<Serializable>, FromConfigMethod<Serializable>]\n  };\n\n  private constructor() {\n    this.classNameMap = {};\n  }\n\n  /**\n   * Returns the singleton instance of the map.\n   */\n  static getMap(): SerializationMap {\n    if (SerializationMap.instance == null) {\n      SerializationMap.instance = new SerializationMap();\n    }\n    return SerializationMap.instance;\n  }\n\n  /**\n   * Registers the class as serializable.\n   */\n  static register<T extends Serializable>(cls: SerializableConstructor<T>) {\n    SerializationMap.getMap().classNameMap[cls.className] =\n        [cls, cls.fromConfig];\n  }\n}\n\n/**\n * Register a class with the serialization map of TensorFlow.js.\n *\n * This is often used for registering custom Layers, so they can be\n * serialized and deserialized.\n *\n * Example:\n *\n * ```js\n * class MyCustomLayer extends tf.layers.Layer {\n *   static className = 'MyCustomLayer';\n *\n *   constructor(config) {\n *     super(config);\n *   }\n * }\n * tf.serialization.registerClass(MyCustomLayer);\n * ```\n *\n * @param cls The class to be registered. It must have a public static member\n *   called `className` defined and the value must be a non-empty string.\n */\n/** @doc {heading: 'Models', subheading: 'Serialization', ignoreCI: true} */\nexport function registerClass<T extends Serializable>(\n    cls: SerializableConstructor<T>) {\n  assert(\n      cls.className != null,\n      () => `Class being registered does not have the static className ` +\n          `property defined.`);\n  assert(\n      typeof cls.className === 'string',\n      () => `className is required to be a string, but got type ` +\n          typeof cls.className);\n  assert(\n      cls.className.length > 0,\n      () => `Class being registered has an empty-string as its className, ` +\n          `which is disallowed.`);\n\n  SerializationMap.register(cls);\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from './engine';\nimport {inferShape} from './tensor_util_env';\nimport {RecursiveArray, TensorLike, TypedArray} from './types';\nimport {arraysEqual, flatten, isString, isTypedArray} from './util';\n\nconst TEST_EPSILON_FLOAT32 = 1e-3;\nexport const TEST_EPSILON_FLOAT16 = 1e-1;\n\nexport function expectArraysClose(\n    actual: TypedArray|number|RecursiveArray<number>,\n    expected: TypedArray|number|RecursiveArray<number>, epsilon?: number) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  return expectArraysPredicate(\n      actual, expected, (a, b) => areClose(a as number, b as number, epsilon));\n}\n\nexport function testEpsilon() {\n  return ENGINE.backend.floatPrecision() === 32 ? TEST_EPSILON_FLOAT32 :\n                                                  TEST_EPSILON_FLOAT16;\n}\n\nfunction expectArraysPredicate(\n    actual: TensorLike, expected: TensorLike,\n    predicate: (a: {}, b: {}) => boolean) {\n  let checkClassType = true;\n  if (isTypedArray(actual) || isTypedArray(expected)) {\n    checkClassType = false;\n  }\n  if (isTypedArray(actual) && isTypedArray(expected)) {\n    checkClassType = true;\n  }\n  if (checkClassType) {\n    const aType = actual.constructor.name;\n    const bType = expected.constructor.name;\n\n    if (aType !== bType) {\n      throw new Error(\n          `Arrays are of different type. Actual: ${aType}. ` +\n          `Expected: ${bType}`);\n    }\n  }\n\n  if (Array.isArray(actual) && Array.isArray(expected)) {\n    const actualShape = inferShape(actual);\n    const expectedShape = inferShape(expected);\n    if (!arraysEqual(actualShape, expectedShape)) {\n      throw new Error(\n          `Arrays have different shapes. ` +\n          `Actual: [${actualShape}]. Expected: [${expectedShape}]`);\n    }\n  }\n\n  const actualFlat =\n      isTypedArray(actual) ? actual : flatten(actual as RecursiveArray<number>);\n  const expectedFlat = isTypedArray(expected) ?\n      expected :\n      flatten(expected as RecursiveArray<number>);\n\n  if (actualFlat.length !== expectedFlat.length) {\n    throw new Error(\n        `Arrays have different lengths actual: ${actualFlat.length} vs ` +\n        `expected: ${expectedFlat.length}.\\n` +\n        `Actual:   ${actualFlat}.\\n` +\n        `Expected: ${expectedFlat}.`);\n  }\n  for (let i = 0; i < expectedFlat.length; ++i) {\n    const a = actualFlat[i];\n    const e = expectedFlat[i];\n\n    if (!predicate(a, e)) {\n      throw new Error(\n          `Arrays differ: actual[${i}] = ${a}, expected[${i}] = ${e}.\\n` +\n          `Actual:   ${actualFlat}.\\n` +\n          `Expected: ${expectedFlat}.`);\n    }\n  }\n}\n\nexport interface DoneFn {\n  (): void;\n  fail: (message?: Error|string) => void;\n}\n\nexport function expectPromiseToFail(fn: () => Promise<{}>, done: DoneFn): void {\n  fn().then(() => done.fail(), () => done());\n}\n\nexport function expectArraysEqual(actual: TensorLike, expected: TensorLike) {\n  const exp = typeof expected === 'string' || typeof expected === 'number' ||\n          typeof expected === 'boolean' ?\n      [expected] as number[] :\n      expected as number[];\n  if (isString(actual) || isString((actual as string[])[0]) ||\n      isString(expected) || isString((expected as string[])[0])) {\n    // tslint:disable-next-line: triple-equals\n    return expectArraysPredicate(actual, exp, (a, b) => a == b);\n  }\n  return expectArraysPredicate(\n      actual, expected, (a, b) => areClose(a as number, b as number, 0));\n}\n\nexport function expectNumbersClose(a: number, e: number, epsilon?: number) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  if (!areClose(a, e, epsilon)) {\n    throw new Error(`Numbers differ: actual === ${a}, expected === ${e}`);\n  }\n}\n\nfunction areClose(a: number, e: number, epsilon: number): boolean {\n  if (!isFinite(a) && !isFinite(e)) {\n    return true;\n  }\n  if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {\n    return false;\n  }\n  return true;\n}\n\nexport function expectValuesInRange(\n    actual: TypedArray|number[], low: number, high: number) {\n  for (let i = 0; i < actual.length; i++) {\n    if (actual[i] < low || actual[i] > high) {\n      throw new Error(\n          `Value out of range:${actual[i]} low: ${low}, high: ${high}`);\n    }\n  }\n}\n\nexport function expectArrayBuffersEqual(\n    actual: ArrayBuffer, expected: ArrayBuffer) {\n  // Safari & Jasmine don't like comparing ArrayBuffers directly. Wrapping in\n  // a Float32Array solves this issue.\n  expect(new Float32Array(actual)).toEqual(new Float32Array(expected));\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as gpgpu_util from './backends/webgl/gpgpu_util';\nimport * as webgl_util from './backends/webgl/webgl_util';\nimport {env} from './environment';\n\nexport {MathBackendWebGL, WebGLMemoryInfo, WebGLTimingInfo} from './backends/webgl/backend_webgl';\nexport {setWebGLContext} from './backends/webgl/canvas_util';\nexport {GPGPUContext} from './backends/webgl/gpgpu_context';\nexport {GPGPUProgram} from './backends/webgl/gpgpu_math';\n// WebGL specific utils.\nexport {gpgpu_util, webgl_util};\n\n/**\n * Enforce use of half precision textures if available on the platform.\n */\n/** @doc {heading: 'Environment', namespace: 'webgl'} */\nexport function forceHalfFloat(): void {\n  env().set('WEBGL_FORCE_F16_TEXTURES', true);\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {dispose} from '../globals';\nimport {variableGrads} from '../gradients';\nimport {scalar} from '../ops/ops';\nimport {Serializable} from '../serialization';\nimport {Scalar, Variable} from '../tensor';\nimport {NamedTensor, NamedTensorMap} from '../tensor_types';\n\n/**\n * A variable that belongs to an optimizer.\n *\n * The `originalName` field is required for keeping track of the canonical\n * name of the variable, which is usually the name of the model weight that\n * the variable is related to plus a suffix, e.g., 'dense1/kernel/momentum'.\n * The name of the `Variable` object itself cannot be used directly due to\n * possible deduplication: Every `Variable` must have a unique name but more\n * than one optimizer objects of the same type may be created for the same model\n * or the same `Variable`.\n */\nexport interface OptimizerVariable {\n  originalName: string;\n  variable: Variable;\n}\n\n/** @doc {heading: 'Training', subheading: 'Classes', namespace: 'train'} */\nexport abstract class Optimizer extends Serializable {\n  protected iterations_: number;\n\n  /**\n   * Executes `f()` and minimizes the scalar output of `f()` by computing\n   * gradients of y with respect to the list of trainable variables provided by\n   * `varList`. If no list is provided, it defaults to all trainable variables.\n   *\n   * @param f The function to execute and whose output to minimize.\n   * @param returnCost Whether to return the scalar cost value produced by\n   * executing `f()`.\n   * @param varList An optional list of variables to update. If specified, only\n   * the trainable variables in varList will be updated by minimize. Defaults to\n   * all trainable variables.\n   */\n  /** @doc {heading: 'Training', subheading: 'Optimizers'} */\n  minimize(f: () => Scalar, returnCost = false, varList?: Variable[]): Scalar\n      |null {\n    const {value, grads} = this.computeGradients(f, varList);\n\n    if (varList != null) {\n      const gradArray: NamedTensor[] =\n          varList.map(v => ({name: v.name, tensor: grads[v.name]}));\n      this.applyGradients(gradArray);\n    } else {\n      this.applyGradients(grads);\n    }\n\n    // Dispose gradients.\n    dispose(grads);\n\n    if (returnCost) {\n      return value;\n    } else {\n      value.dispose();\n      return null;\n    }\n  }\n\n  /**\n   * The number of iterations that this optimizer instance has been invoked for.\n   */\n  get iterations(): number {\n    if (this.iterations_ == null) {\n      this.iterations_ = 0;\n    }\n    return this.iterations_;\n  }\n\n  protected incrementIterations() {\n    this.iterations_ = this.iterations + 1;\n  }\n\n  /**\n   * Executes f() and computes the gradient of the scalar output of f() with\n   * respect to the list of trainable variables provided by `varList`. If no\n   * list is provided, it defaults to all trainable variables.\n   *\n   * @param f The function to execute and whose output to use for computing\n   * gradients with respect to variables.\n   * @param varList An optional list of variables to compute gradients with\n   * respect to. If specified, only the trainable variables in varList will have\n   * gradients computed with respect to. Defaults to all trainable variables.\n   */\n  computeGradients(f: () => Scalar, varList?: Variable[]):\n      {value: Scalar, grads: NamedTensorMap} {\n    return variableGrads(f, varList);\n  }\n\n  /**\n   * Updates variables by using the computed gradients.\n   *\n   * @param variableGradients A mapping of variable name to its gradient value.\n   */\n  abstract applyGradients(variableGradients: NamedTensorMap|\n                          NamedTensor[]): void;\n\n  /**\n   * Dispose the variables (if any) owned by this optimizer instance.\n   */\n  dispose(): void {\n    if (this.iterations_ != null) {\n      dispose(this.iterations_);\n    }\n  }\n\n  async saveIterations(): Promise<NamedTensor> {\n    if (this.iterations_ == null) {\n      this.iterations_ = 0;\n    }\n    return {\n      name: 'iter',  // Named for Python compatibility.\n      // TODO(cais): Use 'int64' type when available.\n      tensor: scalar(this.iterations_, 'int32')\n    };\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    throw new Error('getWeights() is not implemented for this optimizer yet.');\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    throw new Error(\n        `setWeights() is not implemented for this optimizer class ` +\n        `${this.getClassName()}`);\n  }\n\n  /**\n   * Extract the first element of the weight values and set it\n   * as the iterations counter variable of this instance of optimizer.\n   *\n   * @param weightValues\n   * @returns Weight values with the first element consumed and excluded.\n   */\n  protected async extractIterations(weightValues: NamedTensor[]):\n      Promise<NamedTensor[]> {\n    this.iterations_ = (await weightValues[0].tensor.data())[0];\n    return weightValues.slice(1);\n  }\n}\n\nObject.defineProperty(Optimizer, Symbol.hasInstance, {\n  value: (instance: Optimizer) => {\n    return instance.minimize != null && instance.computeGradients != null &&\n        instance.applyGradients != null;\n  }\n});\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {zerosLike} from '../ops/ops';\nimport {ConfigDict, registerClass, Serializable, SerializableConstructor} from '../serialization';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\n/** @doclink Optimizer */\nexport class AdadeltaOptimizer extends Optimizer {\n  /** @nocollapse */\n  static className = 'Adadelta';  // Name matters for Python compatibility.\n  private accumulatedGrads: OptimizerVariable[] = [];\n  private accumulatedUpdates: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, protected rho: number,\n      protected epsilon: number = null) {\n    super();\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      const trainable = false;\n      if (this.accumulatedGrads[i] == null) {\n        this.accumulatedGrads[i] = {\n          originalName: `${name}/accum_grad`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n      if (this.accumulatedUpdates[i] == null) {\n        this.accumulatedUpdates[i] = {\n          originalName: `${name}/accum_var`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n\n      const gradient = Array.isArray(variableGradients) ?\n          variableGradients[i].tensor :\n          variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n\n      const accumulatedGrad = this.accumulatedGrads[i].variable;\n      const accumulatedUpdate = this.accumulatedUpdates[i].variable;\n\n      tidy(() => {\n        const newAccumulatedGrad = accumulatedGrad.mul(this.rho).add(\n            gradient.square().mul(1 - this.rho));\n\n        const updates = accumulatedUpdate.add(this.epsilon)\n                            .sqrt()\n                            .div(accumulatedGrad.add(this.epsilon).sqrt())\n                            .mul(gradient);\n\n        const newAccumulatedUpdate = accumulatedUpdate.mul(this.rho).add(\n            updates.square().mul(1 - this.rho));\n\n        accumulatedGrad.assign(newAccumulatedGrad);\n        accumulatedUpdate.assign(newAccumulatedUpdate);\n\n        const newValue = updates.mul(-this.learningRate).add(value);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n\n  dispose(): void {\n    if (this.accumulatedUpdates != null) {\n      dispose(this.accumulatedGrads.map(v => v.variable));\n      dispose(this.accumulatedUpdates.map(v => v.variable));\n    }\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    const variables: OptimizerVariable[] =\n        [...this.accumulatedGrads, ...this.accumulatedUpdates];\n    return [await this.saveIterations()].concat(\n        variables.map(v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    const variableCount = weightValues.length / 2;\n    const trainable = false;\n    this.accumulatedGrads =\n        weightValues.slice(0, variableCount).map(v => ({\n                                                   originalName: v.name,\n                                                   variable: v.tensor.variable(\n                                                       trainable)\n                                                 }));\n    this.accumulatedUpdates =\n        weightValues.slice(variableCount, variableCount * 2)\n            .map(v => ({\n                   originalName: v.name,\n                   variable: v.tensor.variable(trainable)\n                 }));\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'rho': this.rho,\n      'epsilon': this.epsilon\n    };\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(config['learningRate'], config['rho'], config['epsilon']);\n  }\n}\nregisterClass(AdadeltaOptimizer);\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {fill} from '../ops/ops';\nimport {ConfigDict, registerClass, Serializable, SerializableConstructor} from '../serialization';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\n\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\n/** @doclink Optimizer */\nexport class AdagradOptimizer extends Optimizer {\n  /** @nocollapse */\n  static className = 'Adagrad';  // Note: Name matters for Python compatibility.\n\n  private accumulatedGrads: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, private initialAccumulatorValue = 0.1) {\n    super();\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      if (this.accumulatedGrads[i] == null) {\n        const trainable = false;\n        this.accumulatedGrads[i] = {\n          originalName: `${name}/accumulator`,\n          variable: tidy(\n              () => fill(value.shape, this.initialAccumulatorValue)\n                        .variable(trainable))\n        };\n      }\n\n      const gradient = Array.isArray(variableGradients) ?\n          variableGradients[i].tensor :\n          variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n\n      const accumulatedGrad = this.accumulatedGrads[i].variable;\n\n      tidy(() => {\n        const newAccumulatedGrad = accumulatedGrad.add(gradient.square());\n        accumulatedGrad.assign(newAccumulatedGrad);\n\n        const newValue =\n            gradient\n                .div(newAccumulatedGrad.add(ENGINE.backend.epsilon()).sqrt())\n                .mul(-this.learningRate)\n                .add(value);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n\n  dispose(): void {\n    if (this.accumulatedGrads != null) {\n      dispose(this.accumulatedGrads.map(v => v.variable));\n    }\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    return [await this.saveIterations()].concat(this.accumulatedGrads.map(\n        v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    const trainable = false;\n    this.accumulatedGrads = weightValues.map(\n        v => ({originalName: v.name, variable: v.tensor.variable(trainable)}));\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'initialAccumulatorValue': this.initialAccumulatorValue,\n    };\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(config['learningRate'], config['initialAccumulatorValue']);\n  }\n}\nregisterClass(AdagradOptimizer);\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {pow, scalar, sub, zerosLike} from '../ops/ops';\nimport {ConfigDict, registerClass, Serializable, SerializableConstructor} from '../serialization';\nimport {Variable} from '../tensor';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\n\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\nexport class AdamOptimizer extends Optimizer {\n  /** @nocollapse */\n  static className = 'Adam';  // Note: Name matters for Python compatibility.\n  private accBeta1: Variable;\n  private accBeta2: Variable;\n\n  private accumulatedFirstMoment: OptimizerVariable[] = [];\n  private accumulatedSecondMoment: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, protected beta1: number,\n      protected beta2: number, protected epsilon: number = null) {\n    super();\n    tidy(() => {\n      // accB* will be updated by batch.\n      this.accBeta1 = scalar(beta1).variable();\n      this.accBeta2 = scalar(beta2).variable();\n    });\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const varNames = Array.isArray(variableGradients) ?\n        variableGradients.map(v => v.name) :\n        Object.keys(variableGradients);\n    tidy(() => {\n      const oneMinusAccBeta1 = sub(1, this.accBeta1);\n      const oneMinusAccBeta2 = sub(1, this.accBeta2);\n\n      varNames.forEach((name, i) => {\n        const value = ENGINE.registeredVariables[name];\n        const trainable = false;\n        if (this.accumulatedFirstMoment[i] == null) {\n          this.accumulatedFirstMoment[i] = {\n            originalName: `${name}/m`,\n            variable: tidy(() => zerosLike(value).variable(trainable))\n          };\n        }\n        if (this.accumulatedSecondMoment[i] == null) {\n          this.accumulatedSecondMoment[i] = {\n            originalName: `${name}/v`,\n            variable: tidy(() => zerosLike(value).variable(trainable))\n          };\n        }\n\n        const gradient = Array.isArray(variableGradients) ?\n            variableGradients[i].tensor :\n            variableGradients[name];\n        if (gradient == null) {\n          return;\n        }\n\n        const firstMoment = this.accumulatedFirstMoment[i].variable;\n        const secondMoment = this.accumulatedSecondMoment[i].variable;\n\n        const newFirstMoment =\n            firstMoment.mul(this.beta1).add(gradient.mul(1 - this.beta1));\n        const newSecondMoment = secondMoment.mul(this.beta2)\n                                    .add(gradient.square().mul(1 - this.beta2));\n\n        const biasCorrectedFirstMoment = newFirstMoment.div(oneMinusAccBeta1);\n        const biasCorrectedSecondMoment = newSecondMoment.div(oneMinusAccBeta2);\n\n        firstMoment.assign(newFirstMoment);\n        secondMoment.assign(newSecondMoment);\n\n        const newValue =\n            biasCorrectedFirstMoment\n                .div(biasCorrectedSecondMoment.sqrt().add(this.epsilon))\n                .mul(-this.learningRate)\n                .add(value);\n        value.assign(newValue);\n      });\n\n      this.accBeta1.assign(this.accBeta1.mul(this.beta1));\n      this.accBeta2.assign(this.accBeta2.mul(this.beta2));\n    });\n    this.incrementIterations();\n  }\n\n  dispose(): void {\n    this.accBeta1.dispose();\n    this.accBeta2.dispose();\n\n    if (this.accumulatedFirstMoment != null) {\n      dispose(this.accumulatedFirstMoment.map(v => v.variable));\n    }\n    if (this.accumulatedSecondMoment != null) {\n      dispose(this.accumulatedSecondMoment.map(v => v.variable));\n    }\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    const variables: OptimizerVariable[] =\n        [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];\n    return [await this.saveIterations()].concat(\n        variables.map(v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    tidy(() => {\n      this.accBeta1.assign(pow(this.beta1, this.iterations_ + 1));\n      this.accBeta2.assign(pow(this.beta2, this.iterations_ + 1));\n    });\n\n    const variableCount = weightValues.length / 2;\n    const trainable = false;\n    this.accumulatedFirstMoment =\n        weightValues.slice(0, variableCount).map(v => ({\n                                                   originalName: v.name,\n                                                   variable: v.tensor.variable(\n                                                       trainable)\n                                                 }));\n    this.accumulatedSecondMoment =\n        weightValues.slice(variableCount, variableCount * 2)\n            .map(v => ({\n                   originalName: v.name,\n                   variable: v.tensor.variable(trainable)\n                 }));\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'beta1': this.beta1,\n      'beta2': this.beta2,\n      'epsilon': this.epsilon,\n    };\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(\n        config['learningRate'], config['beta1'], config['beta2'],\n        config['epsilon']);\n  }\n}\nregisterClass(AdamOptimizer);\n","﻿/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {div, scalar, sub, zerosLike} from '../ops/ops';\nimport {ConfigDict, registerClass, Serializable, SerializableConstructor} from '../serialization';\nimport {Variable} from '../tensor';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\nexport class AdamaxOptimizer extends Optimizer {\n  /** @nocollapse */\n  static className = 'Adamax';  // Note: Name matters for Python compatbility.\n  private accBeta1: Variable;\n  private iteration: Variable;\n\n  private accumulatedFirstMoment: OptimizerVariable[] = [];\n  private accumulatedWeightedInfNorm: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, protected beta1: number,\n      protected beta2: number, protected epsilon: number = null,\n      protected decay = 0.0) {\n    super();\n\n    tidy(() => {\n      this.iteration = scalar(0).variable();\n      this.accBeta1 = scalar(beta1).variable();\n    });\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    tidy(() => {\n      const oneMinusAccBeta1 = sub(1, this.accBeta1);\n      const lr = div(-this.learningRate, this.iteration.mul(this.decay).add(1));\n\n      variableNames.forEach((name, i) => {\n        const value = ENGINE.registeredVariables[name];\n        const trainable = false;\n        if (this.accumulatedFirstMoment[i] == null) {\n          this.accumulatedFirstMoment[i] = {\n            originalName: `${name}/m`,\n            variable: zerosLike(value).variable(trainable)\n          };\n        }\n        if (this.accumulatedWeightedInfNorm[i] == null) {\n          this.accumulatedWeightedInfNorm[i] = {\n            originalName: `${name}/v`,\n            variable: zerosLike(value).variable(trainable)\n          };\n        }\n\n        const gradient = Array.isArray(variableGradients) ?\n            variableGradients[i].tensor :\n            variableGradients[name];\n        if (gradient == null) {\n          return;\n        }\n\n        const firstMoment = this.accumulatedFirstMoment[i].variable;\n        const weightedInfNorm = this.accumulatedWeightedInfNorm[i].variable;\n\n        const newFirstMoment =\n            firstMoment.mul(this.beta1).add(gradient.mul(1 - this.beta1));\n\n        const ut0 = weightedInfNorm.mul(this.beta2);\n        const ut1 = gradient.abs();\n\n        const newWeightedInfNorm = ut0.maximum(ut1);\n\n        firstMoment.assign(newFirstMoment);\n        weightedInfNorm.assign(newWeightedInfNorm);\n\n        const newValue =\n            lr.div(oneMinusAccBeta1)\n                .mul(newFirstMoment.div(newWeightedInfNorm.add(this.epsilon)))\n                .add(value);\n\n        value.assign(newValue);\n      });\n\n      this.iteration.assign(this.iteration.add(1));\n      this.accBeta1.assign(this.accBeta1.mul(this.beta1));\n    });\n    this.incrementIterations();\n  }\n\n  dispose(): void {\n    this.accBeta1.dispose();\n    this.iteration.dispose();\n\n    if (this.accumulatedFirstMoment != null) {\n      dispose(this.accumulatedFirstMoment.map(v => v.variable));\n    }\n    if (this.accumulatedWeightedInfNorm != null) {\n      dispose(this.accumulatedWeightedInfNorm.map(v => v.variable));\n    }\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    throw new Error('getWeights() is not implemented for Adamax yet.');\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    throw new Error('setWeights() is not implemented for Adamax yet.');\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'beta1': this.beta1,\n      'beta2': this.beta2,\n      'epsilon': this.epsilon,\n      'decay': this.decay\n    };\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(\n        config['learningRate'], config['beta1'], config['beta2'],\n        config['epsilon'], config['decay']);\n  }\n}\nregisterClass(AdamaxOptimizer);\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {keep, tidy} from '../globals';\nimport {scalar} from '../ops/ops';\nimport {ConfigDict, registerClass, Serializable, SerializableConstructor} from '../serialization';\nimport {Scalar} from '../tensor';\nimport {NamedTensor, NamedTensorMap} from '../tensor_types';\n\nimport {Optimizer} from './optimizer';\n\n/** @doclink Optimizer */\nexport class SGDOptimizer extends Optimizer {\n  /** @nocollapse */\n  static className = 'SGD';  // Note: Name matters for Python compatibility.\n  protected c: Scalar;\n\n  constructor(protected learningRate: number) {\n    super();\n    this.setLearningRate(learningRate);\n  }\n\n  applyGradients(variableGradients: NamedTensorMap|NamedTensor[]) {\n    const varNames = Array.isArray(variableGradients) ?\n        variableGradients.map(v => v.name) :\n        Object.keys(variableGradients);\n    varNames.forEach((name, i) => {\n      const gradient = Array.isArray(variableGradients) ?\n          variableGradients[i].tensor :\n          variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n      const value = ENGINE.registeredVariables[name];\n      tidy(() => {\n        const newValue = this.c.mul(gradient).add(value);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n\n  /**\n   * Sets the learning rate of the optimizer.\n   */\n  setLearningRate(learningRate: number) {\n    this.learningRate = learningRate;\n    if (this.c != null) {\n      this.c.dispose();\n    }\n    this.c = keep(scalar(-learningRate));\n  }\n\n  dispose() {\n    this.c.dispose();\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    return [await this.saveIterations()];\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    if (weightValues.length !== 0) {\n      throw new Error('SGD optimizer does not have settable weights.');\n    }\n  }\n\n  getConfig(): ConfigDict {\n    return {'learningRate': this.learningRate};\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(config['learningRate']);\n  }\n}\nregisterClass(SGDOptimizer);\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {scalar, zerosLike} from '../ops/ops';\nimport {ConfigDict, registerClass, Serializable, SerializableConstructor} from '../serialization';\nimport {Scalar, Tensor} from '../tensor';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\n\nimport {OptimizerVariable} from './optimizer';\nimport {SGDOptimizer} from './sgd_optimizer';\n\n/** @doclink Optimizer */\nexport class MomentumOptimizer extends SGDOptimizer {\n  /** @nocollapse */\n  static className = 'Momentum';  // Name matters for Python compatibility.\n  private m: Scalar;\n  private accumulations: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, private momentum: number,\n      private useNesterov = false) {\n    super(learningRate);\n    this.m = scalar(this.momentum);\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      if (this.accumulations[i] == null) {\n        const trainable = false;\n        this.accumulations[i] = {\n          originalName: `${name}/momentum`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n\n      const accumulation = this.accumulations[i].variable;\n      const gradient = Array.isArray(variableGradients) ?\n          variableGradients[i].tensor :\n          variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n\n      tidy(() => {\n        let newValue: Tensor;\n        const newAccumulation = this.m.mul(accumulation).add(gradient);\n        if (this.useNesterov) {\n          newValue =\n              this.c.mul(gradient.add(newAccumulation.mul(this.m))).add(value);\n        } else {\n          newValue = this.c.mul(newAccumulation).add(value);\n        }\n        accumulation.assign(newAccumulation);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n\n  dispose(): void {\n    this.m.dispose();\n    if (this.accumulations != null) {\n      dispose(this.accumulations.map(v => v.variable));\n    }\n  }\n\n  /**\n   * Sets the momentum of the optimizer.\n   *\n   * @param momentum\n   */\n  setMomentum(momentum: number) {\n    this.momentum = momentum;\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    return [await this.saveIterations()].concat(this.accumulations.map(\n        v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    const trainable = false;\n    this.accumulations = weightValues.map(\n        v => ({originalName: v.name, variable: v.tensor.variable(trainable)}));\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'momentum': this.momentum,\n      'useNesterov': this.useNesterov\n    };\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(\n        config['learningRate'], config['momentum'], config['useNesterov']);\n  }\n}\nregisterClass(MomentumOptimizer);\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {zerosLike} from '../ops/ops';\nimport {ConfigDict, registerClass, Serializable, SerializableConstructor} from '../serialization';\nimport {NamedTensor, NamedTensorMap} from '../tensor_types';\n\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\n/** @doclink Optimizer */\nexport class RMSPropOptimizer extends Optimizer {\n  /** @nocollapse */\n  static className = 'RMSProp';  // Note: Name matters for Python compatibility.\n  private centered: boolean;\n\n  private accumulatedMeanSquares: OptimizerVariable[] = [];\n  private accumulatedMoments: OptimizerVariable[] = [];\n  private accumulatedMeanGrads: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, protected decay = 0.9,\n      protected momentum = 0.0, protected epsilon: number = null,\n      centered = false) {\n    super();\n\n    this.centered = centered;\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n    if (learningRate == null) {\n      throw new Error(`learningRate for RMSPropOptimizer must be defined.`);\n    }\n  }\n\n  applyGradients(variableGradients: NamedTensorMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      const trainable = false;\n      if (this.accumulatedMeanSquares[i] == null) {\n        this.accumulatedMeanSquares[i] = {\n          originalName: `${name}/rms`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n      if (this.accumulatedMoments[i] == null) {\n        this.accumulatedMoments[i] = {\n          originalName: `${name}/momentum`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n      if (this.accumulatedMeanGrads[i] == null && this.centered) {\n        this.accumulatedMeanGrads[i] = {\n          originalName: `${name}/mg`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n\n      const gradient = Array.isArray(variableGradients) ?\n          variableGradients[i].tensor :\n          variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n\n      const accumulatedMeanSquare = this.accumulatedMeanSquares[i].variable;\n      const accumulatedMoments = this.accumulatedMoments[i].variable;\n      tidy(() => {\n        const newAccumulatedMeanSquare =\n            accumulatedMeanSquare.mul(this.decay)\n                .add(gradient.square().mul(1 - this.decay));\n\n        if (this.centered) {\n          const accumulatedMeanGrad = this.accumulatedMeanGrads[i].variable;\n          // Centered gradient\n          const newAccumulatedMeanGrad = accumulatedMeanGrad.mul(this.decay)\n                                             .add(gradient.mul(1 - this.decay));\n\n          const newAccumulatedMoments =\n              accumulatedMoments.mul(this.momentum)\n                  .add(gradient.mul(this.learningRate)\n                           .div(newAccumulatedMeanSquare\n                                    .sub(newAccumulatedMeanGrad.square().add(\n                                        this.epsilon))\n                                    .sqrt()));\n\n          accumulatedMeanSquare.assign(newAccumulatedMeanSquare);\n          accumulatedMeanGrad.assign(newAccumulatedMeanGrad);\n          accumulatedMoments.assign(newAccumulatedMoments);\n\n          const newValue = value.sub(newAccumulatedMoments);\n          value.assign(newValue);\n        } else {\n          // Plain gradient\n          const newAccumulatedMeanSquare =\n              accumulatedMeanSquare.mul(this.decay)\n                  .add(gradient.square().mul(1 - this.decay));\n\n          const newAccumulatedMoments =\n              accumulatedMoments.mul(this.momentum)\n                  .add(gradient.mul(this.learningRate)\n                           .div(newAccumulatedMeanSquare.add(this.epsilon)\n                                    .sqrt()));\n\n          accumulatedMeanSquare.assign(newAccumulatedMeanSquare);\n          accumulatedMoments.assign(newAccumulatedMoments);\n\n          const newValue = value.sub(newAccumulatedMoments);\n          value.assign(newValue);\n        }\n      });\n    });\n    this.incrementIterations();\n  }\n\n  dispose(): void {\n    if (this.accumulatedMeanSquares != null) {\n      dispose(this.accumulatedMeanSquares.map(v => v.variable));\n    }\n    if (this.accumulatedMeanGrads != null && this.centered) {\n      dispose(this.accumulatedMeanGrads.map(v => v.variable));\n    }\n    if (this.accumulatedMoments != null) {\n      dispose(this.accumulatedMoments.map(v => v.variable));\n    }\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    const variables: OptimizerVariable[] =\n        [...this.accumulatedMeanSquares, ...this.accumulatedMoments];\n    if (this.centered) {\n      variables.push(...this.accumulatedMeanGrads);\n    }\n    return [await this.saveIterations()].concat(\n        variables.map(v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    const variableCount =\n        this.centered ? weightValues.length / 3 : weightValues.length / 2;\n    const trainable = false;\n    this.accumulatedMeanSquares =\n        weightValues.slice(0, variableCount).map(v => ({\n                                                   originalName: v.name,\n                                                   variable: v.tensor.variable(\n                                                       trainable)\n                                                 }));\n    this.accumulatedMoments =\n        weightValues.slice(variableCount, variableCount * 2)\n            .map(v => ({\n                   originalName: v.name,\n                   variable: v.tensor.variable(trainable)\n                 }));\n    if (this.centered) {\n      this.accumulatedMeanGrads =\n          weightValues.slice(variableCount * 2, variableCount * 3)\n              .map(v => ({\n                     originalName: v.name,\n                     variable: v.tensor.variable(trainable)\n                   }));\n    }\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'decay': this.decay,\n      'momentum': this.momentum,\n      'epsilon': this.epsilon,\n      'centered': this.centered\n    };\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(\n        config['learningRate'], config['decay'], config['momentum'],\n        config['epsilon'], config['centered']);\n  }\n}\nregisterClass(RMSPropOptimizer);\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AdadeltaOptimizer} from './adadelta_optimizer';\nimport {AdagradOptimizer} from './adagrad_optimizer';\nimport {AdamOptimizer} from './adam_optimizer';\nimport {AdamaxOptimizer} from './adamax_optimizer';\nimport {MomentumOptimizer} from './momentum_optimizer';\nimport {RMSPropOptimizer} from './rmsprop_optimizer';\nimport {SGDOptimizer} from './sgd_optimizer';\n\nexport class OptimizerConstructors {\n  /**\n   * Constructs a `tf.SGDOptimizer` that uses stochastic gradient descent.\n   *\n   * ```js\n   * // Fit a quadratic function by learning the coefficients a, b, c.\n   * const xs = tf.tensor1d([0, 1, 2, 3]);\n   * const ys = tf.tensor1d([1.1, 5.9, 16.8, 33.9]);\n   *\n   * const a = tf.scalar(Math.random()).variable();\n   * const b = tf.scalar(Math.random()).variable();\n   * const c = tf.scalar(Math.random()).variable();\n   *\n   * // y = a * x^2 + b * x + c.\n   * const f = x => a.mul(x.square()).add(b.mul(x)).add(c);\n   * const loss = (pred, label) => pred.sub(label).square().mean();\n   *\n   * const learningRate = 0.01;\n   * const optimizer = tf.train.sgd(learningRate);\n   *\n   * // Train the model.\n   * for (let i = 0; i < 10; i++) {\n   *   optimizer.minimize(() => loss(f(xs), ys));\n   * }\n   *\n   * // Make predictions.\n   * console.log(\n   *     `a: ${a.dataSync()}, b: ${b.dataSync()}, c: ${c.dataSync()}`);\n   * const preds = f(xs).dataSync();\n   * preds.forEach((pred, i) => {\n   *   console.log(`x: ${i}, pred: ${pred}`);\n   * });\n   * ```\n   *\n   * @param learningRate The learning rate to use for the SGD algorithm.\n   */\n  /**\n   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n   */\n  static sgd(learningRate: number): SGDOptimizer {\n    return new SGDOptimizer(learningRate);\n  }\n\n  /**\n   * Constructs a `tf.MomentumOptimizer` that uses momentum gradient\n   * descent.\n   *\n   * See\n   * [http://proceedings.mlr.press/v28/sutskever13.pdf](\n   * http://proceedings.mlr.press/v28/sutskever13.pdf)\n   *\n   * @param learningRate The learning rate to use for the Momentum gradient\n   * descent algorithm.\n   * @param momentum The momentum to use for the momentum gradient descent\n   * algorithm.\n   */\n  /**\n   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n   */\n  static momentum(learningRate: number, momentum: number, useNesterov = false):\n      MomentumOptimizer {\n    return new MomentumOptimizer(learningRate, momentum, useNesterov);\n  }\n\n  /**\n   * Constructs a `tf.RMSPropOptimizer` that uses RMSProp gradient\n   * descent. This implementation uses plain momentum and is not centered\n   * version of RMSProp.\n   *\n   * See\n   * [http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf](\n   * http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf)\n   *\n   * @param learningRate The learning rate to use for the RMSProp gradient\n   * descent algorithm.\n   * @param decay The discounting factor for the history/coming gradient.\n   * @param momentum The momentum to use for the RMSProp gradient descent\n   * algorithm.\n   * @param epsilon Small value to avoid zero denominator.\n   * @param centered If true, gradients are normalized by the estimated\n   * variance of the gradient.\n   */\n  /**\n   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n   */\n  static rmsprop(\n      learningRate: number, decay = .9, momentum = 0.0, epsilon: number = null,\n      centered = false): RMSPropOptimizer {\n    return new RMSPropOptimizer(\n        learningRate, decay, momentum, epsilon, centered);\n  }\n\n  /**\n   * Constructs a `tf.AdamOptimizer` that uses the Adam algorithm.\n   * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)\n   *\n   * @param learningRate The learning rate to use for the Adam gradient\n   * descent algorithm.\n   * @param beta1 The exponential decay rate for the 1st moment estimates.\n   * @param beta2 The exponential decay rate for the 2nd moment estimates.\n   * @param epsilon A small constant for numerical stability.\n   */\n  /**\n   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n   */\n  static adam(\n      learningRate = 0.001, beta1 = 0.9, beta2 = 0.999,\n      epsilon: number = null): AdamOptimizer {\n    return new AdamOptimizer(learningRate, beta1, beta2, epsilon);\n  }\n\n  /**\n   * Constructs a `tf.AdadeltaOptimizer` that uses the Adadelta algorithm.\n   * See [https://arxiv.org/abs/1212.5701](https://arxiv.org/abs/1212.5701)\n   *\n   * @param learningRate The learning rate to use for the Adadelta gradient\n   * descent algorithm.\n   * @param rho The learning rate decay over each update.\n   * @param epsilon A constant epsilon used to better condition the grad\n   * update.\n   */\n  /**\n   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n   */\n  static adadelta(learningRate = .001, rho = .95, epsilon: number = null):\n      AdadeltaOptimizer {\n    return new AdadeltaOptimizer(learningRate, rho, epsilon);\n  }\n\n  /**\n   * Constructs a `tf.AdamaxOptimizer` that uses the Adamax algorithm.\n   * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)\n   *\n   * @param learningRate The learning rate to use for the Adamax gradient\n   * descent algorithm.\n   * @param beta1 The exponential decay rate for the 1st moment estimates.\n   * @param beta2 The exponential decay rate for the 2nd moment estimates.\n   * @param epsilon A small constant for numerical stability.\n   * @param decay The learning rate decay over each update.\n   */\n  /**\n   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n   */\n  static adamax(\n      learningRate = 0.002, beta1 = 0.9, beta2 = 0.999, epsilon: number = null,\n      decay = 0.0): AdamaxOptimizer {\n    return new AdamaxOptimizer(learningRate, beta1, beta2, epsilon, decay);\n  }\n\n  /**\n   * Constructs a `tf.AdagradOptimizer` that uses the Adagrad algorithm.\n   * See\n   * [http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf](\n   * http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf)\n   * or\n   * [http://ruder.io/optimizing-gradient-descent/index.html#adagrad](\n   * http://ruder.io/optimizing-gradient-descent/index.html#adagrad)\n   *\n   * @param learningRate The learning rate to use for the Adagrad gradient\n   * descent algorithm.\n   * @param initialAccumulatorValue Starting value for the accumulators, must be\n   * positive.\n   */\n  /**\n   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}\n   */\n  static adagrad(learningRate: number, initialAccumulatorValue = 0.1):\n      AdagradOptimizer {\n    return new AdagradOptimizer(learningRate, initialAccumulatorValue);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// So typings can propagate.\nimport {AdadeltaOptimizer} from './optimizers/adadelta_optimizer';\nimport {AdagradOptimizer} from './optimizers/adagrad_optimizer';\nimport {AdamOptimizer} from './optimizers/adam_optimizer';\nimport {AdamaxOptimizer} from './optimizers/adamax_optimizer';\nimport {MomentumOptimizer} from './optimizers/momentum_optimizer';\nimport {OptimizerConstructors} from './optimizers/optimizer_constructors';\nimport {RMSPropOptimizer} from './optimizers/rmsprop_optimizer';\nimport {SGDOptimizer} from './optimizers/sgd_optimizer';\n\n// tslint:disable-next-line:no-unused-expression\n[MomentumOptimizer, SGDOptimizer, AdadeltaOptimizer, AdagradOptimizer,\n RMSPropOptimizer, AdamaxOptimizer, AdamOptimizer];\n\nexport const train = {\n  sgd: OptimizerConstructors.sgd,\n  momentum: OptimizerConstructors.momentum,\n  adadelta: OptimizerConstructors.adadelta,\n  adagrad: OptimizerConstructors.adagrad,\n  rmsprop: OptimizerConstructors.rmsprop,\n  adamax: OptimizerConstructors.adamax,\n  adam: OptimizerConstructors.adam\n};\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst delayCallback: Function = (() => {\n  if (typeof requestAnimationFrame !== 'undefined') {\n    return requestAnimationFrame;\n  } else if (typeof setImmediate !== 'undefined') {\n    return setImmediate;\n  }\n  return (f: Function) => f();  // no delays\n})();\n\n/**\n * Returns a promise that resolve when a requestAnimationFrame has completed.\n *\n * On Node.js this uses setImmediate instead of requestAnimationFrame.\n *\n * This is simply a sugar method so that users can do the following:\n * `await tf.nextFrame();`\n */\n/** @doc {heading: 'Performance', subheading: 'Timing'} */\nfunction nextFrame(): Promise<void> {\n  return new Promise<void>(resolve => delayCallback(() => resolve()));\n}\n\nexport {nextFrame};\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * @fileoverview\n * @suppress {partialAlias} Optimization disabled due to passing the module\n * object into a function below:\n *\n *   import * as ops from './ops/ops';\n *   setOpHandler(ops);\n */\n\n// Engine is the global singleton that needs to be initialized before the rest\n// of the app.\nimport './engine';\n// Register backend-agnostic flags.\nimport './flags';\n// backend_cpu.ts and backend_webgl.ts are standalone files and should be\n// explicitly included here.\nimport './backends/webgl/backend_webgl';\nimport './backends/cpu/backend_cpu';\n// Import all kernels from cpu.\nimport './backends/cpu/all_kernels';\n// Import all kernels from webgl.\nimport './backends/webgl/all_kernels';\nimport './platforms/platform_browser';\nimport './platforms/platform_node';\n\nimport * as backend_util from './backends/backend_util';\n// Serialization.\nimport * as io from './io/io';\nimport * as math from './math';\nimport * as browser from './ops/browser';\nimport * as gather_util from './ops/gather_nd_util';\nimport * as scatter_util from './ops/scatter_nd_util';\nimport * as slice_util from './ops/slice_util';\nimport * as serialization from './serialization';\nimport {setOpHandler} from './tensor';\nimport * as tensor_util from './tensor_util';\nimport * as test_util from './test_util';\nimport * as util from './util';\nimport {version} from './version';\nimport * as webgl from './webgl';\n\nexport {InferenceModel, MetaGraph, MetaGraphInfo, ModelPredictConfig, ModelTensorInfo, SavedModelTensorInfo, SignatureDef, SignatureDefInfo} from './model_types';\n// Optimizers.\nexport {AdadeltaOptimizer} from './optimizers/adadelta_optimizer';\nexport {AdagradOptimizer} from './optimizers/adagrad_optimizer';\nexport {AdamOptimizer} from './optimizers/adam_optimizer';\nexport {AdamaxOptimizer} from './optimizers/adamax_optimizer';\nexport {MomentumOptimizer} from './optimizers/momentum_optimizer';\nexport {Optimizer} from './optimizers/optimizer';\nexport {RMSPropOptimizer} from './optimizers/rmsprop_optimizer';\nexport {SGDOptimizer} from './optimizers/sgd_optimizer';\nexport {Scalar, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, Tensor5D, TensorBuffer, Variable} from './tensor';\nexport {GradSaveFunc, NamedTensorMap, TensorContainer, TensorContainerArray, TensorContainerObject} from './tensor_types';\nexport {DataType, DataTypeMap, DataValues, Rank, RecursiveArray, ShapeMap, sumOutType, TensorLike} from './types';\n\nexport * from './ops/ops';\nexport {LSTMCellFunc} from './ops/lstm';\nexport {Reduction} from './ops/loss_ops';\n\nexport * from './train';\nexport * from './globals';\nexport * from './kernel_registry';\nexport {customGrad, grad, grads, valueAndGrad, valueAndGrads, variableGrads} from './gradients';\n\nexport {TimingInfo, MemoryInfo} from './engine';\nexport {Environment, env, ENV} from './environment';\nexport {Platform} from './platforms/platform';\n\nexport {version as version_core};\n\n// Top-level method exports.\nexport {nextFrame} from './browser_util';\n\n// Second level exports.\nexport {\n  browser,\n  io,\n  math,\n  serialization,\n  test_util,\n  util,\n  backend_util,\n  webgl,\n  tensor_util,\n  slice_util,\n  gather_util,\n  scatter_util\n};\n\n// Backend specific.\nexport {KernelBackend, BackendTimingInfo, DataMover, DataStorage} from './backends/backend';\n\nimport * as ops from './ops/ops';\nsetOpHandler(ops);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {backend} from '@tensorflow/tfjs-core';\nimport {DataFormat} from '../keras_format/common';\n\nlet _epsilon: number;\n\n/**\n * Returns the value of the fuzz factor used in numeric expressions.\n */\nexport function epsilon() {\n  if (_epsilon == null) {\n    _epsilon = backend().epsilon();\n  }\n  return _epsilon;\n}\n\n/**\n * Sets the value of the fuzz factor used in numeric expressions.\n * @param e New value of epsilon.\n */\nexport function setEpsilon(e: number) {\n  _epsilon = e;\n}\n\n/**\n * Returns the default image data format convention.\n */\nexport function imageDataFormat(): DataFormat {\n  return 'channelsLast';\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Explicit error types.\n *\n * See the following link for more information about why the code includes\n * calls to setPrototypeOf:\n *\n * https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n */\n// tslint:enable\n\n/**\n * Equivalent of Python's AttributeError.\n */\nexport class AttributeError extends Error {\n  constructor(message?: string) {\n    super(message);\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, AttributeError.prototype);\n  }\n}\n\n/**\n * Equivalent of Python's RuntimeError.\n */\nexport class RuntimeError extends Error {\n  constructor(message?: string) {\n    super(message);\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, RuntimeError.prototype);\n  }\n}\n\n/**\n * Equivalent of Python's ValueError.\n */\nexport class ValueError extends Error {\n  constructor(message?: string) {\n    super(message);\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, ValueError.prototype);\n  }\n}\n\n/**\n * Equivalent of Python's NotImplementedError.\n */\nexport class NotImplementedError extends Error {\n  constructor(message?: string) {\n    super(message);\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, NotImplementedError.prototype);\n  }\n}\n\n/**\n * Equivalent of Python's AssertionError.\n */\nexport class AssertionError extends Error {\n  constructor(message?: string) {\n    super(message);\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, AssertionError.prototype);\n  }\n}\n\n/**\n * Equivalent of Python's IndexError.\n */\nexport class IndexError extends Error {\n  constructor(message?: string) {\n    super(message);\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, IndexError.prototype);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: utils/generic_utils.py */\n\nimport {DataType, serialization, util, fused} from '@tensorflow/tfjs-core';\n\nimport {AssertionError, ValueError} from '../errors';\n// tslint:enable\n\n/**\n * If `value` is an Array, equivalent to Python's `value * numValues`.\n * If `value` is not an Array, equivalent to Python's `[value] * numValues`\n */\n// tslint:disable-next-line:no-any\nexport function pyListRepeat(value: any, numValues: number): any[] {\n  if (Array.isArray(value)) {\n    // tslint:disable-next-line:no-any\n    let newArray: any[] = [];\n    for (let i = 0; i < numValues; i++) {\n      newArray = newArray.concat(value);\n    }\n    return newArray;\n  } else {\n    const newArray = new Array(numValues);\n    newArray.fill(value);\n    return newArray;\n  }\n}\n\nexport function assert(val: boolean, message?: string): void {\n  if (!val) {\n    throw new AssertionError(message);\n  }\n}\n\n/**\n * Count the number of elements of the `array` that are equal to `reference`.\n */\nexport function count<T>(array: T[], refernce: T) {\n  let counter = 0;\n  for (const item of array) {\n    if (item === refernce) {\n      counter++;\n    }\n  }\n  return counter;\n}\n\n/**\n * If an array is of length 1, just return the first element. Otherwise, return\n * the full array.\n * @param tensors\n */\nexport function singletonOrArray<T>(xs: T[]): T|T[] {\n  if (xs.length === 1) {\n    return xs[0];\n  }\n  return xs;\n}\n\n/**\n * Normalizes a list/tensor into a list.\n *\n * If a tensor is passed, we return\n * a list of size 1 containing the tensor.\n *\n * @param x target object to be normalized.\n */\n// tslint:disable-next-line:no-any\nexport function toList(x: any): any[] {\n  if (Array.isArray(x)) {\n    return x;\n  }\n  return [x];\n}\n\n/**\n * Generate a UID for a list\n */\n// tslint:disable-next-line:no-any\nexport function objectListUid(objs: any|any[]): string {\n  const objectList = toList(objs);\n  let retVal = '';\n  for (const obj of objectList) {\n    if (obj.id == null) {\n      throw new ValueError(\n          `Object ${obj} passed to objectListUid without an id`);\n    }\n    if (retVal !== '') {\n      retVal = retVal + ', ';\n    }\n    retVal = `${retVal}${Math.abs(obj.id)}`;\n  }\n  return retVal;\n}\n/**\n * Converts string to snake-case.\n * @param name\n */\nexport function toSnakeCase(name: string): string {\n  const intermediate = name.replace(/(.)([A-Z][a-z0-9]+)/g, '$1_$2');\n  const insecure =\n      intermediate.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n  /*\n   If the class is private the name starts with \"_\" which is not secure\n   for creating scopes. We prefix the name with \"private\" in this case.\n   */\n  if (insecure[0] !== '_') {\n    return insecure;\n  }\n  return 'private' + insecure;\n}\n\nexport function toCamelCase(identifier: string): string {\n  // quick return for empty string or single character strings\n  if (identifier.length <= 1) {\n    return identifier;\n  }\n  // Check for the underscore indicating snake_case\n  if (identifier.indexOf('_') === -1) {\n    return identifier;\n  }\n  return identifier.replace(/[_]+(\\w|$)/g, (m, p1) => p1.toUpperCase());\n}\n\n// tslint:disable-next-line:no-any\nlet _GLOBAL_CUSTOM_OBJECTS = {} as {[objName: string]: any};\n\nexport function serializeKerasObject(instance: serialization.Serializable):\n    serialization.ConfigDictValue {\n  if (instance === null || instance === undefined) {\n    return null;\n  }\n  const dict: serialization.ConfigDictValue = {};\n  dict['className'] = instance.getClassName();\n  dict['config'] = instance.getConfig();\n  return dict;\n}\n\n/**\n * Replace ndarray-style scalar objects in serialization objects with numbers.\n *\n * Background: In some versions of tf.keras, certain scalar values in the HDF5\n * model save file can be serialized as: `{'type': 'ndarray', 'value': num}`,\n * where in `num` is a plain number. This method converts such serialization\n * to a `number`.\n *\n * @param config The keras-format serialization object to be processed\n *   (in place).\n */\nfunction convertNDArrayScalarsInConfig(config: serialization.ConfigDictValue):\n    void {\n  if (config == null || typeof config !== 'object') {\n    return;\n  } else if (Array.isArray(config)) {\n    config.forEach(configItem => convertNDArrayScalarsInConfig(configItem));\n  } else {\n    const fields = Object.keys(config);\n    for (const field of fields) {\n      const value = config[field];\n      if (value != null && typeof value === 'object') {\n        if (!Array.isArray(value) && value['type'] === 'ndarray' &&\n            typeof value['value'] === 'number') {\n          config[field] = value['value'];\n        } else {\n          convertNDArrayScalarsInConfig(value as serialization.ConfigDict);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Deserialize a saved Keras Object\n * @param identifier either a string ID or a saved Keras dictionary\n * @param moduleObjects a list of Python class names to object constructors\n * @param customObjects a list of Python class names to object constructors\n * @param printableModuleName debug text for the object being reconstituted\n * @param fastWeightInit Optional flag to use fast weight initialization\n *   during deserialization. This is applicable to cases in which\n *   the initialization will be immediately overwritten by loaded weight\n *   values. Default: `false`.\n * @returns a TensorFlow.js Layers object\n */\n// tslint:disable:no-any\nexport function deserializeKerasObject(\n    identifier: string|serialization.ConfigDict,\n    moduleObjects = {} as {[objName: string]: any},\n    customObjects = {} as {[objName: string]: any},\n    printableModuleName = 'object', fastWeightInit = false): any {\n  // tslint:enable\n  if (typeof identifier === 'string') {\n    const functionName = identifier;\n    let fn;\n    if (functionName in customObjects) {\n      fn = customObjects[functionName];\n    } else if (functionName in _GLOBAL_CUSTOM_OBJECTS) {\n      fn = _GLOBAL_CUSTOM_OBJECTS[functionName];\n    } else {\n      fn = moduleObjects[functionName];\n      if (fn == null) {\n        throw new ValueError(\n            `Unknown ${printableModuleName}: ${identifier}. ` +\n            `This may be due to one of the following reasons:\\n` +\n            `1. The ${printableModuleName} is defined in Python, in which ` +\n            `case it needs to be ported to TensorFlow.js or your JavaScript ` +\n            `code.\\n` +\n            `2. The custom ${printableModuleName} is defined in JavaScript, ` +\n            `but is not registered properly with ` +\n            `tf.serialization.registerClass().`);\n        // TODO(cais): Add link to tutorial page on custom layers.\n      }\n    }\n    return fn;\n  } else {\n    // In this case we are dealing with a Keras config dictionary.\n    const config = identifier;\n    if (config['className'] == null || config['config'] == null) {\n      throw new ValueError(\n          `${printableModuleName}: Improper config format: ` +\n          `${JSON.stringify(config)}.\\n` +\n          `'className' and 'config' must set.`);\n    }\n    const className = config['className'] as string;\n    let cls, fromConfig;\n    if (className in customObjects) {\n      [cls, fromConfig] = customObjects[className];\n    } else if (className in _GLOBAL_CUSTOM_OBJECTS) {\n      [cls, fromConfig] = _GLOBAL_CUSTOM_OBJECTS['className'];\n    } else if (className in moduleObjects) {\n      [cls, fromConfig] = moduleObjects[className];\n    }\n    if (cls == null) {\n      throw new ValueError(\n          `Unknown ${printableModuleName}: ${className}. ` +\n          `This may be due to one of the following reasons:\\n` +\n          `1. The ${printableModuleName} is defined in Python, in which ` +\n          `case it needs to be ported to TensorFlow.js or your JavaScript ` +\n          `code.\\n` +\n          `2. The custom ${printableModuleName} is defined in JavaScript, ` +\n          `but is not registered properly with ` +\n          `tf.serialization.registerClass().`);\n      // TODO(cais): Add link to tutorial page on custom layers.\n    }\n    if (fromConfig != null) {\n      // Porting notes: Instead of checking to see whether fromConfig accepts\n      // customObjects, we create a customObjects dictionary and tack it on to\n      // config['config'] as config['config'].customObjects. Objects can use it,\n      // if they want.\n\n      // tslint:disable-next-line:no-any\n      const customObjectsCombined = {} as {[objName: string]: any};\n      for (const key of Object.keys(_GLOBAL_CUSTOM_OBJECTS)) {\n        customObjectsCombined[key] = _GLOBAL_CUSTOM_OBJECTS[key];\n      }\n      for (const key of Object.keys(customObjects)) {\n        customObjectsCombined[key] = customObjects[key];\n      }\n      // Add the customObjects to config\n      const nestedConfig = config['config'] as serialization.ConfigDict;\n      nestedConfig['customObjects'] = customObjectsCombined;\n\n      const backupCustomObjects = {..._GLOBAL_CUSTOM_OBJECTS};\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      }\n      convertNDArrayScalarsInConfig(config['config']);\n      const returnObj =\n          fromConfig(cls, config['config'], customObjects, fastWeightInit);\n      _GLOBAL_CUSTOM_OBJECTS = {...backupCustomObjects};\n\n      return returnObj;\n    } else {\n      // Then `cls` may be a function returning a class.\n      // In this case by convention `config` holds\n      // the kwargs of the function.\n      const backupCustomObjects = {..._GLOBAL_CUSTOM_OBJECTS};\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      }\n      // In python this is **config['config'], for tfjs-layers we require\n      // classes that use this fall-through construction method to take\n      // a config interface that mimics the expansion of named parameters.\n      const returnObj = new cls(config['config']);\n      _GLOBAL_CUSTOM_OBJECTS = {...backupCustomObjects};\n      return returnObj;\n    }\n  }\n}\n\n/**\n * Compares two numbers for sorting.\n * @param a\n * @param b\n */\nexport function numberCompare(a: number, b: number) {\n  return (a < b) ? -1 : ((a > b) ? 1 : 0);\n}\n\n/**\n * Comparison of two numbers for reverse sorting.\n * @param a\n * @param b\n */\nexport function reverseNumberCompare(a: number, b: number) {\n  return -1 * numberCompare(a, b);\n}\n\n/**\n * Convert a string into the corresponding DType.\n * @param dtype\n * @returns An instance of DType.\n */\nexport function stringToDType(dtype: string): DataType {\n  switch (dtype) {\n    case 'float32':\n      return 'float32';\n    default:\n      throw new ValueError(`Invalid dtype: ${dtype}`);\n  }\n}\n\n/**\n * Test the element-by-element equality of two Arrays of strings.\n * @param xs First array of strings.\n * @param ys Second array of strings.\n * @returns Wether the two arrays are all equal, element by element.\n */\nexport function stringsEqual(xs: string[], ys: string[]): boolean {\n  if (xs == null || ys == null) {\n    return xs === ys;\n  }\n  if (xs.length !== ys.length) {\n    return false;\n  }\n  for (let i = 0; i < xs.length; ++i) {\n    if (xs[i] !== ys[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Get the unique elements of an array.\n * @param xs Array.\n * @returns An Array consisting of the unique elements in `xs`.\n */\nexport function unique<T>(xs: T[]): T[] {\n  if (xs == null) {\n    return xs;\n  }\n  const out: T[] = [];\n  // TODO(cais): Maybe improve performance by sorting.\n  for (const x of xs) {\n    if (out.indexOf(x) === -1) {\n      out.push(x);\n    }\n  }\n  return out;\n}\n\n/**\n * Determine if an Object is empty (i.e., does not have own properties).\n * @param obj Object\n * @returns Whether the Object is empty.\n * @throws ValueError: If object is `null` or `undefined`.\n */\nexport function isObjectEmpty(obj: {}): boolean {\n  if (obj == null) {\n    throw new ValueError(`Invalid value in obj: ${JSON.stringify(obj)}`);\n  }\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Helper function used to build type union/enum run-time checkers.\n * @param values The list of allowed values.\n * @param label A string name for the type\n * @param value The value to test.\n * @throws ValueError: If the value is not in values nor `undefined`/`null`.\n */\nexport function checkStringTypeUnionValue(\n    values: string[], label: string, value: string): void {\n  if (value == null) {\n    return;\n  }\n  if (values.indexOf(value) < 0) {\n    throw new ValueError(`${value} is not a valid ${label}.  Valid values are ${\n        values} or null/undefined.`);\n  }\n}\n\n/**\n * Helper function for verifying the types of inputs.\n *\n * Ensures that the elements of `x` are all of type `expectedType`.\n * Also verifies that the length of `x` is within bounds.\n *\n * @param x Object to test.\n * @param expectedType The string expected type of all of the elements in the\n * Array.\n * @param minLength Return false if x.length is less than this.\n * @param maxLength Return false if x.length is greater than this.\n * @returns true if and only if `x` is an `Array<expectedType>` with\n * length >= `minLength` and <= `maxLength`.\n */\n// tslint:disable:no-any\nexport function checkArrayTypeAndLength(\n    x: any, expectedType: string, minLength = 0,\n    maxLength = Infinity): boolean {\n  assert(minLength >= 0);\n  assert(maxLength >= minLength);\n  return (\n      Array.isArray(x) && x.length >= minLength && x.length <= maxLength &&\n      x.every(e => typeof e === expectedType));\n}\n// tslint:enable:no-any\n\n/**\n * Assert that a value or an array of value are positive integer.\n *\n * @param value The value being asserted on. May be a single number or an array\n *   of numbers.\n * @param name Name of the value, used to make the error message.\n */\nexport function assertPositiveInteger(value: number|number[], name: string) {\n  if (Array.isArray(value)) {\n    util.assert(\n        value.length > 0, () => `${name} is unexpectedly an empty array.`);\n    value.forEach(\n        (v, i) => assertPositiveInteger(v, `element ${i + 1} of ${name}`));\n  } else {\n    util.assert(\n        Number.isInteger(value) && value > 0,\n        () => `Expected ${name} to be a positive integer, but got ` +\n            `${formatAsFriendlyString(value)}.`);\n  }\n}\n\n/**\n * Format a value into a display-friendly, human-readable fashion.\n *\n * - `null` is formatted as `'null'`\n * - Strings are formated with flanking pair of quotes.\n * - Arrays are formatted with flanking pair of square brackets.\n *\n * @param value The value to display.\n * @return Formatted string.\n */\n// tslint:disable-next-line:no-any\nexport function formatAsFriendlyString(value: any): string {\n  if (value === null) {\n    return 'null';\n  } else if (Array.isArray(value)) {\n    return '[' + value.map(v => formatAsFriendlyString(v)).join(',') + ']';\n  } else if (typeof value === 'string') {\n    return `\"${value}\"`;\n  } else {\n    return `${value}`;\n  }\n}\n\n/**\n * Returns a function `f2` (decorator) which wraps the original function\n * `f`. `f2` guarantees that `f` can be called at most once\n * every `waitMs` ms. If `f2` is called more often, it will return\n * the last returned result of `f`.\n *\n * @param f The original function `f` to wrap.\n * @param waitMs The time between two consecutive calls to `f` in ms.\n */\nexport function debounce<T>(\n    f: (...args: Array<{}>) => T, waitMs: number): (...args: Array<{}>) => T {\n  let lastTime = util.now();\n  let lastResult: T;\n  const f2 = (...args: Array<{}>) => {\n    const now = util.now();\n    if (now - lastTime < waitMs) {\n      return lastResult;\n    }\n    lastTime = now;\n    lastResult = f(...args);\n    return lastResult;\n  };\n  return f2;\n}\n\n/**\n * Returns the fusable activation given a layers identifier.\n *\n * @param activationName The layers identifier string.\n * @return The name of the fusable activation.\n */\nexport function mapActivationToFusedKernel(activationName: string):\n  fused.Activation {\n  if (activationName === 'relu') {\n    return 'relu';\n  }\n  if (activationName === 'linear') {\n    return 'linear';\n  }\n  if(activationName === 'elu') {\n    return 'elu';\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/contraints.py */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, tidy} from '@tensorflow/tfjs-core';\nimport {epsilon} from './backend/common';\nimport {deserializeKerasObject, serializeKerasObject} from './utils/generic_utils';\n\n/**\n * Helper function used by many of the Constraints to find the L2Norms.\n */\nfunction calcL2Norms(w: Tensor, axis: number): Tensor {\n  return tidy(() => tfc.sqrt(tfc.sum(tfc.mulStrict(w, w), axis, true)));\n}\n\n/**\n * Base class for functions that impose constraints on weight values\n */\n/**\n * @doc {\n *   heading: 'Constraints',\n *   subheading: 'Classes',\n *   namespace: 'constraints'\n * }\n */\nexport abstract class Constraint extends serialization.Serializable {\n  /* Porting note: was __call__, apply chosen to match other similar choices */\n  abstract apply(w: Tensor): Tensor;\n  getConfig(): serialization.ConfigDict {\n    return {};\n  }\n}\n\nexport interface MaxNormArgs {\n  /**\n   * Maximum norm for incoming weights\n   */\n  maxValue?: number;\n  /**\n   * Axis along which to calculate norms.\n   *\n   *  For instance, in a `Dense` layer the weight matrix\n   *  has shape `[inputDim, outputDim]`,\n   *  set `axis` to `0` to constrain each weight vector\n   *  of length `[inputDim,]`.\n   *  In a `Conv2D` layer with `dataFormat=\"channels_last\"`,\n   *  the weight tensor has shape\n   *  `[rows, cols, inputDepth, outputDepth]`,\n   *  set `axis` to `[0, 1, 2]`\n   *  to constrain the weights of each filter tensor of size\n   *  `[rows, cols, inputDepth]`.\n   */\n  axis?: number;\n}\n\nexport class MaxNorm extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'MaxNorm';\n  private maxValue: number;\n  private axis: number;\n  private readonly defaultMaxValue = 2;\n  private readonly defaultAxis = 0;\n\n  constructor(args: MaxNormArgs) {\n    super();\n    this.maxValue =\n        args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w: Tensor): Tensor {\n    return tidy(() => {\n      const norms = calcL2Norms(w, this.axis);\n      const desired = tfc.clipByValue(norms, 0, this.maxValue);\n      return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {maxValue: this.maxValue, axis: this.axis};\n  }\n}\nserialization.registerClass(MaxNorm);\n\nexport interface UnitNormArgs {\n  /**\n   * Axis along which to calculate norms.\n   *\n   * For instance, in a `Dense` layer the weight matrix\n   * has shape `[inputDim, outputDim]`,\n   * set `axis` to `0` to constrain each weight vector\n   * of length `[inputDim,]`.\n   * In a `Conv2D` layer with `dataFormat=\"channels_last\"`,\n   * the weight tensor has shape\n   * [rows, cols, inputDepth, outputDepth]`,\n   * set `axis` to `[0, 1, 2]`\n   * to constrain the weights of each filter tensor of size\n   * `[rows, cols, inputDepth]`.\n   */\n  axis?: number;\n}\n\nexport class UnitNorm extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'UnitNorm';\n  private axis: number;\n  private readonly defaultAxis = 0;\n  constructor(args: UnitNormArgs) {\n    super();\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w: Tensor): Tensor {\n    return tidy(\n        () => tfc.div(w, tfc.add(epsilon(), calcL2Norms(w, this.axis))));\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {axis: this.axis};\n  }\n}\nserialization.registerClass(UnitNorm);\n\nexport class NonNeg extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'NonNeg';\n\n  apply(w: Tensor): Tensor {\n    return tfc.relu(w);\n  }\n}\nserialization.registerClass(NonNeg);\n\nexport interface MinMaxNormArgs {\n  /**\n   * Minimum norm for incoming weights\n   */\n  minValue?: number;\n  /**\n   * Maximum norm for incoming weights\n   */\n  maxValue?: number;\n  /**\n   * Axis along which to calculate norms.\n   * For instance, in a `Dense` layer the weight matrix\n   * has shape `[inputDim, outputDim]`,\n   * set `axis` to `0` to constrain each weight vector\n   * of length `[inputDim,]`.\n   * In a `Conv2D` layer with `dataFormat=\"channels_last\"`,\n   * the weight tensor has shape\n   * `[rows, cols, inputDepth, outputDepth]`,\n   * set `axis` to `[0, 1, 2]`\n   * to constrain the weights of each filter tensor of size\n   * `[rows, cols, inputDepth]`.\n   */\n  axis?: number;\n  /**\n   * Rate for enforcing the constraint: weights will be rescaled to yield:\n   * `(1 - rate) * norm + rate * norm.clip(minValue, maxValue)`.\n   * Effectively, this means that rate=1.0 stands for strict\n   * enforcement of the constraint, while rate<1.0 means that\n   * weights will be rescaled at each step to slowly move\n   * towards a value inside the desired interval.\n   */\n  rate?: number;\n}\n\nexport class MinMaxNorm extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'MinMaxNorm';\n  private minValue: number;\n  private maxValue: number;\n  private rate: number;\n  private axis: number;\n  private readonly defaultMinValue = 0.0;\n  private readonly defaultMaxValue = 1.0;\n  private readonly defaultRate = 1.0;\n  private readonly defaultAxis = 0;\n\n  constructor(args: MinMaxNormArgs) {\n    super();\n    this.minValue =\n        args.minValue != null ? args.minValue : this.defaultMinValue;\n    this.maxValue =\n        args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n    this.rate = args.rate != null ? args.rate : this.defaultRate;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w: Tensor): Tensor {\n    return tidy(() => {\n      const norms = calcL2Norms(w, this.axis);\n      const desired = tfc.add(\n          tfc.mul(\n              this.rate, tfc.clipByValue(norms, this.minValue, this.maxValue)),\n          tfc.mul(1.0 - this.rate, norms));\n      return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {\n      minValue: this.minValue,\n      maxValue: this.maxValue,\n      rate: this.rate,\n      axis: this.axis\n    };\n  }\n}\nserialization.registerClass(MinMaxNorm);\n\n/** @docinline */\nexport type ConstraintIdentifier =\n    'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string;\n\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport const CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP:\n    {[identifier in ConstraintIdentifier]: string} = {\n      'maxNorm': 'MaxNorm',\n      'minMaxNorm': 'MinMaxNorm',\n      'nonNeg': 'NonNeg',\n      'unitNorm': 'UnitNorm'\n    };\n\nexport function serializeConstraint(constraint: Constraint):\n    serialization.ConfigDictValue {\n  return serializeKerasObject(constraint);\n}\n\nexport function deserializeConstraint(\n    config: serialization.ConfigDict,\n    customObjects: serialization.ConfigDict = {}): Constraint {\n  return deserializeKerasObject(\n      config, serialization.SerializationMap.getMap().classNameMap,\n      customObjects, 'constraint');\n}\n\nexport function getConstraint(identifier: ConstraintIdentifier|\n                              serialization.ConfigDict|Constraint): Constraint {\n  if (identifier == null) {\n    return null;\n  }\n  if (typeof identifier === 'string') {\n    const className = identifier in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n        CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n        identifier;\n    const config = {className, config: {}};\n    return deserializeConstraint(config);\n  } else if (identifier instanceof Constraint) {\n    return identifier;\n  } else {\n    return deserializeConstraint(identifier);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n// tslint:disable-next-line:max-line-length\nimport {Constraint, MaxNorm, MaxNormArgs, MinMaxNorm, MinMaxNormArgs, NonNeg, UnitNorm, UnitNormArgs} from './constraints';\n\n/**\n * MaxNorm weight constraint.\n *\n * Constrains the weights incident to each hidden unit\n * to have a norm less than or equal to a desired value.\n *\n * References\n *       - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting\n * Srivastava, Hinton, et al.\n * 2014](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)\n */\n/** @doc {heading: 'Constraints',namespace: 'constraints'} */\nexport function maxNorm(args: MaxNormArgs): Constraint {\n  return new MaxNorm(args);\n}\n\n/**\n * Constrains the weights incident to each hidden unit to have unit norm.\n */\n/** @doc {heading: 'Constraints', namespace: 'constraints'} */\nexport function unitNorm(args: UnitNormArgs): Constraint {\n  return new UnitNorm(args);\n}\n\n/**\n * Constains the weight to be non-negative.\n */\n/** @doc {heading: 'Constraints', namespace: 'constraints'} */\nexport function nonNeg(): Constraint {\n  return new NonNeg();\n}\n\n/** @doc {heading: 'Constraints', namespace: 'constraints'} */\nexport function minMaxNorm(config: MinMaxNormArgs): Constraint {\n  return new MinMaxNorm(config);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n// TODO(huan): add layer-specific input shape types (see: https://github.com/tensorflow/tfjs-layers/pull/492)\n/** @docalias (null | number)[] */\nexport type Shape = Array<null | number>;\n\n// The tfjs-core version of DataType must stay synced with this.\nexport type DataType = 'float32'|'int32'|'bool'|'complex64'|'string';\n\n// TODO(soergel): Move the CamelCase versions back out of keras_format\n// e.g. to src/common.ts.  Maybe even duplicate *all* of these to be pedantic?\n/** @docinline */\nexport type DataFormat = 'channelsFirst'|'channelsLast';\nexport const VALID_DATA_FORMAT_VALUES = ['channelsFirst', 'channelsLast'];\n\n// These constants have a snake vs. camel distinction.\nexport type DataFormatSerialization = 'channels_first'|'channels_last';\n\n/** @docinline */\nexport type PaddingMode = 'valid'|'same'|'causal';\nexport const VALID_PADDING_MODE_VALUES = ['valid', 'same', 'causal'];\n\n/** @docinline */\nexport type PoolMode = 'max'|'avg';\nexport const VALID_POOL_MODE_VALUES = ['max', 'avg'];\n\n/** @docinline */\nexport type BidirectionalMergeMode = 'sum'|'mul'|'concat'|'ave';\nexport const VALID_BIDIRECTIONAL_MERGE_MODES = ['sum', 'mul', 'concat', 'ave'];\n\n/** @docinline */\nexport type SampleWeightMode = 'temporal';\nexport const VALID_SAMPLE_WEIGHT_MODES = ['temporal'];\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Common functions for TensorFlow.js Layers.\n */\nimport {VALID_DATA_FORMAT_VALUES, VALID_PADDING_MODE_VALUES, VALID_POOL_MODE_VALUES} from './keras_format/common';\nimport {checkStringTypeUnionValue} from './utils/generic_utils';\n\n// A map from the requested scoped name of a Tensor to the number of Tensors\n// wanting that name so far.  This allows enforcing name uniqueness by appending\n// an incrementing index, e.g. scope/name, scope/name_1, scope/name_2, etc.\nconst nameMap: Map<string, number> = new Map<string, number>();\n\nexport function checkDataFormat(value?: string): void {\n  checkStringTypeUnionValue(VALID_DATA_FORMAT_VALUES, 'DataFormat', value);\n}\n\nexport function checkPaddingMode(value?: string): void {\n  checkStringTypeUnionValue(VALID_PADDING_MODE_VALUES, 'PaddingMode', value);\n}\n\nexport function checkPoolMode(value?: string): void {\n  checkStringTypeUnionValue(VALID_POOL_MODE_VALUES, 'PoolMode', value);\n}\n\nconst _nameScopeStack: string[] = [];\nconst _nameScopeDivider = '/';\n\n/**\n * Enter namescope, which can be nested.\n */\nexport function nameScope<T>(name: string, fn: () => T): T {\n  _nameScopeStack.push(name);\n  try {\n    const val: T = fn();\n    _nameScopeStack.pop();\n    return val;\n  } catch (e) {\n    _nameScopeStack.pop();\n    throw e;\n  }\n}\n\n/**\n * Get the current namescope as a flat, concatenated string.\n */\nfunction currentNameScopePrefix(): string {\n  if (_nameScopeStack.length === 0) {\n    return '';\n  } else {\n    return _nameScopeStack.join(_nameScopeDivider) + _nameScopeDivider;\n  }\n}\n\n/**\n * Get the name a Tensor (or Variable) would have if not uniqueified.\n * @param tensorName\n * @return Scoped name string.\n */\nexport function getScopedTensorName(tensorName: string): string {\n  if (!isValidTensorName(tensorName)) {\n    throw new Error('Not a valid tensor name: \\'' + tensorName + '\\'');\n  }\n  return currentNameScopePrefix() + tensorName;\n}\n\n/**\n * Get unique names for Tensors and Variables.\n * @param scopedName The fully-qualified name of the Tensor, i.e. as produced by\n *  `getScopedTensorName()`.\n * @return A unique version of the given fully scoped name.\n *   If this is the first time that the scoped name is seen in this session,\n *   then the given `scopedName` is returned unaltered.  If the same name is\n *   seen again (producing a collision), an incrementing suffix is added to the\n *   end of the name, so it takes the form 'scope/name_1', 'scope/name_2', etc.\n */\nexport function getUniqueTensorName(scopedName: string): string {\n  if (!isValidTensorName(scopedName)) {\n    throw new Error('Not a valid tensor name: \\'' + scopedName + '\\'');\n  }\n  if (!nameMap.has(scopedName)) {\n    nameMap.set(scopedName, 0);\n  }\n  const index = nameMap.get(scopedName);\n  nameMap.set(scopedName, nameMap.get(scopedName) + 1);\n\n  if (index > 0) {\n    const result = `${scopedName}_${index}`;\n    // Mark the composed name as used in case someone wants\n    // to call getUniqueTensorName(\"name_1\").\n    nameMap.set(result, 1);\n    return result;\n  } else {\n    return scopedName;\n  }\n}\n\nconst tensorNameRegex = new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\\._\\/]*$/);\n\n/**\n * Determine whether a string is a valid tensor name.\n * @param name\n * @returns A Boolean indicating whether `name` is a valid tensor name.\n */\nexport function isValidTensorName(name: string): boolean {\n  return !!name.match(tensorNameRegex);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Math utility functions.\n *\n * This file contains some frequently used math function that operates on\n * number[] or Float32Array and return a number. Many of these functions are\n * not-so-thick wrappers around TF.js Core functions. But they offer the\n * convenience of\n * 1) not having to convert the inputs into Tensors,\n * 2) not having to convert the returned Tensors to numbers.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {scalar, Tensor1D, tensor1d} from '@tensorflow/tfjs-core';\nimport {ValueError} from '../errors';\n\nexport type ArrayTypes = Uint8Array | Int32Array | Float32Array;\n\n/**\n * Determine if a number is an integer.\n */\nexport function isInteger(x: number): boolean {\n  return x === parseInt(x.toString(), 10);\n}\n\n/**\n * Calculate the product of an array of numbers.\n * @param array The array to calculate the product over.\n * @param begin Beginning index, inclusive.\n * @param end Ending index, exclusive.\n * @return The product.\n */\nexport function arrayProd(\n  array: number[] | ArrayTypes, begin?: number, end?: number): number {\n  if (begin == null) {\n    begin = 0;\n  }\n  if (end == null) {\n    end = array.length;\n  }\n\n  let prod = 1;\n  for (let i = begin; i < end; ++i) {\n    prod *= array[i];\n  }\n  return prod;\n}\n\n/**\n * A helper function transforms the two input types to an instance of Tensor1D,\n * so the return value can be fed directly into various TF.js Core functions.\n * @param array\n */\nfunction toArray1D(array: number[] | Float32Array): Tensor1D {\n  array = Array.isArray(array) ? new Float32Array(array) : array;\n  return tensor1d(array);\n}\n\n/**\n * Compute minimum value.\n * @param array\n * @return minimum value.\n */\nexport function min(array: number[] | Float32Array): number {\n  return tfc.min(toArray1D(array)).dataSync()[0];\n}\n\n/**\n * Compute maximum value.\n * @param array\n * @return maximum value\n */\nexport function max(array: number[] | Float32Array): number {\n  return tfc.max(toArray1D(array)).dataSync()[0];\n}\n\n/**\n * Compute sum of array.\n * @param array\n * @return The sum.\n */\nexport function sum(array: number[] | Float32Array): number {\n  return tfc.sum(toArray1D(array)).dataSync()[0];\n}\n\n/**\n * Compute mean of array.\n * @param array\n * @return The mean.\n */\nexport function mean(array: number[] | Float32Array): number {\n  return sum(array) / array.length;\n}\n\n/**\n * Compute variance of array.\n * @param array\n * @return The variance.\n */\nexport function variance(array: number[] | Float32Array): number {\n  const demeaned = tfc.sub(toArray1D(array), scalar(mean(array)));\n  const sumSquare = tfc.sum(tfc.mulStrict(demeaned, demeaned)).dataSync()[0];\n  return sumSquare / array.length;\n}\n\n/**\n * Compute median of array.\n * @param array\n * @return The median value.\n */\nexport function median(array: number[] | Float32Array): number {\n  const arraySorted = array.slice().sort((a, b) => a - b);\n  const lowIdx = Math.floor((arraySorted.length - 1) / 2);\n  const highIdx = Math.ceil((arraySorted.length - 1) / 2);\n  if (lowIdx === highIdx) {\n    return arraySorted[lowIdx];\n  }\n  return (arraySorted[lowIdx] + arraySorted[highIdx]) / 2;\n}\n\n/**\n * Generate an array of integers in [begin, end).\n * @param begin Beginning integer, inclusive.\n * @param end Ending integer, exclusive.\n * @returns Range array.\n * @throws ValueError, iff `end` < `begin`.\n */\nexport function range(begin: number, end: number): number[] {\n  if (end < begin) {\n    throw new ValueError(`end (${end}) < begin (${begin}) is forbidden.`);\n  }\n  const out: number[] = [];\n  for (let i = begin; i < end; ++i) {\n    out.push(i);\n  }\n  return out;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * deeplearn.js backend.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {onesLike as coreOnesLike, scalar, Tensor, Tensor1D, tensor1d, Tensor2D, Tensor3D, Tensor4D, Tensor5D, tidy, where, zerosLike as coreZerosLike} from '@tensorflow/tfjs-core';\nimport {checkDataFormat} from '../common';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {DataFormat, Shape} from '../keras_format/common';\nimport {HasShape} from '../types';\nimport * as math_utils from '../utils/math_utils';\n\nimport {imageDataFormat} from './common';\n\n// tslint:enable\n\n/* Setting and getting backend from deeplearn.js. */\n\n// Default deeplearn.js backend is WebGL (GPU).\nlet backend: 'cpu'|'webgl' = 'webgl';\n\nexport function setBackend(requestedBackend: 'cpu'|'webgl') {\n  tfc.setBackend(requestedBackend);\n  backend = requestedBackend;\n}\n\nexport function getBackend(): 'cpu'|'webgl' {\n  return backend;\n}\n\n/**\n * Indicates whether the backend is operating symbolically.\n *\n * This function will be used to determine how to interpret user code. If\n * it returns true, calls to the backend construct a symbolic graph; if\n * it returns false, calls to the backend execute immediately.\n */\nexport function isBackendSymbolic(): boolean {\n  return false;\n}\n\n/**\n * Get the number of elements in a Tensor.\n * @param x The Tensor.\n * @return Number of elements in `x`.\n */\nexport function countParams(x: HasShape): number {\n  const shape = x.shape;\n  if (shape.length > 0) {\n    return shape.reduce((a: number, b: number) => a * b);\n  } else {\n    // Scalar.\n    return 1;\n  }\n}\n\n/**\n * Casts a tensor to a different dtype and returns it.\n * @param x Input tensor.\n * @param dtype String: 'float32'|'int32'|'bool'.\n * @returns Tensor of the specified `dtype`.\n */\nexport function cast(x: Tensor, dtype: tfc.DataType): Tensor {\n  return x.asType(dtype);\n}\n\n/**\n * Adds a 1-sized dimension at index \"axis\".\n * @param x Input tensor.\n * @param axis Position where to add the new axis.\n * @returns Result of the dimension expansion.\n */\nexport function expandDims(x: Tensor, axis = -1): Tensor {\n  const outShape = x.shape.slice();\n  if (axis < 0) {\n    axis = outShape.length + axis + 1;\n  }\n  outShape.splice(axis, 0, 1);\n  return x.reshape(outShape);\n}\n\n/**\n * Repeats a 2D tensor.\n *\n * If `x` has shape `[samples, dim]` and `n` is 2, for example, the output\n * will have shape `[samples, 2, dim]`.\n *\n * @param x Input tensor.\n * @param n Integer, number of times to repeat.\n * @returns The result of the repeat operation.\n * @throws ValueError: If input tensor is not 2D.\n */\nexport function repeat(x: Tensor, n: number): Tensor {\n  return tidy(() => {\n    if (x.shape.length !== 2) {\n      throw new ValueError(\n          `repeat() expects a rank-2 tensor, but received a ` +\n          `rank-${x.shape.length} tensor.`);\n    }\n    const y = expandDims(x, 1);\n    return tile(y, [1, n, 1]);\n  });\n}\n\n/**\n * Flatten an Tensor into 1D.\n * @param x Input tensor.\n * @return The result of the flattening `x`.\n */\nexport function flatten(x: Tensor): Tensor {\n  const newShape = [math_utils.arrayProd(x.shape)];\n  return x.reshape(newShape);\n}\n\n/**\n * Turn a nD tensor into a 2D tensor with same 0th dimension.\n * In other words, it flattens each data samples of a batch.\n *\n * @param x The tensor to flatten. The rank of this tensor is required to be 2\n *   or higher.\n * @return The result of the flattening.\n */\nexport function batchFlatten(x: Tensor): Tensor {\n  if (x.rank <= 1) {\n    throw new ValueError(\n        `batchFlatten requires a minimum rank of 2. Got rank: ${x.rank}.`);\n  }\n  const newShape = [x.shape[0], math_utils.arrayProd(x.shape, 1)];\n  return x.reshape(newShape);\n}\n\n/**\n * Do slicing along the first axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size size of the slice along the first axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function sliceAlongFirstAxis(\n    array: Tensor, start: number, size: number): Tensor {\n  return tidy(() => {\n    switch (array.rank) {\n      case 1:\n        return tfc.slice1d(array as Tensor1D, start, size);\n      case 2:\n        return tfc.slice2d(\n            array as Tensor2D, [start, 0], [size, array.shape[1]]);\n      case 3:\n        return tfc.slice3d(\n            array as Tensor3D, [start, 0, 0],\n            [size, array.shape[1], array.shape[2]]);\n      case 4:\n        return tfc.slice4d(\n            array as Tensor4D, [start, 0, 0, 0],\n            [size, array.shape[1], array.shape[2], array.shape[3]]);\n      case 5:\n        return tfc.slice(array as Tensor5D, [start, 0, 0, 0, 0], [\n          size, array.shape[1], array.shape[2], array.shape[3], array.shape[4]\n        ]);\n      case 6:\n        return tfc.slice(array, [start, 0, 0, 0, 0, 0], [\n          size, array.shape[1], array.shape[2], array.shape[3], array.shape[4],\n          array.shape[5]\n        ]);\n      default:\n        throw new ValueError(\n            `sliceAlongFirstAxis() received an unsupported tensor rank: ` +\n            `${array.rank}`);\n    }\n  });\n}\n\n/**\n * Do slicing along the last axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size size of the slice along the last axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function sliceAlongLastAxis(\n    array: Tensor, start: number, size: number): Tensor {\n  return tidy(() => {\n    switch (array.rank) {\n      case 1:\n        return tfc.slice1d(array as Tensor1D, start, size);\n      case 2:\n        return tfc.slice2d(\n            array as Tensor2D, [0, start], [array.shape[0], size]);\n      case 3:\n        return tfc.slice3d(\n            array as Tensor3D, [0, 0, start],\n            [array.shape[0], array.shape[1], size]);\n      case 4:\n        return tfc.slice4d(\n            array as Tensor4D, [0, 0, 0, start],\n            [array.shape[0], array.shape[1], array.shape[2], size]);\n      default:\n        throw new ValueError(\n            `sliceAlongLastAxis() received an unsupported tensor rank: ` +\n            `${array.rank}`);\n    }\n  });\n}\n\n/**\n * Do slicing along the sepcified axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size of the slice along the chosen axis.\n * @param choose an axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function sliceAlongAxis(\n    array: Tensor, start: number, size: number, axis: number): Tensor {\n  return tidy(() => {\n    switch (array.rank) {\n      case 1:\n        return tfc.slice1d(array as Tensor1D, start, size);\n      case 2:\n        switch (axis) {\n          case 1:\n            return sliceAlongFirstAxis(array, start, size);\n          case 2:\n            return sliceAlongLastAxis(array, start, size);\n          default:\n            throw new ValueError(\n                `The axis is not within the rank of the tensor ` +\n                `${axis}`);\n        }\n      case 3:\n        switch (axis) {\n          case 1:\n            return sliceAlongFirstAxis(array, start, size);\n          case 2:\n            return tfc.slice3d(\n                array as Tensor3D, [0, start, 0],\n                [array.shape[0], size, array.shape[2]]);\n          case 3:\n            return sliceAlongLastAxis(array, start, size);\n          default:\n            throw new ValueError(\n                `The axis is not within the rank of the tensor ` +\n                `${axis}`);\n        }\n      case 4:\n        switch (axis) {\n          case 1:\n            return sliceAlongFirstAxis(array, start, size);\n          case 2:\n            return tfc.slice4d(\n                array as Tensor4D, [0, start, 0, 0],\n                [array.shape[0], size, array.shape[2], array.shape[3]]);\n          case 3:\n            return tfc.slice4d(\n                array as Tensor4D, [0, 0, start, 0],\n                [array.shape[0], array.shape[1], size, array.shape[3]]);\n          case 4:\n            return sliceAlongLastAxis(array, start, size);\n          default:\n            throw new ValueError(\n                `The axis is not within the rank of the tensor ` +\n                `${axis}`);\n        }\n      default:\n        throw new ValueError(\n            `sliceAlongLastAxis() received an unsupported tensor rank: ` +\n            `${array.rank}`);\n    }\n  });\n}\n\n/**\n * Concatenates a list of tensors alongside the specified axis.\n * @param tensors `Array` of tensors to concatenate.\n * @param axis Concatenation axis.\n * @returns The result of the concatenation.\n */\nexport function concatenate(tensors: Tensor[], axis = -1): Tensor {\n  let rank: number;\n  if (axis < 0) {\n    rank = tensors[0].rank;\n    if (rank !== 0) {\n      axis = rank;\n    } else {\n      axis = 0;\n    }\n  }\n  if (axis === tensors[0].rank) {\n    // Porting Note: This is necessary because tfc.concat() requires axis to be\n    //   in the interval [-rank, rank).\n    axis = -1;\n  }\n  // Porting Note: Sparse concat is not supported yet.\n  return tfc.concat(tensors, axis);\n}\n\n/**\n * Concatenate two arrays along the first dimension.\n * @param a The 1st `tf.Tensor` to concatenate.\n * @param b The 2nd `tf.Tensor` to concatenate.\n * @returns Result of the concatenation.\n * @throws ValueError: If `a` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function concatAlongFirstAxis(a: Tensor, b: Tensor): Tensor {\n  switch (a.rank) {\n    case 1:\n      return tfc.concat1d([a as Tensor1D, b as Tensor1D]);\n    case 2:\n      return tfc.concat2d([a as Tensor2D, b as Tensor2D], 0);\n    case 3:\n      return tfc.concat3d([a as Tensor3D, b as Tensor3D], 0);\n    case 4:\n      return tfc.concat4d([a as Tensor4D, b as Tensor4D], 0);\n    default:\n      throw new ValueError(\n          `concatAlongFirstAxis() received an unsupported ` +\n          `tensor rank: ${a.rank}`);\n  }\n}\n\n/**\n * Creates a tensor by tiling `x` by `n`.\n * @param x A tensor.\n * @param n An Array of integers or a single integer. If an Array, the length\n *   must be the same as the number of dimensions in `x`. If a single integer,\n *   it will be treated as an Array of length 1.\n */\nexport function tile(x: Tensor, n: number|number[]): Tensor {\n  if (!Array.isArray(n)) {\n    n = [n];\n  }\n  if (x.rank !== n.length) {\n    throw new ValueError(\n        `The length of input n (${n.length}) does not match ` +\n        `the number of dimensions in input x (${x.rank})`);\n  }\n  return tfc.tile(x, n);\n}\n\n/* Creation of random tensors. */\n\n/**\n * Get a tensor with normal distribution of values.\n *\n * @param shape Shape of the tensor.\n * @param mean mean value of the normal distribution.\n * @param stddev standard deviation of the normal distribution.\n * @param dtype\n * @param seed\n * @return The normal tensor.\n */\nexport function randomNormal(\n    shape: Shape, mean = 0.0, stddev = 1.0, dtype?: 'float32'|'int32',\n    seed?: number): Tensor {\n  return tfc.randomNormal(shape, mean, stddev, dtype, seed);\n}\n\n/* Linear Algebra */\n\n/**\n * Multiply two tensors and returns the result as a tensor.\n *\n * For 2D tensors, this is equivalent to matrix multiplication (matMul).\n * For tensors of higher ranks, it follows the Theano behavior,\n * (e.g. `(2, 3) * (4, 3, 5) -> (2, 4, 5)`).  From the Theano documentation:\n *\n * For N dimensions it is a sum product over the last axis of x and the\n * second-to-last of y:\n *\n * @param a A tensor of at least rank 2.\n * @param b A tensor of at least rank 2.\n * @param activation (optional) A string identifying the activation\n *   function.\n * @return Result of the dot operation.\n */\nexport function dot(\n    a: Tensor, b: Tensor, activation?: tfc.fused.Activation,\n    bias?: Tensor): Tensor {\n  if ((a.rank < 2) || (b.rank < 2)) {\n    throw new NotImplementedError(\n        `dot requires both inputs to be rank >= 2` +\n        ` but got x shape = ${a.shape} and y shape = ${b.shape}`);\n  }\n  if (b.rank >= 3) {\n    const xLastDim = a.shape.slice(-1)[0];\n    const ySecondLastDim = b.shape.slice(-2)[0];\n    if (xLastDim !== ySecondLastDim) {\n      throw new NotImplementedError(\n          `If rank y >= 3, then the second last dim` +\n          ` of y must equal the last dim of x but got x shape = ${\n              a.shape} and ` +\n          ` y shape = ${b.shape}`);\n    }\n  }\n  // Handle basic 2D x 2D case.\n  if ((a.rank === 2) && (b.rank === 2)) {\n    const transposeA = false;\n    const transposeB = false;\n    // tfc.fused.matMul only fuses certain activation functions. Unsupported\n    // activation functions are treated as 'linear' activations, which is\n    // equivalent to a no-op.\n    return tfc.fused.matMul({\n      a,\n      b: b as Tensor2D,\n      transposeA,\n      transposeB,\n      bias: bias ? reshapeBias(a.rank, bias, imageDataFormat()) : null,\n      activation\n    });\n  } else {\n    // Reshape x into the analogous 2D Tensor.\n    const aFirstDims = a.shape.slice();  // Holds all but the last dim of x.\n    const aLastDim = aFirstDims.pop();\n    a = a.reshape([-1, aLastDim]);\n\n    // Reshape y into the analogous 2D Tensor, and keep track of the\n    // required dimensions to reproduce the output shape.\n    const bShape = b.shape.slice();\n    const bLastDim = bShape.pop();\n    const ySecondLastDim = bShape.pop();\n    const yOtherDims = [...bShape, bLastDim];\n    // permutation should be like [r-2, 0, 1, 2, ... r-4, r-3, r-1]\n    // where r is the rank of y.\n    const perm = Array.from({length: b.rank}, (_, i) => {\n      if (i === 0) {\n        return b.rank - 2;\n      } else if (i <= b.rank - 2) {\n        return i - 1;\n      }\n      return i;\n    });\n    b = b.transpose(perm).reshape([ySecondLastDim, -1]);\n\n    // Multiply x and y as 2D Tensors, and then reshape back to original.\n    const outputShape = [...aFirstDims, ...yOtherDims];\n    const transposeA = false;\n    const transposeB = false;\n    return tfc.fused\n        .matMul({\n          a,\n          b,\n          transposeA,\n          transposeB,\n          bias: bias ? reshapeBias(a.rank, bias, imageDataFormat()) : null,\n          activation\n        })\n        .reshape(outputShape);\n  }\n}\n\n/**\n * Compute the sign Tensor of an input Tensor.\n *\n * Elements of the input `tf.Tensor` that are === 0 are mapped to 0.\n * Elements of the input `tf.Tensor` that are > 0 are mapped to 1.\n * Elements of the input `tf.Tensor` that are < 0 are mapped to -1.\n *\n * @param x Input `tf.Tensor`.\n * @return The sign `tf.Tensor`.\n */\nexport function sign(x: Tensor): Tensor {\n  // TODO(cais): Move to the core.\n  return tidy(() => {\n    const zerosLikeX = coreZerosLike(x);\n    const onesLikeX = coreOnesLike(x);\n    return where(\n        tfc.equal(x, zerosLikeX), zerosLikeX,\n        where(\n            tfc.greater(x, coreZerosLike(x)), onesLikeX,\n            tfc.mul(-1, onesLikeX)));\n  });\n}\n\n/**\n * Computes the one-hot representation of an integer tensor.\n * @param indices nD integer tensor of shape\n *   `(batch_size, dim1, dim2, ... dim(n-1))`\n * @param numClasses Integer, number of classes to consider.\n * @returns (n + 1)D one hot representation of the input\n *   with shape `(batch_size, dim1, dim2, ... dim(n-1), num_classes)`\n */\nexport function oneHot(indices: Tensor, numClasses: number): Tensor {\n  return tidy(() => {\n    if (indices.rank !== 1) {\n      throw new Error(\n          'Only 1D one-hot tensors are supported in the ' +\n          'deeplearn backend, at present.');\n    }\n    indices = indices.toInt();\n    return tfc.oneHot(indices as Tensor1D, numClasses).toFloat();\n  });\n}\n\n/* Elementary math functions. */\n\n/**\n * Retrieves the elements of indices `indices` in the tensor `reference`.\n * @param reference A tensor.\n * @param indices An integer tensor of indices or an `Array` of integers.\n * @param axis Axis along which to perform the gather operation.\n * @returns The result of the gathering as a tensor.\n */\nexport function gather(\n    reference: Tensor, indices: number[]|Tensor1D, axis?: number): Tensor {\n  return tidy(() => {\n    if (Array.isArray(indices)) {\n      indices = tensor1d(indices, 'int32');\n    } else {\n      indices = indices.toInt();\n    }\n    return tfc.gather(reference, indices, axis);\n  });\n}\n\n/**\n * Element-wise square.\n * @param x Input tensor.\n * @return element-wise x^2\n */\nexport function square(x: Tensor): Tensor {\n  return tfc.mulStrict(x, x);\n}\n\n/**\n * Element-wise exponentiation.\n *\n * Porting Note: In PyKeras, `a` (the exponent) is a Python integer, which\n *   takes advatnage of the backend's (e.g., TensorFlow's) automatic\n * conversion to tensor. Here we allow `a` to be either a number or a tensor.\n *\n * @param x The base tensor.\n * @param a The exponent, tensor or number. If a number, it is rounded to the\n *   nearest integer and converted to a tensor.\n * @returns A tensor of the same shape as `x`.\n */\nexport function pow(x: Tensor, a: Tensor|number): Tensor {\n  return tidy(() => {\n    if (typeof (a) === 'number') {\n      a = scalar(Math.round(a), 'int32');\n    }\n    if (a.dtype !== 'int32') {\n      throw new NotImplementedError(\n          `Non-int32 dtype (${a.dtype}) is not supported by pow() yet`);\n    }\n    return tfc.pow(x, a);\n  });\n}\n\n/**\n * Reshapes bias tensor according to rank of x.\n */\nfunction reshapeBias(xRank: number, bias: Tensor, dataFormat: string) {\n  const biasShape = bias.shape;\n\n  if (bias.rank !== 1 && bias.rank !== xRank) {\n    throw new ValueError(\n        `Unexpected bias dimensions: ${bias.rank}` +\n        `; expected it to be 1 or ${xRank}`);\n  }\n\n  if (xRank === 5) {\n    if (dataFormat === 'channelsFirst') {\n      if (biasShape.length === 1) {\n        return bias.reshape([1, biasShape[0], 1, 1, 1]);\n      } else {\n        return bias.reshape(\n            [1, biasShape[3], biasShape[0], biasShape[1], biasShape[2]]);\n      }\n    } else if (dataFormat === 'channelsLast') {\n      if (biasShape.length === 1) {\n        return bias.reshape([1, 1, 1, 1, biasShape[0]]);\n      } else {\n        return bias.reshape([1].concat(biasShape));\n      }\n    }\n  } else if (xRank === 4) {\n    if (dataFormat === 'channelsFirst') {\n      if (biasShape.length === 1) {\n        return bias.reshape([1, biasShape[0], 1, 1]);\n      } else {\n        return bias.reshape([1, biasShape[2], biasShape[0], biasShape[1]]);\n      }\n    } else if (dataFormat === 'channelsLast') {\n      if (biasShape.length === 1) {\n        return bias.reshape([1, 1, 1, biasShape[0]]);\n      } else {\n        return bias.reshape([1].concat(biasShape));\n      }\n    }\n  } else if (xRank === 3) {\n    if (dataFormat === 'channelsFirst') {\n      if (biasShape.length === 1) {\n        return bias.reshape([1, biasShape[0], 1]);\n      } else {\n        return bias.reshape([1, biasShape[1], biasShape[0]]);\n      }\n    } else if (dataFormat === 'channelsLast') {\n      if (biasShape.length === 1) {\n        return bias.reshape([1, 1, biasShape[0]]);\n      } else {\n        return bias.reshape([1].concat(biasShape));\n      }\n    }\n  } else if (xRank < 3) {\n    return bias;\n  }\n  throw new ValueError(`Unsupported input rank by biasAdd: ${bias.rank}`);\n}\n\n/* Neural-network operations. */\n\n/**\n * Add a bias to a tensor.\n *\n * @param x The tensor to add the bias to.\n * @param bias The bias to add to `x`. Must be 1D or the same rank as `x`.\n * @return Result of the bias adding.\n * @throws ValueError: If the rank of `bias` is incorrect.\n */\nexport function biasAdd(\n    x: Tensor, bias: Tensor, dataFormat?: DataFormat): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n\n    return x.add(reshapeBias(x.rank, bias, dataFormat));\n  });\n}\n\n/**\n * Exponential linear unit (ELU).\n * @param x A tensor or variable to compute the activation function for.\n * @param alpha: A scalar, a scaling factor for the negative section.\n * @return Output of the ELU operation.\n */\nexport function elu(x: Tensor, alpha = 1): Tensor {\n  // TODO(cais): Add support for alpha values other than 1.\n  if (alpha !== 1) {\n    throw new NotImplementedError(\n        `Support for alpha values other than 1 (${alpha}) is not implemented ` +\n        `yet.`);\n  }\n  return tfc.elu(x);\n}\n\n/**\n * Softsign of a tensor.\n *\n * Defined as x / (abs(x) + 1), element-wise.\n *\n * @param x: Input.\n * @returns Output.\n */\nexport function softsign(x: Tensor): Tensor {\n  return tidy(() => tfc.div(x, tfc.abs(x).add(1)));\n}\n\n/**\n * Sets entries in `x` to zero at random, while scaling the entire tensor.\n *\n * @param x input tensor.\n * @param level fraction of the entries in the tensor that will be set to 0.\n * @param noiseShape shape of randomly generated keep/drop flags, must be\n *   broadcastable to the shape of `x`. Optional.\n * @param seed random seed to ensure determinism. Optional.\n * @returns Result of the dropout operation.\n */\nexport function dropout(\n    x: Tensor, level: number, noiseShape?: number[], seed?: number): Tensor {\n  return tidy(() => tfc.dropout(x, level, noiseShape, seed));\n}\n\n/**\n * Element-wise, segment-wise linear approximation of sigmoid.\n *\n * Returns `0.` if `x < -2.5`, `1.` if `x > 2.5`.\n * In `-2.5 <= x <= 2.5`, returns `0.2 * x + 0.5`.\n *\n * @param x Input tensor.\n * @returns Output tensor.\n */\nexport function hardSigmoid(x: Tensor): Tensor {\n  return tidy(() => {\n    const y = tfc.add(.5, tfc.mul(.2, x));\n    return tfc.clipByValue(y, 0, 1);\n  });\n}\n\n/**\n * Invoke `x` in the training phase, and `alt` otherwise.\n *\n * Porting Note: We do not create placeholder tensors for the `training`\n * boolean flag here, because there is no such thing in the TF.js imperative\n * backend.\n *\n * @param x The function to invoke iff `training` is `true`.\n * @param alt The function to invoke iff `training` is `false`.\n * @param training Boolean flag for whether training phase is active.\n * @returns The return value of `x()` if `training` is `true`, or the return\n *   value of `alt()` if `training` is `false`.\n */\nexport function inTrainPhase<T>(x: () => T, alt: () => T, training = false): T {\n  return training ? x() : alt();\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {BaseSerialization} from './types';\n\n// TODO(soergel): Move the CamelCase versions back out of keras_format\n// e.g. to src/common.ts.  Maybe even duplicate *all* of these to be pedantic?\n/** @docinline */\nexport type FanMode = 'fanIn'|'fanOut'|'fanAvg';\nexport const VALID_FAN_MODE_VALUES = ['fanIn', 'fanOut', 'fanAvg'];\n\n// These constants have a snake vs. camel distinction.\nexport type FanModeSerialization = 'fan_in'|'fan_out'|'fan_avg';\n\n/** @docinline */\nexport type Distribution = 'normal'|'uniform'|'truncatedNormal';\nexport const VALID_DISTRIBUTION_VALUES =\n    ['normal', 'uniform', 'truncatedNormal'];\n// These constants have a snake vs. camel distinction.\nexport type DistributionSerialization = 'normal'|'uniform'|'truncated_normal';\n\nexport type ZerosSerialization = BaseSerialization<'Zeros', {}>;\n\nexport type OnesSerialization = BaseSerialization<'Ones', {}>;\n\nexport type ConstantConfig = {\n  value: number;\n};\n\nexport type ConstantSerialization =\n    BaseSerialization<'Constant', ConstantConfig>;\n\nexport type RandomNormalConfig = {\n  mean?: number;\n  stddev?: number;\n  seed?: number;\n};\n\nexport type RandomNormalSerialization =\n    BaseSerialization<'RandomNormal', RandomNormalConfig>;\n\nexport type RandomUniformConfig = {\n  minval?: number;\n  maxval?: number;\n  seed?: number;\n};\n\nexport type RandomUniformSerialization =\n    BaseSerialization<'RandomUniform', RandomUniformConfig>;\n\nexport type TruncatedNormalConfig = {\n  mean?: number;\n  stddev?: number;\n  seed?: number;\n};\n\nexport type TruncatedNormalSerialization =\n    BaseSerialization<'TruncatedNormal', TruncatedNormalConfig>;\n\nexport type VarianceScalingConfig = {\n  scale?: number;\n\n  mode?: FanModeSerialization;\n  distribution?: DistributionSerialization;\n  seed?: number;\n};\n\nexport type VarianceScalingSerialization =\n    BaseSerialization<'VarianceScaling', VarianceScalingConfig>;\n\nexport type OrthogonalConfig = {\n  seed?: number;\n  gain?: number;\n};\n\nexport type OrthogonalSerialization =\n    BaseSerialization<'Orthogonal', OrthogonalConfig>;\n\nexport type IdentityConfig = {\n  gain?: number;\n};\n\nexport type IdentitySerialization =\n    BaseSerialization<'Identity', IdentityConfig>;\n\n// Update initializerClassNames below in concert with this.\nexport type InitializerSerialization = ZerosSerialization|OnesSerialization|\n    ConstantSerialization|RandomUniformSerialization|RandomNormalSerialization|\n    TruncatedNormalSerialization|IdentitySerialization|\n    VarianceScalingSerialization|OrthogonalSerialization;\n\nexport type InitializerClassName = InitializerSerialization['class_name'];\n\n// We can't easily extract a string[] from the string union type, but we can\n// recapitulate the list, enforcing at compile time that the values are valid\n// and that we have the right number of them.\n\n/**\n * A string array of valid Initializer class names.\n *\n * This is guaranteed to match the `InitializerClassName` union type.\n */\nexport const initializerClassNames: InitializerClassName[] = [\n  'Zeros', 'Ones', 'Constant', 'RandomNormal', 'RandomUniform',\n  'TruncatedNormal', 'VarianceScaling', 'Orthogonal', 'Identity'\n];\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {DataType, eye, linalg, mul, ones, randomUniform, scalar, serialization, Tensor, Tensor2D, tidy, truncatedNormal, zeros} from '@tensorflow/tfjs-core';\n\nimport * as K from './backend/tfjs_backend';\nimport {checkDataFormat} from './common';\nimport {NotImplementedError, ValueError} from './errors';\nimport {DataFormat, Shape} from './keras_format/common';\nimport {Distribution, FanMode, VALID_DISTRIBUTION_VALUES, VALID_FAN_MODE_VALUES} from './keras_format/initializer_config';\nimport {checkStringTypeUnionValue, deserializeKerasObject, serializeKerasObject} from './utils/generic_utils';\nimport {arrayProd} from './utils/math_utils';\n\nexport function checkFanMode(value?: string): void {\n  checkStringTypeUnionValue(VALID_FAN_MODE_VALUES, 'FanMode', value);\n}\n\nexport function checkDistribution(value?: string): void {\n  checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES, 'Distribution', value);\n}\n\n/**\n * Initializer base class.\n *\n * @doc {\n *   heading: 'Initializers', subheading: 'Classes', namespace: 'initializers'}\n */\nexport abstract class Initializer extends serialization.Serializable {\n  public fromConfigUsesCustomObjects(): boolean {\n    return false;\n  }\n  /**\n   * Generate an initial value.\n   * @param shape\n   * @param dtype\n   * @return The init value.\n   */\n  abstract apply(shape: Shape, dtype?: DataType): Tensor;\n\n  getConfig(): serialization.ConfigDict {\n    return {};\n  }\n}\n\nexport class Zeros extends Initializer {\n  /** @nocollapse */\n  static className = 'Zeros';\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return zeros(shape, dtype);\n  }\n}\nserialization.registerClass(Zeros);\n\nexport class Ones extends Initializer {\n  /** @nocollapse */\n  static className = 'Ones';\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return ones(shape, dtype);\n  }\n}\nserialization.registerClass(Ones);\n\nexport interface ConstantArgs {\n  /** The value for each element in the variable. */\n  value: number;\n}\n\nexport class Constant extends Initializer {\n  /** @nocollapse */\n  static className = 'Constant';\n  private value: number;\n  constructor(args: ConstantArgs) {\n    super();\n    if (typeof args !== 'object') {\n      throw new ValueError(\n          `Expected argument of type ConstantConfig but got ${args}`);\n    }\n    if (args.value === undefined) {\n      throw new ValueError(`config must have value set but got ${args}`);\n    }\n    this.value = args.value;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return tidy(() => mul(scalar(this.value), ones(shape, dtype)));\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {\n      value: this.value,\n    };\n  }\n}\nserialization.registerClass(Constant);\n\nexport interface RandomUniformArgs {\n  /** Lower bound of the range of random values to generate. */\n  minval?: number;\n  /** Upper bound of the range of random values to generate. */\n  maxval?: number;\n  /** Used to seed the random generator. */\n  seed?: number;\n}\n\nexport class RandomUniform extends Initializer {\n  /** @nocollapse */\n  static className = 'RandomUniform';\n  readonly DEFAULT_MINVAL = -0.05;\n  readonly DEFAULT_MAXVAL = 0.05;\n  private minval: number;\n  private maxval: number;\n  private seed: number;\n\n  constructor(args: RandomUniformArgs) {\n    super();\n    this.minval = args.minval || this.DEFAULT_MINVAL;\n    this.maxval = args.maxval || this.DEFAULT_MAXVAL;\n    this.seed = args.seed;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return randomUniform(shape, this.minval, this.maxval, dtype);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {minval: this.minval, maxval: this.maxval, seed: this.seed};\n  }\n}\nserialization.registerClass(RandomUniform);\n\nexport interface RandomNormalArgs {\n  /** Mean of the random values to generate. */\n  mean?: number;\n  /** Standard deviation of the random values to generate. */\n  stddev?: number;\n  /** Used to seed the random generator. */\n  seed?: number;\n}\n\nexport class RandomNormal extends Initializer {\n  /** @nocollapse */\n  static className = 'RandomNormal';\n  readonly DEFAULT_MEAN = 0.;\n  readonly DEFAULT_STDDEV = 0.05;\n  private mean: number;\n  private stddev: number;\n  private seed: number;\n\n  constructor(args: RandomNormalArgs) {\n    super();\n    this.mean = args.mean || this.DEFAULT_MEAN;\n    this.stddev = args.stddev || this.DEFAULT_STDDEV;\n    this.seed = args.seed;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    dtype = dtype || 'float32';\n    if (dtype !== 'float32' && dtype !== 'int32') {\n      throw new NotImplementedError(\n          `randomNormal does not support dType ${dtype}.`);\n    }\n\n    return K.randomNormal(shape, this.mean, this.stddev, dtype, this.seed);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {mean: this.mean, stddev: this.stddev, seed: this.seed};\n  }\n}\nserialization.registerClass(RandomNormal);\n\nexport interface TruncatedNormalArgs {\n  /** Mean of the random values to generate. */\n  mean?: number;\n  /** Standard deviation of the random values to generate. */\n  stddev?: number;\n  /** Used to seed the random generator. */\n  seed?: number;\n}\n\nexport class TruncatedNormal extends Initializer {\n  /** @nocollapse */\n  static className = 'TruncatedNormal';\n\n  readonly DEFAULT_MEAN = 0.;\n  readonly DEFAULT_STDDEV = 0.05;\n  private mean: number;\n  private stddev: number;\n  private seed: number;\n\n  constructor(args: TruncatedNormalArgs) {\n    super();\n    this.mean = args.mean || this.DEFAULT_MEAN;\n    this.stddev = args.stddev || this.DEFAULT_STDDEV;\n    this.seed = args.seed;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    dtype = dtype || 'float32';\n    if (dtype !== 'float32' && dtype !== 'int32') {\n      throw new NotImplementedError(\n          `truncatedNormal does not support dType ${dtype}.`);\n    }\n    return truncatedNormal(shape, this.mean, this.stddev, dtype, this.seed);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {mean: this.mean, stddev: this.stddev, seed: this.seed};\n  }\n}\nserialization.registerClass(TruncatedNormal);\n\nexport interface IdentityArgs {\n  /**\n   * Multiplicative factor to apply to the identity matrix.\n   */\n  gain?: number;\n}\n\nexport class Identity extends Initializer {\n  /** @nocollapse */\n  static className = 'Identity';\n  private gain: number;\n  constructor(args: IdentityArgs) {\n    super();\n    this.gain = args.gain != null ? args.gain : 1.0;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return tidy(() => {\n      if (shape.length !== 2 || shape[0] !== shape[1]) {\n        throw new ValueError(\n            'Identity matrix initializer can only be used for' +\n            ' 2D square matrices.');\n      } else {\n        return mul(this.gain, eye(shape[0]));\n      }\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {gain: this.gain};\n  }\n}\nserialization.registerClass(Identity);\n\n/**\n * Computes the number of input and output units for a weight shape.\n * @param shape Shape of weight.\n * @param dataFormat data format to use for convolution kernels.\n *   Note that all kernels in Keras are standardized on the\n *   CHANNEL_LAST ordering (even when inputs are set to CHANNEL_FIRST).\n * @return An length-2 array: fanIn, fanOut.\n */\nfunction computeFans(\n    shape: Shape, dataFormat: DataFormat = 'channelsLast'): number[] {\n  let fanIn: number;\n  let fanOut: number;\n  checkDataFormat(dataFormat);\n  if (shape.length === 2) {\n    fanIn = shape[0];\n    fanOut = shape[1];\n  } else if ([3, 4, 5].indexOf(shape.length) !== -1) {\n    if (dataFormat === 'channelsFirst') {\n      const receptiveFieldSize = arrayProd(shape, 2);\n      fanIn = shape[1] * receptiveFieldSize;\n      fanOut = shape[0] * receptiveFieldSize;\n    } else if (dataFormat === 'channelsLast') {\n      const receptiveFieldSize = arrayProd(shape, 0, shape.length - 2);\n      fanIn = shape[shape.length - 2] * receptiveFieldSize;\n      fanOut = shape[shape.length - 1] * receptiveFieldSize;\n    }\n  } else {\n    const shapeProd = arrayProd(shape);\n    fanIn = Math.sqrt(shapeProd);\n    fanOut = Math.sqrt(shapeProd);\n  }\n\n  return [fanIn, fanOut];\n}\n\nexport interface VarianceScalingArgs {\n  /** Scaling factor (positive float). */\n  scale?: number;\n\n  /** Fanning mode for inputs and outputs. */\n  mode?: FanMode;\n\n  /** Probabilistic distribution of the values. */\n  distribution?: Distribution;\n\n  /** Random number generator seed. */\n  seed?: number;\n}\n\nexport class VarianceScaling extends Initializer {\n  /** @nocollapse */\n  static className = 'VarianceScaling';\n  private scale: number;\n  private mode: FanMode;\n  private distribution: Distribution;\n  private seed: number;\n\n  /**\n   * Constructor of VarianceScaling.\n   * @throws ValueError for invalid value in scale.\n   */\n  constructor(args: VarianceScalingArgs) {\n    super();\n    if (args.scale < 0.0) {\n      throw new ValueError(\n          `scale must be a positive float. Got: ${args.scale}`);\n    }\n    this.scale = args.scale == null ? 1.0 : args.scale;\n    this.mode = args.mode == null ? 'fanIn' : args.mode;\n    checkFanMode(this.mode);\n    this.distribution =\n        args.distribution == null ? 'normal' : args.distribution;\n    checkDistribution(this.distribution);\n    this.seed = args.seed;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    const fans = computeFans(shape);\n    const fanIn = fans[0];\n    const fanOut = fans[1];\n    let scale = this.scale;\n    if (this.mode === 'fanIn') {\n      scale /= Math.max(1, fanIn);\n    } else if (this.mode === 'fanOut') {\n      scale /= Math.max(1, fanOut);\n    } else {\n      scale /= Math.max(1, (fanIn + fanOut) / 2);\n    }\n\n    if (this.distribution === 'normal') {\n      const stddev = Math.sqrt(scale);\n      dtype = dtype || 'float32';\n      if (dtype !== 'float32' && dtype !== 'int32') {\n        throw new NotImplementedError(\n            `${this.getClassName()} does not support dType ${dtype}.`);\n      }\n      return truncatedNormal(shape, 0, stddev, dtype, this.seed);\n    } else {\n      const limit = Math.sqrt(3 * scale);\n      return randomUniform(shape, -limit, limit, dtype);\n    }\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {\n      scale: this.scale,\n      mode: this.mode,\n      distribution: this.distribution,\n      seed: this.seed\n    };\n  }\n}\nserialization.registerClass(VarianceScaling);\n\nexport interface SeedOnlyInitializerArgs {\n  /** Random number generator seed. */\n  seed?: number;\n}\n\nexport class GlorotUniform extends VarianceScaling {\n  /** @nocollapse */\n  static className = 'GlorotUniform';\n\n  /**\n   * Constructor of GlorotUniform\n   * @param scale\n   * @param mode\n   * @param distribution\n   * @param seed\n   */\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 1.0,\n      mode: 'fanAvg',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  getClassName(): string {\n    // In Python Keras, GlorotUniform is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(GlorotUniform);\n\nexport class GlorotNormal extends VarianceScaling {\n  /** @nocollapse */\n  static className = 'GlorotNormal';\n\n  /**\n   * Constructor of GlorotNormal.\n   * @param scale\n   * @param mode\n   * @param distribution\n   * @param seed\n   */\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 1.0,\n      mode: 'fanAvg',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  getClassName(): string {\n    // In Python Keras, GlorotNormal is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(GlorotNormal);\n\nexport class HeNormal extends VarianceScaling {\n  /** @nocollapse */\n  static className = 'HeNormal';\n\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 2.0,\n      mode: 'fanIn',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  getClassName(): string {\n    // In Python Keras, HeNormal is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(HeNormal);\n\nexport class HeUniform extends VarianceScaling {\n  /** @nocollapse */\n  static className = 'HeUniform';\n\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 2.0,\n      mode: 'fanIn',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  getClassName(): string {\n    // In Python Keras, HeUniform is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(HeUniform);\n\nexport class LeCunNormal extends VarianceScaling {\n  /** @nocollapse */\n  static className = 'LeCunNormal';\n\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 1.0,\n      mode: 'fanIn',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  getClassName(): string {\n    // In Python Keras, LeCunNormal is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(LeCunNormal);\n\nexport class LeCunUniform extends VarianceScaling {\n  /** @nocollapse */\n  static className = 'LeCunNormal';\n\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 1.0,\n      mode: 'fanIn',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  getClassName(): string {\n    // In Python Keras, LeCunUniform is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(LeCunUniform);\n\nexport interface OrthogonalArgs extends SeedOnlyInitializerArgs {\n  /**\n   * Multiplicative factor to apply to the orthogonal matrix. Defaults to 1.\n   */\n  gain?: number;\n}\n\nexport class Orthogonal extends Initializer {\n  /** @nocollapse */\n  static className = 'Orthogonal';\n  readonly DEFAULT_GAIN = 1;\n  protected readonly gain: number;\n  protected readonly seed: number;\n\n  constructor(args?: OrthogonalArgs) {\n    super();\n    this.gain = args.gain == null ? this.DEFAULT_GAIN : args.gain;\n    this.seed = args.seed;\n\n    if (this.seed != null) {\n      throw new NotImplementedError(\n          'Random seed is not implemented for Orthogonal Initializer yet.');\n    }\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return tidy(() => {\n      if (shape.length !== 2) {\n        throw new NotImplementedError(\n            'The Orthogonal Initializer does not support non-2D shapes yet.');\n      }\n      if (shape[0] * shape[1] > 2000) {\n        console.warn(\n            `Orthogonal initializer is being called on a matrix with more ` +\n            `than 2000 (${shape[0] * shape[1]}) elements: ` +\n            `Slowness may result.`);\n      }\n\n      // TODO(cais): Add seed support.\n      const normalizedShape =\n          shape[0] > shape[1] ? [shape[1], shape[0]] : shape;\n      const a = K.randomNormal(normalizedShape, 0, 1, 'float32') as Tensor2D;\n      let q = linalg.gramSchmidt(a) as Tensor2D;\n      if (shape[0] > shape[1]) {\n        q = q.transpose();\n      }\n      return mul(this.gain, q);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {\n      gain: this.gain,\n      seed: this.seed,\n    };\n  }\n}\nserialization.registerClass(Orthogonal);\n\n/** @docinline */\nexport type InitializerIdentifier =\n    'constant'|'glorotNormal'|'glorotUniform'|'heNormal'|'heUniform'|'identity'|\n    'leCunNormal'|'leCunUniform'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string;\n\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport const INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP:\n    {[identifier in InitializerIdentifier]: string} = {\n      'constant': 'Constant',\n      'glorotNormal': 'GlorotNormal',\n      'glorotUniform': 'GlorotUniform',\n      'heNormal': 'HeNormal',\n      'heUniform': 'HeUniform',\n      'identity': 'Identity',\n      'leCunNormal': 'LeCunNormal',\n      'leCunUniform': 'LeCunUniform',\n      'ones': 'Ones',\n      'orthogonal': 'Orthogonal',\n      'randomNormal': 'RandomNormal',\n      'randomUniform': 'RandomUniform',\n      'truncatedNormal': 'TruncatedNormal',\n      'varianceScaling': 'VarianceScaling',\n      'zeros': 'Zeros'\n    };\n\nfunction deserializeInitializer(\n    config: serialization.ConfigDict,\n    customObjects: serialization.ConfigDict = {}): Initializer {\n  return deserializeKerasObject(\n      config, serialization.SerializationMap.getMap().classNameMap,\n      customObjects, 'initializer');\n}\n\nexport function serializeInitializer(initializer: Initializer):\n    serialization.ConfigDictValue {\n  return serializeKerasObject(initializer);\n}\n\nexport function getInitializer(identifier: InitializerIdentifier|Initializer|\n                               serialization.ConfigDict): Initializer {\n  if (typeof identifier === 'string') {\n    const className = identifier in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n        INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n        identifier;\n    /* We have four 'helper' classes for common initializers that\n    all get serialized as 'VarianceScaling' and shouldn't go through\n    the deserializeInitializer pathway. */\n    if (className === 'GlorotNormal') {\n      return new GlorotNormal();\n    } else if (className === 'GlorotUniform') {\n      return new GlorotUniform();\n    } else if (className === 'HeNormal') {\n      return new HeNormal();\n    } else if (className === 'HeUniform') {\n      return new HeUniform();\n    } else if (className === 'LeCunNormal') {\n      return new LeCunNormal();\n    } else if (className === 'LeCunUniform') {\n      return new LeCunUniform();\n    } else {\n      const config: serialization.ConfigDict = {};\n      config['className'] = className;\n      config['config'] = {};\n      return deserializeInitializer(config);\n    }\n  } else if (identifier instanceof Initializer) {\n    return identifier;\n  } else {\n    return deserializeInitializer(identifier);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n// tslint:disable-next-line:max-line-length\nimport {Constant, ConstantArgs, GlorotNormal, GlorotUniform, HeNormal, HeUniform, Identity, IdentityArgs, Initializer, LeCunNormal, LeCunUniform, Ones, Orthogonal, OrthogonalArgs, RandomNormal, RandomNormalArgs, RandomUniform, RandomUniformArgs, SeedOnlyInitializerArgs, TruncatedNormal, TruncatedNormalArgs, VarianceScaling, VarianceScalingArgs, Zeros} from './initializers';\n\n/**\n * Initializer that generates tensors initialized to 0.\n */\n/** @doc {heading: 'Initializers', namespace: 'initializers'} */\nexport function zeros(): Zeros {\n  return new Zeros();\n}\n\n/**\n * Initializer that generates tensors initialized to 1.\n */\n/** @doc {heading: 'Initializers', namespace: 'initializers'} */\nexport function ones(): Initializer {\n  return new Ones();\n}\n\n/**\n * Initializer that generates values initialized to some constant.\n */\n/** @doc {heading: 'Initializers', namespace: 'initializers'} */\nexport function constant(args: ConstantArgs): Initializer {\n  return new Constant(args);\n}\n\n/**\n * Initializer that generates random values initialized to a uniform\n * distribution.\n *\n * Values will be distributed uniformly between the configured minval and\n * maxval.\n */\n/** @doc {heading: 'Initializers', namespace: 'initializers'} */\nexport function randomUniform(args: RandomUniformArgs): Initializer {\n  return new RandomUniform(args);\n}\n\n/**\n * Initializer that generates random values initialized to a normal\n * distribution.\n */\n/** @doc {heading: 'Initializers', namespace: 'initializers'} */\nexport function randomNormal(args: RandomNormalArgs): Initializer {\n  return new RandomNormal(args);\n}\n\n/**\n * Initializer that generates random values initialized to a truncated normal.\n * distribution.\n *\n * These values are similar to values from a `RandomNormal` except that values\n * more than two standard deviations from the mean are discarded and re-drawn.\n * This is the recommended initializer for neural network weights and filters.\n */\n/** @doc {heading: 'Initializers', namespace: 'initializers'} */\nexport function truncatedNormal(args: TruncatedNormalArgs): Initializer {\n  return new TruncatedNormal(args);\n}\n\n/**\n * Initializer that generates the identity matrix.\n * Only use for square 2D matrices.\n */\n/** @doc {heading: 'Initializers', namespace: 'initializers'} */\nexport function identity(args: IdentityArgs): Initializer {\n  return new Identity(args);\n}\n\n/**\n * Initializer capable of adapting its scale to the shape of weights.\n * With distribution=NORMAL, samples are drawn from a truncated normal\n * distribution centered on zero, with `stddev = sqrt(scale / n)` where n is:\n *   - number of input units in the weight tensor, if mode = FAN_IN.\n *   - number of output units, if mode = FAN_OUT.\n *   - average of the numbers of input and output units, if mode = FAN_AVG.\n * With distribution=UNIFORM,\n * samples are drawn from a uniform distribution\n * within [-limit, limit], with `limit = sqrt(3 * scale / n)`.\n */\n/** @doc {heading: 'Initializers',namespace: 'initializers'} */\nexport function varianceScaling(config: VarianceScalingArgs): Initializer {\n  return new VarianceScaling(config);\n}\n\n/**\n * Glorot uniform initializer, also called Xavier uniform initializer.\n * It draws samples from a uniform distribution within [-limit, limit]\n * where `limit` is `sqrt(6 / (fan_in + fan_out))`\n * where `fan_in` is the number of input units in the weight tensor\n * and `fan_out` is the number of output units in the weight tensor\n *\n * Reference:\n *   Glorot & Bengio, AISTATS 2010\n *       http://jmlr.org/proceedings/papers/v9/glorot10a/glorot10a.pdf.\n */\n/** @doc {heading: 'Initializers', namespace: 'initializers'} */\nexport function glorotUniform(args: SeedOnlyInitializerArgs): Initializer {\n  return new GlorotUniform(args);\n}\n\n/**\n * Glorot normal initializer, also called Xavier normal initializer.\n * It draws samples from a truncated normal distribution centered on 0\n * with `stddev = sqrt(2 / (fan_in + fan_out))`\n * where `fan_in` is the number of input units in the weight tensor\n * and `fan_out` is the number of output units in the weight tensor.\n *\n * Reference:\n *   Glorot & Bengio, AISTATS 2010\n *       http://jmlr.org/proceedings/papers/v9/glorot10a/glorot10a.pdf\n */\n/** @doc {heading: 'Initializers', namespace: 'initializers'} */\nexport function glorotNormal(args: SeedOnlyInitializerArgs): Initializer {\n  return new GlorotNormal(args);\n}\n\n/**\n * He normal initializer.\n *\n * It draws samples from a truncated normal distribution centered on 0\n * with `stddev = sqrt(2 / fanIn)`\n * where `fanIn` is the number of input units in the weight tensor.\n *\n * Reference:\n *     He et al., http://arxiv.org/abs/1502.01852\n */\n/** @doc {heading: 'Initializers', namespace: 'initializers'} */\nexport function heNormal(args: SeedOnlyInitializerArgs): Initializer {\n  return new HeNormal(args);\n}\n\n/**\n * He uniform initializer.\n *\n * It draws samples from a uniform distribution within [-limit, limit]\n * where `limit` is `sqrt(6 / fan_in)`\n * where `fanIn` is the number of input units in the weight tensor.\n *\n * Reference:\n *     He et al., http://arxiv.org/abs/1502.01852\n */\n/** @doc {heading: 'Initializers',namespace: 'initializers'} */\nexport function heUniform(args: SeedOnlyInitializerArgs): Initializer {\n  return new HeUniform(args);\n}\n\n/**\n * LeCun normal initializer.\n *\n * It draws samples from a truncated normal distribution centered on 0\n * with `stddev = sqrt(1 / fanIn)`\n * where `fanIn` is the number of input units in the weight tensor.\n *\n * References:\n *   [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\n *   [Efficient Backprop](http://yann.lecun.com/exdb/publis/pdf/lecun-98b.pdf)\n */\n/** @doc {heading: 'Initializers', namespace: 'initializers'} */\nexport function leCunNormal(args: SeedOnlyInitializerArgs): Initializer {\n  return new LeCunNormal(args);\n}\n\n/**\n * LeCun uniform initializer.\n *\n * It draws samples from a uniform distribution in the interval\n * `[-limit, limit]` with `limit = sqrt(3 / fanIn)`,\n * where `fanIn` is the number of input units in the weight tensor.\n */\n/** @doc {heading: 'Initializers', namespace: 'initializers'} */\nexport function leCunUniform(args: SeedOnlyInitializerArgs): Initializer {\n  return new LeCunUniform(args);\n}\n\n/**\n * Initializer that generates a random orthogonal matrix.\n *\n * Reference:\n * [Saxe et al., http://arxiv.org/abs/1312.6120](http://arxiv.org/abs/1312.6120)\n */\n/** @doc {heading: 'Initializers', namespace: 'initializers'} */\nexport function orthogonal(args: OrthogonalArgs): Initializer {\n  return new Orthogonal(args);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Utilities related to persistent state in the backend.\n */\n\n/**\n * An ID to track `tf.SymbolicTensor`s and derived classes.\n * Required in different places in engine/topology.ts to identify unique\n * tensors.\n */\nlet _nextUniqueTensorId = 0;\n\nexport function getNextUniqueTensorId(): number {\n  return _nextUniqueTensorId++;\n}\n\nconst _uidPrefixes: {[prefix: string]: number} = {};\n\n/**\n * Provides a unique UID given a string prefix.\n *\n * @param prefix\n */\nexport function getUid(prefix = ''): string {\n  if (!(prefix in _uidPrefixes)) {\n    _uidPrefixes[prefix] = 0;\n  }\n  _uidPrefixes[prefix] += 1;\n  return prefix + _uidPrefixes[prefix].toString();\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: utils/generic_utils.py */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\nimport {ValueError} from '../errors';\nimport {Shape} from '../keras_format/common';\n// tslint:enable\n\n/**\n * Determine whether the input is an Array of Shapes.\n */\nexport function isArrayOfShapes(x: Shape|Shape[]): boolean {\n  return Array.isArray(x) && Array.isArray(x[0]);\n}\n\n/**\n * Special case of normalizing shapes to lists.\n *\n * @param x A shape or list of shapes to normalize into a list of Shapes.\n * @return A list of Shapes.\n */\nexport function normalizeShapeList(x: Shape|Shape[]): Shape[] {\n  if (x.length === 0) {\n    return [];\n  }\n  if (!Array.isArray(x[0])) {\n    return [x] as Shape[];\n  }\n  return x as Shape[];\n}\n\n/**\n * Helper function to obtain exactly one Tensor.\n * @param xs: A single `tf.Tensor` or an `Array` of `tf.Tensor`s.\n * @return A single `tf.Tensor`. If `xs` is an `Array`, return the first one.\n * @throws ValueError: If `xs` is an `Array` and its length is not 1.\n */\nexport function getExactlyOneTensor(xs: Tensor|Tensor[]): Tensor {\n  let x: Tensor;\n  if (Array.isArray(xs)) {\n    if (xs.length !== 1) {\n      throw new ValueError(`Expected Tensor length to be 1; got ${xs.length}`);\n    }\n    x = xs[0];\n  } else {\n    x = xs;\n  }\n  return x;\n}\n\n/**\n * Helper function to obtain exactly on instance of Shape.\n *\n * @param shapes Input single `Shape` or Array of `Shape`s.\n * @returns If input is a single `Shape`, return it unchanged. If the input is\n *   an `Array` containing exactly one instance of `Shape`, return the instance.\n *   Otherwise, throw a `ValueError`.\n * @throws ValueError: If input is an `Array` of `Shape`s, and its length is not\n *   1.\n */\nexport function getExactlyOneShape(shapes: Shape|Shape[]): Shape {\n  if (Array.isArray(shapes) && Array.isArray(shapes[0])) {\n    if (shapes.length === 1) {\n      shapes = shapes as Shape[];\n      return shapes[0];\n    } else {\n      throw new ValueError(`Expected exactly 1 Shape; got ${shapes.length}`);\n    }\n  } else {\n    return shapes as Shape;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {LayerVariable} from '../variables';\n\n/**\n * Count the elements in an Array of LayerVariables.\n *\n * @param weights: The LayerVariables of which the constituent numbers are to\n *   be counted.\n * @returns A count of the elements in all the LayerVariables\n */\nexport function countParamsInWeights(weights: LayerVariable[]): number {\n  let count = 0;\n  for (const weight of weights) {\n    if (weight.shape.length === 0) {\n      count += 1;\n    } else {\n      count += weight.shape.reduce((a, b) => a * b);\n    }\n  }\n  return count;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {DataType, Tensor, variableGrads} from '@tensorflow/tfjs-core';\n\nimport {getNextUniqueTensorId} from './backend/state';\nimport {getScopedTensorName, getUniqueTensorName} from './common';\nimport {Constraint} from './constraints';\nimport {NotImplementedError} from './errors';\nimport {Shape} from './keras_format/common';\nimport {HasShape} from './types';\n\nconst DEFAULT_VARIABLE_NAME_PREFIX = 'Variable';\n\n/**\n * A `tf.layers.LayerVariable` is similar to a `tf.Tensor` in that it has a\n * dtype and shape, but its value is mutable.  The value is itself represented\n * as a`tf.Tensor`, and can be read with the `read()` method and updated with\n * the `write()` method.\n */\nexport class LayerVariable {\n  readonly dtype: DataType;\n  readonly shape: Shape;\n\n  readonly id: number;\n  // The fully scoped name of this Variable, including a unique suffix if needed\n  readonly name: string;\n  // The originally requested fully scoped name of this Variable, not including\n  // any unique suffix.  This may be needed when restoring weights because this\n  // original name is used as a key.\n  readonly originalName: string;\n  private trainable_: boolean;\n\n  protected readonly val: tfc.Variable;\n  readonly constraint: Constraint;\n  /**\n   * Construct Variable from a `tf.Tensor`.\n   *\n   * If not explicitly named, the Variable will be given a name with the\n   * prefix 'Variable'. Variable names are unique. In the case of name\n   * collision, suffixies '_<num>' will be added to the name.\n   *\n   * @param val Initial value of the Variable.\n   * @param name Name of the variable. If `null` or `undefined` is provided, it\n   *   will default a name with the prefix 'Variable'.\n   * @param constraint Optional, projection function to be applied to the\n   * variable after optimize updates\n   * @throws ValueError if `name` is `null` or `undefined`.\n   */\n  constructor(\n      val: Tensor, dtype: DataType = 'float32',\n      name = DEFAULT_VARIABLE_NAME_PREFIX, trainable = true,\n      constraint: Constraint = null) {\n    this.dtype = dtype == null ? 'float32' : dtype;\n    this.shape = val.shape;\n    this.id = getNextUniqueTensorId();\n\n    name = name == null ? DEFAULT_VARIABLE_NAME_PREFIX : name;\n    this.originalName = getScopedTensorName(name);\n    this.name = getUniqueTensorName(this.originalName);\n\n    this.trainable_ = trainable;\n    this.constraint = constraint;\n\n    this.val = tfc.variable(val, this.trainable_, this.name, this.dtype);\n  }\n\n  /**\n   * Get a snapshot of the Variable's value.\n   *\n   * The returned value is a snapshot of the Variable's value at the time of\n   * the invocation. Future mutations in the value of the tensor will only\n   * be reflected by future calls to this method.\n   */\n  read(): Tensor {\n    this.assertNotDisposed();\n    return this.val;\n  }\n\n  /**\n   * Update the value of the Variable.\n   *\n   * @param newVal: The new value to update to. Must be consistent with the\n   *   dtype and shape of the Variable.\n   * @return This Variable.\n   */\n  write(newVal: Tensor) {\n    // TODO(cais): Once  TF.js Core supports Tensor.dtype, check dtype match.\n    this.assertNotDisposed();\n    checkShapesMatch(this.val, newVal);\n    // Skip updating if this is the exact same tensor.\n    if (this.val.id !== newVal.id) {\n      this.val.assign(newVal);\n      if (this.constraint != null) {\n        this.val.assign(this.constraint.apply(this.val));\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Dispose this LayersVariable instance from memory.\n   */\n  dispose(): void {\n    this.assertNotDisposed();\n    this.val.dispose();\n  }\n\n  protected assertNotDisposed(): void {\n    if (this.val.isDisposed) {\n      throw new Error(`LayersVariable ${this.name} is already disposed.`);\n    }\n  }\n\n  get trainable(): boolean {\n    return this.trainable_;\n  }\n\n  set trainable(trainable: boolean) {\n    this.trainable_ = trainable;\n    this.val.trainable = trainable;\n  }\n}\n\nfunction checkShapesMatch(x: HasShape, y: HasShape): void {\n  if (x.shape.toString() !== y.shape.toString()) {\n    throw new Error(\n        'Shape mismatch: ' + JSON.stringify(x.shape) + ' vs. ' +\n        JSON.stringify(y.shape));\n  }\n}\n\n/**\n * Create a Variable.\n * @param x The initial value of the `Variable`.\n * @param dtype optional, the type of the variable.\n * @param name optional, the name of the variable, default provided by\n * Variable.\n * @param constraint optional, a constraint to be applied after every update.\n * @return The newly instantiated `Variable`.\n */\nexport function variable(\n    x: Tensor, dtype?: DataType, name?: string,\n    constraint?: Constraint): LayerVariable {\n  return new LayerVariable(x, dtype, name, true, constraint);\n}\n\n/**\n * Instantiates an all-zeros Variable and returns it.\n *\n * @param shape Shape of the tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return An all-zero Variable.\n */\nexport function zerosVariable(\n    shape: Shape, dtype?: DataType, name?: string): LayerVariable {\n  // TODO(cais): Implement logic for dtype.\n  return new LayerVariable(tfc.zeros(shape), dtype, name);\n}\n\n/**\n * Instantiates an all-zeros tensor of the same shape as another tensor.\n *\n * @param x The other tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return A newly instantiated Variable.\n */\nexport function zerosLike(\n    x: Tensor, dtype?: DataType, name?: string): LayerVariable {\n  return new LayerVariable(tfc.zerosLike(x), dtype, name);\n}\n\n/**\n * Instantiates an all-ones tensor and returns it.\n *\n * @param shape Shape of the tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return An all-ones Variable.\n */\nexport function onesVariable(\n    shape: Shape, dtype?: DataType, name?: string): LayerVariable {\n  // TODO(cais): Implement logic for dtype.\n  const allocated = tfc.ones(shape);\n  return new LayerVariable(allocated, dtype, name);\n}\n\n/**\n * Instantiates an all-ones tensor of the same shape as another tensor.\n *\n * @param x The other tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return A newly instantiated Variable.\n */\nexport function onesLike(\n    x: Tensor, dtype?: DataType, name?: string): LayerVariable {\n  const allocated = tfc.onesLike(x);\n  return new LayerVariable(allocated, dtype, name);\n}\n\n/**\n * Instantiate an identity matrix and returns it, as a Variable\n *\n * @param size Number of rows/columns.\n * @param dtype Data type of returned Variable.\n * @param name Name of returned Variable.\n * @return A Variable, an identity matrix.\n */\nexport function eyeVariable(\n    size: number, dtype?: DataType, name?: string): LayerVariable {\n  return new LayerVariable(tfc.eye(size), dtype, name);\n}\n\n/**\n * Get a Variable with uniform distribution of values.\n * @param shape Shape of the tensor.\n * @param minval Lower bound of the uniform distribution.\n * @param maxval Upper bound of the uniform distribution.\n * @param dtype\n * @param seed\n * @param name Optional name.\n * @return The uniform-random Variable.\n */\nexport function randomUniformVariable(\n    shape: Shape, minval: number, maxval: number, dtype?: DataType,\n    seed?: number, name = 'randomUniform'): LayerVariable {\n  return new LayerVariable(\n      tfc.randomUniform(shape, minval, maxval, dtype), dtype, name);\n}\n\n/**\n * Get a Variable with truncated-normal distribution of values.\n * @param shape Shape of the tensor.\n * @param mean mean value of the normal distribution.\n * @param stddev standard deviation of the normal distribution.\n * @param dtype\n * @param seed\n * @param name Optional name.\n * @return The truncated-normal-random Variable.\n */\nexport function truncatedNormalVariable(\n    shape: Shape, mean = 0.0, stddev = 1.0, dtype?: DataType, seed?: number,\n    name = 'truncatedNormal'): LayerVariable {\n  // TODO(cais): Implement logic for dtype and seed once they are supported\n  // by deeplearn.js.\n  dtype = dtype || 'float32';\n  if (dtype !== 'float32' && dtype !== 'int32') {\n    throw new NotImplementedError(\n        `randomNormal does not support dType ${dtype}.`);\n  }\n  return new LayerVariable(\n      tfc.truncatedNormal(shape, mean, stddev, dtype, seed), dtype, name);\n}\n/**\n * Get a Variable with normal distribution of values.\n * @param shape Shape of the tensor.\n * @param mean mean value of the normal distribution.\n * @param stddev standard deviation of the normal distribution.\n * @param dtype\n * @param seed\n * @param name Optional name.\n * @return The truncated-normal-random Variable.\n */\nexport function randomNormalVariable(\n    shape: Shape, mean = 0.0, stddev = 1.0, dtype?: DataType, seed?: number,\n    name = 'randomNormal'): LayerVariable {\n  dtype = dtype || 'float32';\n  if (dtype !== 'float32' && dtype !== 'int32') {\n    throw new NotImplementedError(\n        `randomNormalVariable does not support dType ${dtype}.`);\n  }\n  return new LayerVariable(\n      tfc.randomNormal(shape, mean, stddev, dtype, seed), dtype, name);\n}\n\n/**\n * Update the value of a Variable.\n * @param x The Variable to be updated.\n * @param xNew The new value to update to.\n * @return The Variable updated.\n */\nexport function update(x: LayerVariable, xNew: Tensor): LayerVariable {\n  return x.write(xNew);\n}\n\n/**\n * Update the value of a Variable by adding an increment.\n * @param x The Variable to be updated.\n * @param increment The incrment to add to `x`.\n * @return The Variable updated.\n */\nexport function updateAdd(x: LayerVariable, increment: Tensor): LayerVariable {\n  return x.write(tfc.add(x.read(), increment));\n}\n\n/**\n * Update the value of a Variable by subtracting a decrement.\n * @param x The Variable to be updated.\n * @param decrement The decrement to subtract from `x`.\n * @return The Variable updated.\n */\nexport function updateSub(x: LayerVariable, decrement: Tensor): LayerVariable {\n  return x.write(tfc.sub(x.read(), decrement));\n}\n\n/**\n * Get the values of an array of Variables.\n *\n * @param tensors An `Array` of `Variable`s to get the values of.\n * @return The values of the inputs, as an `Array` of`tf.Tensor`s.\n */\nexport function batchGetValue(xs: LayerVariable[]): Tensor[] {\n  return xs.map(x => x.read());\n}\n\n/**\n * Update the value of multiple Variables at once.\n *\n * @param variablesAndValues An `Array`, each element is of type\n *   [Variable, Tensor]. The first item is the\n *   `Variable` of which the value is to be updated. The second item\n *   carries the new value.\n */\nexport function batchSetValue(\n    variablesAndValues: Array<[LayerVariable, Tensor]>): void {\n  variablesAndValues.forEach(variableAndValue => {\n    const variable: LayerVariable = variableAndValue[0];\n    variable.write(variableAndValue[1]);\n  });\n}\n\n/**\n * Returns the gradients of `variables` w.r.t. the return value of `lossFn`.\n * @param lossFn A function which returns a Scalar to be used as the function\n *   value (i.e., numerator) for differentiation.\n * @param variables List of variables to be used as the independent variables\n *   (i.e., denominator) for differentiation.\n * @returns An Array of gradients tensors.\n */\nexport function gradients(\n    lossFn: () => tfc.Scalar, variables: LayerVariable[]): Tensor[] {\n  // TODO(cais): The return type signature can be simplified if deeplearn makes\n  //   the corresponding type public.\n  const variableList =\n      variables.map(variable => variable.read() as tfc.Variable);\n  const valudAndGrads = variableGrads(lossFn, variableList);\n  return variables.map(variable => valudAndGrads.grads[variable.name]);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/engine/topology.py */\n\nimport {DataType, Scalar, serialization, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {getNextUniqueTensorId, getUid} from '../backend/state';\nimport {getScopedTensorName, getUniqueTensorName, nameScope} from '../common';\nimport {Constraint} from '../constraints';\nimport {AttributeError, NotImplementedError, RuntimeError, ValueError} from '../errors';\nimport {getInitializer, Initializer} from '../initializers';\nimport {Shape} from '../keras_format/common';\nimport {Regularizer} from '../regularizers';\nimport {Kwargs, RegularizerFn} from '../types';\nimport * as generic_utils from '../utils/generic_utils';\nimport * as types_utils from '../utils/types_utils';\nimport * as variable_utils from '../utils/variable_utils';\nimport {batchGetValue, batchSetValue, LayerVariable} from '../variables';\n\n// TODO(michaelterry): This is a stub until it's defined.\nexport type Op = (x: LayerVariable) => LayerVariable;\n\n/**\n * Constructor arguments for InputSpec.\n */\nexport interface InputSpecArgs {\n  /** Expected datatype of the input. */\n  dtype?: DataType;\n  /** Expected shape of the input (may include null for unchecked axes). */\n  shape?: Shape;\n  /** Expected rank of the input. */\n  ndim?: number;\n  /** Maximum rank of the input. */\n  maxNDim?: number;\n  /** Minimum rank of the input. */\n  minNDim?: number;\n  /** Dictionary mapping integer axes to a specific dimension value. */\n  axes?: {[axis: number]: number};\n}\n\n/**\n * Specifies the ndim, dtype and shape of every input to a layer.\n *\n * Every layer should expose (if appropriate) an `inputSpec` attribute:\n * a list of instances of InputSpec (one per input tensor).\n *\n * A null entry in a shape is compatible with any dimension,\n * a null shape is compatible with any shape.\n */\nexport class InputSpec {\n  /** Expected datatype of the input. */\n  dtype?: DataType;\n  /** Expected shape of the input (may include null for unchecked axes). */\n  shape?: Shape;\n  /** Expected rank of the input. */\n  ndim?: number;\n  /** Maximum rank of the input. */\n  maxNDim?: number;\n  /** Minimum rank of the input. */\n  minNDim?: number;\n  /** Dictionary mapping integer axes to a specific dimension value. */\n  axes?: {[axis: number]: number};\n\n  constructor(args: InputSpecArgs) {\n    this.dtype = args.dtype;\n    this.shape = args.shape;\n    /*\n      TODO(michaelterry): Could throw error if ndim and shape are both defined\n        (then backport).\n    */\n    if (args.shape != null) {\n      this.ndim = args.shape.length;\n    } else {\n      this.ndim = args.ndim;\n    }\n    this.maxNDim = args.maxNDim;\n    this.minNDim = args.minNDim;\n    this.axes = args.axes || {};\n  }\n}\n\n/**\n * `tf.SymbolicTensor` is a placeholder for a Tensor without any concrete value.\n *\n * They are most often encountered when building a graph of `Layer`s for a\n * a `tf.LayersModel` and the input data's shape, but not values are known.\n */\n/** @doc {heading: 'Models', 'subheading': 'Classes'} */\nexport class SymbolicTensor {\n  /* A unique ID for the tensor to be able to differentiate tensors. */\n  readonly id: number;\n  // The fully scoped name of this Variable, including a unique suffix if needed\n  readonly name: string;\n  // The originally requested fully scoped name of this Variable, not including\n  // any unique suffix.  This may be needed when restoring weights because this\n  // original name is used as a key.\n  readonly originalName?: string;\n  /**\n   * Rank/dimensionality of the tensor.\n   */\n  readonly rank: number;\n  /**\n   * Replacement for _keras_history.\n   */\n  nodeIndex: number;\n  /**\n   * Replacement for _keras_history.\n   */\n  tensorIndex: number;\n\n  /**\n   *\n   * @param dtype\n   * @param shape\n   * @param sourceLayer The Layer that produced this symbolic tensor.\n   * @param inputs The inputs passed to sourceLayer's __call__() method.\n   * @param nodeIndex\n   * @param tensorIndex\n   * @param callArgs The keyword arguments passed to the __call__() method.\n   * @param name\n   * @param outputTensorIndex The index of this tensor in the list of outputs\n   *   returned by apply().\n   */\n  constructor(\n      readonly dtype: DataType, readonly shape: Shape,\n      public sourceLayer: Layer, readonly inputs: SymbolicTensor[],\n      readonly callArgs: Kwargs, name?: string,\n      readonly outputTensorIndex?: number) {\n    this.id = getNextUniqueTensorId();\n    if (name != null) {\n      this.originalName = getScopedTensorName(name);\n      this.name = getUniqueTensorName(this.originalName);\n    }\n    this.rank = shape.length;\n  }\n}\n\n/**\n * Constructor arguments for Node.\n */\nexport interface NodeArgs {\n  /**\n   * The layer that takes `inputTensors` and turns them into `outputTensors`.\n   * (the node gets created when the `call` method of the layer is called).\n   */\n  outboundLayer: Layer;\n  /**\n   * A list of layers, the same length as `inputTensors`, the layers from where\n   * `inputTensors` originate.\n   */\n  inboundLayers: Layer[];\n  /**\n   * A list of integers, the same length as `inboundLayers`. `nodeIndices[i]` is\n   * the origin node of `inputTensors[i]` (necessary since each inbound layer\n   * might have several nodes, e.g. if the layer is being shared with a\n   * different data stream).\n   */\n  nodeIndices: number[];\n  /**\n   * A list of integers, the same length as `inboundLayers`. `tensorIndices[i]`\n   * is the index of `inputTensors[i]` within the output of the inbound layer\n   * (necessary since each inbound layer might have multiple tensor outputs,\n   * with each one being independently manipulable).\n   */\n  tensorIndices: number[];\n  /** List of input tensors. */\n  inputTensors: SymbolicTensor[];\n  /** List of output tensors. */\n  outputTensors: SymbolicTensor[];\n  /** List of input masks (a mask can be a tensor, or null). */\n  inputMasks: Tensor[];\n  /** List of output masks (a mask can be a tensor, or null). */\n  outputMasks: Tensor[];\n  /** List of input shape tuples. */\n  inputShapes: Shape|Shape[];\n  /** List of output shape tuples. */\n  outputShapes: Shape|Shape[];\n}\n\n/**\n * The type of the return value of Layer.dispose() and Container.dispose().\n */\nexport interface DisposeResult {\n  /**\n   * Reference count after the dispose call.\n   */\n  refCountAfterDispose: number;\n\n  /**\n   * Number of variables dispose in this dispose call.\n   */\n  numDisposedVariables: number;\n}\n\nlet _nextNodeID = 0;\n\n/**\n * A `Node` describes the connectivity between two layers.\n *\n * Each time a layer is connected to some new input,\n * a node is added to `layer.inboundNodes`.\n *\n * Each time the output of a layer is used by another layer,\n * a node is added to `layer.outboundNodes`.\n *\n * `nodeIndices` and `tensorIndices` are basically fine-grained coordinates\n * describing the origin of the `inputTensors`, verifying the following:\n *\n * `inputTensors[i] ==\n * inboundLayers[i].inboundNodes[nodeIndices[i]].outputTensors[\n *   tensorIndices[i]]`\n *\n * A node from layer A to layer B is added to:\n *     A.outboundNodes\n *     B.inboundNodes\n */\nexport class Node {\n  /**\n   * The layer that takes `inputTensors` and turns them into `outputTensors`\n   * (the node gets created when the `call` method of the layer is called).\n   */\n  outboundLayer: Layer;\n  /**\n   * A list of layers, the same length as `inputTensors`, the layers from where\n   * `inputTensors` originate.\n   */\n  inboundLayers: Layer[];\n  /**\n   * A list of integers, the same length as `inboundLayers`. `nodeIndices[i]` is\n   * the origin node of `inputTensors[i]` (necessary since each inbound layer\n   * might have several nodes, e.g. if the layer is being shared with a\n   * different data stream).\n   */\n  nodeIndices: number[];\n  /**\n   * A list of integers, the same length as `inboundLayers`. `tensorIndices[i]`\n   * is the index of `inputTensors[i]` within the output of the inbound layer\n   * (necessary since each inbound layer might have multiple tensor outputs,\n   * with each one being independently manipulable).\n   */\n  tensorIndices: number[];\n  /** List of input tensors. */\n  inputTensors: SymbolicTensor[];\n  /** List of output tensors. */\n  outputTensors: SymbolicTensor[];\n  /** List of input masks (a mask can be a tensor, or null). */\n  inputMasks: Tensor[];\n  /** List of output masks (a mask can be a tensor, or null). */\n  outputMasks: Tensor[];\n  /** List of input shape tuples. */\n  inputShapes: Shape|Shape[];\n  /** List of output shape tuples. */\n  outputShapes: Shape|Shape[];\n\n  readonly id: number;\n\n  constructor(\n      args: NodeArgs,\n      // TODO(michaelterry): Define actual type for this.\n      public callArgs?: Kwargs) {\n    this.id = _nextNodeID++;\n    /*\n      Layer instance (NOT a list).\n      this is the layer that takes a list of input tensors\n      and turns them into a list of output tensors.\n      the current node will be added to\n      the inboundNodes of outboundLayer.\n    */\n    this.outboundLayer = args.outboundLayer;\n\n    /*\n        The following 3 properties describe where\n        the input tensors come from: which layers,\n        and for each layer, which node and which\n        tensor output of each node.\n    */\n\n    // List of layer instances.\n    this.inboundLayers = args.inboundLayers;\n    // List of integers, 1:1 mapping with inboundLayers.\n    this.nodeIndices = args.nodeIndices;\n    // List of integers, 1:1 mapping with inboundLayers.\n    this.tensorIndices = args.tensorIndices;\n\n    /*\n        Following 2 properties:\n        tensor inputs and outputs of outboundLayer.\n    */\n\n    // List of tensors. 1:1 mapping with inboundLayers.\n    this.inputTensors = args.inputTensors;\n    // List of tensors, created by outboundLayer.call().\n    this.outputTensors = args.outputTensors;\n\n    /*\n        Following 2 properties: input and output masks.\n        List of tensors, 1:1 mapping with inputTensor.\n    */\n    this.inputMasks = args.inputMasks;\n    // List of tensors, created by outboundLayer.computeMask().\n    this.outputMasks = args.outputMasks;\n\n    // Following 2 properties: input and output shapes.\n\n    // List of shape tuples, shapes of inputTensors.\n    this.inputShapes = args.inputShapes;\n    // List of shape tuples, shapes of outputTensors.\n    this.outputShapes = args.outputShapes;\n\n    // Add nodes to all layers involved.\n    for (const layer of args.inboundLayers) {\n      if (layer != null) {\n        layer.outboundNodes.push(this);\n      }\n    }\n    args.outboundLayer.inboundNodes.push(this);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const inboundNames: string[] = [];\n    for (const layer of this.inboundLayers) {\n      if (layer != null) {\n        inboundNames.push(layer.name);\n      } else {\n        inboundNames.push(null);\n      }\n    }\n    return {\n      outboundLayer: this.outboundLayer ? this.outboundLayer.name : null,\n      inboundLayers: inboundNames,\n      nodeIndices: this.nodeIndices,\n      tensorIndices: this.tensorIndices\n    };\n  }\n}\n\n/** Constructor arguments for Layer. */\nexport declare interface LayerArgs {\n  /**\n   * If defined, will be used to create an input layer to insert before this\n   * layer. If both `inputShape` and `batchInputShape` are defined,\n   * `batchInputShape` will be used. This argument is only applicable to input\n   * layers (the first layer of a model).\n   */\n  inputShape?: Shape;\n  /**\n   * If defined, will be used to create an input layer to insert before this\n   * layer. If both `inputShape` and `batchInputShape` are defined,\n   * `batchInputShape` will be used. This argument is only applicable to input\n   * layers (the first layer of a model).\n   */\n  batchInputShape?: Shape;\n  /**\n   * If `inputShape` is specified and `batchInputShape` is *not* specified,\n   * `batchSize` is used to construct the `batchInputShape`: `[batchSize,\n   * ...inputShape]`\n   */\n  batchSize?: number;\n  /**\n   * The data-type for this layer. Defaults to 'float32'.\n   * This argument is only applicable to input layers (the first layer of a\n   * model).\n   */\n  dtype?: DataType;\n  /** Name for this layer. */\n  name?: string;\n  /**\n   * Whether the weights of this layer are updatable by `fit`.\n   * Defaults to true.\n   */\n  trainable?: boolean;\n  /**\n   * Initial weight values of the layer.\n   */\n  weights?: Tensor[];\n  /** Legacy support. Do not use for new code. */\n  inputDType?: DataType;\n}\n\n// If necessary, add `output` arguments to the CallHook function.\n// This is currently used for testing only, but may be used for debugger-related\n// purposes in the future.\nexport type CallHook = (inputs: Tensor|Tensor[], kwargs: Kwargs) => void;\n\nlet _nextLayerID = 0;\n\n/**\n * A layer is a grouping of operations and weights that can be composed to\n * create a `tf.LayersModel`.\n *\n * Layers are constructed by using the functions under the\n * [tf.layers](#Layers-Basic) namespace.\n */\n/** @doc {heading: 'Layers', subheading: 'Classes', namespace: 'layers'} */\nexport abstract class Layer extends serialization.Serializable {\n  /** Name for this layer. Must be unique within a model. */\n  name: string;\n  /**\n   * List of InputSpec class instances.\n   *\n   * Each entry describes one required input:\n   * - ndim\n   * - dtype\n   * A layer with `n` input tensors must have an `inputSpec` of length `n`.\n   */\n  inputSpec: InputSpec[];\n  supportsMasking: boolean;\n  /** Whether the layer weights will be updated during training. */\n  protected trainable_: boolean;\n  batchInputShape: Shape;\n  dtype: DataType;\n  initialWeights: Tensor[];\n\n  inboundNodes: Node[];\n  outboundNodes: Node[];\n\n  activityRegularizer: Regularizer;\n\n  protected _trainableWeights: LayerVariable[];\n  private _nonTrainableWeights: LayerVariable[];\n  private _losses: RegularizerFn[];\n  // TODO(cais): _updates is currently unused.\n  private _updates: Tensor[];\n  private _built: boolean;\n  private _callHook: CallHook = null;\n\n  private _addedWeightNames: string[] = [];\n\n  readonly id: number;\n\n  // Porting Notes: PyKeras does not have this property in this base Layer\n  //   class. Instead lets Layer subclass set it dynamically and checks the\n  //   value with `hasattr`. In tfjs-layers, we let this be a member of this\n  //   base class.\n  protected _stateful = false;\n\n  protected _refCount: number|null;\n\n  // A flag for whether fast (i.e., all-zero) weight initialization is to\n  // be used during `build()` call. This speeds up weight initialization\n  // by saving unnecessary calls to expensive initializers in cases where\n  // the initialized values will be overwritten by loaded weight values\n  // during model loading.\n  private fastWeightInitDuringBuild: boolean;\n\n  constructor(args: LayerArgs) {\n    super();\n    this.id = _nextLayerID++;\n\n    this.activityRegularizer = null;\n\n    this.inputSpec = null;\n    this.supportsMasking = false;\n\n    // These properties will be set upon call of this.build()\n    this._trainableWeights = [];\n    this._nonTrainableWeights = [];\n    this._losses = [];\n    this._updates = [];\n    this._built = false;\n\n    /*\n      These lists will be filled via successive calls\n      to this.addInboundNode().\n     */\n    this.inboundNodes = [];\n    this.outboundNodes = [];\n\n    let name = args.name;\n    if (!name) {\n      const prefix = this.getClassName();\n      name = generic_utils.toSnakeCase(prefix) + '_' + getUid(prefix);\n    }\n    this.name = name;\n\n    this.trainable_ = args.trainable == null ? true : args.trainable;\n\n    if (args.inputShape != null || args.batchInputShape != null) {\n      /*\n        In this case we will later create an input layer\n        to insert before the current layer\n       */\n      let batchInputShape: Shape;\n      if (args.batchInputShape != null) {\n        batchInputShape = args.batchInputShape;\n      } else if (args.inputShape != null) {\n        let batchSize: number = null;\n        if (args.batchSize != null) {\n          batchSize = args.batchSize;\n        }\n        batchInputShape = [batchSize].concat(args.inputShape);\n      }\n      this.batchInputShape = batchInputShape;\n\n      // Set dtype.\n      let dtype = args.dtype;\n      if (dtype == null) {\n        dtype = args.inputDType;\n      }\n      if (dtype == null) {\n        dtype = 'float32';\n      }\n      this.dtype = dtype;\n    }\n\n    if (args.weights != null) {\n      this.initialWeights = args.weights;\n    } else {\n      this.initialWeights = null;\n    }\n\n    // The value of `_refCount` is initialized to null. When the layer is used\n    // in a symbolic way for the first time, it will be set to 1.\n    this._refCount = null;\n\n    this.fastWeightInitDuringBuild = false;\n  }\n\n  /**\n   * Converts a layer and its index to a unique (immutable type) name.\n   * This function is used internally with `this.containerNodes`.\n   * @param layer The layer.\n   * @param nodeIndex The layer's position (e.g. via enumerate) in a list of\n   *   nodes.\n   *\n   * @returns The unique name.\n   */\n  protected static nodeKey(layer: Layer, nodeIndex: number) {\n    return layer.name + '_ib-' + nodeIndex.toString();\n  }\n\n  /**\n   * Returns this.inboundNode at index nodeIndex.\n   *\n   * Porting note: This is a replacement for _get_node_attribute_at_index()\n   * @param nodeIndex\n   * @param attrName The name of the attribute related to request for this node.\n   */\n  private getNodeAtIndex(nodeIndex: number, attrName: string): Node {\n    if (this.inboundNodes.length === 0) {\n      throw new RuntimeError(\n          'The layer has never been called ' +\n          `and thus has no defined ${attrName}.`);\n    }\n    if (this.inboundNodes.length <= nodeIndex) {\n      throw new ValueError(\n          `Asked to get ${attrName} at node ${nodeIndex}, ` +\n          `but the layer has only ${this.inboundNodes.length} inbound nodes.`);\n    }\n    return this.inboundNodes[nodeIndex];\n  }\n\n  /**\n   * Retrieves the input tensor(s) of a layer at a given node.\n   *\n   * @param nodeIndex Integer, index of the node from which to retrieve the\n   *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer\n   *   was called.\n   *\n   * @return A tensor (or list of tensors if the layer has multiple inputs).\n   */\n  getInputAt(nodeIndex: number): SymbolicTensor|SymbolicTensor[] {\n    return generic_utils.singletonOrArray(\n        this.getNodeAtIndex(nodeIndex, 'input').inputTensors);\n  }\n\n  /**\n   * Retrieves the output tensor(s) of a layer at a given node.\n   *\n   * @param nodeIndex Integer, index of the node from which to retrieve the\n   *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer\n   *   was called.\n   *\n   * @return A tensor (or list of tensors if the layer has multiple outputs).\n   */\n  getOutputAt(nodeIndex: number): SymbolicTensor|SymbolicTensor[] {\n    return generic_utils.singletonOrArray(\n        this.getNodeAtIndex(nodeIndex, 'output').outputTensors);\n  }\n\n  // Properties\n\n  /**\n   * Retrieves the input tensor(s) of a layer.\n   *\n   * Only applicable if the layer has exactly one inbound node,\n   * i.e. if it is connected to one incoming layer.\n   *\n   * @return Input tensor or list of input tensors.\n   *\n   * @exception AttributeError if the layer is connected to more than one\n   *   incoming layers.\n   */\n  get input(): SymbolicTensor|SymbolicTensor[] {\n    if (this.inboundNodes.length > 1) {\n      throw new AttributeError(\n          `Layer ${this.name}` +\n          ' has multiple inbound nodes, ' +\n          'hence the notion of \"layer input\" ' +\n          'is ill-defined. ' +\n          'Use `getInputAt(nodeIndex)` instead.');\n    } else if (this.inboundNodes.length === 0) {\n      throw new AttributeError(\n          `Layer ${this.name}` +\n          ' is not connected, no input to return.');\n    }\n    return generic_utils.singletonOrArray(\n        this.getNodeAtIndex(0, 'input').inputTensors);\n  }\n\n  /**\n   * Retrieves the output tensor(s) of a layer.\n   *\n   * Only applicable if the layer has exactly one inbound node,\n   * i.e. if it is connected to one incoming layer.\n   *\n   * @return Output tensor or list of output tensors.\n   *\n   * @exception AttributeError if the layer is connected to more than one\n   *   incoming layers.\n   */\n  get output(): SymbolicTensor|SymbolicTensor[] {\n    if (this.inboundNodes.length === 0) {\n      throw new AttributeError(\n          `Layer ${this.name}` +\n          ' has no inbound nodes.');\n    }\n    if (this.inboundNodes.length > 1) {\n      throw new AttributeError(\n          `Layer ${this.name}` +\n          ' has multiple inbound nodes, ' +\n          'hence the notion of \"layer output\" ' +\n          'is ill-defined. ' +\n          'Use `getOutputAt(nodeIndex)` instead.');\n    }\n    return generic_utils.singletonOrArray(\n        this.getNodeAtIndex(0, 'output').outputTensors);\n  }\n\n  get losses(): RegularizerFn[] {\n    return this._losses;\n  }\n\n  /**\n   * Retrieves the Layer's current loss values.\n   *\n   * Used for regularizers during training.\n   */\n  calculateLosses(): Scalar[] {\n    // Porting Node: This is an augmentation to Layer.loss in PyKeras.\n    //   In PyKeras, Layer.loss returns symbolic tensors. Here a concrete\n    //   Tensor (specifically Scalar) values are returned. This is due to the\n    //   imperative backend.\n    return this.losses.map(lossFn => lossFn());\n  }\n\n  get updates(): Tensor[] {\n    return this._updates;\n  }\n\n  get built(): boolean {\n    return this._built;\n  }\n\n  set built(built: boolean) {\n    this._built = built;\n  }\n\n  get trainable(): boolean {\n    return this.trainable_;\n  }\n\n  set trainable(trainable: boolean) {\n    this._trainableWeights.forEach(w => w.trainable = trainable);\n    this.trainable_ = trainable;\n  }\n\n  get trainableWeights(): LayerVariable[] {\n    if (this.trainable_) {\n      return this._trainableWeights.filter(w => w.trainable);\n    } else {\n      return [];\n    }\n  }\n\n  set trainableWeights(weights: LayerVariable[]) {\n    this._trainableWeights = weights;\n  }\n\n  get nonTrainableWeights(): LayerVariable[] {\n    if (this.trainable) {\n      return this._trainableWeights.filter(w => !w.trainable)\n          .concat(this._nonTrainableWeights);\n    } else {\n      return this._trainableWeights.concat(this._nonTrainableWeights);\n    }\n  }\n\n  set nonTrainableWeights(weights: LayerVariable[]) {\n    this._nonTrainableWeights = weights;\n  }\n\n  /**\n   * The concatenation of the lists trainableWeights and nonTrainableWeights\n   * (in this order).\n   */\n  get weights(): LayerVariable[] {\n    return this.trainableWeights.concat(this.nonTrainableWeights);\n  }\n\n  get stateful(): boolean {\n    return this._stateful;\n  }\n\n  /**\n   * Reset the states of the layer.\n   *\n   * This method of the base Layer class is essentially a no-op.\n   * Subclasses that are stateful (e.g., stateful RNNs) should override this\n   * method.\n   */\n  resetStates(): void {\n    if (!this.stateful) {\n      throw new Error(\n          'Cannot call the resetStates() method of a non-stateful Layer ' +\n          'object.');\n    }\n  }\n\n  /**\n   * Checks compatibility between the layer and provided inputs.\n   *\n   * This checks that the tensor(s) `input`\n   * verify the input assumptions of the layer\n   * (if any). If not, exceptions are raised.\n   *\n   * @param inputs Input tensor or list of input tensors.\n   *\n   * @exception ValueError in case of mismatch between\n   *   the provided inputs and the expectations of the layer.\n   */\n  protected assertInputCompatibility(inputs: Tensor|Tensor[]|SymbolicTensor|\n                                     SymbolicTensor[]): void {\n    inputs = generic_utils.toList(inputs);\n    if (this.inputSpec == null || this.inputSpec.length === 0) {\n      return;\n    }\n    const inputSpec = generic_utils.toList(this.inputSpec);\n    if (inputs.length !== inputSpec.length) {\n      throw new ValueError(\n          `Layer ${this.name} expects ${inputSpec.length} inputs, ` +\n          `but it received ${inputs.length} input tensors. ` +\n          `Input received: ${inputs}`);\n    }\n    for (let inputIndex = 0; inputIndex < inputs.length; inputIndex++) {\n      const x = inputs[inputIndex];\n      const spec: InputSpec = inputSpec[inputIndex];\n      if (spec == null) {\n        continue;\n      }\n\n      // Check ndim.\n      const ndim = x.rank;\n      if (spec.ndim != null) {\n        if (ndim !== spec.ndim) {\n          throw new ValueError(\n              `Input ${inputIndex} is incompatible with layer ${this.name}: ` +\n              `expected ndim=${spec.ndim}, found ndim=${ndim}`);\n        }\n      }\n      if (spec.maxNDim != null) {\n        if (ndim > spec.maxNDim) {\n          throw new ValueError(\n              `Input ${inputIndex} is incompatible with layer ${this.name}` +\n              `: expected max_ndim=${spec.maxNDim}, found ndim=${ndim}`);\n        }\n      }\n      if (spec.minNDim != null) {\n        if (ndim < spec.minNDim) {\n          throw new ValueError(\n              `Input ${inputIndex} is incompatible with layer ${this.name}` +\n              `: expected min_ndim=${spec.minNDim}, found ndim=${ndim}.`);\n        }\n      }\n\n      // Check dtype.\n      if (spec.dtype != null) {\n        if (x.dtype !== spec.dtype) {\n          throw new ValueError(\n              `Input ${inputIndex} is incompatible with layer ${this.name} ` +\n              `: expected dtype=${spec.dtype}, found dtype=${x.dtype}.`);\n        }\n      }\n\n      // Check specific shape axes.\n      if (spec.axes) {\n        const xShape = x.shape;\n        for (const key in spec.axes) {\n          const axis = Number(key);\n          const value = spec.axes[key];\n          // Perform Python-style slicing in case axis < 0;\n          // TODO(cais): Use https://github.com/alvivi/typescript-underscore to\n          // ensure type safety through Underscore calls.\n          const xShapeAtAxis =\n              axis >= 0 ? xShape[axis] : xShape[xShape.length + axis];\n          if (value != null && [value, null].indexOf(xShapeAtAxis) === -1) {\n            throw new ValueError(\n                `Input ${inputIndex} is incompatible with layer ` +\n                `${this.name}: expected axis ${axis} of input shape to ` +\n                `have value ${value} but got shape ${xShape}.`);\n          }\n        }\n      }\n\n      // Check shape.\n      if (spec.shape != null) {\n        for (let i = 0; i < spec.shape.length; ++i) {\n          const specDim = spec.shape[i];\n          const dim = x.shape[i];\n          if (specDim != null && dim != null) {\n            if (specDim !== dim) {\n              throw new ValueError(\n                  `Input ${inputIndex} is incompatible with layer ` +\n                  `${this.name}: expected shape=${spec.shape}, ` +\n                  `found shape=${x.shape}.`);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * This is where the layer's logic lives.\n   *\n   * @param inputs Input tensor, or list/tuple of input tensors.\n   * @param kwargs Additional keyword arguments.\n   *\n   * @return A tensor or list/tuple of tensors.\n   */\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return inputs;\n  }\n\n  protected invokeCallHook(inputs: Tensor|Tensor[], kwargs: Kwargs) {\n    if (this._callHook != null) {\n      this._callHook(inputs, kwargs);\n    }\n  }\n\n  /**\n   * Set call hook.\n   * This is currently used for testing only.\n   * @param callHook\n   */\n  setCallHook(callHook: CallHook) {\n    this._callHook = callHook;\n  }\n\n  /**\n   * Clear call hook.\n   * This is currently used for testing only.\n   */\n  clearCallHook() {\n    this._callHook = null;\n  }\n\n  /**\n   * Builds or executes a `Layer's logic.\n   *\n   * When called with `tf.Tensor`(s), execute the `Layer`s computation and\n   * return Tensor(s). For example:\n   *\n   * ```js\n   * const denseLayer = tf.layers.dense({\n   *   units: 1,\n   *   kernelInitializer: 'zeros',\n   *   useBias: false\n   * });\n   *\n   * // Invoke the layer's apply() method with a `tf.Tensor` (with concrete\n   * // numeric values).\n   * const input = tf.ones([2, 2]);\n   * const output = denseLayer.apply(input);\n   *\n   * // The output's value is expected to be [[0], [0]], due to the fact that\n   * // the dense layer has a kernel initialized to all-zeros and does not have\n   * // a bias.\n   * output.print();\n   * ```\n   *\n   * When called with `tf.SymbolicTensor`(s), this will prepare the layer for\n   * future execution.  This entails internal book-keeping on shapes of\n   * expected Tensors, wiring layers together, and initializing weights.\n   *\n   * Calling `apply` with `tf.SymbolicTensor`s are typically used during the\n   * building of non-`tf.Sequential` models. For example:\n   *\n   * ```js\n   * const flattenLayer = tf.layers.flatten();\n   * const denseLayer = tf.layers.dense({units: 1});\n   *\n   * // Use tf.layers.input() to obtain a SymbolicTensor as input to apply().\n   * const input = tf.input({shape: [2, 2]});\n   * const output1 = flattenLayer.apply(input);\n   *\n   * // output1.shape is [null, 4]. The first dimension is the undetermined\n   * // batch size. The second dimension comes from flattening the [2, 2]\n   * // shape.\n   * console.log(JSON.stringify(output1.shape));\n   *\n   * // The output SymbolicTensor of the flatten layer can be used to call\n   * // the apply() of the dense layer:\n   * const output2 = denseLayer.apply(output1);\n   *\n   * // output2.shape is [null, 1]. The first dimension is the undetermined\n   * // batch size. The second dimension matches the number of units of the\n   * // dense layer.\n   * console.log(JSON.stringify(output2.shape));\n   *\n   * // The input and output and be used to construct a model that consists\n   * // of the flatten and dense layers.\n   * const model = tf.model({inputs: input, outputs: output2});\n   * ```\n   *\n   * @param inputs a `tf.Tensor` or `tf.SymbolicTensor` or an Array of them.\n   * @param kwargs Additional keyword arguments to be passed to `call()`.\n   *\n   * @return Output of the layer's `call` method.\n   *\n   * @exception ValueError error in case the layer is missing shape information\n   *   for its `build` call.\n   */\n  // Porting Note: This is a replacement for __call__() in Python.\n  /** @doc {heading: 'Models', 'subheading': 'Classes'} */\n  apply(\n      inputs: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n      kwargs?: Kwargs): Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[] {\n    kwargs = kwargs || {};\n\n    this.assertNotDisposed();\n\n    // Ensure inputs are all the same type.\n    const inputsList = generic_utils.toList(inputs);\n\n    let allAreSymbolic = true;\n    for (const input of inputsList) {\n      if (!(input instanceof SymbolicTensor)) {\n        allAreSymbolic = false;\n        break;\n      }\n    }\n    let noneAreSymbolic = true;\n    for (const input of inputsList) {\n      if (input instanceof SymbolicTensor) {\n        noneAreSymbolic = false;\n        break;\n      }\n    }\n\n    if (allAreSymbolic === noneAreSymbolic) {\n      throw new ValueError(\n          'Arguments to apply() must be all ' +\n          'SymbolicTensors or all Tensors');\n    }\n\n    // TODO(michaelterry): nameScope() may not be necessary.\n    return nameScope(this.name, () => {\n      // Handle laying building (weight creating, input spec locking).\n      if (!this.built) {\n        /*\n          Throw exceptions in case the input is not compatible\n          with the inputSpec specified in the layer constructor.\n         */\n        this.assertInputCompatibility(inputs);\n\n        // Collect input shapes to build layer.\n        const inputShapes: Shape[] = [];\n        for (const xElem of generic_utils.toList(inputs)) {\n          inputShapes.push(xElem.shape);\n        }\n        this.build(generic_utils.singletonOrArray(inputShapes));\n        this.built = true;\n\n        // Load weights that were specified at layer instantiation.\n        if (this.initialWeights) {\n          this.setWeights(this.initialWeights);\n        }\n\n        if (this._refCount === null && noneAreSymbolic) {\n          // The first use of this layer is a non-symbolic call, set ref count\n          // to 1 so the Layer can be properly disposed if its dispose() method\n          // is called.\n          this._refCount = 1;\n        }\n      }\n\n      /*\n        Throw exceptions in case the input is not compatible\n        with the inputSpec set at build time.\n      */\n      this.assertInputCompatibility(inputs);\n\n      // Handle mask propagation.\n      // TODO(michaelterry): Mask propagation not currently implemented.\n\n      // Actually call the layer, collecting output(s), mask(s), and shape(s).\n      if (noneAreSymbolic) {\n        let output = this.call(inputs as Tensor | Tensor[], kwargs);\n        // TODO(michaelterry): Compute the outputMask\n\n        // If the layer returns tensors from its inputs, unmodified,\n        // we copy them to avoid loss of tensor metadata.\n        const outputList: Tensor[] = generic_utils.toList(output);\n        const outputListCopy: Tensor[] = [];\n        // TODO(michaelterry): This copying may not be necessary given our eager\n        // backend.\n        for (let x of outputList) {\n          if (inputsList.indexOf(x) !== -1) {\n            x = x.clone();\n          }\n          outputListCopy.push(x);\n        }\n        output = generic_utils.singletonOrArray(outputListCopy);\n\n        if (this.activityRegularizer != null) {\n          throw new NotImplementedError(\n              'Layer invocation in the presence of activity ' +\n              'regularizer(s) is not supported yet.');\n        }\n\n        // TODO(michaelterry): Call addInboundNode()?\n        return output;\n      } else {\n        const inputShape = collectInputShape(inputs);\n        const outputShape = this.computeOutputShape(inputShape);\n        let output: SymbolicTensor|SymbolicTensor[];\n        const outputDType = guessOutputDType(inputs);\n        this.warnOnIncompatibleInputShape(\n            Array.isArray(inputs) ? inputShape[0] as Shape :\n                                    inputShape as Shape);\n\n        if (outputShape != null && outputShape.length > 0 &&\n            Array.isArray(outputShape[0])) {\n          // We have multiple output shapes. Create multiple output tensors.\n          output = (outputShape as Shape[])\n                       .map(\n                           (shape, index) => new SymbolicTensor(\n                               outputDType, shape, this,\n                               generic_utils.toList(inputs), kwargs, this.name,\n                               index));\n        } else {\n          output = new SymbolicTensor(\n              outputDType, outputShape as Shape, this,\n              generic_utils.toList(inputs), kwargs, this.name);\n        }\n\n        /*\n          Add an inbound node to the layer, so that it keeps track\n          of the call and of all new variables created during the call.\n          This also updates the layer history of the output tensor(s).\n          If the input tensor(s) had no previous history,\n          this does nothing.\n        */\n        this.addInboundNode(\n            inputs as SymbolicTensor | SymbolicTensor[], output, null, null,\n            inputShape, outputShape, kwargs);\n        this._refCount++;\n\n        if (this.activityRegularizer != null) {\n          throw new NotImplementedError(\n              'Layer invocation in the presence of activity ' +\n              'regularizer(s) is not supported yet.');\n        }\n\n        return output;\n      }\n    });\n  }\n\n  /**\n   * Check compatibility between input shape and this layer's batchInputShape.\n   *\n   * Print warning if any incompatibility is found.\n   *\n   * @param inputShape Input shape to be checked.\n   */\n  protected warnOnIncompatibleInputShape(inputShape: Shape) {\n    if (this.batchInputShape == null) {\n      return;\n    } else if (inputShape.length !== this.batchInputShape.length) {\n      console.warn(\n          `The rank of the input tensor provided (shape: ` +\n          `${JSON.stringify(inputShape)}) does not match that of the ` +\n          `batchInputShape (${JSON.stringify(this.batchInputShape)}) ` +\n          `of the layer ${this.name}`);\n    } else {\n      let dimMismatch = false;\n      this.batchInputShape.forEach((dimension, i) => {\n        if (dimension != null && inputShape[i] != null &&\n            inputShape[i] !== dimension) {\n          dimMismatch = true;\n        }\n      });\n      if (dimMismatch) {\n        console.warn(\n            `The shape of the input tensor ` +\n            `(${JSON.stringify(inputShape)}) does not ` +\n            `match the expectation of layer ${this.name}: ` +\n            `${JSON.stringify(this.batchInputShape)}`);\n      }\n    }\n  }\n\n  /**\n   * Retrieves the output shape(s) of a layer.\n   *\n   * Only applicable if the layer has only one inbound node, or if all inbound\n   * nodes have the same output shape.\n   *\n   * @returns Output shape or shapes.\n   * @throws AttributeError: if the layer is connected to more than one incoming\n   *   nodes.\n   */\n  /** @doc {heading: 'Models', 'subheading': 'Classes'} */\n  get outputShape(): Shape|Shape[] {\n    if (this.inboundNodes == null || this.inboundNodes.length === 0) {\n      throw new AttributeError(\n          `The layer ${this.name} has never been called and thus has no ` +\n          `defined output shape.`);\n    }\n    const allOutputShapes: string[] = [];\n    for (const node of this.inboundNodes) {\n      const shapeString = JSON.stringify(node.outputShapes);\n      if (allOutputShapes.indexOf(shapeString) === -1) {\n        allOutputShapes.push(shapeString);\n      }\n    }\n    if (allOutputShapes.length === 1) {\n      const outputShapes = this.inboundNodes[0].outputShapes;\n      if (Array.isArray(outputShapes) && Array.isArray(outputShapes[0]) &&\n          outputShapes.length === 1) {\n        return (outputShapes as Shape[])[0];\n      } else {\n        return outputShapes;\n      }\n\n    } else {\n      throw new AttributeError(\n          `The layer ${this.name} has multiple inbound nodes with different ` +\n          `output shapes. Hence the notion of \"outut shape\" is ill-defined ` +\n          `for the layer.`);\n      // TODO(cais): Implement getOutputShapeAt().\n    }\n  }\n\n  /**\n   * Counts the total number of numbers (e.g., float32, int32) in the\n   * weights.\n   *\n   * @returns An integer count.\n   * @throws RuntimeError: If the layer is not built yet (in which case its\n   *   weights are not defined yet.)\n   */\n  /** @doc {heading: 'Models', 'subheading': 'Classes'} */\n  countParams(): number {\n    if (!this.built) {\n      throw new RuntimeError(\n          `You tried to call countParams() on ${this.name}, ` +\n          `but the layer is not built yet. Build it first by calling ` +\n          `build(batchInputShape).`);\n    }\n    return variable_utils.countParamsInWeights(this.weights);\n  }\n\n  /**\n   * Creates the layer weights.\n   *\n   * Must be implemented on all layers that have weights.\n   *\n   * Called when apply() is called to construct the weights.\n   *\n   * @param inputShape A `Shape` or array of `Shape` (unused).\n   */\n  /** @doc {heading: 'Models', 'subheading': 'Classes'} */\n  build(inputShape: Shape|Shape[]) {\n    this.built = true;\n  }\n\n  /**\n   * Returns the current values of the weights of the layer.\n   *\n   * @param trainableOnly Whether to get the values of only trainable weights.\n   * @returns Weight values as an `Array` of `tf.Tensor`s.\n   */\n  /** @doc {heading: 'Models', 'subheading': 'Classes'} */\n  getWeights(trainableOnly = false): Tensor[] {\n    return batchGetValue(trainableOnly ? this.trainableWeights : this.weights);\n  }\n\n  /**\n   * Sets the weights of the layer, from Tensors.\n   *\n   * @param weights a list of Tensors. The number of arrays and their shape\n   *   must match number of the dimensions of the weights of the layer (i.e.\n   *   it should match the output of `getWeights`).\n   *\n   * @exception ValueError If the provided weights list does not match the\n   *   layer's specifications.\n   */\n  /** @doc {heading: 'Models', 'subheading': 'Classes'} */\n  setWeights(weights: Tensor[]): void {\n    tidy(() => {\n      const params = this.weights;\n      if (params.length !== weights.length) {\n        // TODO(cais): Restore the following and use `providedWeights`, instead\n        // of `weights` in the error message, once the deeplearn.js bug is\n        // fixed: https://github.com/PAIR-code/deeplearnjs/issues/498 const\n        // providedWeights = JSON.stringify(weights).substr(0, 50);\n        throw new ValueError(\n            `You called setWeights(weights) on layer \"${this.name}\" ` +\n            `with a weight list of length ${weights.length}, ` +\n            `but the layer was expecting ${params.length} weights. ` +\n            `Provided weights: ${weights}...`);\n      }\n      if (params.length === 0) {\n        return;\n      }\n      const weightValueTuples: Array<[LayerVariable, Tensor]> = [];\n      const paramValues = batchGetValue(params);\n      for (let i = 0; i < paramValues.length; ++i) {\n        const pv = paramValues[i];\n        const p = params[i];\n        const w = weights[i];\n        if (!util.arraysEqual(pv.shape, w.shape)) {\n          throw new ValueError(\n              `Layer weight shape ${pv.shape} ` +\n              `not compatible with provided weight shape ${w.shape}`);\n        }\n        weightValueTuples.push([p, w]);\n      }\n      batchSetValue(weightValueTuples);\n    });\n  }\n\n  /**\n   * Adds a weight variable to the layer.\n   *\n   * @param name Name of the new weight variable.\n   * @param shape The shape of the weight.\n   * @param dtype The dtype of the weight.\n   * @param initializer An initializer instance.\n   * @param regularizer A regularizer instance.\n   * @param trainable Whether the weight should be trained via backprop or not\n   *   (assuming that the layer itself is also trainable).\n   * @param constraint An optional trainable.\n   * @return The created weight variable.\n   */\n  /** @doc {heading: 'Models', 'subheading': 'Classes'} */\n  protected addWeight(\n      name: string, shape: Shape, dtype?: DataType, initializer?: Initializer,\n      regularizer?: Regularizer, trainable?: boolean,\n      constraint?: Constraint): LayerVariable {\n    // Reject duplicate weight names.\n    if (this._addedWeightNames.indexOf(name) !== -1) {\n      throw new ValueError(\n          `Duplicate weight name ${name} for layer ${this.name}`);\n    }\n    this._addedWeightNames.push(name);\n\n    if (dtype == null) {\n      dtype = 'float32';\n    }\n\n    if (this.fastWeightInitDuringBuild) {\n      initializer = getInitializer('zeros');\n    }\n    const initValue = initializer.apply(shape, dtype);\n    const weight =\n        new LayerVariable(initValue, dtype, name, trainable, constraint);\n    initValue.dispose();\n    // Request backend not to dispose the weights of the model on scope() exit.\n    if (regularizer != null) {\n      this.addLoss(() => regularizer.apply(weight.read()));\n    }\n    if (trainable == null) {\n      trainable = true;\n    }\n    if (trainable) {\n      this._trainableWeights.push(weight);\n    } else {\n      this._nonTrainableWeights.push(weight);\n    }\n    return weight;\n  }\n\n  /**\n   * Set the fast-weight-initialization flag.\n   *\n   * In cases where the initialized weight values will be immediately\n   * overwritten by loaded weight values during model loading, setting\n   * the flag to `true` saves unnecessary calls to potentially expensive\n   * initializers and speeds up the loading process.\n   *\n   * @param value Target value of the flag.\n   */\n  setFastWeightInitDuringBuild(value: boolean) {\n    this.fastWeightInitDuringBuild = value;\n  }\n\n  /**\n   * Add losses to the layer.\n   *\n   * The loss may potentionally be conditional on some inputs tensors,\n   * for instance activity losses are conditional on the layer's inputs.\n   */\n  /** @doc {heading: 'Models', 'subheading': 'Classes'} */\n  addLoss(losses: RegularizerFn|RegularizerFn[]): void {\n    if (losses == null || Array.isArray(losses) && losses.length === 0) {\n      return;\n    }\n    // Update this.losses\n    losses = generic_utils.toList(losses);\n    if (this._losses !== undefined && this._losses !== null) {\n      this.losses.push(...losses);\n    }\n  }\n\n  /**\n   * Computes the output shape of the layer.\n   *\n   * Assumes that the layer will be built to match that input shape provided.\n   *\n   * @param inputShape A shape (tuple of integers) or a list of shape tuples\n   *   (one per output tensor of the layer). Shape tuples can include null for\n   *   free dimensions, instead of an integer.\n   */\n  /** @doc {heading: 'Models', 'subheading': 'Classes'} */\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  /**\n   * Computes an output mask tensor.\n   *\n   * @param inputs Tensor or list of tensors.\n   * @param mask Tensor or list of tensors.\n   *\n   * @return null or a tensor (or list of tensors, one per output tensor of the\n   * layer).\n   */\n  computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]): Tensor\n      |Tensor[] {\n    if (!this.supportsMasking) {\n      if (mask != null) {\n        if (Array.isArray(mask)) {\n          mask.forEach(maskElement => {\n            if (maskElement != null) {\n              throw new TypeError(\n                  `Layer ${this.name} does not support masking, ` +\n                  'but was passed an inputMask.');\n            }\n          });\n        } else {\n          throw new TypeError(\n              `Layer ${this.name} does not support masking, ` +\n              'but was passed an inputMask.');\n        }\n      }\n      // masking not explicitly supported: return null as mask\n      return null;\n    }\n    // if masking is explictly supported, by default\n    // carry over the input mask\n    return mask;\n  }\n\n  /**\n   * Internal method to create an inbound node for the layer.\n   *\n   * @param inputTensors List of input tensors.\n   * @param outputTensors List of output tensors.\n   * @param inputMasks List of input masks (a mask can be a tensor, or null).\n   * @param outputMasks List of output masks (a mask can be a tensor, or null).\n   * @param inputShapes List of input shape tuples.\n   * @param outputShapes List of output shape tuples.\n   * @param kwargs Dictionary of keyword arguments that were passed to the\n   *   `call` method of the layer at the call that created the node.\n   */\n  private addInboundNode(\n      inputTensors: SymbolicTensor|SymbolicTensor[],\n      outputTensors: SymbolicTensor|SymbolicTensor[],\n      inputMasks: Tensor|Tensor[], outputMasks: Tensor|Tensor[],\n      inputShapes: Shape|Shape[], outputShapes: Shape|Shape[],\n      kwargs: {} = null): void {\n    const inputTensorList: SymbolicTensor[] =\n        generic_utils.toList(inputTensors);\n    outputTensors = generic_utils.toList(outputTensors);\n    inputMasks = generic_utils.toList(inputMasks);\n    outputMasks = generic_utils.toList(outputMasks);\n    inputShapes = types_utils.normalizeShapeList(inputShapes);\n    outputShapes = types_utils.normalizeShapeList(outputShapes);\n\n    // Collect input tensor(s) coordinates.\n    const inboundLayers: Layer[] = [];\n    const nodeIndices: number[] = [];\n    const tensorIndices: number[] = [];\n    for (const x of inputTensorList) {\n      /*\n       * TODO(michaelterry): Keras adds this value to tensors; it's not\n       * clear whether we'll use this or not.\n       */\n      inboundLayers.push(x.sourceLayer);\n      nodeIndices.push(x.nodeIndex);\n      tensorIndices.push(x.tensorIndex);\n    }\n\n    // Create node, add it to inbound nodes.\n    // (This call has side effects.)\n    // tslint:disable-next-line:no-unused-expression\n    new Node(\n        {\n          outboundLayer: this,\n          inboundLayers,\n          nodeIndices,\n          tensorIndices,\n          inputTensors: inputTensorList,\n          outputTensors,\n          inputMasks,\n          outputMasks,\n          inputShapes,\n          outputShapes\n        },\n        kwargs);\n\n    // Update tensor history\n    for (let i = 0; i < outputTensors.length; i++) {\n      // TODO(michaelterry: _uses_learning_phase not tracked.\n      outputTensors[i].sourceLayer = this;\n      outputTensors[i].nodeIndex = this.inboundNodes.length - 1;\n      outputTensors[i].tensorIndex = i;\n    }\n  }\n\n  /**\n   * Returns the config of the layer.\n   *\n   * A layer config is a TS dictionary (serializable)\n   * containing the configuration of a layer.\n   * The same layer can be reinstantiated later\n   * (without its trained weights) from this configuration.\n   *\n   * The config of a layer does not include connectivity\n   * information, nor the layer class name.  These are handled\n   * by 'Container' (one layer of abstraction above).\n   *\n   * Porting Note: The TS dictionary follows TS naming standrds for\n   * keys, and uses tfjs-layers type-safe Enums.  Serialization methods\n   * should use a helper function to convert to the pythonic storage\n   * standard. (see serialization_utils.convertTsToPythonic)\n   *\n   * @returns TS dictionary of configuration.\n   */\n  /** @doc {heading: 'Models', 'subheading': 'Classes'} */\n  getConfig(): serialization.ConfigDict {\n    const config:\n        serialization.ConfigDict = {name: this.name, trainable: this.trainable};\n    if (this.batchInputShape != null) {\n      config['batchInputShape'] = this.batchInputShape;\n    }\n    if (this.dtype != null) {\n      config['dtype'] = this.dtype;\n    }\n    return config;\n  }\n\n  /**\n   * Dispose the weight variables that this Layer instance holds.\n   *\n   * @returns {number} Number of disposed variables.\n   */\n  protected disposeWeights(): number {\n    this.weights.forEach(weight => weight.dispose());\n    return this.weights.length;\n  }\n\n  protected assertNotDisposed() {\n    if (this._refCount === 0) {\n      throw new Error(`Layer '${this.name}' is already disposed.`);\n    }\n  }\n\n  /**\n   * Attempt to dispose layer's weights.\n   *\n   * This method decrease the reference count of the Layer object by 1.\n   *\n   * A Layer is reference-counted. Its reference count is incremented by 1\n   * the first item its `apply()` method is called and when it becomes a part\n   * of a new `Node` (through calling the `apply()`) method on a\n   * `tf.SymbolicTensor`).\n   *\n   * If the reference count of a Layer becomes 0, all the weights will be\n   * disposed and the underlying memory (e.g., the textures allocated in WebGL)\n   * will be freed.\n   *\n   * Note: If the reference count is greater than 0 after the decrement, the\n   * weights of the Layer will *not* be disposed.\n   *\n   * After a Layer is disposed, it cannot be used in calls such as `apply()`,\n   * `getWeights()` or `setWeights()` anymore.\n   *\n   * @returns A DisposeResult Object with the following fields:\n   *   - refCountAfterDispose: The reference count of the Container after this\n   *     `dispose()` call.\n   *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed\n   *     during this `dispose()` call.\n   * @throws {Error} If the layer is not built yet, or if the layer has already\n   *   been disposed.\n   */\n  /** @doc {heading: 'Models', 'subheading': 'Classes'} */\n  dispose(): DisposeResult {\n    if (!this.built) {\n      throw new Error(\n          `Cannot dispose Layer ${this.name} because it has not been ` +\n          `built yet.`);\n    }\n\n    if (this._refCount === null) {\n      throw new Error(\n          `Cannot dispose Layer ${this.name} because it has not been used ` +\n          `yet.`);\n    }\n\n    this.assertNotDisposed();\n\n    let numDisposedVariables = 0;\n    if (--this._refCount === 0) {\n      numDisposedVariables = this.disposeWeights();\n    }\n\n    return {refCountAfterDispose: this._refCount, numDisposedVariables};\n  }\n}\n\n/**\n * Collects the input shape(s) of a list of `tf.Tensor`s or\n * `tf.SymbolicTensor`s.\n *\n * TODO(michaelterry): Update PyKeras docs (backport).\n *\n * @param inputTensors List of input tensors (or single input tensor).\n *\n * @return List of shape tuples (or single tuple), one tuple per input.\n */\nfunction collectInputShape(inputTensors: SymbolicTensor|SymbolicTensor[]|Tensor|\n                           Tensor[]): Shape|Shape[] {\n  inputTensors =\n      generic_utils.toList(inputTensors) as SymbolicTensor[] | Tensor[];\n  const shapes: Shape[] = [];\n  for (const x of inputTensors) {\n    shapes.push(x.shape);\n  }\n  return generic_utils.singletonOrArray(shapes);\n}\n\n/**\n * Guesses output dtype based on inputs.\n *\n * At present, just returns 'float32' for any input.\n *\n * @param inputTensors List of input tensors (or single input tensor).\n *\n * @return The guessed DType. At present, always returns 'float32'.\n */\nfunction guessOutputDType(inputTensors: SymbolicTensor|SymbolicTensor[]|Tensor|\n                          Tensor[]): DataType {\n  return 'float32';\n}\n\n/**\n * Returns the list of input tensors necessary to compute `tensor`.\n *\n * Output will always be a list of tensors (potentially with 1 element).\n *\n * @param tensor The tensor to start from.\n * @param layer Origin layer of the tensor.\n * @param nodeIndex Origin node index of the tensor.\n *\n * @return Array of input tensors.\n */\nexport function getSourceInputs(\n    tensor: SymbolicTensor, layer?: Layer,\n    nodeIndex?: number): SymbolicTensor[] {\n  if (layer == null || (nodeIndex != null && nodeIndex > 0)) {\n    layer = tensor.sourceLayer;\n    nodeIndex = tensor.nodeIndex;\n  }\n  if (layer.inboundNodes.length === 0) {\n    return [tensor];\n  } else {\n    const node = layer.inboundNodes[nodeIndex];\n    if (node.inboundLayers.length === 0) {\n      return node.inputTensors;\n    } else {\n      const sourceTensors: SymbolicTensor[] = [];\n      for (let i = 0; i < node.inboundLayers.length; i++) {\n        const x = node.inputTensors[i];\n        const layer = node.inboundLayers[i];\n        const nodeIndex = node.nodeIndices[i];\n        const previousSources = getSourceInputs(x, layer, nodeIndex);\n        // Avoid input redundancy.\n        for (const x of previousSources) {\n          if (sourceTensors.indexOf(x) === -1) {\n            sourceTensors.push(x);\n          }\n        }\n      }\n      return sourceTensors;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/callbacks.py */\n\nimport {add, div, keep, mul, nextFrame, Scalar, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {Container} from './engine/container';\nimport {ValueError} from './errors';\nimport {Logs, resolveScalarsInLogs, UnresolvedLogs} from './logs';\nimport * as generic_utils from './utils/generic_utils';\n\n/** Verbosity logging level when fitting a model. */\nexport enum ModelLoggingVerbosity {\n  SILENT = 0,\n  VERBOSE = 1\n}\n\n/** How often to yield to the main thread when training (in ms). */\nexport const DEFAULT_YIELD_EVERY_MS = 125;\n\nexport type Params = {\n  [key: string]: number|string|boolean|number[]|string[]|boolean[];\n};\n\nexport type YieldEveryOptions = 'auto'|'batch'|'epoch'|'never'|number;\n\n/**\n * Abstract base class used to build new callbacks.\n *\n * The `logs` dictionary that callback methods take as argument will contain\n * keys for quantities relevant to the current batch or epoch.\n *\n * Currently, the `.fit()` method of the `Sequential` model class\n * will include the following quantities in the `logs` that\n * it passes to its callbacks:\n *\n * onEpochEnd: Logs include `acc` and `loss`, and optionally include `valLoss`\n *   (if validation is enabled in `fit`), and `valAcc` (if validation and\n *   accuracy monitoring are enabled).\n * onBatchBegin: Logs include `size`, the number of samples in the current\n *   batch.\n * onBatchEnd: Logs include `loss`, and optionally `acc` (if accuracy monitoring\n *   is enabled).\n */\nexport abstract class BaseCallback {\n  // TODO(michaelterry): This type is a best guess.\n  validationData: Tensor|Tensor[] = null;\n  /**\n   * Training parameters (eg. verbosity, batch size, number of epochs...).\n   */\n  params: Params;\n\n  setParams(params: Params): void {\n    this.params = params;\n  }\n\n  async onEpochBegin(epoch: number, logs?: UnresolvedLogs) {}\n\n  async onEpochEnd(epoch: number, logs?: UnresolvedLogs) {}\n\n  async onBatchBegin(batch: number, logs?: UnresolvedLogs) {}\n\n  async onBatchEnd(batch: number, logs?: UnresolvedLogs) {}\n\n  async onTrainBegin(logs?: UnresolvedLogs) {}\n\n  async onTrainEnd(logs?: UnresolvedLogs) {}\n\n  // LayersModel needs to call Callback.setModel(), but cannot actually depend\n  // on Callback because that creates a cyclic dependency.  Providing this no-op\n  // method on BaseCallback breaks the cycle: this way LayersModel can depend on\n  // BaseCallback but not on Callback.  The argument is typed as `Container`\n  // (the superclass of LayersModel) to avoid recapitulating the cycle. Callback\n  // overrides this method and enforces that the argument is really a\n  // LayersModel.\n  setModel(model: Container): void {\n    // Do nothing. Use Callback instead of BaseCallback to track the model.\n  }\n}\n\n/**\n * Container abstracting a list of callbacks.\n */\nexport class CallbackList {\n  callbacks: BaseCallback[];\n  queueLength: number;\n\n  // TODO(cais): When the need arises, uncomment the following lines and\n  // implement the queue for time values.\n  // private deltaTBatch: number;\n  // private deltaTsBatchBegin: Array<number>;\n  // private deltaTsBatchEnd: Array<number>;\n\n  /**\n   * Constructor of CallbackList.\n   * @param callbacks Array of `Callback` instances.\n   * @param queueLength Queue length for keeping running statistics over\n   *   callback execution time.\n   */\n  constructor(callbacks?: BaseCallback[], queueLength = 10) {\n    // TODO(cais): Make use of queueLength when implementing the queue for time\n    // values.\n    if (callbacks == null) {\n      callbacks = [];\n    }\n    this.callbacks = callbacks;\n    this.queueLength = queueLength;\n  }\n\n  append(callback: BaseCallback): void {\n    this.callbacks.push(callback);\n  }\n\n  setParams(params: Params): void {\n    for (const callback of this.callbacks) {\n      callback.setParams(params);\n    }\n  }\n\n  setModel(model: Container): void {\n    for (const callback of this.callbacks) {\n      callback.setModel(model);\n    }\n  }\n\n  /**\n   * Called at the start of an epoch.\n   * @param epoch Index of epoch.\n   * @param logs Dictionary of logs.\n   */\n  async onEpochBegin(epoch: number, logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onEpochBegin(epoch, logs);\n    }\n  }\n\n  /**\n   * Called at the end of an epoch.\n   * @param epoch Index of epoch.\n   * @param logs Dictionary of logs.\n   */\n  async onEpochEnd(epoch: number, logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onEpochEnd(epoch, logs);\n    }\n  }\n\n  /**\n   * Called  right before processing a batch.\n   * @param batch Index of batch within the current epoch.\n   * @param logs Dictionary of logs.\n   */\n  async onBatchBegin(batch: number, logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onBatchBegin(batch, logs);\n    }\n  }\n\n  /**\n   * Called at the end of a batch.\n   * @param batch Index of batch within the current epoch.\n   * @param logs Dictionary of logs.\n   */\n  async onBatchEnd(batch: number, logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onBatchEnd(batch, logs);\n    }\n  }\n\n  /**\n   * Called at the beginning of training.\n   * @param logs Dictionary of logs.\n   */\n  async onTrainBegin(logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onTrainBegin(logs);\n    }\n  }\n\n  /**\n   * Called at the end of training.\n   * @param logs Dictionary of logs.\n   */\n  async onTrainEnd(logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onTrainEnd(logs);\n    }\n  }\n}\n\n/**\n * Callback that accumulates epoch averages of metrics.\n *\n * This callback is automatically applied to every LayersModel.\n */\nexport class BaseLogger extends BaseCallback {\n  private seen: number;\n  private totals: UnresolvedLogs;\n\n  constructor() {\n    super();\n  }\n\n  async onEpochBegin(epoch: number) {\n    this.seen = 0;\n    this.totals = {};\n  }\n\n  async onBatchEnd(batch: number, logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    const batchSize = logs['size'] == null ? 0 : logs['size'] as number;\n    this.seen += batchSize;\n    for (const key in logs) {\n      const value = logs[key];\n      if (typeof value === 'number') {\n        if (!this.totals.hasOwnProperty(key)) {\n          this.totals[key] = 0;\n        }\n        this.totals[key] = this.totals[key] as number + value * batchSize;\n      } else {\n        let oldTotalsToDispose: Scalar;\n        if (key in this.totals) {\n          oldTotalsToDispose = this.totals[key] as Scalar;\n        } else {\n          this.totals[key] = 0;\n        }\n        const total: Scalar =\n            tidy(() => add((this.totals[key]), mul(value, batchSize)));\n        this.totals[key] = total;\n        if (oldTotalsToDispose != null) {\n          oldTotalsToDispose.dispose();\n        }\n      }\n    }\n  }\n\n  async onEpochEnd(epoch: number, logs?: UnresolvedLogs) {\n    if (logs != null) {\n      for (const key of this.params['metrics'] as string[]) {\n        if (this.totals[key] == null) {\n          continue;\n        }\n        if (typeof this.totals[key] === 'number') {\n          logs[key] = this.totals[key] as number / this.seen;\n        } else {\n          tidy(() => {\n            const log: Scalar = mul(div(1, this.seen), this.totals[key]);\n            logs[key] = log;\n            (this.totals[key] as Tensor).dispose();\n            keep(logs[key] as Scalar);\n          });\n        }\n      }\n    }\n  }\n}\n\n/**\n * Callback that records events into a `History` object. This callback is\n * automatically applied to every TF.js Layers model. The `History` object\n * gets returned by the `fit` method of models.\n */\nexport class History extends BaseCallback {\n  epoch: number[];\n  history: {[key: string]: Array<number|Tensor>};\n\n  async onTrainBegin(logs?: UnresolvedLogs) {\n    this.epoch = [];\n    this.history = {};\n  }\n\n  async onEpochEnd(epoch: number, logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    this.epoch.push(epoch);\n    for (const key in logs) {\n      if (this.history[key] == null) {\n        this.history[key] = [];\n      }\n      this.history[key].push(logs[key]);\n    }\n  }\n\n  /**\n   * Await the values of all losses and metrics.\n   */\n  async syncData() {\n    const promises: Array<Promise<Float32Array|Int32Array|Uint8Array>> = [];\n    const keys: string[] = [];\n    const indices: number[] = [];\n    for (const key in this.history) {\n      const valueArray = this.history[key];\n      for (let i = 0; i < valueArray.length; ++i) {\n        if (typeof valueArray[i] !== 'number') {\n          const valueScalar = valueArray[i] as Tensor;\n          promises.push(valueScalar.data());\n          keys.push(key);\n          indices.push(i);\n        }\n      }\n    }\n    const values = await Promise.all(promises);\n    for (let n = 0; n < values.length; ++n) {\n      const tensorToDispose = this.history[keys[n]][indices[n]] as Tensor;\n      tensorToDispose.dispose();\n      this.history[keys[n]][indices[n]] = values[n][0];\n    }\n  }\n}\n\nexport interface CustomCallbackArgs {\n  onTrainBegin?: (logs?: Logs) => void | Promise<void>;\n  onTrainEnd?: (logs?: Logs) => void | Promise<void>;\n  onEpochBegin?: (epoch: number, logs?: Logs) => void | Promise<void>;\n  onEpochEnd?: (epoch: number, logs?: Logs) => void | Promise<void>;\n  onBatchBegin?: (batch: number, logs?: Logs) => void | Promise<void>;\n  onBatchEnd?: (batch: number, logs?: Logs) => void | Promise<void>;\n  onYield?: (epoch: number, batch: number, logs: Logs) => void | Promise<void>;\n}\n\n/**\n * Custom callback for training.\n */\nexport class CustomCallback extends BaseCallback {\n  protected readonly trainBegin: (logs?: Logs) => void | Promise<void>;\n  protected readonly trainEnd: (logs?: Logs) => void | Promise<void>;\n  protected readonly epochBegin:\n      (epoch: number, logs?: Logs) => void | Promise<void>;\n  protected readonly epochEnd:\n      (epoch: number, logs?: Logs) => void | Promise<void>;\n  protected readonly batchBegin:\n      (batch: number, logs?: Logs) => void | Promise<void>;\n  protected readonly batchEnd:\n      (batch: number, logs?: Logs) => void | Promise<void>;\n  protected readonly yield:\n      (epoch: number, batch: number, logs: Logs) => void | Promise<void>;\n\n  private yieldEvery: YieldEveryOptions;\n  private currentEpoch = 0;\n\n  constructor(args: CustomCallbackArgs, yieldEvery?: YieldEveryOptions) {\n    super();\n    this.yieldEvery = yieldEvery || 'auto';\n    if (this.yieldEvery === 'auto') {\n      this.yieldEvery = DEFAULT_YIELD_EVERY_MS;\n    }\n    if (this.yieldEvery === 'never' && args.onYield != null) {\n      throw new Error(\n          'yieldEvery is `never` but you provided an `onYield` callback. ' +\n          'Either change `yieldEvery` or remove the callback');\n    }\n    if (util.isNumber(this.yieldEvery)) {\n      // Decorate `maybeWait` so it will be called at most once every\n      // `yieldEvery` ms.\n      this.maybeWait = generic_utils.debounce(\n          this.maybeWait.bind(this), this.yieldEvery as number);\n    }\n    this.trainBegin = args.onTrainBegin;\n    this.trainEnd = args.onTrainEnd;\n    this.epochBegin = args.onEpochBegin;\n    this.epochEnd = args.onEpochEnd;\n    this.batchBegin = args.onBatchBegin;\n    this.batchEnd = args.onBatchEnd;\n    this.yield = args.onYield;\n  }\n\n  async maybeWait(epoch: number, batch: number, logs: UnresolvedLogs) {\n    const ps: Array<void|Promise<void>> = [];\n    if (this.yield != null) {\n      await resolveScalarsInLogs(logs);\n      ps.push(this.yield(epoch, batch, logs as Logs));\n    }\n    ps.push(nextFrame());\n    await Promise.all(ps);\n  }\n\n  async onEpochBegin(epoch: number, logs?: UnresolvedLogs): Promise<void> {\n    this.currentEpoch = epoch;\n    if (this.epochBegin != null) {\n      await resolveScalarsInLogs(logs);\n      await this.epochBegin(epoch, logs as Logs);\n    }\n  }\n\n  async onEpochEnd(epoch: number, logs?: UnresolvedLogs): Promise<void> {\n    const ps: Array<void|Promise<void>> = [];\n    if (this.epochEnd != null) {\n      await resolveScalarsInLogs(logs);\n      ps.push(this.epochEnd(epoch, logs as Logs));\n    }\n    if (this.yieldEvery === 'epoch') {\n      ps.push(nextFrame());\n    }\n    await Promise.all(ps);\n  }\n\n  async onBatchBegin(batch: number, logs?: UnresolvedLogs): Promise<void> {\n    if (this.batchBegin != null) {\n      await resolveScalarsInLogs(logs);\n      await this.batchBegin(batch, logs as Logs);\n    }\n  }\n\n  async onBatchEnd(batch: number, logs?: UnresolvedLogs): Promise<void> {\n    const ps: Array<void|Promise<void>> = [];\n    if (this.batchEnd != null) {\n      await resolveScalarsInLogs(logs);\n      ps.push(this.batchEnd(batch, logs as Logs));\n    }\n    if (this.yieldEvery === 'batch') {\n      ps.push(nextFrame());\n    } else if (util.isNumber(this.yieldEvery)) {\n      ps.push(this.maybeWait(this.currentEpoch, batch, logs));\n    }\n    await Promise.all(ps);\n  }\n\n  async onTrainBegin(logs?: UnresolvedLogs): Promise<void> {\n    if (this.trainBegin != null) {\n      await resolveScalarsInLogs(logs);\n      await this.trainBegin(logs as Logs);\n    }\n  }\n\n  async onTrainEnd(logs?: UnresolvedLogs): Promise<void> {\n    if (this.trainEnd != null) {\n      await resolveScalarsInLogs(logs);\n      await this.trainEnd(logs as Logs);\n    }\n  }\n}\n\n/**\n * Standardize callbacks or configurations of them to an Array of callbacks.\n */\nexport function standardizeCallbacks(\n    callbacks: BaseCallback|BaseCallback[]|CustomCallbackArgs|\n    CustomCallbackArgs[],\n    yieldEvery: YieldEveryOptions): BaseCallback[] {\n  if (callbacks == null) {\n    callbacks = {} as BaseCallback;\n  }\n  if (callbacks instanceof BaseCallback) {\n    return [callbacks];\n  }\n  if (Array.isArray(callbacks) && callbacks[0] instanceof BaseCallback) {\n    return callbacks as BaseCallback[];\n  }\n  // Convert custom callback configs to custom callback objects.\n  const callbackConfigs =\n      generic_utils.toList(callbacks) as CustomCallbackArgs[];\n  return callbackConfigs.map(\n      callbackConfig => new CustomCallback(callbackConfig, yieldEvery));\n}\n\nexport declare type BaseCallbackConstructor = {\n  new (): BaseCallback\n};\n\n/**\n * A global registry for callback constructors to be used during\n * LayersModel.fit().\n */\nexport class CallbackConstructorRegistry {\n  private static constructors:\n      {[verbosityLevel: number]: BaseCallbackConstructor[]} = {};\n\n  /**\n   * Blocks public access to constructor.\n   */\n  private constructor() {}\n\n  /**\n   * Register a tf.LayersModel.fit() callback constructor.\n   *\n   * The registered callback constructor will be used to instantiate\n   * callbacks for every tf.LayersModel.fit() call afterwards.\n   *\n   * @param verbosityLevel Level of verbosity at which the `callbackConstructor`\n   *   is to be reigstered.\n   * @param callbackConstructor A no-arg constructor for `tf.Callback`.\n   * @throws Error, if the same callbackConstructor has been registered before,\n   *   either at the same or a different `verbosityLevel`.\n   */\n  static registerCallbackConstructor(\n      verbosityLevel: number, callbackConstructor: BaseCallbackConstructor) {\n    util.assert(\n        verbosityLevel >= 0 && Number.isInteger(verbosityLevel),\n        () => `Verbosity level is expected to be an integer >= 0, ` +\n            `but got ${verbosityLevel}`);\n    CallbackConstructorRegistry.checkForDuplicate(callbackConstructor);\n    if (CallbackConstructorRegistry.constructors[verbosityLevel] == null) {\n      CallbackConstructorRegistry.constructors[verbosityLevel] = [];\n    }\n    CallbackConstructorRegistry.constructors[verbosityLevel].push(\n        callbackConstructor);\n  }\n\n  private static checkForDuplicate(callbackConstructor:\n                                       BaseCallbackConstructor) {\n    for (const levelName in CallbackConstructorRegistry.constructors) {\n      const constructors = CallbackConstructorRegistry.constructors[+levelName];\n      constructors.forEach(ctor => {\n        if (ctor === callbackConstructor) {\n          throw new ValueError('Duplicate callback constructor.');\n        }\n      });\n    }\n  }\n\n  /**\n   * Clear all registered callback constructors.\n   */\n  protected static clear() {\n    CallbackConstructorRegistry.constructors = {};\n  }\n\n  /**\n   * Create callbacks using the registered callback constructors.\n   *\n   * Given `verbosityLevel`, all constructors registered at that level or above\n   * will be called and the instantiated callbacks will be used.\n   *\n   * @param verbosityLevel: Level of verbosity.\n   */\n  static createCallbacks(verbosityLevel: number): BaseCallback[] {\n    const constructors: BaseCallbackConstructor[] = [];\n    for (const levelName in CallbackConstructorRegistry.constructors) {\n      const level = +levelName;\n      if (verbosityLevel >= level) {\n        constructors.push(...CallbackConstructorRegistry.constructors[level]);\n      }\n    }\n    return constructors.map(ctor => new ctor());\n  }\n}\n\nexport function configureCallbacks(\n    callbacks: BaseCallback[], verbose: ModelLoggingVerbosity, epochs: number,\n    initialEpoch: number, numTrainSamples: number, stepsPerEpoch: number,\n    batchSize: number, doValidation: boolean,\n    callbackMetrics: string[]): {callbackList: CallbackList, history: History} {\n  const history = new History();\n  const actualCallbacks: BaseCallback[] = [\n    new BaseLogger(), ...CallbackConstructorRegistry.createCallbacks(verbose)\n  ];\n  if (callbacks != null) {\n    actualCallbacks.push(...callbacks);\n  }\n  actualCallbacks.push(history);\n  const callbackList = new CallbackList(actualCallbacks);\n\n  // TODO(cais): Figure out when this LayersModel instance can have a\n  // dynamically\n  //   set property called 'callback_model' as in PyKeras.\n\n  callbackList.setParams({\n    epochs,\n    initialEpoch,\n    samples: numTrainSamples,\n    steps: stepsPerEpoch,\n    batchSize,\n    verbose,\n    doValidation,\n    metrics: callbackMetrics,\n  });\n  return {callbackList, history};\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {DataType, serialization, Tensor} from '@tensorflow/tfjs-core';\n\nimport {getUid} from '../backend/state';\nimport {ValueError} from '../errors';\nimport {Shape} from '../keras_format/common';\nimport {Kwargs} from '../types';\n\nimport {DisposeResult, Layer, Node, SymbolicTensor} from './topology';\n\n/**\n * Constructor arguments for InputLayer.\n *\n * Note: You should provide only inputShape or batchInputShape (not both).\n * If only inputShape is provided, then the batchInputShape is determined by\n * the batchSize argument and the inputShape: [batchSize].concat(inputShape).\n */\nexport declare interface InputLayerArgs {\n  /** Input shape, not including the batch axis. */\n  inputShape?: Shape;\n  /** Optional input batch size (integer or null). */\n  batchSize?: number;\n  /** Batch input shape, including the batch axis. */\n  batchInputShape?: Shape;\n  /** Datatype of the input.  */\n  dtype?: DataType;\n  /**\n   * Whether the placeholder created is meant to be sparse.\n   */\n  sparse?: boolean;  // TODO(michaelterry): Not clear whether we'll need this.\n\n  /** Name of the layer. */\n  name?: string;\n}\n\nexport class InputLayer extends Layer {\n  /** @nocollapse */\n  static readonly className = 'InputLayer';\n  sparse: boolean;\n  constructor(args: InputLayerArgs) {\n    super({\n      dtype: args.dtype,\n      name: args.name != null ? args.name : getUid('input').toString()\n    });\n    // Normalize config.batchSize and config.sparse\n    if (args.batchSize == null) {\n      args.batchSize = null;\n    }\n    if (args.sparse == null) {\n      args.sparse = false;\n    }\n\n    this.trainable = false;\n    this.built = true;\n    this.sparse = args.sparse;\n\n    if (args.inputShape != null && args.batchInputShape != null) {\n      throw new ValueError(\n          'Only provide the inputShape OR ' +\n          'batchInputShape argument to inputLayer, not both at the same time.');\n    }\n    let batchInputShape = args.batchInputShape;\n    if (batchInputShape == null) {\n      if (args.inputShape == null) {\n        throw new ValueError(\n            'An InputLayer should be passed either a ' +\n            '`batchInputShape` or an `inputShape`.');\n      } else {\n        batchInputShape = [args.batchSize].concat(args.inputShape);\n      }\n    } else {\n      // TODO(michaelterry): Backport to PyKeras\n      if (args.batchSize != null) {\n        throw new ValueError(\n            'Cannot specify batchSize if batchInputShape is ' +\n            'specified when creating an InputLayer.');\n      }\n    }\n\n    const dtype = args.dtype || 'float32';\n\n    this.batchInputShape = batchInputShape;\n    this.dtype = dtype;\n    // TODO(michaelterry): Backport this to PyKeras?\n    this.inputSpec = [{shape: batchInputShape}];\n\n    const inputTensor = new SymbolicTensor(\n        this.dtype, this.batchInputShape, this, [], {}, this.name);\n    inputTensor.nodeIndex = 0;\n    inputTensor.tensorIndex = 0;\n\n    // Create an input node to add to this.outboundNode.\n    // (This call has side effects.)\n    // tslint:disable-next-line:no-unused-expression\n    new Node({\n      outboundLayer: this,\n      inboundLayers: [],\n      nodeIndices: [],\n      tensorIndices: [],\n      inputTensors: [inputTensor],\n      outputTensors: [inputTensor],\n      inputMasks: [null],\n      outputMasks: [null],\n      inputShapes: [batchInputShape],\n      outputShapes: [batchInputShape]\n    });\n  }\n\n  apply(\n      inputs: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n      kwargs?: Kwargs): Tensor|Tensor[]|SymbolicTensor {\n    throw new ValueError(\n        'Cannot pass any input to an ' +\n        `InputLayer's apply() method. InputLayer name: ${this.name}`);\n  }\n\n  dispose(): DisposeResult {\n    // dispose() for InputLayer is overridden as no-op.\n    return {refCountAfterDispose: this._refCount, numDisposedVariables: 0};\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {\n      batchInputShape: this.batchInputShape,\n      dtype: this.dtype,\n      sparse: this.sparse,\n      name: this.name\n    };\n  }\n}\nserialization.registerClass(InputLayer);\n\n/**\n * Config for the Input function.\n *\n * Note: You should provide only shape or batchShape (not both).\n * If only shape is provided, then the batchShape becomes\n * [null].concat(inputShape).\n */\nexport interface InputConfig {\n  /**\n   * A shape, not including the batch size. For instance, `shape=[32]`\n   * indicates that the expected input will be batches of 32-dimensional\n   * vectors.\n   */\n  shape?: Shape;\n  /**\n   * A shape tuple (integer), including the batch size. For instance,\n   * `batchShape=[10, 32]` indicates that the expected input will be batches of\n   * 10 32-dimensional vectors. `batchShape=[null, 32]` indicates batches of an\n   * arbitrary number of 32-dimensional vectors.\n   */\n  batchShape?: Shape;\n  /**\n   * An optional name string for the layer. Should be unique in a model (do not\n   * reuse the same name twice). It will be autogenerated if it isn't provided.\n   */\n  name?: string;\n  dtype?: DataType;\n  /**\n   * A boolean specifying whether the placeholder to be created is sparse.\n   */\n  sparse?: boolean;\n}\n\nexport function Input(config: InputConfig): SymbolicTensor {\n  if (config.batchShape == null && config.shape == null) {\n    throw new Error(\n        'Please provide to Input either a `shape`' +\n        ' or a `batchShape` argument. Note that ' +\n        '`shape` does not include the batch ' +\n        'dimension.');\n  }\n  if (config.batchShape != null && config.shape != null) {\n    // TODO(michaelterry): Backport to PyKeras.\n    throw new ValueError(\n        'Please provide either a `shape` or `batchShape` ' +\n        'argument to Input, but not both.');\n  }\n  let batchShape = config.batchShape;\n  if (config.shape != null && batchShape == null) {\n    batchShape = [null].concat(config.shape);\n  }\n\n  let dtype = config.dtype;\n  if (dtype == null) {\n    dtype = 'float32';\n  }\n\n  const inputLayer = new InputLayer({\n    batchInputShape: batchShape,\n    name: config.name,\n    dtype,\n    sparse: config.sparse\n  });\n\n  const outputs = inputLayer.inboundNodes[0].outputTensors;\n  return outputs[0];\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {dispose, Scalar} from '@tensorflow/tfjs-core';\n\n/**\n * Logs in which values can be either numbers or Tensors (Scalars).\n *\n * Used internally.\n */\nexport type UnresolvedLogs = {\n  [key: string]: number|Scalar;\n};\n\n/**\n * Turn any Scalar values in a Logs object into actual number values.\n *\n * @param logs The `Logs` object to be resolved in place.\n */\nexport async function resolveScalarsInLogs(logs: UnresolvedLogs) {\n  if (logs == null) {\n    return;\n  }\n  const promises: Array<Promise<Float32Array|Int32Array|Uint8Array>> = [];\n  const keys: string[] = [];\n  const scalarsToDispose: Scalar[] = [];\n  for (const key in logs) {\n    const value = logs[key];\n    if (typeof value !== 'number') {\n      const valueScalar = value;\n      promises.push(valueScalar.data());\n      keys.push(key);\n      scalarsToDispose.push(valueScalar);\n    }\n  }\n  if (promises.length > 0) {\n    const values = await Promise.all(promises);\n    for (let i = 0; i < values.length; ++i) {\n      logs[keys[i]] = values[i][0];\n    }\n    // Dispose the original scalar tensors.\n    dispose(scalarsToDispose);\n  }\n}\n\n/**\n * Dispose all Tensors in an UnresolvedLogs object.\n *\n * @param logs An `UnresolvedLogs` object potentially containing `tf.Tensor`s in\n *   places where the values can be `tf.Tensor` or `number`.\n */\nexport function disposeTensorsInLogs(logs: UnresolvedLogs) {\n  if (logs == null) {\n    return;\n  }\n  for (const key in logs) {\n    const value = logs[key];\n    if (typeof value !== 'number') {\n      value.dispose();\n    }\n  }\n}\n\n/**\n * Logs in which values can only be numbers.\n *\n * Used when calling client-provided custom callbacks.\n */\nexport type Logs = {\n  [key: string]: number;\n};\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original Source layers/__init__.py */\nimport {serialization} from '@tensorflow/tfjs-core';\n\nimport {deserializeKerasObject} from '../utils/generic_utils';\n\n/**\n * Instantiate a layer from a config dictionary.\n * @param config dict of the form {class_name: str, config: dict}\n * @param customObjects dict mapping class names (or function names)\n *   of custom (non-Keras) objects to class/functions\n * @param fastWeightInit Optional flag to use fast weight initialization\n *   during deserialization. This is applicable to cases in which\n *   the initialization will be immediately overwritten by loaded weight\n *   values. Default: `false`.\n * @returns Layer instance (may be LayersModel, Sequential, Layer...)\n */\nexport function deserialize(\n    config: serialization.ConfigDict,\n    customObjects = {} as serialization.ConfigDict,\n    fastWeightInit = false): serialization.Serializable {\n  return deserializeKerasObject(\n      config, serialization.SerializationMap.getMap().classNameMap,\n      customObjects, 'layer', fastWeightInit);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original Source: losses.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {Tensor, Tensor1D, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {epsilon} from './backend/common';\nimport * as K from './backend/tfjs_backend';\nimport {ValueError} from './errors';\nimport {LossOrMetricFn} from './types';\n\n/**\n * Normalizes a tensor wrt the L2 norm alongside the specified axis.\n * @param x\n * @param axis Axis along which to perform normalization.\n */\nexport function l2Normalize(x: Tensor, axis?: number): Tensor {\n  return tidy(() => {\n    if (x.dtype !== 'float32') {\n      x = x.asType('float32');\n    }\n    const squareSum = tfc.sum(K.square(x), axis, true);\n    const epsilonTensor = tfc.fill(squareSum.shape, epsilon());\n    const norm = tfc.sqrt(tfc.maximum(squareSum, epsilonTensor));\n    return tfc.div(x, norm);\n  });\n}\n\nexport function meanSquaredError(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => tfc.mean(K.square(tfc.sub(yPred, yTrue)), -1));\n}\n\nexport function meanAbsoluteError(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => tfc.mean(tfc.abs(tfc.sub(yPred, yTrue)), -1));\n}\n\nexport function meanAbsolutePercentageError(\n    yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const diff = tfc.sub(yTrue, yPred);\n    const clippedTrue =\n        tfc.clipByValue(tfc.abs(yTrue), epsilon(), Number.MAX_VALUE);\n    const absResult = tfc.abs(tfc.div(diff, clippedTrue));\n    return tfc.mul(100, tfc.mean(absResult, -1));\n  });\n}\n\nexport function meanSquaredLogarithmicError(\n    yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const clippedPred = tfc.clipByValue(yPred, epsilon(), Number.MAX_VALUE);\n    const firstLog = tfc.log(tfc.add(1, clippedPred));\n\n    const clippedTrue = tfc.clipByValue(yTrue, epsilon(), Number.MAX_VALUE);\n    const secondLog = tfc.log(tfc.add(1, clippedTrue));\n\n    return tfc.mean(K.square(tfc.sub(firstLog, secondLog)), -1);\n  });\n}\n\nexport function squaredHinge(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const maxResult = tfc.maximum(0, tfc.sub(1, tfc.mul(yTrue, yPred)));\n    return tfc.mean(K.square(maxResult), -1);\n  });\n}\n\nexport function hinge(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const maxResult = tfc.maximum(0, tfc.sub(1, tfc.mul(yTrue, yPred)));\n    return tfc.mean(maxResult, -1);\n  });\n}\n\nexport function categoricalHinge(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const pos = tfc.sum(tfc.mul(yTrue, yPred), -1);\n    const neg = tfc.max(tfc.mul(tfc.sub(1, yTrue), yPred), -1);\n    return tfc.maximum(0, tfc.add(1, tfc.sub(neg, pos)));\n  });\n}\n\n/**\n * Logarithm of the hyperbolic cosine of the prediction error.\n *\n * `log(cosh(x))` is approximately equal to `(x ** 2) / 2` for small `x` and\n * to `abs(x) - log(2)` for large `x`. This means that 'logcosh' works mostly\n * like the mean squared error, but will not be so strongly affected by the\n * occasional wildly incorrect prediction.\n */\nexport function logcosh(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const log2 = Math.log(2);\n    const predictionDiff = tfc.sub(yPred, yTrue);\n    const logcoshResult = tfc.sub(\n        tfc.add(predictionDiff, tfc.softplus(tfc.mul(-2, predictionDiff))),\n        log2);\n    return tfc.mean(logcoshResult, -1);\n  });\n}\n\nexport function categoricalCrossentropy(\n    target: Tensor, output: Tensor, fromLogits = false): Tensor {\n  return tidy(() => {\n    if (fromLogits) {\n      output = tfc.softmax(output);\n    } else {\n      // scale preds so that the class probabilities of each sample sum to 1.\n      const outputSum = tfc.sum(output, output.shape.length - 1, true);\n      output = tfc.div(output, outputSum);\n    }\n    output = tfc.clipByValue(output, epsilon(), 1 - epsilon());\n    return tfc.neg(tfc.sum(\n        tfc.mul(target.toFloat(), tfc.log(output)), output.shape.length - 1));\n  });\n}\n\n/**\n * Categorical crossentropy with integer targets.\n *\n * @param target An integer tensor.\n * @param output A tensor resulting from a softmax (unless `fromLogits` is\n *  `true`, in which case `output` is expected to be the logits).\n * @param fromLogits Boolean, whether `output` is the result of a softmax, or is\n *   a tensor of logits.\n */\nexport function sparseCategoricalCrossentropy(\n    target: Tensor, output: Tensor): Tensor {\n  return tidy(() => {\n    const flatTarget = tfc.floor(K.flatten(target)).toInt() as Tensor1D;\n    output = tfc.clipByValue(output, epsilon(), 1 - epsilon());\n    const outputShape = output.shape;\n    const oneHotTarget =\n        tfc.oneHot(flatTarget, outputShape[outputShape.length - 1])\n            .reshape(outputShape);\n    const fromLogits = false;\n    return categoricalCrossentropy(oneHotTarget, output, fromLogits);\n  });\n}\n\n/**\n * From TensorFlow's implementation in nn_impl.py:\n *\n * For brevity, let `x = logits`, `z = labels`.  The logistic loss is\n *      z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))\n *    = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))\n *    = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))\n *    = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))\n *    = (1 - z) * x + log(1 + exp(-x))\n *    = x - x * z + log(1 + exp(-x))\n * For x < 0, to avoid overflow in exp(-x), we reformulate the above\n *      x - x * z + log(1 + exp(-x))\n *    = log(exp(x)) - x * z + log(1 + exp(-x))\n *    = - x * z + log(1 + exp(x))\n * Hence, to ensure stability and avoid overflow, the implementation uses this\n * equivalent formulation\n *    max(x, 0) - x * z + log(1 + exp(-abs(x)))\n *\n * @param labels The labels.\n * @param logits The logits.\n */\nexport function sigmoidCrossEntropyWithLogits(\n    labels: Tensor, logits: Tensor): Tensor {\n  if (!util.arraysEqual(labels.shape, logits.shape)) {\n    throw new ValueError(\n        `logits and labels must have the same shape, but got shapes ` +\n        `${JSON.stringify(labels.shape)} and ${JSON.stringify(logits.shape)}`);\n  }\n  return tidy(() => {\n    // The logistic loss formula from above is\n    //   x - x * z + log(1 + exp(-x))\n    // For x < 0, a more numerically stable formula is\n    //   -x * z + log(1 + exp(x))\n    // Note that these two expressions can be combined into the following:\n    //   max(x, 0) - x * z + log(1 + exp(-abs(x)))\n    const reluLogits = logits.relu();\n    const negAbsLogits = logits.abs().neg();\n    return reluLogits.sub(logits.mul(labels)).add(negAbsLogits.exp().log1p());\n  });\n}\n\nexport function binaryCrossentropy(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    let y: Tensor;\n    y = tfc.clipByValue(yPred, epsilon(), 1 - epsilon());\n    y = tfc.log(tfc.div(y, tfc.sub(1, y)));\n    return tfc.mean(sigmoidCrossEntropyWithLogits(yTrue, y), -1);\n  });\n}\n\nexport function kullbackLeiblerDivergence(\n    yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const clippedTrue = tfc.clipByValue(yTrue, epsilon(), 1);\n    const clippedPred = tfc.clipByValue(yPred, epsilon(), 1);\n    return tfc.sum(\n        tfc.mul(yTrue, tfc.log(tfc.div(clippedTrue, clippedPred))), -1);\n  });\n}\n\nexport function poisson(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const logPred = tfc.log(tfc.add(epsilon(), yPred));\n    return tfc.mean(tfc.sub(yPred, tfc.mul(yTrue, logPred)), -1);\n  });\n}\n\nexport function cosineProximity(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const trueNormalized = l2Normalize(yTrue, -1);\n    const predNormalized = l2Normalize(yPred, -1);\n    const trueXPred = tfc.mul(trueNormalized, predNormalized);\n    return tfc.neg(tfc.sum(trueXPred, -1));\n  });\n}\n\nexport const mse = meanSquaredError;\nexport const MSE = meanSquaredError;\nexport const mae = meanAbsoluteError;\nexport const MAE = meanAbsoluteError;\nexport const mape = meanAbsolutePercentageError;\nexport const MAPE = meanAbsolutePercentageError;\nexport const msle = meanSquaredLogarithmicError;\nexport const MSLE = meanSquaredLogarithmicError;\nexport const kld = kullbackLeiblerDivergence;\nexport const KLD = kullbackLeiblerDivergence;\nexport const cosine = cosineProximity;\n\n// TODO(michaelterry): Add deserialize() function.\n\nexport const lossesMap: {[functionName: string]: LossOrMetricFn} = {\n  meanSquaredError,\n  meanAbsoluteError,\n  meanAbsolutePercentageError,\n  meanSquaredLogarithmicError,\n  squaredHinge,\n  hinge,\n  categoricalHinge,\n  logcosh,\n  categoricalCrossentropy,\n  sparseCategoricalCrossentropy,\n  binaryCrossentropy,\n  kullbackLeiblerDivergence,\n  poisson,\n  cosineProximity\n};\n\n// Porting note: This diverges from the PyKeras implementation and may need to\n// change based on (de)serialization requirements.\nexport function get(identifierOrFn: string|LossOrMetricFn): LossOrMetricFn {\n  if (typeof identifierOrFn === 'string') {\n    if (identifierOrFn in lossesMap) {\n      return lossesMap[identifierOrFn];\n    }\n    let errMsg = `Unknown loss ${identifierOrFn}`;\n    if (identifierOrFn.toLowerCase().includes('softmaxcrossentropy')) {\n      errMsg = `Unknown loss ${identifierOrFn}. ` +\n          'Use \"categoricalCrossentropy\" as the string name for ' +\n          'tf.losses.softmaxCrossEntropy';\n    }\n    throw new ValueError(errMsg);\n  } else {\n    return identifierOrFn;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Built-in metrics.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {Tensor, tidy} from '@tensorflow/tfjs-core';\n\nimport * as K from './backend/tfjs_backend';\nimport {NotImplementedError, ValueError} from './errors';\nimport {categoricalCrossentropy as categoricalCrossentropyLoss, cosineProximity, meanAbsoluteError, meanAbsolutePercentageError, meanSquaredError, sparseCategoricalCrossentropy as sparseCategoricalCrossentropyLoss} from './losses';\nimport {binaryCrossentropy as lossBinaryCrossentropy} from './losses';\nimport {lossesMap} from './losses';\nimport {LossOrMetricFn} from './types';\nimport * as util from './utils/generic_utils';\n\nexport function binaryAccuracy(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const threshold = tfc.mul(.5, tfc.onesLike(yPred));\n    const yPredThresholded = K.cast(tfc.greater(yPred, threshold), yTrue.dtype);\n    return tfc.mean(tfc.equal(yTrue, yPredThresholded), -1);\n  });\n}\n\nexport function categoricalAccuracy(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(\n      () => K.cast(\n          tfc.equal(tfc.argMax(yTrue, -1), tfc.argMax(yPred, -1)), 'float32'));\n}\n\nfunction truePositives(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    return tfc.logicalAnd(yTrue.equal(1), yPred.equal(1)).sum().cast('float32');\n  });\n}\n\nfunction falseNegatives(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    return tfc.logicalAnd(yTrue.equal(1), yPred.equal(0)).sum().cast('float32');\n  });\n}\n\nfunction falsePositives(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    return tfc.logicalAnd(yTrue.equal(0), yPred.equal(1)).sum().cast('float32');\n  });\n}\n\nexport function precision(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const tp = truePositives(yTrue, yPred);\n    const fp = falsePositives(yTrue, yPred);\n\n    const denominator = tp.add(fp);\n\n    return tfc.where(tfc.greater(denominator, 0), tp.div(denominator), 0)\n        .cast('float32');\n  });\n}\n\nexport function recall(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const tp = truePositives(yTrue, yPred);\n    const fn = falseNegatives(yTrue, yPred);\n\n    const denominator = tp.add(fn);\n\n    return tfc.where(tfc.greater(denominator, 0), tp.div(denominator), 0)\n        .cast('float32');\n  });\n}\n\nexport function binaryCrossentropy(yTrue: Tensor, yPred: Tensor): Tensor {\n  return lossBinaryCrossentropy(yTrue, yPred);\n}\n\nexport function sparseCategoricalAccuracy(\n    yTrue: Tensor, yPred: Tensor): Tensor {\n  if (yTrue.rank === yPred.rank) {\n    yTrue = yTrue.squeeze([yTrue.rank - 1]);\n  }\n  yPred = yPred.argMax(-1);\n  if (yPred.dtype !== yTrue.dtype) {\n    yPred = yPred.asType(yTrue.dtype);\n  }\n  return tfc.equal(yTrue, yPred).asType('float32');\n}\n\nexport function topKCategoricalAccuracy(yTrue: Tensor, yPred: Tensor): Tensor {\n  throw new NotImplementedError();\n}\n\nexport function sparseTopKCategoricalAccuracy(\n    yTrue: Tensor, yPred: Tensor): Tensor {\n  throw new NotImplementedError();\n}\n\n// Aliases.\nexport const mse = meanSquaredError;\nexport const MSE = meanSquaredError;\nexport const mae = meanAbsoluteError;\nexport const MAE = meanAbsoluteError;\nexport const mape = meanAbsolutePercentageError;\nexport const MAPE = meanAbsolutePercentageError;\nexport const categoricalCrossentropy = categoricalCrossentropyLoss;\nexport const cosine = cosineProximity;\nexport const sparseCategoricalCrossentropy = sparseCategoricalCrossentropyLoss;\n\n// TODO(cais, nielsene): Add serialize().\n\nexport const metricsMap: {[functionName: string]: LossOrMetricFn} = {\n  binaryAccuracy,\n  categoricalAccuracy,\n  precision,\n  categoricalCrossentropy,\n  sparseCategoricalCrossentropy,\n  mse,\n  MSE,\n  mae,\n  MAE,\n  mape,\n  MAPE,\n  cosine\n};\n\nexport function get(identifier: string|LossOrMetricFn): LossOrMetricFn {\n  if (typeof identifier === 'string' && identifier in metricsMap) {\n    return metricsMap[identifier];\n  } else if (typeof identifier !== 'string' && identifier != null) {\n    return identifier;\n  } else {\n    throw new ValueError(`Unknown metric ${identifier}`);\n  }\n}\n\n/**\n * Get the shortcut function name.\n *\n * If the fn name is a string,\n *   directly return the string name.\n * If the function is included in metricsMap or lossesMap,\n *   return key of the map.\n *   - If the function relative to multiple keys,\n *     return the first found key as the function name.\n *   - If the function exists in both lossesMap and metricsMap,\n *     search lossesMap first.\n * If the function is not included in metricsMap or lossesMap,\n *   return the function name.\n *\n * @param fn loss function, metric function, or short cut name.\n * @returns Loss or Metric name in string.\n */\nexport function getLossOrMetricName(fn: string|LossOrMetricFn): string {\n  util.assert(fn !== null, `Unknown LossOrMetricFn ${fn}`);\n  if (typeof fn === 'string') {\n    return fn;\n  } else {\n    let fnName;\n    for (const key of Object.keys(lossesMap)) {\n      if (lossesMap[key] === fn) {\n        fnName = key;\n        break;\n      }\n    }\n    if (fnName !== undefined) {\n      return fnName;\n    }\n    for (const key of Object.keys(metricsMap)) {\n      if (metricsMap[key] === fn) {\n        fnName = key;\n        break;\n      }\n    }\n    if (fnName !== undefined) {\n      return fnName;\n    }\n    return (fn as Function).name;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/** Utility functions related to user-defined metadata. */\n\n// Maximum recommended serialized size for user-defined metadata.\n// Beyond this limit, a warning message will be printed during model loading and\n// saving.\nexport const MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH = 1 * 1024 * 1024;\n\n/**\n * Check validity of user-defined metadata.\n *\n * @param userDefinedMetadata\n * @param modelName Name of the model that the user-defined metadata belongs to.\n *   Used during construction of error messages.\n * @param checkSize Whether to check the size of the metadata is under\n *   recommended limit. Default: `false`. If `true`, will try stringify the\n *   JSON object and print a console warning if the serialzied size is above the\n *   limit.\n * @throws Error if `userDefinedMetadata` is not a plain JSON object.\n */\nexport function checkUserDefinedMetadata(\n    userDefinedMetadata: {}, modelName: string, checkSize = false): void {\n  if (userDefinedMetadata == null ||\n      typeof userDefinedMetadata !== 'object' ||\n      Object.getPrototypeOf(userDefinedMetadata) !== Object.prototype ||\n      !plainObjectCheck(userDefinedMetadata)) {\n    throw new Error(\n        'User-defined metadata is expected to be a JSON object, but is not.');\n  }\n\n  if (checkSize) {\n    const out = JSON.stringify(userDefinedMetadata);\n    if (out.length > MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH) {\n      console.warn(\n          `User-defined metadata of model \"${modelName}\" is too large in ` +\n          `size (length=${out.length} when serialized). It is not ` +\n          `recommended to store such large objects in user-defined metadata. ` +\n          `Please make sure its serialized length is <= ` +\n          `${MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH}.`);\n    }\n  }\n}\n\n/**\n * Check if an input is plain JSON object or any valid subfield of it.\n *\n * @param x The input to be checked.\n * @param assertObject Whether to assert `x` is a JSON object, i.e., reject\n *   cases of arrays and primitives.\n * @return Returns `true` if and only if `x` is a plain JSON object,\n *   a JSON-valid primitive including string, number, boolean and null,\n *   or an array of the said types.\n */\n// tslint:disable-next-line:no-any\nexport function plainObjectCheck(x: any): boolean {\n  if (x === null) {\n    // Note: typeof `null` is 'object', and `null` is valid in JSON.\n    return true;\n  } else if (typeof x === 'object') {\n    if (Object.getPrototypeOf(x) === Object.prototype) {\n      // `x` is a JavaScript object and its prototype is Object.\n      const keys = Object.keys(x);\n      for (const key of keys) {\n        if (typeof key !== 'string') {\n          // JSON keys must be strings.\n          return false;\n        }\n        if (!plainObjectCheck(x[key])) {  // Recursive call.\n          return false;\n        }\n      }\n      return true;\n    } else {\n      // `x` is a JavaScript object but its prototype is not Object.\n      if (Array.isArray(x)) {\n        // `x` is a JavaScript array.\n        for (const item of x) {\n          if (!plainObjectCheck(item)) {  // Recursive call.\n            return false;\n          }\n        }\n        return true;\n      } else {\n        // `x` is a JavaScript object and its prototype is not Object,\n        // and it's not an Array. I.e., it's a complex object such as\n        // `Error` and `Date`.\n        return false;\n      }\n    }\n  } else {\n    // `x` is not a JavaScript object or `null`.\n    const xType = typeof x;\n    return xType === 'string' || xType === 'number' || xType === 'boolean';\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {Container} from '../engine/container';\nimport {Layer, Node} from '../engine/topology';\nimport {countParamsInWeights} from './variable_utils';\n\n/**\n * Print the summary of a LayersModel object.\n *\n * @param model tf.LayersModel instance.\n * @param lineLength Total length of printed lines. Set this to adapt to the\n *   display to different terminal or console sizes.\n * @param positions Relative or absolute positions of log elements in each\n *   line. Each number corresponds to right-most (i.e., ending) position of a\n *   column.\n *   If not provided, defaults to `[0.45, 0.85, 1]` for sequential-like\n *   models and `[0.33, 0.55, 0.67, 1]` for non-sequential like models.\n * @param printFn Print function to use.\n *   It will be called on each line of the summary. You can provide a custom\n *   function in order to capture the string summary. Defaults to `console.log`.\n */\nexport function printSummary(\n    model: Container, lineLength?: number, positions?: number[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void =\n        console.log): void {\n  const sequentialLike = isModelSequentialLike(model);\n\n  // Header names for different log elements.\n  const toDisplay: string[] = ['Layer (type)', 'Output shape', 'Param #'];\n  if (sequentialLike) {\n    lineLength = lineLength || 65;\n    positions = positions || [0.45, 0.85, 1];\n  } else {\n    lineLength = lineLength || 98;\n    positions = positions || [0.33, 0.55, 0.67, 1];\n    // Header names for different log elements.\n  }\n\n  if (positions[positions.length - 1] <= 1) {\n    // `positions` is relative. Convert it to absolute positioning.\n    positions = positions.map(p => Math.floor(lineLength * p));\n  }\n\n  let relevantNodes: Node[];\n  if (!sequentialLike) {\n    toDisplay.push('Receives inputs');\n    relevantNodes = [];\n    for (const depth in model.nodesByDepth) {\n      relevantNodes.push(...model.nodesByDepth[depth]);\n    }\n  }\n\n  printFn('_'.repeat(lineLength));\n  printRow(toDisplay, positions, printFn);\n  printFn('='.repeat(lineLength));\n\n  const layers = model.layers;\n  for (let i = 0; i < layers.length; ++i) {\n    if (sequentialLike) {\n      printLayerSummary(layers[i], positions, printFn);\n    } else {\n      printLayerSummaryWithConnections(\n          layers[i], positions, relevantNodes, printFn);\n    }\n    printFn((i === layers.length - 1 ? '=' : '_').repeat(lineLength));\n  }\n\n  // tslint:disable-next-line:no-any\n  (model as any).checkTrainableWeightsConsistency();\n\n  const trainableCount = countTrainableParams(model);\n  const nonTrainableCount = countParamsInWeights(model.nonTrainableWeights);\n\n  printFn(`Total params: ${trainableCount + nonTrainableCount}`);\n  printFn(`Trainable params: ${trainableCount}`);\n  printFn(`Non-trainable params: ${nonTrainableCount}`);\n  printFn('_'.repeat(lineLength));\n}\n\nfunction countTrainableParams(model: Container): number {\n  let trainableCount: number;\n  // tslint:disable:no-any\n  if ((model as any).collectedTrainableWeights != null) {\n    trainableCount =\n        countParamsInWeights((model as any).collectedTrainableWeights);\n  } else {\n    trainableCount = countParamsInWeights(model.trainableWeights);\n  }\n  // tslint:enable:no-any\n  return trainableCount;\n}\n\nfunction isModelSequentialLike(model: Container): boolean {\n  let sequentialLike = true;\n  const nodesByDepth: Node[][] = [];\n  const nodes: Node[] = [];\n  for (const depth in model.nodesByDepth) {\n    nodesByDepth.push(model.nodesByDepth[depth]);\n  }\n  for (const depthNodes of nodesByDepth) {\n    if (depthNodes.length > 1 ||\n        depthNodes.length === 1 && depthNodes[0].inboundLayers.length > 1) {\n      sequentialLike = false;\n      break;\n    }\n    nodes.push(...depthNodes);\n  }\n  if (sequentialLike) {\n    // Search for shared layers.\n    for (const layer of model.layers) {\n      let flag = false;\n      for (const node of layer.inboundNodes) {\n        if (nodes.indexOf(node) !== -1) {\n          if (flag) {\n            sequentialLike = false;\n            break;\n          } else {\n            flag = true;\n          }\n        }\n      }\n      if (!sequentialLike) {\n        break;\n      }\n    }\n  }\n  return sequentialLike;\n}\n\nfunction printRow(\n    fields: string[], positions: number[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void = console.log) {\n  let line = '';\n  for (let i = 0; i < fields.length; ++i) {\n    if (i > 0) {\n      line = line.slice(0, line.length - 1) + ' ';\n    }\n    line += fields[i];\n    line = line.slice(0, positions[i]);\n    line += ' '.repeat(positions[i] - line.length);\n  }\n  printFn(line);\n}\n\n/**\n * Prints a summary for a single Layer, without connectivity information.\n *\n * @param layer: Layer instance to print.\n */\nfunction printLayerSummary(\n    layer: Layer, positions: number[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void) {\n  let outputShape: string;\n  try {\n    outputShape = JSON.stringify(layer.outputShape);\n  } catch (err) {\n    outputShape = 'multiple';\n  }\n\n  const name = layer.name;\n  const className = layer.getClassName();\n  const fields: string[] =\n      [`${name} (${className})`, outputShape, layer.countParams().toString()];\n  printRow(fields, positions, printFn);\n}\n\n/**\n * Prints a summary for a single Layer, with connectivity information.\n */\nfunction printLayerSummaryWithConnections(\n    layer: Layer, positions: number[], relevantNodes: Node[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void) {\n  let outputShape: string;\n  try {\n    outputShape = JSON.stringify(layer.outputShape);\n  } catch (err) {\n    outputShape = 'multiple';\n  }\n\n  const connections: string[] = [];\n  for (const node of layer.inboundNodes) {\n    if (relevantNodes != null && relevantNodes.length > 0 &&\n        relevantNodes.indexOf(node) === -1) {\n      continue;\n    }\n    for (let i = 0; i < node.inboundLayers.length; ++i) {\n      const inboundLayer = node.inboundLayers[i].name;\n      const inboundLayerIndex = node.nodeIndices[i];\n      const inboundTensorIndex = node.tensorIndices[i];\n      connections.push(\n          `${inboundLayer}[${inboundLayerIndex}][${inboundTensorIndex}]`);\n    }\n  }\n  const name = layer.name;\n  const className = layer.getClassName();\n  const firstConnection = connections.length === 0 ? '' : connections[0];\n  const fields: string[] = [\n    `${name} (${className})`, outputShape, layer.countParams().toString(),\n    firstConnection\n  ];\n\n  printRow(fields, positions, printFn);\n  for (let i = 1; i < connections.length; ++i) {\n    printRow(['', '', '', connections[i]], positions, printFn);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n// Porting note: This file doesn't exist in PyKeras.\n// Its purpose here is to centralize the boundary layer between\n// tfjs-layers's internal Config TS-Centric format and PyKeras's\n// serialized Python Config format.\n\nimport {serialization} from '@tensorflow/tfjs-core';\n\nimport {PyJsonValue} from '../keras_format/types';\nimport * as generic_utils from '../utils/generic_utils';\n// tslint:enable\n\n/**\n * Test whether a value in an array is the name of a LayersModel or Layer.\n * @param key The key name that the value is found under. Note that the key\n *   may not be at the level immediately above the value, if the value is in a\n *   nested array.\n * @param index Index of the value in the Array that it is found in.\n * @param value The value object.\n * @returns A boolean indicating whether value is a name.\n */\nfunction isArrayItemInputOrOutputName<T>(\n    key: string, index: number, value: T): boolean {\n  return (key === 'inboundNodes' || key === 'outputLayers' ||\n          key === 'inputLayers') &&\n      index === 0 && typeof value === 'string';\n}\n\n/**\n * Convert a Pythonic config object to TypeScript config object.\n * @param pythonicConfig The config object to convert.\n * @param key Optional key name of the object being converted.\n * @returns Result of the conversion.\n */\nexport function convertPythonicToTs(\n    pythonicConfig: PyJsonValue, key?: string): serialization.ConfigDictValue {\n  if (pythonicConfig === null) {\n    return null;\n  } else if (typeof pythonicConfig === 'string') {\n    return generic_utils.toCamelCase(pythonicConfig);\n  } else if (\n      (typeof pythonicConfig === 'number') ||\n      (typeof pythonicConfig === 'boolean')) {\n    return pythonicConfig;\n  } else if (pythonicConfig instanceof Array) {\n    const tsArray = [];\n    const arrayLength = pythonicConfig.length;\n    for (let i = 0; i < arrayLength; ++i) {\n      const item = pythonicConfig[i];\n      if (isArrayItemInputOrOutputName(key, i, item)) {\n        tsArray.push(item);\n      } else {\n        tsArray.push(convertPythonicToTs(item, key));\n      }\n    }\n    return tsArray;\n  } else {\n    const tsDict: serialization.ConfigDict = {};\n    for (const pythonicKey of Object.keys(pythonicConfig)) {\n      const pythonicValue = pythonicConfig[pythonicKey];\n      if (pythonicKey === 'name' && typeof pythonicValue === 'string') {\n        // Special case the 'name' key with a string value. Name values, such as\n        // the names of LayersModel and Layer instances, should not undergo the\n        // camel-case conversion.\n        tsDict[pythonicKey] = pythonicValue;\n      } else {\n        const tsKey = generic_utils.toCamelCase(pythonicKey);\n        tsDict[tsKey] = convertPythonicToTs(pythonicValue, tsKey);\n      }\n    }\n    return tsDict;\n  }\n}\n\n/**\n * Convert a TypeScript config object to Python config object.\n * @param tsConfig The config object to convert.\n * @param key Optional key name of the object being converted.\n * @returns Result of the conversion.\n */\nexport function convertTsToPythonic(\n    tsConfig: serialization.ConfigDictValue, key?: string): PyJsonValue {\n  if (tsConfig === null || tsConfig === undefined) {\n    return null;\n  } else if (typeof tsConfig === 'string') {\n    return generic_utils.toSnakeCase(tsConfig);\n  } else if (\n      (typeof tsConfig === 'number') || (typeof tsConfig === 'boolean')) {\n    return tsConfig;\n  } else if (tsConfig instanceof Array) {\n    const pyArray = [];\n    const arrayLength = tsConfig.length;\n    for (let i = 0; i < arrayLength; ++i) {\n      const item = tsConfig[i];\n      if (isArrayItemInputOrOutputName(key, i, item)) {\n        pyArray.push(item);\n      } else {\n        pyArray.push(convertTsToPythonic(item, key));\n      }\n    }\n    return pyArray;\n  } else {\n    const pyDict: serialization.ConfigDict = {};\n    for (const tsKey of Object.keys(tsConfig)) {\n      const tsValue = tsConfig[tsKey];\n      const pyKey = generic_utils.toSnakeCase(tsKey);\n      if ((tsKey === 'name' || tsKey === 'className') &&\n          typeof tsValue === 'string') {\n        // Special case the 'name' key with a string value. Name values, such as\n        // the names of LayersModel and Layer instances, should not undergo the\n        // snake-case conversion.\n        pyDict[pyKey] = tsValue;\n      } else {\n        pyDict[pyKey] = convertTsToPythonic(tsValue, tsKey);\n      }\n    }\n    return pyDict;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Executor: Evaluates SymbolicTensor based on feeds.\n */\n\nimport {cast, dispose, memory, Tensor, util} from '@tensorflow/tfjs-core';\n\nimport {ValueError} from '../errors';\nimport {Kwargs} from '../types';\nimport {toList} from '../utils/generic_utils';\n\nimport {InputLayer} from './input_layer';\nimport {SymbolicTensor} from './topology';\n\n/**\n * Helper function to check the dtype and shape compatibility of a feed value.\n */\nfunction assertFeedCompatibility(key: SymbolicTensor, val: Tensor): Tensor {\n  // Check dtype compatibility.\n  if (key.dtype == null || key.dtype === val.dtype) {\n    //  a.  If types match, return val tensor as is.\n    return val;\n  }\n  try {\n    //  b. Attempt to convert to expected type.\n    return cast(val, key.dtype);\n  } catch (err) {\n    //  c. If conversion fails, return helpful error.\n    throw new ValueError(\n        `The dtype of the feed (${val.dtype}) can not be cast to the dtype ` +\n        `of the key '${key.name}' (${key.dtype}).`);\n  }\n}\n\n/**\n * A concrete Tensor value for a symbolic tensor as the key.\n */\nexport interface Feed {\n  key: SymbolicTensor;\n  value: Tensor;\n}\n\n/**\n * FeedDict: A mapping from unique SymbolicTensors to feed values for them.\n * A feed value is a concrete value represented as an `Tensor`.\n */\nexport class FeedDict {\n  private id2Value: {[id: number]: Tensor} = {};\n  private id2Mask: {[id: number]: Tensor} = {};\n  private name2Id: {[name: string]: number} = {};\n\n  /**\n   * Constructor, optionally does copy-construction.\n   * @param feeds An Array of `Feed`s, or another `FeedDict`, in which case\n   *   copy-construction will be performed.\n   */\n  constructor(feeds?: Feed[]|FeedDict) {\n    if (feeds instanceof FeedDict) {\n      for (const id in feeds.id2Value) {\n        this.id2Value[id] = feeds.id2Value[id];\n        if (id in feeds.id2Mask) {\n          this.id2Mask[id] = feeds.id2Mask[id];\n        }\n      }\n    } else {\n      if (feeds == null) {\n        return;\n      }\n      for (const feed of feeds) {\n        this.add(feed.key, feed.value);\n      }\n    }\n  }\n\n  /**\n   * Add a key-value pair to the FeedDict.\n   *\n   * @param key The key of the feed.\n   * @param value The value of the tensor feed.\n   * @param mask The value of the mask feed (optional).\n   * @returns This `FeedDict`.\n   * @throws ValueError: If the key `SymbolicTensor` already exists in the\n   *   `FeedDict`.\n   */\n  add(key: SymbolicTensor, value: Tensor, mask?: Tensor): FeedDict {\n    if (this.id2Value[key.id] == null) {\n      this.id2Value[key.id] = assertFeedCompatibility(key, value);\n      this.name2Id[key.name] = key.id;\n      if (mask != null) {\n        this.id2Mask[key.id] = mask;\n      }\n    } else {\n      throw new ValueError(`Duplicate key: name=${key.name}, id=${key.id}`);\n    }\n    return this;\n  }\n\n  /**\n   * Add a Feed to the FeedDict.\n   * @param feed The new `Feed` to add.\n   * @returns This `FeedDict`.\n   */\n  addFeed(feed: Feed) {\n    this.add(feed.key, feed.value);\n  }\n\n  /**\n   * Probe whether a key already exists in the FeedDict.\n   * @param key\n   */\n  hasKey(key: SymbolicTensor): boolean {\n    return this.id2Value[key.id] != null;\n  }\n\n  /**\n   * Get all the SymbolicTensor available in this FeedDict.\n   */\n  names(): string[] {\n    return Object.keys(this.name2Id);\n  }\n\n  /**\n   * Get the feed value for given key.\n   * @param key The SymbolicTensor, or its name (as a string), of which the\n   *     value is sought.\n   * @returns If `key` exists, the corresponding feed value.\n   * @throws ValueError: If `key` does not exist in this `FeedDict`.\n   */\n  getValue(key: SymbolicTensor|string): Tensor {\n    if (key instanceof SymbolicTensor) {\n      if (this.id2Value[key.id] == null) {\n        throw new ValueError(`Nonexistent key: ${key.name}`);\n      } else {\n        return this.id2Value[key.id];\n      }\n    } else {\n      const id = this.name2Id[key];\n      if (id == null) {\n        throw new ValueError(`Feed dict has no SymbolicTensor name: ${key}`);\n      }\n      return this.id2Value[id];\n    }\n  }\n\n  /**\n   * Get the feed mask for given key.\n   * @param key The SymbolicTensor, or its name (as a string), of which the\n   *     value is sought.\n   * @returns If `key` exists, the corresponding feed mask.\n   * @throws ValueError: If `key` does not exist in this `FeedDict`.\n   */\n  getMask(key: SymbolicTensor|string): Tensor {\n    if (key instanceof SymbolicTensor) {\n      if (this.id2Value[key.id] == null) {\n        throw new ValueError(`Nonexistent key: ${key.name}`);\n      } else {\n        return this.id2Mask[key.id];\n      }\n    } else {\n      const id = this.name2Id[key];\n      if (id == null) {\n        throw new ValueError(`Feed dict has no SymbolicTensor name: ${key}`);\n      }\n      return this.id2Mask[id];\n    }\n  }\n\n  /** Dispose all mask Tensors held by this object. */\n  disposeMasks() {\n    if (this.id2Mask != null) {\n      dispose(this.id2Mask);\n    }\n  }\n}\n\n// Cache for topologically sorted SymbolicTensors for given execution\n// targets (i.e., fetches).\nconst cachedSorted: {[concatFetchNames: string]: SymbolicTensor[]} = {};\n\n// Cache for recipient count maps for given execution targets (i.e., fetches).\nconst cachedRecipientCounts:\n    {[concatFetchNames: string]: {[fetchName: string]: number}} = {};\n\n/**\n * Interface for the optional object used for probing the memory\n * usage and other statistics during execution.\n */\nexport interface ExecutionProbe {\n  /**\n   * Maximum number of tensors that exist during all steps of the\n   * execution. Tensor counts are measured at the beginning of every\n   * step.\n   */\n  maxNumTensors?: number;\n\n  /**\n   * Minimum number of tensors that exist during all steps of the\n   * execution. Tensor counts are measured at the beginning of every\n   * step.\n   */\n  minNumTensors?: number;\n}\n\n/**\n * Execute a SymbolicTensor by using concrete feed values.\n *\n * A `SymbolicTensor` object is a node in a computation graph of TF.js\n * Layers. The object is backed by a source layer and input\n * `SymbolicTensor`s to the source layer. This method evaluates\n * the `call()` method of the source layer, using concrete values of the\n * inputs obtained from either\n * * `feedDict`, if the input key exists in `feedDict`, or else,\n * * a recursive call to `execute()` itself.\n *\n * @param x: The `SymbolicTensor` to execute.\n * @param feedDict: The feed values, as base condition of the recursion.\n *   execution.\n * @param kwargs: Optional keyword arguments.\n * @param probe: A probe object (of interface `ExecutionProbe`) used for\n *   testing memory footprint of `execute` calls.\n * @returns Result of the execution.\n * @throws ValueError: If any `SymbolicTensor`s from `InputLayer`s\n *   encountered during the execution lacks a feed value in `feedDict`.\n */\nexport function execute(\n    fetches: SymbolicTensor|SymbolicTensor[], feedDict: FeedDict,\n    kwargs?: Kwargs, probe?: ExecutionProbe): Tensor|\n    Tensor[]|[Tensor | Tensor[]] {\n  const training: boolean = kwargs == null ? false : kwargs['training'];\n\n  const arrayFetches = Array.isArray(fetches);\n  const fetchArray: SymbolicTensor[] =\n      arrayFetches ? fetches as SymbolicTensor[] : [fetches as SymbolicTensor];\n\n  const outputNames = fetchArray.map(t => t.name);\n  const finalOutputs: Tensor[] = [];\n  const feedNames = feedDict.names();\n  for (const outputName of outputNames) {\n    if (feedNames.indexOf(outputName) !== -1) {\n      finalOutputs.push(feedDict.getValue(outputName));\n    } else {\n      finalOutputs.push(null);\n    }\n  }\n\n  if (probe != null) {\n    // For optional probing of memory footprint during execution.\n    probe.maxNumTensors = -Infinity;\n    probe.minNumTensors = Infinity;\n  }\n\n  // Check cache.\n  const fetchAndFeedKey =\n      outputNames.join(',') + '|' + feedDict.names().join(',');\n  let sorted: SymbolicTensor[];\n  let recipientCounts: {[fetchName: string]: number};\n  if (cachedSorted[fetchAndFeedKey] == null) {\n    // Cache doesn't contain the desired combination of fetches. Compute\n    // topological sort for the combination for the first time.\n    const out = getTopologicalSortAndRecipientCounts(fetchArray, feedDict);\n    sorted = out.sorted;\n    recipientCounts = out.recipientCounts;\n\n    // Store results in cache for future use.\n    cachedSorted[fetchAndFeedKey] = sorted;\n    cachedRecipientCounts[fetchAndFeedKey] = recipientCounts;\n  }\n  sorted = cachedSorted[fetchAndFeedKey];\n  recipientCounts = {};\n  if (!training) {\n    Object.assign(recipientCounts, cachedRecipientCounts[fetchAndFeedKey]);\n  }\n\n  const internalFeedDict = new FeedDict(feedDict);\n\n  // Start iterative execution on the topologically-sorted SymbolicTensors.\n  for (let i = 0; i < sorted.length; ++i) {\n    if (probe != null) {\n      // For optional probing of memory usage during execution.\n      const numTensors = memory().numTensors;\n      if (numTensors > probe.maxNumTensors) {\n        probe.maxNumTensors = numTensors;\n      }\n      if (numTensors < probe.minNumTensors) {\n        probe.minNumTensors = numTensors;\n      }\n    }\n\n    const symbolic = sorted[i];\n    const srcLayer = symbolic.sourceLayer;\n    if (srcLayer instanceof InputLayer) {\n      continue;\n    }\n    const inputValues: Tensor[] = [];\n    const inputMasks: Tensor[] = [];\n    const tensorsToDispose: Tensor[] = [];\n\n    let maskExists = false;\n    for (const input of symbolic.inputs) {\n      const value = internalFeedDict.getValue(input);\n      const mask = internalFeedDict.getMask(input);\n      inputValues.push(value);\n      inputMasks.push(mask);\n      if (mask != null) {\n        maskExists = true;\n      }\n      if (!training) {\n        recipientCounts[input.name]--;\n        if (recipientCounts[input.name] === 0 && !feedDict.hasKey(input) &&\n            outputNames.indexOf(input.name) === -1 && !value.isDisposed &&\n            input.sourceLayer.stateful !== true) {\n          tensorsToDispose.push(value);\n        }\n      }\n    }\n\n    if (maskExists) {\n      kwargs = kwargs || {};\n      kwargs['mask'] = inputMasks[0];\n    }\n    const outputTensors =\n        toList(srcLayer.apply(inputValues, kwargs)) as Tensor[];\n    let outputMask: Tensor|Tensor[] = null;\n    if (srcLayer.supportsMasking) {\n      outputMask = srcLayer.computeMask(inputValues, inputMasks);\n    }\n    const layerOutputs = getNodeOutputs(symbolic);\n    const outputSymbolicTensors =\n        Array.isArray(layerOutputs) ? layerOutputs : [layerOutputs];\n    for (let i = 0; i < outputSymbolicTensors.length; ++i) {\n      if (!internalFeedDict.hasKey(outputSymbolicTensors[i])) {\n        internalFeedDict.add(\n            outputSymbolicTensors[i], outputTensors[i],\n            Array.isArray(outputMask) ? outputMask[0] : outputMask);\n      }\n      const index = outputNames.indexOf(outputSymbolicTensors[i].name);\n      if (index !== -1) {\n        finalOutputs[index] = outputTensors[i];\n      }\n    }\n\n    if (!training) {\n      // Clean up Tensors that are no longer needed.\n      dispose(tensorsToDispose);\n    }\n  }\n  // NOTE(cais): Unlike intermediate tensors, we don't discard mask\n  // tensors as we go, because these tensors are sometimes passed over a\n  // series of mutliple layers, i.e., not obeying the immediate input\n  // relations in the graph. If this becomes a memory-usage concern,\n  // we can improve this in the future.\n  internalFeedDict.disposeMasks();\n\n  return arrayFetches ? finalOutputs : finalOutputs[0];\n}\n\ntype RecipientCounts = {\n  [fetchName: string]: number\n};\n\nexport type RecipientMap = {\n  [fetchName: string]: Set<string>;\n};\n\n/**\n * Sort the `SymbolicTensor`s topologically, for an array of fetches.\n *\n * This function calls getTopologicalSortAndRecipientCountsForOneFetch and\n * merges their results.\n *\n * @param fetch The array of fetches requested. Must be a non-empty array.\n * @param feedDict The dictionary of fed values.\n * @returns sorted: Topologically-sorted array of SymbolicTensors.\n *   recipientCounts: Recipient counts for all SymbolicTensors in `sorted`.\n */\nfunction getTopologicalSortAndRecipientCounts(\n    fetches: SymbolicTensor[], feedDict: FeedDict):\n    {sorted: SymbolicTensor[], recipientCounts: RecipientCounts} {\n  util.assert(\n      fetches != null && fetches.length > 0,\n      () => `Expected at least one fetch, got none`);\n\n  let finalSorted: SymbolicTensor[] = [];\n  let finalRecipientMap: RecipientMap = {};\n  if (fetches.length === 1) {\n    // Special-casing 1 fetch for efficiency.\n    const out =\n        getTopologicalSortAndRecipientCountsForOneFetch(fetches[0], feedDict);\n    finalSorted = out.sorted;\n    finalRecipientMap = out.recipientMap;\n  } else {\n    const visited = new Set<string>();\n    for (const fetch of fetches) {\n      const {sorted, recipientMap} =\n          getTopologicalSortAndRecipientCountsForOneFetch(fetch, feedDict);\n\n      // Merge sorted SymbolicTensor Arrays.\n      for (const symbolicTensor of sorted) {\n        if (!visited.has(symbolicTensor.name)) {\n          finalSorted.push(symbolicTensor);\n          visited.add(symbolicTensor.name);\n        }\n      }\n\n      // Merge recipient maps.\n      for (const name in recipientMap) {\n        if (finalRecipientMap[name] == null) {\n          finalRecipientMap[name] = new Set<string>();\n        }\n        recipientMap[name].forEach(\n            recipient => finalRecipientMap[name].add(recipient));\n      }\n    }\n  }\n  return {\n    sorted: finalSorted,\n    recipientCounts: recipientMap2Counts(finalRecipientMap)\n  };\n}\n\nfunction recipientMap2Counts(recipientMap: RecipientMap): RecipientCounts {\n  const recipientCounts: RecipientCounts = {};\n  for (const name in recipientMap) {\n    recipientCounts[name] = recipientMap[name].size;\n  }\n  return recipientCounts;\n}\n\n/**\n * Sort the `SymbolicTensor`s topologically, for a single fetch.\n *\n * This helper function processes the upstream SymbolicTensors of a single\n * fetch.\n *\n * @param fetch The single fetch requested.\n * @param feedDict The dictionary of fed values.\n * @returns sorted: Topologically-sorted array of SymbolicTensors.\n *   recipientMap: Recipient names for all SymbolicTensors in `sorted`.\n */\nexport function getTopologicalSortAndRecipientCountsForOneFetch(\n    fetch: SymbolicTensor, feedDict: FeedDict):\n    {sorted: SymbolicTensor[], recipientMap: RecipientMap} {\n  const visited = new Set<string>();\n  const sorted: SymbolicTensor[] = [];\n  const recipientMap: RecipientMap = {};\n\n  // Put keys of the feedDict into visited first, so they don't have to be\n  // walked. This is needed in case where there are feeds for intermediate\n  // SymbolicTensors of the graph.\n  for (const key of feedDict.names()) {\n    visited.add(key);\n  }\n\n  const stack: SymbolicTensor[] = [];\n  const marks: number[] = [];\n\n  // Initial population of stack and marks.\n  stack.push(fetch);\n\n  while (stack.length > 0) {\n    const top = stack[stack.length - 1];\n    if (visited.has(top.name)) {\n      stack.pop();\n      continue;\n    }\n    const topIsMarked = marks[marks.length - 1] === stack.length - 1;\n    if (top.inputs.length === 0 || topIsMarked) {\n      // Input SymbolicTensor or all children have been visited.\n      stack.pop();\n      sorted.push(top);\n      visited.add(top.name);\n      if (topIsMarked) {\n        marks.pop();\n      }\n    } else {\n      // A non-input SymbolicTensor whose upstream SymbolicTensors haven't\n      // been visited yet. Push them onto the stack.\n      marks.push(stack.length - 1);\n      for (const input of top.inputs) {\n        // Increment the recipient count. Note that this needs to happen\n        // regardless of whether the SymbolicTensor has been visited before.\n        if (recipientMap[input.name] == null) {\n          recipientMap[input.name] = new Set<string>();\n        }\n        recipientMap[input.name].add(top.name);\n\n        if (visited.has(input.name)) {\n          continue;  // Avoid repeated visits to the same SymbolicTensor.\n        }\n        stack.push(input);\n      }\n    }\n  }\n  return {sorted, recipientMap};\n}\n\n/**\n * Get the symbolic output tensors of the node to which a given fetch belongs.\n * @param fetch The fetched symbolic tensor.\n * @returns The Array of symbolic tensors output by the node to which `fetch`\n *   belongs.\n */\nfunction getNodeOutputs(fetch: SymbolicTensor): SymbolicTensor|\n    SymbolicTensor[] {\n  let layerOutputs: SymbolicTensor|SymbolicTensor[];\n  if (fetch.sourceLayer.inboundNodes.length === 1) {\n    layerOutputs = fetch.sourceLayer.output;\n  } else {\n    let nodeIndex: number = null;\n    for (let i = 0; i < fetch.sourceLayer.inboundNodes.length; ++i) {\n      for (const outputTensor of fetch.sourceLayer.inboundNodes[i]\n               .outputTensors) {\n        if (outputTensor.id === fetch.id) {\n          nodeIndex = i;\n          break;\n        }\n      }\n    }\n    layerOutputs = fetch.sourceLayer.getOutputAt(nodeIndex);\n  }\n  return layerOutputs;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {dispose, mul, Tensor, Tensor1D, tensor1d, tidy} from '@tensorflow/tfjs-core';\n\n/**\n * For multi-class classification problems, this object is designed to store a\n * mapping from class index to the \"weight\" of the class, where higher weighted\n * classes have larger impact on loss, accuracy, and other metrics.\n *\n * This is useful for cases in which you want the model to \"pay more attention\"\n * to examples from an under-represented class, e.g., in unbalanced datasets.\n */\nexport type ClassWeight = {\n  [classIndex: number]: number\n};\n\n/**\n * Class weighting for a model with multiple outputs.\n *\n * This object maps each output name to a class-weighting object.\n */\nexport type ClassWeightMap = {\n  [outputName: string]: ClassWeight\n};\n\nfunction standardizeSampleOrClassWeights(\n    xWeight: ClassWeight|ClassWeight[]|ClassWeightMap, outputNames: string[],\n    weightType: 'sampleWeight'|'classWeight'): ClassWeight[] {\n  const numOutputs = outputNames.length;\n  if (xWeight == null || (Array.isArray(xWeight) && xWeight.length === 0)) {\n    return outputNames.map(name => null);\n  }\n  if (numOutputs === 1) {\n    if (Array.isArray(xWeight) && xWeight.length === 1) {\n      return xWeight;\n    } else if (typeof xWeight === 'object' && outputNames[0] in xWeight) {\n      return [(xWeight as ClassWeightMap)[outputNames[0]]];\n    } else {\n      return [xWeight as ClassWeight];\n    }\n  }\n  if (Array.isArray(xWeight)) {\n    if (xWeight.length !== numOutputs) {\n      throw new Error(\n          `Provided ${weightType} is an array of ${xWeight.length} ` +\n          `element(s), but the model has ${numOutputs} outputs. ` +\n          `Make sure a set of weights is provided for each model output.`);\n    }\n    return xWeight;\n  } else if (\n      typeof xWeight === 'object' && Object.keys(xWeight).length > 0 &&\n      typeof (xWeight as ClassWeightMap)[Object.keys(xWeight)[0]] ===\n          'object') {\n    const output: ClassWeight[] = [];\n    outputNames.forEach(outputName => {\n      if (outputName in xWeight) {\n        output.push((xWeight as ClassWeightMap)[outputName]);\n      } else {\n        output.push(null);\n      }\n    });\n    return output;\n  } else {\n    throw new Error(\n        `The model has multiple (${numOutputs}) outputs, ` +\n        `so ${weightType} must be either an array with ` +\n        `${numOutputs} elements or an object with ${outputNames} keys. ` +\n        `Provided ${weightType} not understood: ${JSON.stringify(xWeight)}`);\n  }\n}\n\n/**\n * Standardize class weighting objects.\n *\n * This function takes a single class-weighting object, an array of them,\n * or a map from output name to class-weighting object. It compares it to the\n * output name(s) of the model, base on which it outputs an array of\n * class-weighting objects of which the length matches the number of outputs.\n *\n * @param classWeight Input class-weighting object(s).\n * @param outputNames All output name(s) of the model.\n * @return An array of class-weighting objects. The length of the array matches\n *   the model's number of outputs.\n */\nexport function standardizeClassWeights(\n    classWeight: ClassWeight|ClassWeight[]|ClassWeightMap,\n    outputNames: string[]): ClassWeight[] {\n  return standardizeSampleOrClassWeights(\n      classWeight, outputNames, 'classWeight');\n}\n\nexport function standardizeSampleWeights(\n    classWeight: ClassWeight|ClassWeight[]|ClassWeightMap,\n    outputNames: string[]): ClassWeight[] {\n  return standardizeSampleOrClassWeights(\n      classWeight, outputNames, 'sampleWeight');\n}\n\n/**\n * Standardize by-sample and/or by-class weights for training.\n *\n * Note that this function operates on one model output at a time. For a model\n * with multiple outputs, you must call this function multiple times.\n *\n * @param y The target tensor that the by-sample and/or by-class weight is for.\n *     The values of y are assumed to encode the classes, either directly\n *     as an integer index, or as one-hot encoding.\n * @param sampleWeight By-sample weights.\n * @param classWeight By-class weights: an object mapping class indices\n *     (integers) to a weight (float) to apply to the model's loss for the\n *     samples from this class during training. This can be useful to tell the\n *     model to \"pay more attention\" to samples from an under-represented class.\n * @param sampleWeightMode The mode for the sample weights.\n * @return A Promise of weight tensor, of which the size of the first dimension\n *     matches that of `y`.\n */\nexport async function standardizeWeights(\n    y: Tensor, sampleWeight?: Tensor, classWeight?: ClassWeight,\n    sampleWeightMode?: 'temporal'): Promise<Tensor> {\n  if (sampleWeight != null || sampleWeightMode != null) {\n    // TODO(cais): Once 'temporal' mode is implemented, document it in the doc\n    // string.\n    throw new Error('Support sampleWeight is not implemented yet');\n  }\n\n  if (classWeight != null) {\n    // Apply class weights per sample.\n    const yClasses: Tensor1D = tidy(() => {\n      if (y.shape.length === 1) {\n        // Assume class indices.\n        return y.clone() as Tensor1D;\n      } else if (y.shape.length === 2) {\n        if (y.shape[1] > 1) {\n          // Assume one-hot encoding of classes.\n          const axis = 1;\n          return y.argMax(axis);\n        } else if (y.shape[1] === 1) {\n          // Class index.\n          return y.reshape([y.shape[0]]);\n        } else {\n          throw new Error(\n              `Encountered unexpected last-dimension size (${y.shape[1]}) ` +\n              `during handling of class weights. The size is expected to be ` +\n              `>= 1.`);\n        }\n      } else {\n        throw new Error(\n            `Unexpected rank of target (y) tensor (${y.rank}) during ` +\n            `handling of class weights. The rank is expected to be 1 or 2.`);\n      }\n    });\n\n    const yClassIndices = Array.from(await yClasses.data());\n    dispose(yClasses);\n    const classSampleWeight: number[] = [];\n    yClassIndices.forEach(classIndex => {\n      if (classWeight[classIndex] == null) {\n        throw new Error(\n            `classWeight must contain all classes in the training data. ` +\n            `The class ${classIndex} exists in the data but not in ` +\n            `classWeight`);\n      } else {\n        classSampleWeight.push(classWeight[classIndex]);\n      }\n    });\n\n    return tensor1d(classSampleWeight, 'float32');\n  } else {\n    return null;\n  }\n}\n\n/**\n * Apply per-sample weights on the loss values from a number of samples.\n *\n * @param losses Loss tensor of shape `[batchSize]`.\n * @param sampleWeights Per-sample weight tensor of shape `[batchSize]`.\n * @returns Tensor of the same shape as`losses`.\n */\nexport function computeWeightedLoss(losses: Tensor, sampleWeights: Tensor) {\n  return mul(losses, sampleWeights);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Interfaces and methods for training models using TensorFlow.js datasets.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {scalar} from '@tensorflow/tfjs-core';\nimport {BaseCallback, configureCallbacks, CustomCallbackArgs, History, ModelLoggingVerbosity, standardizeCallbacks, YieldEveryOptions} from '../base_callbacks';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {disposeTensorsInLogs, UnresolvedLogs} from '../logs';\nimport {TensorOrArrayOrMap} from '../types';\nimport {singletonOrArray, toList} from '../utils/generic_utils';\n\nimport {Dataset, LazyIterator} from './dataset_stub';\nimport {ClassWeight, ClassWeightMap, standardizeClassWeights, standardizeWeights} from './training_utils';\n\n/**\n * Interface for configuring model training based on a dataset object.\n */\nexport interface ModelFitDatasetArgs<T> {\n  /**\n   * (Optional) Total number of steps (batches of samples) before\n   * declaring one epoch finished and starting the next epoch. It should\n   * typically be equal to the number of samples of your dataset divided by\n   * the batch size, so that `fitDataset`() call can utilize the entire dataset.\n   * If it is not provided, use `done` return value in `iterator.next()` as\n   * signal to finish an epoch.\n   */\n  batchesPerEpoch?: number;\n\n  /**\n   * The number of times to iterate over the training dataset.\n   *\n   * An integer.\n   */\n  epochs: number;\n\n  /**\n   * Verbosity level.\n   *\n   * Expected to be 0, 1, or 2. Default: 1.\n   *\n   * 0 - No printed message during fit() call.\n   * 1 - In Node.js (tfjs-node), prints the progress bar, together with\n   *     real-time updates of loss and metric values and training speed.\n   *     In the browser: no action. This is the default.\n   * 2 - Not implemented yet.\n   */\n  verbose?: ModelLoggingVerbosity;\n\n  /**\n   * List of callbacks to be called during training.\n   * Can have one or more of the following callbacks:\n   *   - `onTrainBegin(logs)`: called when training starts.\n   *   - `onTrainEnd(logs)`: called when training ends.\n   *   - `onEpochBegin(epoch, logs)`: called at the start of every epoch.\n   *   - `onEpochEnd(epoch, logs)`: called at the end of every epoch.\n   *   - `onBatchBegin(batch, logs)`: called at the start of every batch.\n   *   - `onBatchEnd(batch, logs)`: called at the end of every batch.\n   *   - `onYield(epoch, batch, logs)`: called every `yieldEvery` milliseconds\n   *      with the current epoch, batch and logs. The logs are the same\n   *      as in `onBatchEnd()`. Note that `onYield` can skip batches or\n   *      epochs. See also docs for `yieldEvery` below.\n   */\n  callbacks?: BaseCallback[]|CustomCallbackArgs|CustomCallbackArgs[];\n\n  /**\n   * Data on which to evaluate the loss and any model\n   * metrics at the end of each epoch. The model will not be trained on this\n   * data. This could be any of the following:\n   *\n   *   - An array `[xVal, yVal]`, where the two values may be `tf.Tensor`,\n   *     an array of Tensors, or a map of string to Tensor.\n   *   - Similarly, an array ` [xVal, yVal, valSampleWeights]`\n   *     (not implemented yet).\n   *   - a `Dataset` object with elements of the form `{xs: xVal, ys: yVal}`,\n   *     where `xs` and `ys` are the feature and label tensors, respectively.\n   *\n   * If `validationData` is an Array of Tensor objects, each `tf.Tensor` will be\n   * sliced into batches during validation, using the parameter\n   * `validationBatchSize` (which defaults to 32). The entirety of the\n   * `tf.Tensor` objects will be used in the validation.\n   *\n   * If `validationData` is a dataset object, and the `validationBatches`\n   * parameter is specified, the validation will use `validationBatches` batches\n   * drawn from the dataset object. If `validationBatches` parameter is not\n   * specified, the validation will stop when the dataset is exhausted.\n   *\n   * The model will not be trained on this data.\n   */\n  validationData?: [\n    TensorOrArrayOrMap, TensorOrArrayOrMap\n  ]|[TensorOrArrayOrMap, TensorOrArrayOrMap, TensorOrArrayOrMap]|Dataset<T>;\n\n  /**\n   * Optional batch size for validation.\n   *\n   * Used only if `validationData` is an array of `tf.Tensor` objects, i.e., not\n   * a dataset object.\n   *\n   * If not specified, its value defaults to 32.\n   */\n  validationBatchSize?: number;\n\n  /**\n   * (Optional) Only relevant if `validationData` is specified and is a dataset\n   * object.\n   *\n   * Total number of batches of samples to draw from `validationData` for\n   * validation purpose before stopping at the end of every epoch. If not\n   * specified, `evaluateDataset` will use `iterator.next().done` as signal to\n   * stop validation.\n   */\n  validationBatches?: number;\n\n  /**\n   * Configures the frequency of yielding the main thread to other tasks.\n   *\n   * In the browser environment, yielding the main thread can improve the\n   * responsiveness of the page during training. In the Node.js environment,\n   * it can ensure tasks queued in the event loop can be handled in a timely\n   * manner.\n   *\n   * The value can be one of the following:\n   *   - `'auto'`: The yielding happens at a certain frame rate (currently set\n   *               at 125ms). This is the default.\n   *   - `'batch'`: yield every batch.\n   *   - `'epoch'`: yield every epoch.\n   *   - a `number`: Will yield every `number` milliseconds.\n   *   - `'never'`: never yield. (But yielding can still happen through `await\n   *      nextFrame()` calls in custom callbacks.)\n   */\n  yieldEvery?: YieldEveryOptions;\n\n  /**\n   * Epoch at which to start training (useful for resuming a previous training\n   * run).\n   */\n  initialEpoch?: number;\n\n  /**\n   * Optional object mapping class indices (integers) to\n   * a weight (float) to apply to the model's loss for the samples from this\n   * class during training. This can be useful to tell the model to \"pay more\n   * attention\" to samples from an under-represented class.\n   *\n   * If the model has multiple outputs, a class weight can be specified for\n   * each of the outputs by setting this field an array of weight object\n   * or a object that maps model output names (e.g., `model.outputNames[0]`)\n   * to weight objects.\n   */\n  classWeight?: ClassWeight|ClassWeight[]|ClassWeightMap;\n}\n\nexport interface FitDatasetElement {\n  xs: TensorOrArrayOrMap;\n  ys: TensorOrArrayOrMap;\n}\n\n/**\n * Interface for configuring model evaluation based on a dataset object.\n */\nexport interface ModelEvaluateDatasetArgs {\n  /**\n   * Number of batches to draw from the dataset object before ending the\n   * evaluation.\n   */\n  batches?: number;\n\n  /**\n   * Verbosity mode.\n   */\n  verbose?: ModelLoggingVerbosity;\n}\n\n// Default batch size used during tensor-based validation.\nconst DEFAULT_VALIDATION_BATCH_SIZE = 32;\n\n/**\n * Standardize the output of a dataset iterator for use by\n * LayersModel.fitDataset().\n *\n * @param model: A `tf.LayersModel` object.\n * @param iteratorOut The output of a dataset iterator. It is required to be\n *   an object of the form `{xs: TensorOrArrayOrMap, ys:\n * TensorOrArrayOrMap}`, where `TensorOrArrayOrMap` is a single `tf.Tensor`,\n * a `tf.Tensor[]`, or a flat map from string names to `tf.Tensor`s.\n * @returns A flat array of `tf.Tensor` objects: the input `tf.Tensor`s\n *   followed by the target `tf.Tensor`s.  When `tf.Tensor`s are provided\n *   as a map, the order in the resulting array is taken from the `inputNames`\n *   and `outputNames` of the model.\n */\nfunction standardizeDataIteratorOutput(\n    // Type `model` as `any` here to avoid circular dependency w/\n    // training.ts.\n    // tslint:disable-next-line:no-any\n    model: any, iteratorOut: {}): {xs: tfc.Tensor[], ys: tfc.Tensor[]} {\n  let xs: TensorOrArrayOrMap;\n  let ys: TensorOrArrayOrMap;\n\n  const iteratorOutObj = iteratorOut as FitDatasetElement;\n  xs = iteratorOutObj['xs'];\n  ys = iteratorOutObj['ys'];\n  tfc.util.assert(\n      xs != null && ys != null,\n      () => 'A Dataset iterator for fitDataset() is expected to generate ' +\n          'objects of the form `{xs: xVal, ys: yVal}`, where the two ' +\n          'values may be `tf.Tensor`, an array of Tensors, or a map of ' +\n          'string to Tensor.  The provided Dataset instead generates ' +\n          `${iteratorOut}`);\n\n  const flattenedXs: tfc.Tensor[] =\n      flattenTensorOrArrayOrMap('input', model.inputNames, xs);\n  const flattenedYs: tfc.Tensor[] =\n      flattenTensorOrArrayOrMap('output', model.outputNames, ys);\n\n  const batchSize: number = flattenedXs[0].shape[0];\n\n  tfc.util.assert(\n      flattenedXs.length === model.inputs.length,\n      () => `LayersModel has ${model.inputs.length} inputs, but the dataset ` +\n          `provides ${flattenedXs.length} inputs.  (Expected input keys: ` +\n          `${JSON.stringify(model.inputNames)})`);\n\n  tfc.util.assert(\n      flattenedYs.length === model.outputs.length,\n      () =>\n          `LayersModel has ${model.outputs.length} outputs, but the dataset ` +\n          `provides ${flattenedYs.length} outputs.  (Expected output keys: ` +\n          `${JSON.stringify(model.outputNames)})`);\n\n  for (let xIndex = 0; xIndex < flattenedXs.length; xIndex++) {\n    tfc.util.assert(\n        flattenedXs[xIndex].shape[0] === batchSize,\n        () => `Batch size mismatch: input ` +\n            `${model.inputNames[xIndex]} has ${\n                  flattenedXs[xIndex].shape[0]}; ` +\n            `expected  ${batchSize} based on input ${model.inputNames[0]}.`);\n  }\n\n  for (let yIndex = 0; yIndex < flattenedYs.length; yIndex++) {\n    tfc.util.assert(\n        flattenedYs[yIndex].shape[0] === batchSize,\n        () => `Batch size mismatch: output ` +\n            `${model.outputNames[yIndex]} has ${\n                  flattenedYs[yIndex].shape[0]}; ` +\n            `expected  ${batchSize} based on input ${model.inputNames[0]}.`);\n  }\n\n  return {xs: flattenedXs, ys: flattenedYs};\n}\n\nfunction flattenTensorOrArrayOrMap(\n    inputOrOutput: string, names: string[], values: TensorOrArrayOrMap) {\n  if (values instanceof tfc.Tensor) {\n    return [values];\n  } else if (Array.isArray(values)) {\n    tfc.util.assert(\n        values.length === names.length,\n        () => `Received an array of ${values.length} Tensors, but expected ${\n            names.length} to match the ${inputOrOutput} keys ${names}.`);\n    return values;\n  } else {\n    const result: tfc.Tensor[] = [];\n    // Check that all the required keys are available.\n    for (const name of names) {\n      if (values[name] == null) {\n        throw new ValueError(\n            `The feature data generated by the dataset lacks the required ` +\n            `${inputOrOutput} key '${name}'.`);\n      }\n      result.push(values[name]);\n    }\n    return result;\n  }\n}\n\nfunction standardizeTensorValidationData<T>(\n    data:\n        [\n          tfc.Tensor|tfc.Tensor[], tfc.Tensor|tfc.Tensor[]\n        ]|[tfc.Tensor | tfc.Tensor[], tfc.Tensor | tfc.Tensor[],\n           tfc.Tensor | tfc.Tensor[]]):\n    {xs: tfc.Tensor|tfc.Tensor[], ys: tfc.Tensor|tfc.Tensor[]} {\n  if (data.length === 3) {\n    throw new NotImplementedError(\n        'Validation with sample weights is not implemented yet.');\n  }\n  return {xs: data[0], ys: data[1]};\n}\n\nexport async function fitDataset<T>(\n    // Type `model` as `any` here to avoid circular dependency w/\n    // training.ts.\n    // tslint:disable-next-line:no-any\n    model: any, dataset: Dataset<T>,\n    args: ModelFitDatasetArgs<T>): Promise<History> {\n  const hasBatchesPerEpoch = args.batchesPerEpoch != null;\n  tfc.util.assert(\n      model.optimizer != null,\n      () => 'You must compile a model before training/testing. Use ' +\n          'LayersModel.compile(modelCompileConfig).');\n\n  tfc.util.assert(\n      args != null,\n      () => `For fitDataset(), the 2nd argument (config) is required, ` +\n          `but it is not provided in this call.`);\n  tfc.util.assert(\n      args.epochs != null && args.epochs > 0 && Number.isInteger(args.epochs),\n      () => `For fitDataset(), config.epochs is expected to be a positive ` +\n          `integer, but got ${args.epochs}`);\n  tfc.util.assert(\n      !hasBatchesPerEpoch ||\n          (args.batchesPerEpoch > 0 && Number.isInteger(args.batchesPerEpoch)),\n      () => `For fitDataset(), config.batchesPerEpoch is expected to be a ` +\n          `positive integer if specified, but got ${args.batchesPerEpoch}`);\n  tfc.util.assert(\n      // tslint:disable-next-line:no-any\n      (args as any)['validationSplit'] == null,\n      () => '`validationSplit` is not supported by `fitDataset()`. ' +\n          'Use validationData instead.');\n\n  if (model.isTraining) {\n    throw new Error(\n        'Cannot start training because another fit() call is ongoing.');\n  }\n  model.isTraining = true;\n\n  try {\n    const doValidation = args.validationData != null;\n    let valXs: tfc.Tensor|tfc.Tensor[];\n    let valYs: tfc.Tensor|tfc.Tensor[];\n    if (doValidation) {\n      if (isDatasetObject(args.validationData)) {\n        tfc.util.assert(\n            args.validationBatches == null ||\n                (args.validationBatches > 0 &&\n                 Number.isInteger(args.validationBatches)),\n            () => `For fitDataset() with dataset-based validation, ` +\n                `config.validationBatches is expected not to be provided, ` +\n                `or to be a positive integer, ` +\n                `but got ${args.validationBatches}`);\n      } else {\n        const validationData = standardizeTensorValidationData(\n            args.validationData as\n                    [tfc.Tensor | tfc.Tensor[], tfc.Tensor | tfc.Tensor[]] |\n            [\n              tfc.Tensor | tfc.Tensor[], tfc.Tensor | tfc.Tensor[],\n              tfc.Tensor | tfc.Tensor[]\n            ]);\n        valXs = validationData.xs;\n        valYs = validationData.ys;\n      }\n    }\n\n    const trainFunction = model.makeTrainFunction();\n    const outLabels = model.getDedupedMetricsNames() as string[];\n\n    let callbackMetrics: string[];\n    if (doValidation) {\n      callbackMetrics =\n          outLabels.slice().concat(outLabels.map(n => 'val_' + n));\n    } else {\n      callbackMetrics = outLabels.slice();\n    }\n\n    const callbacks = standardizeCallbacks(args.callbacks, args.yieldEvery);\n    const verbose = args.verbose == null ? 1 : args.verbose;\n    const {callbackList, history} = configureCallbacks(\n        callbacks, verbose, args.epochs, null, null,\n        getStepsPerEpoch(dataset, args),\n        null,  // Batch size determined by the dataset itself.\n        doValidation, callbackMetrics);\n    callbackList.setModel(model);\n    model.history = history;\n\n    await callbackList.onTrainBegin();\n    model.stopTraining_ = false;\n    let epoch = args.initialEpoch == null ? 0 : args.initialEpoch;\n\n    let dataIterator = await dataset.iterator();\n    while (epoch < args.epochs) {\n      const epochLogs: UnresolvedLogs = {};\n      await callbackList.onEpochBegin(epoch);\n      let stepsDone = 0;\n      let batchIndex = 0;\n      if (!hasBatchesPerEpoch) {\n        dataIterator = await dataset.iterator();\n      }\n      while (hasBatchesPerEpoch ? stepsDone < args.batchesPerEpoch : true) {\n        const iteratorOut = await dataIterator.next();\n\n        // If `batchesPerEpoch` is specified, the dataset should not be\n        // exhausted until all epoches are done.\n        if (hasBatchesPerEpoch && iteratorOut.done) {\n          console.warn(\n              'You provided `batchesPerEpoch` as ' +\n              `${args.batchesPerEpoch}, ` +\n              'but your dataset iterator ran out of data after ' +\n              `${stepsDone} batches; ` +\n              'interrupting training. Make sure that your ' +\n              'dataset can generate at least `batchesPerEpoch * epochs` ' +\n              'batches (in this case, ' +\n              `${args.batchesPerEpoch * args.epochs} batches). ` +\n              'You may need to use the repeat() function when building ' +\n              'your dataset.');\n          break;\n        }\n\n        if (iteratorOut.value != null) {\n          const {xs, ys} =\n              standardizeDataIteratorOutput(model, iteratorOut.value);\n          const batchLogs: UnresolvedLogs = {};\n          batchLogs['batch'] = batchIndex;\n          batchLogs['size'] = xs[0].shape[0];\n\n          await callbackList.onBatchBegin(batchIndex, batchLogs);\n\n          const sampleWeights: tfc.Tensor[] = [];\n          if (args.classWeight != null) {\n            const standardClassWeights =\n                standardizeClassWeights(args.classWeight, model.outputNames);\n            for (let i = 0; i < standardClassWeights.length; ++i) {\n              sampleWeights.push(await standardizeWeights(\n                  ys[i], null, standardClassWeights[i]));\n            }\n          }\n\n          // Train on batch.\n          const ins = xs.concat(ys).concat(sampleWeights);\n          const outs = trainFunction(ins);\n          tfc.dispose(ins);\n          for (let i = 0; i < outLabels.length; ++i) {\n            const label = outLabels[i];\n            const out = outs[i];\n            batchLogs[label] = out;\n            tfc.keep(out);\n          }\n\n          await callbackList.onBatchEnd(batchIndex, batchLogs);\n          disposeTensorsInLogs(batchLogs);\n\n          batchIndex++;\n          stepsDone++;\n        }\n\n        if (hasBatchesPerEpoch ? stepsDone >= args.batchesPerEpoch :\n                                 iteratorOut.done) {\n          // Epoch finished. Perform validation.\n          if (doValidation) {\n            let valOuts: tfc.Scalar[];\n            if (isDatasetObject(args.validationData)) {\n              valOuts = toList(await model.evaluateDataset(\n                  args.validationData, {batches: args.validationBatches}));\n            } else {\n              valOuts = toList(model.evaluate(valXs, valYs, {\n                batchSize: args.validationBatchSize == null ?\n                    DEFAULT_VALIDATION_BATCH_SIZE :\n                    args.validationBatchSize,\n                verbose: 0\n              }));\n            }\n            for (let i = 0; i < model.metricsNames.length; ++i) {\n              epochLogs[`val_${model.metricsNames[i]}`] = valOuts[i];\n            }\n          }\n          // Call `break` to exit one epoch lopp after validation is done. If\n          // config.batchesPerEpoch is specified, an epoch while loop will\n          // stop when `stepsDone >= config.batchesPerEpoch`. When\n          // config.batchesPerEpoch is not provided, the following `break` is\n          // required to exit the while lopp after dataset is exhausted.\n          break;\n        }\n\n        if (model.stopTraining_) {\n          break;\n        }\n      }\n      await callbackList.onEpochEnd(epoch, epochLogs);\n      epoch++;\n      if (model.stopTraining_) {\n        break;\n      }\n    }\n    await callbackList.onTrainEnd();\n    await model.history.syncData();\n    return model.history;\n  } finally {\n    model.isTraining = false;\n  }\n}\n\n/** Helper function that determines number of steps (batches) per epoch. */\nfunction getStepsPerEpoch<T>(\n    dataset: Dataset<T>, args: ModelFitDatasetArgs<T>): number {\n  // Attempt to determine # of batches in an epoch.\n  let stepsPerEpoch: number = null;\n  if (args.batchesPerEpoch != null) {\n    stepsPerEpoch = args.batchesPerEpoch;\n  } else if (Number.isFinite(dataset.size)) {\n    stepsPerEpoch = dataset.size;\n  }\n  return stepsPerEpoch;\n}\n\n// Check if provided object is a Dataset object by checking it's .iterator\n// element.\nfunction isDatasetObject<T>(\n    dataset:\n        [\n          TensorOrArrayOrMap, TensorOrArrayOrMap\n        ]|[TensorOrArrayOrMap, TensorOrArrayOrMap, TensorOrArrayOrMap]|\n    Dataset<T>): boolean {\n  return (typeof (dataset as Dataset<T>).iterator === 'function');\n}\n\n// Check if provided object is a LazyIterator object by checking it's .next\n// element.\nfunction isLazyIteratorObject<T>(iterator: Dataset<T>|\n                                 LazyIterator<T>): boolean {\n  return (typeof (iterator as LazyIterator<T>).next === 'function');\n}\n\nexport async function evaluateDataset<T>(\n    // Type `model` as `any` here to avoid circular dependency w/\n    // training.ts.\n    // tslint:disable-next-line:no-any\n    model: any, dataset: Dataset<T>|LazyIterator<T>,\n    args: ModelEvaluateDatasetArgs): Promise<tfc.Scalar|tfc.Scalar[]> {\n  args = args || {};\n  const hasBatches = args.batches != null;\n  const f = model.testFunction;\n  let outs: tfc.Scalar[] = [];\n  if (args.verbose > 0) {\n    throw new NotImplementedError('Verbose mode is not implemented yet.');\n  }\n\n  tfc.util.assert(\n      !hasBatches || (args.batches > 0 && Number.isInteger(args.batches)),\n      () => 'Test loop expects `batches` to be a positive integer, but ' +\n          `received ${JSON.stringify(args.batches)}`);\n  const dataIterator = isLazyIteratorObject(dataset) ?\n      dataset as LazyIterator<T>:\n      await (dataset as Dataset<T>).iterator();\n  // Keeps track of number of examples used in this evaluation.\n  let numExamples = 0;\n  let batch = 0;\n\n  while (hasBatches ? batch < args.batches : true) {\n    const iteratorOut = await dataIterator.next();\n    outs = tfc.tidy(() => {\n      if (iteratorOut.value) {\n        // TODO(cais): Once real dataset is available, use\n        //   `map(x => standardizeDataIteratorOutput(model, x).map(f)`.\n        const {xs, ys} =\n            standardizeDataIteratorOutput(model, iteratorOut.value);\n        const xsAndYs = xs.concat(ys);\n        const batchOuts = tfc.tidy(() => f(xsAndYs));\n        tfc.dispose(xsAndYs);\n\n        if (batch === 0) {\n          for (let i = 0; i < batchOuts.length; ++i) {\n            outs.push(scalar(0));\n          }\n        }\n\n        const batchSize = xsAndYs[0].shape[0];\n        for (let i = 0; i < batchOuts.length; ++i) {\n          const batchOut = batchOuts[i];\n          const oldScalar = outs[i];\n          outs[i] =\n              tfc.tidy(() => tfc.add(outs[i], tfc.mul(batchSize, batchOut)));\n          if (batch > 0) {\n            tfc.dispose(oldScalar);\n          }\n        }\n        tfc.dispose(batchOuts);\n        numExamples += batchSize;\n\n        ++batch;\n      }\n      return outs;\n    });\n\n    if (iteratorOut.done) {\n      if (hasBatches) {\n        console.warn(\n            'Your dataset iterator ran out of data during evaluateDataset(). ' +\n            'Interrupting evalution. Make sure that your ' +\n            'dataset can generate at least `batches` ' +\n            `batches (in this case, ${args.batches} batches). ` +\n            'You may need to use the repeat() function when building ' +\n            'your dataset.');\n      }\n      break;\n    }\n  }\n\n  for (let i = 0; i < outs.length; ++i) {\n    const oldScalar = outs[i];\n    outs[i] = tfc.div(outs[i], numExamples);\n    tfc.dispose(oldScalar);\n  }\n\n  return singletonOrArray(outs);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Interfaces and methods for training models using tf.Tensor objects.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {Scalar, Tensor, Tensor1D, tensor1d, util} from '@tensorflow/tfjs-core';\n\nimport {expandDims, gather, sliceAlongFirstAxis} from '../backend/tfjs_backend';\nimport {BaseCallback, configureCallbacks, CustomCallbackArgs, History, ModelLoggingVerbosity, standardizeCallbacks, YieldEveryOptions} from '../base_callbacks';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {disposeTensorsInLogs, UnresolvedLogs} from '../logs';\nimport {range} from '../utils/math_utils';\nimport {ClassWeight, ClassWeightMap} from './training_utils';\n\n/**\n * Interface configuration model training based on data as `tf.Tensor`s.\n */\nexport interface ModelFitArgs {\n  /**\n   * Number of samples per gradient update. If unspecified, it\n   * will default to 32.\n   */\n  batchSize?: number;\n\n  /** The number of times to iterate over the training data arrays. */\n  epochs?: number;\n\n  /**\n   * Verbosity level.\n   *\n   * Expected to be 0, 1, or 2. Default: 1.\n   *\n   * 0 - No printed message during fit() call.\n   * 1 - In Node.js (tfjs-node), prints the progress bar, together with\n   *     real-time updates of loss and metric values and training speed.\n   *     In the browser: no action. This is the default.\n   * 2 - Not implemented yet.\n   */\n  verbose?: ModelLoggingVerbosity;\n\n  /**\n   * List of callbacks to be called during training.\n   * Can have one or more of the following callbacks:\n   *   - `onTrainBegin(logs)`: called when training starts.\n   *   - `onTrainEnd(logs)`: called when training ends.\n   *   - `onEpochBegin(epoch, logs)`: called at the start of every epoch.\n   *   - `onEpochEnd(epoch, logs)`: called at the end of every epoch.\n   *   - `onBatchBegin(batch, logs)`: called at the start of every batch.\n   *   - `onBatchEnd(batch, logs)`: called at the end of every batch.\n   *   - `onYield(epoch, batch, logs)`: called every `yieldEvery` milliseconds\n   *      with the current epoch, batch and logs. The logs are the same\n   *      as in `onBatchEnd()`. Note that `onYield` can skip batches or\n   *      epochs. See also docs for `yieldEvery` below.\n   */\n  callbacks?: BaseCallback[]|CustomCallbackArgs|CustomCallbackArgs[];\n\n  /**\n   * Float between 0 and 1: fraction of the training data\n   * to be used as validation data. The model will set apart this fraction of\n   * the training data, will not train on it, and will evaluate the loss and\n   * any model metrics on this data at the end of each epoch.\n   * The validation data is selected from the last samples in the `x` and `y`\n   * data provided, before shuffling.\n   */\n  validationSplit?: number;\n\n  /**\n   * Data on which to evaluate the loss and any model\n   * metrics at the end of each epoch. The model will not be trained on this\n   * data. This could be a tuple [xVal, yVal] or a tuple [xVal, yVal,\n   * valSampleWeights]. The model will not be trained on this data.\n   * `validationData` will override `validationSplit`.\n   */\n  validationData?: [\n    Tensor|Tensor[], Tensor|Tensor[]\n  ]|[Tensor | Tensor[], Tensor|Tensor[], Tensor|Tensor[]];\n\n  /**\n   * Whether to shuffle the training data before each epoch. Has\n   * no effect when `stepsPerEpoch` is not `null`.\n   */\n  shuffle?: boolean;\n\n  /**\n   * Optional object mapping class indices (integers) to\n   * a weight (float) to apply to the model's loss for the samples from this\n   * class during training. This can be useful to tell the model to \"pay more\n   * attention\" to samples from an under-represented class.\n   *\n   * If the model has multiple outputs, a class weight can be specified for\n   * each of the outputs by setting this field an array of weight object\n   * or a object that maps model output names (e.g., `model.outputNames[0]`)\n   * to weight objects.\n   */\n  classWeight?: ClassWeight|ClassWeight[]|ClassWeightMap;\n\n  /**\n   * Optional array of the same length as x, containing\n   * weights to apply to the model's loss for each sample. In the case of\n   * temporal data, you can pass a 2D array with shape (samples,\n   * sequenceLength), to apply a different weight to every timestep of every\n   * sample. In this case you should make sure to specify\n   * sampleWeightMode=\"temporal\" in compile().\n   */\n  sampleWeight?: Tensor;\n\n  /**\n   * Epoch at which to start training (useful for resuming a previous training\n   * run).\n   */\n  initialEpoch?: number;\n\n  /**\n   * Total number of steps (batches of samples) before\n   * declaring one epoch finished and starting the next epoch. When training\n   * with Input Tensors such as TensorFlow data tensors, the default `null` is\n   * equal to the number of unique samples in your dataset divided by the\n   * batch size, or 1 if that cannot be determined.\n   */\n  stepsPerEpoch?: number;\n\n  /**\n   * Only relevant if `stepsPerEpoch` is specified. Total number of steps\n   * (batches of samples) to validate before stopping.\n   */\n  validationSteps?: number;\n\n  /**\n   * Configures the frequency of yielding the main thread to other tasks.\n   *\n   * In the browser environment, yielding the main thread can improve the\n   * responsiveness of the page during training. In the Node.js environment,\n   * it can ensure tasks queued in the event loop can be handled in a timely\n   * manner.\n   *\n   * The value can be one of the following:\n   *   - `'auto'`: The yielding happens at a certain frame rate (currently set\n   *               at 125ms). This is the default.\n   *   - `'batch'`: yield every batch.\n   *   - `'epoch'`: yield every epoch.\n   *   - any `number`: yield every `number` milliseconds.\n   *   - `'never'`: never yield. (yielding can still happen through `await\n   *      nextFrame()` calls in custom callbacks.)\n   */\n  yieldEvery?: YieldEveryOptions;\n}\n\nexport function checkBatchSize(batchSize: number) {\n  tfc.util.assert(\n      batchSize > 0 && Number.isInteger(batchSize),\n      () => `batchSize is required to be a positive integer, but got ${\n          batchSize}`);\n}\n\n/**\n * Slice an Tensor or an Array of Tensors, by start and stop indices.\n *\n * Porting Note: The `_slice_arrays` function in PyKeras is covered by this\n *   function and `sliceArraysByIndices()` together.\n *\n * @param arrays: the input.\n * @param start: the starting index (inclusive).\n * @param stop: the stopping index (exclusive).\n * @returns The result of the slicing. If `arrays` is an `Array` of\n *   `tf.Tensor`s, the slicing will be applied to all elements of the `Array`\n *   in the same way.\n */\nexport function sliceArrays(\n    arrays: Tensor|Tensor[], start: number, stop: number): Tensor|Tensor[] {\n  if (arrays == null) {\n    return [null];\n  } else if (Array.isArray(arrays)) {\n    return arrays.map(array => sliceAlongFirstAxis(array, start, stop - start));\n  } else {  // Tensor.\n    return sliceAlongFirstAxis(arrays, start, stop - start);\n  }\n}\n\n/**\n * Slice an Tensor or an Array of Tensors, by random-order indices.\n *\n * Porting Note: The `_slice_arrays` function in PyKeras is covered by this\n *   function and `sliceArrays()` together.\n *\n * @param arrays The input `tf.Tensor` or `Array` of `tf.Tensor`s to slice.\n *   If an `Array` of `tf.Tensor`s, all `tf.Tensor`s will be sliced in the\n *   same fashion.\n * @param indices The indices to use for slicing along the first (batch)\n *   dimension.\n * @returns Result(s) of the slicing.\n */\nexport function sliceArraysByIndices(\n    arrays: Tensor|Tensor[], indices: Tensor1D): Tensor|Tensor[] {\n  return tfc.tidy(() => {\n    if (arrays == null) {\n      return null;\n    } else if (Array.isArray(arrays)) {\n      return arrays.map(\n          array => (sliceArraysByIndices(array, indices) as Tensor));\n    } else {\n      // TODO(cais): indices should be a pre-constructed Tensor1D to avoid\n      //   tensor1d() calls.\n      return gather(\n          arrays, indices.dtype === 'int32' ? indices : indices.toInt());\n    }\n  });\n}\n\n/**\n * Returns a list of batch indices (tuples of indices).\n * @param size: Integer, total size of the data to slice into batches.\n * @param batchSize: Integer, batch size.\n * @returns An Array of [batchStart, batchEnd] tuples. batchStart is\n *   inclusive; batchEnd is exclusive. I.e., each batch consists of indices x\n *   that satisfy batchStart <= x < batchEnd.\n */\nexport function makeBatches(\n    size: number, batchSize: number): Array<[number, number]> {\n  const output: Array<[number, number]> = [];\n  let batchStart = 0;\n  let batchEnd: number = null;\n  while (batchStart < size) {\n    batchEnd = batchStart + batchSize;\n    if (batchEnd >= size) {\n      batchEnd = size;\n    }\n    output.push([batchStart, batchEnd]);\n    batchStart = batchEnd;\n  }\n  return output;\n}\n\n/**\n * Abstract fit function for `f(ins)`.\n * @param f A Function returning a list of tensors. For training, this\n *   function is expected to perform the updates to the variables.\n * @param ins List of tensors to be fed to `f`.\n * @param outLabels List of strings, display names of the outputs of `f`.\n * @param batchSize Integer batch size or `== null` if unknown.\n * @param epochs Number of times to iterate over the data.\n * @param verbose Verbosity mode: 0, 1, or 2. Default: 1.\n * @param callbacks List of callbacks to be called during training.\n * @param valF Function to call for validation.\n * @param valIns List of tensors to be fed to `valF`.\n * @param shuffle Whether to shuffle the data at the beginning of every\n * epoch.\n * @param callbackMetrics List of strings, the display names of the metrics\n *   passed to the callbacks. They should be the concatenation of the\n *   display names of the outputs of `f` and the list of display names\n *   of the outputs of `valF`.\n * @param initialEpoch Epoch at which to start training (useful for\n *   resuming a previous training run).\n * @param stepsPerEpoch Total number of steps (batches on samples) before\n *   declaring one epoch finished and starting the next epoch. Ignored with\n *   the default value of `undefined` or `null`.\n * @param validationSteps Number of steps to run validation for (only if\n *   doing validation from data tensors). Not applicable for tfjs-layers.\n * @returns A `History` object.\n */\nasync function fitLoop(\n    // Type `model` as `any` here to avoid circular dependency w/ training.ts.\n    // tslint:disable-next-line:no-any\n    model: any, f: (data: Tensor[]) => Scalar[], ins: Tensor[],\n    outLabels?: string[], batchSize?: number, epochs?: number, verbose?: number,\n    callbacks?: BaseCallback[], valF?: (data: Tensor[]) => Scalar[],\n    valIns?: Tensor[], shuffle?: boolean|string, callbackMetrics?: string[],\n    initialEpoch?: number, stepsPerEpoch?: number,\n    validationSteps?: number): Promise<History> {\n  if (batchSize == null) {\n    batchSize = 32;\n  }\n  if (epochs == null) {\n    epochs = 1;\n  }\n  if (shuffle == null) {\n    shuffle = true;\n  }\n  if (initialEpoch == null) {\n    initialEpoch = 0;\n  }\n\n  // TODO(cais): Change const to let below when implementing validation.\n  let doValidation = false;\n  if (valF != null && valIns != null) {\n    doValidation = true;\n    // TODO(cais): verbose message.\n  }\n  if (validationSteps != null) {\n    doValidation = true;\n    if (stepsPerEpoch == null) {\n      throw new ValueError(\n          'Can only use `validationSteps` when doing step-wise training, ' +\n          'i.e., `stepsPerEpoch` must be set.');\n    }\n  }\n\n  const numTrainSamples =\n      model.checkNumSamples(ins, batchSize, stepsPerEpoch, 'steps_per_epoch');\n  let indexArray: number[];\n  if (numTrainSamples != null) {\n    indexArray = range(0, numTrainSamples);\n  }\n\n  if (verbose == null) {\n    verbose = 1;\n  }\n\n  const {callbackList, history} = configureCallbacks(\n      callbacks, verbose, epochs, initialEpoch, numTrainSamples, stepsPerEpoch,\n      batchSize, doValidation, callbackMetrics);\n  callbackList.setModel(model);\n  model.history = history;\n  await callbackList.onTrainBegin();\n  model.stopTraining_ = false;\n  // TODO(cais): Take care of callbacks.validation_data as in PyKeras.\n  // TODO(cais): Pre-convert feeds for performance as in PyKeras.\n\n  for (let epoch = initialEpoch; epoch < epochs; ++epoch) {\n    await callbackList.onEpochBegin(epoch);\n    const epochLogs: UnresolvedLogs = {};\n    if (stepsPerEpoch != null) {\n      throw new NotImplementedError(\n          'stepsPerEpoch mode is not implemented yet.');\n    } else {\n      if (shuffle === 'batch') {\n        throw new NotImplementedError('batch shuffling is not implemneted yet');\n      } else if (shuffle) {\n        util.shuffle(indexArray);\n      }\n      // Convert the potentially shuffled indices to Tensor1D, to avoid the\n      // cost of repeated creation of Array1Ds later on.\n      const epochIndexArray1D = tensor1d(indexArray);\n\n      const batches = makeBatches(numTrainSamples, batchSize);\n      for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n        const batchLogs: UnresolvedLogs = {};\n        await callbackList.onBatchBegin(batchIndex, batchLogs);\n\n        tfc.tidy(() => {\n          const batchStart = batches[batchIndex][0];\n          const batchEnd = batches[batchIndex][1];\n          const batchIds = sliceAlongFirstAxis(\n                               epochIndexArray1D, batchStart,\n                               batchEnd - batchStart) as Tensor1D;\n          batchLogs['batch'] = batchIndex;\n          batchLogs['size'] = batchEnd - batchStart;\n\n          // TODO(cais): In ins, train flag can be a number, instead of an\n          //   Tensor? Do we need to handle this in tfjs-layers?\n          const insBatch = sliceArraysByIndices(ins, batchIds) as Tensor[];\n          const outs = f(insBatch);\n          for (let i = 0; i < outLabels.length; ++i) {\n            const label = outLabels[i];\n            const out = outs[i];\n            batchLogs[label] = out;\n            tfc.keep(out);\n            // TODO(cais): Use scope() to avoid ownership.\n          }\n\n          if (batchIndex === batches.length - 1) {  // Last batch.\n            if (doValidation) {\n              const valOuts = model.testLoop(valF, valIns, batchSize);\n              // Porting Notes: In tfjs-layers, valOuts is always an Array.\n              for (let i = 0; i < outLabels.length; ++i) {\n                const label = outLabels[i];\n                const out = valOuts[i];\n                tfc.keep(out);\n                // TODO(cais): Use scope() to avoid ownership.\n                epochLogs['val_' + label] = out;\n              }\n            }\n          }\n        });\n\n        await callbackList.onBatchEnd(batchIndex, batchLogs);\n        disposeTensorsInLogs(batchLogs);\n\n        if (model.stopTraining_) {\n          break;\n        }\n        // TODO(cais): return outs as list of Tensor.\n      }\n\n      epochIndexArray1D.dispose();\n    }\n    // TODO(cais): Run validation at the end of the epoch.\n    await callbackList.onEpochEnd(epoch, epochLogs);\n    if (model.stopTraining_) {\n      break;\n    }\n  }\n  await callbackList.onTrainEnd();\n\n  await model.history.syncData();\n  return model.history;\n}\n\nexport async function fitTensors(\n    // Type `model` as `any` here to avoid circular dependency w/ training.ts.\n    // tslint:disable-next-line:no-any\n    model: any, x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n    y: Tensor|Tensor[]|{[inputName: string]: Tensor},\n    args: ModelFitArgs = {}): Promise<History> {\n  if (model.isTraining) {\n    throw new Error(\n        'Cannot start training because another fit() call is ongoing.');\n  }\n  model.isTraining = true;\n  let inputs: Tensor[];\n  let targets: Tensor[];\n  let inputValX: Tensor|Tensor[];\n  let inputValY: Tensor|Tensor[];\n  let valX: Tensor|Tensor[];\n  let valY: Tensor|Tensor[];\n  let sampleWeights: Tensor[];\n  try {\n    const batchSize = args.batchSize == null ? 32 : args.batchSize;\n    checkBatchSize(batchSize);\n\n    // Validate user data.\n    // TODO(cais): Support sampleWeight.\n    const checkBatchAxis = false;\n    const standardizedOuts =\n        await model.standardizeUserData(\n            x, y, args.sampleWeight, args.classWeight, checkBatchAxis,\n            batchSize) as [Tensor[], Tensor[], Tensor[]];\n    inputs = standardizedOuts[0];\n    targets = standardizedOuts[1];\n    sampleWeights = standardizedOuts[2];\n\n    // Prepare validation data.\n    let doValidation = false;\n    let valIns: Tensor[];\n    if (args.validationData != null && args.validationData.length > 0) {\n      doValidation = true;\n      if (args.validationData.length === 2) {\n        // config.validationData consists of valX and valY.\n        inputValX = args.validationData[0];\n        inputValY = args.validationData[1];\n      } else if (args.validationData.length === 3) {\n        throw new NotImplementedError(\n            'validationData including sample weights is not supported yet.');\n      } else {\n        throw new ValueError(\n            `When passing validation data, it must contain 2 (valX, valY) ` +\n            `or 3 (valX, valY, valSampleWeight) items; ` +\n            `${args.validationData} is invalid.`);\n      }\n\n      const checkBatchAxis = true;\n      const valStandardized =\n          await model.standardizeUserData(\n              inputValX, inputValY, null, /** Unused sample weights. */\n              null,                       /** Unused class weights. */\n              checkBatchAxis, batchSize) as [Tensor[], Tensor[], Tensor[]];\n      valX = valStandardized[0];\n      valY = valStandardized[1];\n      valIns = valX.concat(valY);\n      // TODO(cais): Add useLearningPhase data properly.\n    } else if (\n        args.validationSplit != null && args.validationSplit > 0 &&\n        args.validationSplit < 1) {\n      doValidation = true;\n      // Porting Note: In tfjs-layers, inputs[0] is always an Tensor.\n      const splitAt =\n          Math.floor(inputs[0].shape[0] * (1 - args.validationSplit));\n      const originalBatchSize = inputs[0].shape[0];\n      valX = sliceArrays(inputs, splitAt, originalBatchSize) as Tensor[];\n      inputs = sliceArrays(inputs, 0, splitAt) as Tensor[];\n      valY = sliceArrays(targets, splitAt, originalBatchSize) as Tensor[];\n      targets = sliceArrays(targets, 0, splitAt) as Tensor[];\n      // TODO(cais): Once sampleWeights becomes available, slice it to get\n      //   valSampleWeights.\n      valIns = valX.concat(valY);\n\n      // TODO(cais): Add useLearningPhase data properly.\n    } else if (args.validationSteps != null) {\n      doValidation = true;\n      // TODO(cais): Add useLearningPhase.\n    }\n\n    const ins = inputs.concat(targets).concat(sampleWeights);\n\n    model.checkTrainableWeightsConsistency();\n\n    // TODO(cais): Handle use_learning_phase and learning_phase?\n\n    // Porting Note: Here we see a key deviation of tfjs-layers from\n    // Keras.\n    //  Due to the imperative nature of tfjs-layers' backend (tfjs-core),\n    //  we do not construct symbolic computation graphs to embody the\n    //  training process. Instead, we define a function that performs the\n    //  training action. In PyKeras, the data (inputs and targets) are fed\n    //  through graph placeholders. In tfjs-layers, the data are fed as\n    //  function arguments. Since the function are defined below in the\n    //  scope, we don't have equivalents of PyKeras's\n    //  `_make_train_funciton`.\n    const trainFunction = model.makeTrainFunction();\n    const outLabels = model.getDedupedMetricsNames() as string[];\n\n    let valFunction: (data: Tensor[]) => Scalar[];\n    let callbackMetrics: string[];\n    if (doValidation) {\n      model.makeTestFunction();\n      valFunction = model.testFunction;\n      callbackMetrics =\n          outLabels.slice().concat(outLabels.map(n => 'val_' + n));\n    } else {\n      valFunction = null;\n      valIns = [];\n      callbackMetrics = outLabels.slice();\n    }\n\n    const callbacks = standardizeCallbacks(args.callbacks, args.yieldEvery);\n    const out = await fitLoop(\n        model, trainFunction, ins, outLabels, batchSize, args.epochs,\n        args.verbose, callbacks, valFunction, valIns, args.shuffle,\n        callbackMetrics, args.initialEpoch, null, null);\n    return out;\n  } finally {\n    model.isTraining = false;\n    // Memory clean up.\n    disposeNewTensors(inputs, x);\n    disposeNewTensors(targets, y);\n    disposeNewTensors(valX as Tensor[], inputValX);\n    disposeNewTensors(valY as Tensor[], inputValY);\n    if (sampleWeights != null) {\n      tfc.dispose(sampleWeights);\n    }\n  }\n  // TODO(cais): Add value to outLabels.\n}\n\n/**\n * Ensure tensors all have a rank of at least 2.\n *\n * If a tensor has a rank of 1, it is dimension-expanded to rank 2.\n * If any tensor has a rank of 0 (i.e., is a scalar), an error will be thrown.\n */\nexport function ensureTensorsRank2OrHigher(tensors: Tensor|Tensor[]): Tensor[] {\n  const outs: Tensor[] = [];\n  if (tensors instanceof Tensor) {\n    tensors = [tensors];\n  }\n\n  // Make Tensors at least 2D.\n  for (let i = 0; i < tensors.length; ++i) {\n    const tensor = tensors[i];\n    if (tensor.rank === 1) {\n      outs.push(expandDims(tensor, 1));\n    } else if (tensor.rank === 0) {\n      throw new Error(\n          'Expected tensor to be at least 1D, but received a 0D tensor ' +\n          '(scalar).');\n    } else {\n      outs.push(tensor);\n    }\n  }\n  return outs;\n}\n\n/**\n * Compare a set of tensors with a reference (old) set, discard the ones\n * in the new set that are not present in the reference set.\n *\n * This method is used for memory clenaup during calls such as\n * LayersModel.fit().\n *\n * @param tensors New set which may contain Tensors not present in\n *   `refTensors`.\n * @param refTensors Reference Tensor set.\n */\n// TODO(cais, kangyizhang): Deduplicate with tfjs-data.\nexport function disposeNewTensors(\n    tensors: Tensor|Tensor[]|{[inputName: string]: Tensor},\n    refTensors: Tensor|Tensor[]|{[inputName: string]: Tensor}): void {\n  if (tensors == null) {\n    return;\n  }\n  const oldTensorIds: number[] = [];\n  if (refTensors instanceof Tensor) {\n    oldTensorIds.push(refTensors.id);\n  } else if (Array.isArray(refTensors)) {\n    refTensors.forEach(t => oldTensorIds.push(t.id));\n  } else if (refTensors != null) {\n    // `oldTensors` is a map from string name to Tensor.\n    for (const name in refTensors) {\n      const oldTensor = refTensors[name];\n      oldTensorIds.push(oldTensor.id);\n    }\n  }\n\n  const tensorsToDispose: Tensor[] = [];\n  if (tensors instanceof Tensor) {\n    if (oldTensorIds.indexOf(tensors.id) === -1) {\n      tensorsToDispose.push(tensors);\n    }\n  } else if (Array.isArray(tensors)) {\n    tensors.forEach(t => {\n      if (oldTensorIds.indexOf(t.id) === -1) {\n        tensorsToDispose.push(t);\n      }\n    });\n  } else if (tensors != null) {\n    // `oldTensors` is a map from string name to Tensor.\n    for (const name in tensors) {\n      const tensor = tensors[name];\n      if (oldTensorIds.indexOf(tensor.id) === -1) {\n        tensorsToDispose.push(tensor);\n      }\n    }\n  }\n\n  tensorsToDispose.forEach(t => {\n    if (!t.isDisposed) {\n      t.dispose();\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original Source: engine/training.py */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {io, ModelPredictConfig as ModelPredictArgs, NamedTensorMap, Optimizer, Scalar, scalar, serialization, Tensor, Tensor1D, tensor1d, util} from '@tensorflow/tfjs-core';\n\nimport * as K from '../backend/tfjs_backend';\nimport {History, ModelLoggingVerbosity} from '../base_callbacks';\nimport {nameScope} from '../common';\nimport {NotImplementedError, RuntimeError, ValueError} from '../errors';\nimport {Shape} from '../keras_format/common';\nimport {LossIdentifier} from '../keras_format/loss_config';\nimport {OptimizerSerialization} from '../keras_format/optimizer_config';\nimport {MetricsIdentifier, TrainingConfig} from '../keras_format/training_config';\nimport {deserialize} from '../layers/serialization';\nimport * as losses from '../losses';\nimport * as Metrics from '../metrics';\nimport * as optimizers from '../optimizers';\nimport {LossOrMetricFn, NamedTensor} from '../types';\nimport {checkUserDefinedMetadata} from '../user_defined_metadata';\nimport {count, pyListRepeat, singletonOrArray, toCamelCase, toSnakeCase, unique} from '../utils/generic_utils';\nimport {printSummary} from '../utils/layer_utils';\nimport {range} from '../utils/math_utils';\nimport {convertPythonicToTs} from '../utils/serialization_utils';\nimport {LayerVariable} from '../variables';\nimport {version} from '../version';\n\nimport {Container, ContainerArgs} from './container';\nimport {Dataset} from './dataset_stub';\nimport {execute, FeedDict} from './executor';\nimport {DisposeResult, SymbolicTensor} from './topology';\nimport {evaluateDataset, fitDataset, ModelEvaluateDatasetArgs, ModelFitDatasetArgs} from './training_dataset';\nimport {checkBatchSize, disposeNewTensors, ensureTensorsRank2OrHigher, fitTensors, makeBatches, ModelFitArgs, sliceArrays, sliceArraysByIndices} from './training_tensors';\nimport {ClassWeight, ClassWeightMap, computeWeightedLoss, standardizeClassWeights, standardizeWeights} from './training_utils';\n\n/**\n * Helper function for polymorphic input data: 1. singleton Tensor.\n */\nexport function isDataTensor(x: Tensor|Tensor[]|{[inputName: string]: Tensor}|\n                             {[inputName: string]: Tensor[]}): boolean {\n  return x instanceof Tensor;\n}\n\n/**\n * Helper function for polymorphic input data: 2. Array of Tensor.\n */\nexport function isDataArray(x: Tensor|Tensor[]|\n                            {[inputName: string]: Tensor}): boolean {\n  return Array.isArray(x);\n}\n\n/**\n * Helper function for polymorphic input data: 3. \"dict\" of Tensor.\n */\nexport function isDataDict(x: Tensor|Tensor[]|\n                           {[inputName: string]: Tensor}): boolean {\n  return !isDataTensor(x) && !isDataArray(x);\n}\n\n/**\n * Normalizes inputs and targets provided by users.\n * @param data User-provided input data (polymorphic).\n * @param names An Array of expected Tensor names.\n * @param shapes Optional Array of expected Tensor shapes.\n * @param checkBatchAxis Whether to check that the batch axis of the arrays\n *   match  the expected value found in `shapes`.\n * @param exceptionPrefix String prefix used for exception formatting.\n * @returns List of standardized input Tensors (one Tensor per model input).\n * @throws ValueError: in case of improperly formatted user data.\n */\nexport function standardizeInputData(\n    data: Tensor|Tensor[]|{[inputName: string]: Tensor}, names: string[],\n    shapes?: Shape[], checkBatchAxis = true, exceptionPrefix = ''): Tensor[] {\n  if (names == null || names.length === 0) {\n    // Check for the case where the model expected no data, but some data got\n    // sent.\n    if (data != null) {\n      let gotUnexpectedData = false;\n      if (isDataArray(data) && (data as Tensor[]).length > 0) {\n        gotUnexpectedData = true;\n      } else if (isDataDict(data)) {\n        for (const key in data) {\n          if (data.hasOwnProperty(key)) {\n            gotUnexpectedData = true;\n            break;\n          }\n        }\n      } else {\n        // `data` is a singleton Tensor in this case.\n        gotUnexpectedData = true;\n      }\n      if (gotUnexpectedData) {\n        throw new ValueError(\n            `Error when checking model ${exceptionPrefix} expected no data, ` +\n            `but got ${data}`);\n      }\n    }\n    return [];\n  }\n  if (data == null) {\n    return names.map(name => null);\n  }\n\n  let arrays: Tensor[];\n  if (isDataDict(data)) {\n    data = data as {[inputName: string]: Tensor};\n    arrays = [];\n    for (const name of names) {\n      if (data[name] == null) {\n        throw new ValueError(\n            `No data provided for \"${name}\". Need data for each key in: ` +\n            `${names}`);\n      }\n      arrays.push(data[name]);\n    }\n  } else if (isDataArray(data)) {\n    data = data as Tensor[];\n    if (data.length !== names.length) {\n      throw new ValueError(\n          `Error when checking model ${exceptionPrefix}: the Array of ` +\n          `Tensors that you are passing to your model is not the size the ` +\n          `model expected. Expected to see ${names.length} Tensor(s), but ` +\n          `instead got the following list of Tensor(s): ${data}`);\n    }\n    arrays = data;\n  } else {\n    data = data as Tensor;\n    if (names.length > 1) {\n      throw new ValueError(\n          `The model ${exceptionPrefix} expects ${names.length} Tensor(s), ` +\n          `but only received one Tensor. Found: Tensor with shape ${\n              data.shape}`);\n    }\n    arrays = [data];\n  }\n\n  arrays = ensureTensorsRank2OrHigher(arrays);\n\n  // Check shape compatibility.\n  if (shapes != null) {\n    for (let i = 0; i < names.length; ++i) {\n      if (shapes[i] == null) {\n        continue;\n      }\n      const array = arrays[i];\n      if (array.shape.length !== shapes[i].length) {\n        throw new ValueError(\n            `Error when checking ${exceptionPrefix}: expected ${names[i]} ` +\n            `to have ${shapes[i].length} dimension(s). but got array with ` +\n            `shape ${array.shape}`);\n      }\n      for (let j = 0; j < shapes[i].length; ++j) {\n        if (j === 0 && !checkBatchAxis) {\n          // Skip the first (batch) axis.\n          continue;\n        }\n        const dim = array.shape[j];\n        const refDim = shapes[i][j];\n        if (refDim != null && refDim >= 0 && dim !== refDim) {\n          throw new ValueError(\n              `Error when checking ${exceptionPrefix}: expected ${names[i]} ` +\n              `to have shape [${shapes[i]}], but got array with shape ` +\n              `[${array.shape}].`);\n        }\n      }\n    }\n  }\n  return arrays;\n}\n\n/**\n * User input validation for Tensors.\n * @param inputs `Array` of `tf.Tensor`s for inputs.\n * @param targets `Array` of `tf.Tensor`s for targets.\n * @param weights Optional `Array` of `tf.Tensor`s for sample weights.\n * @throws ValueError: in case of incorrectly formatted data.\n */\nexport function checkArrayLengths(\n    inputs: Tensor[], targets: Tensor[], weights?: Tensor[]) {\n  const setX = unique(inputs.map(input => input.shape[0]));\n  setX.sort();\n  const setY = unique(targets.map(target => target.shape[0]));\n  setY.sort();\n  // TODO(cais): Check `weights` as well.\n  if (setX.length > 1) {\n    throw new ValueError(\n        `All input Tensors (x) should have the same number of samples. ` +\n        `Got array shapes: ` +\n        `${JSON.stringify(inputs.map(input => input.shape))}`);\n  }\n  if (setY.length > 1) {\n    throw new ValueError(\n        `All target Tensors (y) should have the same number of samples. ` +\n        `Got array shapes: ` +\n        `${JSON.stringify(targets.map(target => target.shape))}`);\n  }\n  if (setX.length > 0 && setY.length > 0 && !util.arraysEqual(setX, setY)) {\n    throw new ValueError(\n        `Input Tensors should have the same number of samples as target ` +\n        `Tensors. Found ${setX[0]} input sample(s) and ${setY[0]} target ` +\n        `sample(s).`);\n  }\n}\n\n/**\n * Validation on the compatibility of targes and loss functions.\n *\n * This helps prevent users from using loss functions incorrectly.\n *\n * @param targets `Array` of `tf.Tensor`s of targets.\n * @param lossFns `Array` of loss functions.\n * @param outputShapes `Array` of shapes of model outputs.\n */\nfunction checkLossAndTargetCompatibility(\n    targets: Tensor[], lossFns: LossOrMetricFn[], outputShapes: Shape[]) {\n  // TODO(cais): Dedicated test coverage?\n  const keyLosses = [\n    losses.meanSquaredError, losses.binaryCrossentropy,\n    losses.categoricalCrossentropy\n  ];\n  for (let i = 0; i < targets.length; ++i) {\n    const y = targets[i];\n    const loss = lossFns[i];\n    const shape = outputShapes[i];\n    if (loss == null) {\n      continue;\n    }\n    if (loss === losses.categoricalCrossentropy) {\n      if (y.shape[y.shape.length - 1] === 1) {\n        throw new ValueError(\n            `You are passing a target array of shape ${y.shape} while using ` +\n            `a loss 'categorical_crossentropy'. 'categorical_crossentropy'` +\n            `expects targets to be binary matrices (1s and 0s) of shape ` +\n            `[samples, classes].`);\n        // TODO(cais): Example code in error message.\n      }\n    }\n    if (keyLosses.indexOf(loss) !== -1) {\n      const slicedYShape = y.shape.slice(1);\n      const slicedShape = shape.slice(1);\n      for (let j = 0; j < slicedYShape.length; ++j) {\n        const targetDim = slicedYShape[j];\n        const outDim = slicedShape[j];\n        if (outDim != null && targetDim !== outDim) {\n          throw new ValueError(\n              `A target Tensor with shape ${y.shape} was passed for an ` +\n              `output of shape ${shape}, while using a loss function that ` +\n              `expects targets to have the same shape as the output.`);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Check inputs provided by the user.\n *\n * Porting Note: This corresponds to _standardize_input_data() in Python\n *   Keras. Because of the strong typing in TF.js, we do not need to convert\n *   the data. Specifically:\n *   1) in PyKeras, `data` can be `DataFrame` instances from pandas, for\n *      example. We don't need to worry about that here because there is no\n *      widely popular javascript/typesdcript equivalent of pandas (so far).\n *      If one becomes available in the future, we can add support.\n *   2) in PyKeras, inputs can be Python dict. But here we are stipulating\n * that the data is either a single `tf.Tensor` or an Array of `tf.Tensor`s. We\n * may add support for `Object` data inputs in the future when the need\n * arises.\n *\n * Instead, we perform basic checks for number of parameters and shapes.\n *\n * @param data: The input data.\n * @param names: Name for the inputs, from the model.\n * @param shapes: Expected shapes for the input data, from the model.\n * @param checkBatchAxis: Whether the size along the batch axis (i.e., the\n *   first dimension) will be checked for matching.\n * @param exceptionPrefix: Execption prefix message, used in generating error\n *   messages.\n * @throws ValueError: on incorrect number of inputs or mismatches in shapes.\n */\nfunction checkInputData(\n    data: Tensor|Tensor[], names: string[], shapes?: Shape[],\n    checkBatchAxis = true, exceptionPrefix = '') {\n  let arrays: Tensor[];\n  if (Array.isArray(data)) {\n    if (data.length !== names.length) {\n      throw new ValueError(\n          `Error when checking model ${exceptionPrefix}: the Array of ` +\n          `Tensors that you are passing to your model is not the size the ` +\n          `the model expected. Expected to see ${names.length} Tensor(s),` +\n          ` but instead got ${data.length} Tensors(s).`);\n    }\n    arrays = data;\n  } else {\n    if (names.length > 1) {\n      throw new ValueError(\n          `The model expects ${names.length} ${exceptionPrefix} Tensors, ` +\n          `but only received one Tensor. Found: array with shape ` +\n          `${JSON.stringify(data.shape)}.`);\n    }\n    arrays = [data];\n  }\n\n  if (shapes != null) {\n    for (let i = 0; i < names.length; ++i) {\n      if (shapes[i] == null) {\n        continue;\n      }\n      const array = arrays[i];\n      if (array.shape.length !== shapes[i].length) {\n        throw new ValueError(\n            `Error when checking ${exceptionPrefix}: expected ${names[i]} ` +\n            `to have ${shapes[i].length} dimension(s), but got array with ` +\n            `shape ${JSON.stringify(array.shape)}`);\n      }\n      for (let j = 0; j < shapes[i].length; ++j) {\n        if (j === 0 && !checkBatchAxis) {\n          continue;\n        }\n        const dim = array.shape[j];\n        const refDim = shapes[i][j];\n        if (refDim != null) {\n          if (refDim !== dim) {\n            throw new ValueError(\n                `Error when checking ${exceptionPrefix}: expected ` +\n                `${names[i]} to have shape ${JSON.stringify(shapes[i])} but ` +\n                `got array with shape ${JSON.stringify(array.shape)}.`);\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Maps metric functions to model outputs.\n * @param metrics An shortcut strings name, metric function, `Array` or dict\n *   (`Object`) of metric functions.\n * @param outputNames An `Array` of the names of model outputs.\n * @returns An `Array` (one entry per model output) of `Array` of metric\n *   functions. For instance, if the model has 2 outputs, and for the first\n *   output we want to compute `binaryAccuracy` and `binaryCrossentropy`,\n *   and just `binaryAccuracy` for the second output, the `Array` would look\n *   like:\n *     `[[binaryAccuracy, binaryCrossentropy],  [binaryAccuracy]]`\n * @throws TypeError: incompatible metrics format.\n */\nexport function collectMetrics(\n    metrics: string|LossOrMetricFn|Array<string|LossOrMetricFn>|\n    {[outputName: string]: string | LossOrMetricFn},\n    outputNames: string[]): Array<Array<string|LossOrMetricFn>> {\n  if (metrics == null || Array.isArray(metrics) && metrics.length === 0) {\n    return outputNames.map(name => []);\n  }\n\n  let wrappedMetrics: Array<string|LossOrMetricFn>|\n      {[outputName: string]: string | LossOrMetricFn};\n  if (typeof metrics === 'string' || typeof metrics === 'function') {\n    wrappedMetrics = [metrics];\n  } else if (Array.isArray(metrics) || typeof metrics === 'object') {\n    wrappedMetrics = metrics as Array<string|LossOrMetricFn>|\n        {[outputName: string]: string} | {[outputName: string]: LossOrMetricFn};\n  } else {\n    throw new TypeError(\n        'Type of metrics argument not understood. Expected an string,' +\n        `function, Array, or Object, found: ${metrics}`);\n  }\n\n  if (Array.isArray(wrappedMetrics)) {\n    // We then apply all metrics to all outputs.\n    return outputNames.map(\n        name => wrappedMetrics as Array<string|LossOrMetricFn>);\n  } else {\n    // In this case, metrics is a dict.\n    const nestedMetrics: Array<Array<string|LossOrMetricFn>> = [];\n    for (const name of outputNames) {\n      let outputMetrics: string|LossOrMetricFn|Array<string|LossOrMetricFn> =\n          wrappedMetrics.hasOwnProperty(name) ? wrappedMetrics[name] : [];\n      if (!Array.isArray(outputMetrics)) {\n        outputMetrics = [outputMetrics];\n      }\n      nestedMetrics.push(outputMetrics);\n    }\n    return nestedMetrics;\n  }\n}\n\nexport interface ModelEvaluateArgs {\n  /**\n   * Batch size (Integer). If unspecified, it will default to 32.\n   */\n  batchSize?: number;\n\n  /**\n   * Verbosity mode.\n   */\n  verbose?: ModelLoggingVerbosity;\n\n  /**\n   * Tensor of weights to weight the contribution of different samples to the\n   * loss and metrics.\n   */\n  sampleWeight?: Tensor;\n\n  /**\n   * integer: total number of steps (batches of samples)\n   * before declaring the evaluation round finished. Ignored with the default\n   * value of `undefined`.\n   */\n  steps?: number;\n}\n\n/**\n * Configuration for calls to `LayersModel.compile()`.\n */\nexport interface ModelCompileArgs {\n  /**\n   * An instance of `tf.train.Optimizer` or a string name for an Optimizer.\n   */\n  optimizer: string|Optimizer;\n\n  /**\n   * Object function(s) or name(s) of object function(s).\n   * If the model has multiple outputs, you can use a different loss\n   * on each output by passing a dictionary or an Array of losses.\n   * The loss value that will be minimized by the model will then be the sum\n   * of all individual losses.\n   */\n  loss: string|string[]|{[outputName: string]: string}|LossOrMetricFn|\n      LossOrMetricFn[]|{[outputName: string]: LossOrMetricFn};\n\n  /**\n   * List of metrics to be evaluated by the model during training and testing.\n   * Typically you will use `metrics=['accuracy']`.\n   * To specify different metrics for different outputs of a multi-output\n   * model, you could also pass a dictionary.\n   */\n  metrics?: string|LossOrMetricFn|Array<string|LossOrMetricFn>|\n      {[outputName: string]: string | LossOrMetricFn};\n\n  // TODO(cais): Add lossWeights, sampleWeightMode, weightedMetrics, and\n  //   targetTensors.\n}\n\nconst LAYERS_MODEL_FORMAT_NAME = 'layers-model';\n\n/**\n * A `tf.LayersModel` is a directed, acyclic graph of `tf.Layer`s plus methods\n * for training, evaluation, prediction and saving.\n *\n * `tf.LayersModel` is the basic unit of training, inference and evaluation in\n * TensorFlow.js. To create a `tf.LayersModel`, use `tf.LayersModel`.\n *\n * See also:\n *   `tf.Sequential`, `tf.loadLayersModel`.\n */\n/** @doc {heading: 'Models', subheading: 'Classes'} */\nexport class LayersModel extends Container implements tfc.InferenceModel {\n  // The class name is 'Model' rather than 'LayersModel' for backwards\n  // compatibility since this class name shows up in the serialization format.\n  /** @nocollapse */\n  static className = 'Model';\n  protected optimizer_: Optimizer;\n  // Whether the model instance owns the optimizer: `true` if and only if\n  // `optimizer` is created from a string parameter during `compile()` call.\n  protected isOptimizerOwned: boolean;\n\n  loss: string|string[]|{[outputName: string]: string}|LossOrMetricFn|\n      LossOrMetricFn[]|{[outputName: string]: LossOrMetricFn};\n  lossFunctions: LossOrMetricFn[];\n\n  // TODO(cais): These private variables should probably not have the string\n  //   'feed' in their names, because we are not dealing with a symbolic\n  //   backend.\n  private feedOutputShapes: Shape[];\n  private feedLossFns: LossOrMetricFn[];\n  private collectedTrainableWeights: LayerVariable[];\n  private testFunction: (data: Tensor[]) => Scalar[];\n  history: History;\n\n  // A public property that can be set by Callbacks to order early stopping\n  // during `fit()` calls.\n  protected stopTraining_: boolean;\n  protected isTraining: boolean;\n\n  metrics: string|LossOrMetricFn|Array<string|LossOrMetricFn>|\n      {[outputName: string]: string | LossOrMetricFn};\n  metricsNames: string[];\n  // Porting Note: `metrics_tensors` in PyKeras is a symbolic tensor. But given\n  //   the imperative nature of tfjs-core, `metricsTensors` is a\n  //   TypeScript function here.\n  //   Also note that due to the imperative nature of tfjs-core, `metricsTensor`\n  //   here needs an output index to keep track of which output of the\n  //   LayersModel a metric belongs to. This is unlike `metrics_tensors` in\n  //   PyKeras, which is a `list` of symbolic tensors, each of which has\n  //   implicit \"knowledge\" of the outputs it depends on.\n  metricsTensors: Array<[LossOrMetricFn, number]>;\n\n  // User defind metadata (if any).\n  private userDefinedMetadata: {};\n\n  constructor(args: ContainerArgs) {\n    super(args);\n    this.isTraining = false;\n  }\n\n  /**\n   * Print a text summary of the model's layers.\n   *\n   * The summary includes\n   * - Name and type of all layers that comprise the model.\n   * - Output shape(s) of the layers\n   * - Number of weight parameters of each layer\n   * - If the model has non-sequential-like topology, the inputs each layer\n   *   receives\n   * - The total number of trainable and non-trainable parameters of the model.\n   *\n   * ```js\n   * const input1 = tf.input({shape: [10]});\n   * const input2 = tf.input({shape: [20]});\n   * const dense1 = tf.layers.dense({units: 4}).apply(input1);\n   * const dense2 = tf.layers.dense({units: 8}).apply(input2);\n   * const concat = tf.layers.concatenate().apply([dense1, dense2]);\n   * const output =\n   *     tf.layers.dense({units: 3, activation: 'softmax'}).apply(concat);\n   *\n   * const model = tf.model({inputs: [input1, input2], outputs: output});\n   * model.summary();\n   * ```\n   *\n   * @param lineLength Custom line length, in number of characters.\n   * @param positions Custom widths of each of the columns, as either\n   *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number\n   *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to\n   *   right-most (i.e., ending) position of a column.\n   * @param printFn Custom print function. Can be used to replace the default\n   *   `console.log`. For example, you can use `x => {}` to mute the printed\n   *   messages in the console.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  summary(\n      lineLength?: number, positions?: number[],\n      printFn:\n          // tslint:disable-next-line:no-any\n      (message?: any, ...optionalParams: any[]) => void = console.log) {\n    if (!this.built) {\n      throw new ValueError(\n          `This model has never been called, thus its weights have not been ` +\n          `created yet. So no summary can be displayed. Build the model ` +\n          `first (e.g., by calling it on some test data).`);\n    }\n    printSummary(this, lineLength, positions, printFn);\n  }\n\n  /**\n   * Configures and prepares the model for training and evaluation.  Compiling\n   * outfits the model with an optimizer, loss, and/or metrics.  Calling `fit`\n   * or `evaluate` on an un-compiled model will throw an error.\n   *\n   * @param args a `ModelCompileArgs` specifying the loss, optimizer, and\n   * metrics to be used for fitting and evaluating this model.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  compile(args: ModelCompileArgs): void {\n    if (args.loss == null) {\n      args.loss = [];\n    }\n    this.loss = args.loss;\n\n    if (typeof args.optimizer === 'string') {\n      this.optimizer_ = optimizers.getOptimizer(args.optimizer);\n      this.isOptimizerOwned = true;\n    } else {\n      if (!(args.optimizer instanceof Optimizer)) {\n        throw new ValueError(\n            `User-defined optimizer must be an instance of tf.Optimizer.`);\n      }\n      this.optimizer_ = args.optimizer;\n      this.isOptimizerOwned = false;\n    }\n\n    // TODO(cais): Add lossWeights.\n    // TODO(cais): Add sampleWeightMode.\n\n    // Prepare loss functions.\n    let lossFunctions: LossOrMetricFn[] = [];\n    if (!Array.isArray(args.loss) && typeof args.loss !== 'string' &&\n        typeof args.loss !== 'function') {\n      args.loss = args.loss as {[outputName: string]: string};\n      for (const name in args.loss) {\n        if (this.outputNames.indexOf(name) === -1) {\n          throw new ValueError(\n              `Unknown entry in loss dictionary: \"${name}\". ` +\n              `Only expected the following keys: ${this.outputNames}`);\n        }\n      }\n      for (const name of this.outputNames) {\n        if (args.loss[name] == null) {\n          console.warn(\n              `Output \"${name}\" is missing from loss dictionary. We assume ` +\n              `this was done on purpose, and we will not be expecting data ` +\n              `to be passed to ${name} during training`);\n        }\n        lossFunctions.push(losses.get(args.loss[name]));\n      }\n    } else if (Array.isArray(args.loss)) {\n      if (args.loss.length !== this.outputs.length) {\n        throw new ValueError(\n            `When passing an Array as loss, it should have one entry per ` +\n            `model output. The model has ${this.outputs.length} output(s), ` +\n            `but you passed loss=${args.loss}.`);\n      }\n      const theLosses = args.loss as Array<string|LossOrMetricFn>;\n      lossFunctions = theLosses.map(l => losses.get(l));\n    } else {\n      const lossFunction = losses.get(args.loss);\n      this.outputs.forEach(_ => {\n        lossFunctions.push(lossFunction);\n      });\n    }\n\n    this.lossFunctions = lossFunctions;\n\n    this.feedOutputNames = [];\n    this.feedOutputShapes = [];\n    this.feedLossFns = [];\n    for (let i = 0; i < this.outputs.length; ++i) {\n      // TODO(cais): Logic for skipping target(s).\n      const shape = this.internalOutputShapes[i];\n      const name = this.outputNames[i];\n      this.feedOutputNames.push(name);\n      this.feedOutputShapes.push(shape);\n      this.feedLossFns.push(this.lossFunctions[i]);\n    }\n\n    // TODO(cais): Add logic for output masks.\n    // TODO(cais): Add logic for sample weights.\n    const skipTargetIndices: number[] = [];\n\n    // Prepare metrics.\n    this.metrics = args.metrics;\n    // TODO(cais): Add weightedMetrics.\n    this.metricsNames = ['loss'];\n    this.metricsTensors = [];\n\n    // Compute total loss.\n    // Porting Note: In PyKeras, metrics_tensors are symbolic tensor objects.\n    //   Here, metricsTensors are TypeScript functions. This difference is due\n    //   to the difference in symbolic/imperative property of the backends.\n    nameScope('loss', () => {\n      for (let i = 0; i < this.outputs.length; ++i) {\n        if (skipTargetIndices.indexOf(i) !== -1) {\n          continue;\n        }\n        // TODO(cais): Add weightedLoss, sampleWeight and mask.\n        //   The following line should be weightedLoss\n        const weightedLoss = this.lossFunctions[i];\n        if (this.outputs.length > 1) {\n          this.metricsTensors.push([weightedLoss, i]);\n          this.metricsNames.push(this.outputNames[i] + '_loss');\n        }\n      }\n\n      // Porting Note: Due to the imperative nature of the backend, we calculate\n      //   the regularizer penalties in the totalLossFunction, instead of here.\n    });\n\n    const nestedMetrics = collectMetrics(args.metrics, this.outputNames);\n    // TODO(cais): Add nestedWeightedMetrics.\n\n    /**\n     * Helper function used in loop below.\n     */\n    const appendMetric =\n        (outputIndex: number, metricName: string,\n         metricTensor: LossOrMetricFn) => {\n          if (this.outputNames.length > 1) {\n            metricName = this.outputNames[outputIndex] + '_' + metricName;\n          }\n          this.metricsNames.push(metricName);\n          this.metricsTensors.push([metricTensor, outputIndex]);\n        };\n\n    nameScope('metric', () => {\n      for (let i = 0; i < this.outputs.length; ++i) {\n        if (skipTargetIndices.indexOf(i) !== -1) {\n          continue;\n        }\n        const outputMetrics = nestedMetrics[i];\n        // TODO(cais): Add weights and outputWeightedMetrics.\n\n        // TODO(cais): Add optional arg `weights` to the following function.\n        const handleMetrics = (metrics: Array<string|LossOrMetricFn>) => {\n          const metricNamePrefix = '';\n          let metricName: string;\n          let accFn: LossOrMetricFn;\n          let weightedMetricFn: LossOrMetricFn;\n          //  TODO(cais): Use 'weights_' for weighted metrics.\n\n          for (const metric of metrics) {\n            if (typeof metric === 'string' &&\n                ['accuracy', 'acc', 'crossentropy', 'ce'].indexOf(metric) !==\n                    -1) {\n              const outputShape = this.internalOutputShapes[i];\n\n              if (outputShape[outputShape.length - 1] === 1 ||\n                  this.lossFunctions[i] === losses.binaryCrossentropy) {\n                // case: binary accuracy/crossentropy.\n                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                  accFn = Metrics.binaryAccuracy;\n                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                  accFn = Metrics.binaryCrossentropy;\n                }\n              } else if (\n                  this.lossFunctions[i] ===\n                  losses.sparseCategoricalCrossentropy) {\n                // case: categorical accuracy / crossentropy with sparse\n                // targets.\n                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                  accFn = Metrics.sparseCategoricalAccuracy;\n                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                  accFn = Metrics.sparseCategoricalCrossentropy;\n                }\n              } else {\n                // case: categorical accuracy / crossentropy.\n                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                  accFn = Metrics.categoricalAccuracy;\n                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                  accFn = Metrics.categoricalCrossentropy;\n                }\n              }\n              let suffix: string;\n              if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                suffix = 'acc';\n              } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                suffix = 'ce';\n              }\n              // TODO(cais): Add weighting actually.\n              weightedMetricFn = accFn;\n              metricName = metricNamePrefix + suffix;\n            } else {\n              const metricFn = Metrics.get(metric);\n              // TODO(cais): Add weighting actually.\n              weightedMetricFn = metricFn;\n              metricName =\n                  metricNamePrefix + Metrics.getLossOrMetricName(metric);\n            }\n\n            // TODO(cais): Add weighting and masking to metricResult.\n            let metricResult: LossOrMetricFn;\n            nameScope(metricName, () => {\n              metricResult = weightedMetricFn;\n            });\n            appendMetric(i, metricName, metricResult);\n          }\n        };\n\n        handleMetrics(outputMetrics);\n        // TODO(cais): Call handleMetrics with weights.\n      }\n    });\n\n    // Porting Notes: Given the imperative backend of tfjs-core,\n    //   there is no need for constructing the symbolic graph and placeholders.\n    this.collectedTrainableWeights = this.trainableWeights;\n  }\n\n  /**\n   * Check trainable weights count consistency.\n   *\n   * This will raise a warning if `this.trainableWeights` and\n   * `this.collectedTrainableWeights` are inconsistent (i.e., have different\n   * numbers of parameters).\n   * Inconsistency will typically arise when one modifies `model.trainable`\n   * without calling `model.compile()` again.\n   */\n  protected checkTrainableWeightsConsistency(): void {\n    if (this.collectedTrainableWeights == null) {\n      return;\n    }\n    if (this.trainableWeights.length !==\n        this.collectedTrainableWeights.length) {\n      console.warn(\n          'Discrepancy between trainableweights and collected trainable ' +\n          'weights. Did you set `model.trainable` without calling ' +\n          '`model.compile()` afterwards?');\n    }\n  }\n\n  /**\n   * Returns the loss value & metrics values for the model in test mode.\n   *\n   * Loss and metrics are specified during `compile()`, which needs to happen\n   * before calls to `evaluate()`.\n   *\n   * Computation is done in batches.\n   *\n   * ```js\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n   * const result = model.evaluate(\n   *     tf.ones([8, 10]), tf.ones([8, 1]), {batchSize: 4});\n   * result.print();\n   * ```\n   *\n   * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the\n   * model has multiple inputs.\n   * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the\n   * model has multiple outputs.\n   * @param args A `ModelEvaluateArgs`, containing optional fields.\n   *\n   * @return `Scalar` test loss (if the model has a single output and no\n   *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs\n   *   and/or metrics). The attribute `model.metricsNames`\n   *   will give you the display labels for the scalar outputs.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  evaluate(\n      x: Tensor|Tensor[], y: Tensor|Tensor[],\n      args: ModelEvaluateArgs = {}): Scalar|Scalar[] {\n    const batchSize = args.batchSize == null ? 32 : args.batchSize;\n    checkBatchSize(batchSize);\n\n    // TODO(cais): Standardize `config.sampleWeights` as well.\n    // Validate user data.\n    const checkBatchAxis = true;\n    const standardizedOuts =\n        this.standardizeUserDataXY(x, y, checkBatchAxis, batchSize);\n    try {\n      // TODO(cais): If uses `useLearningPhase`, set the corresponding element\n      // of the input to 0.\n      const ins = standardizedOuts[0].concat(standardizedOuts[1]);\n      this.makeTestFunction();\n      const f = this.testFunction;\n      const testOuts =\n          this.testLoop(f, ins, batchSize, args.verbose, args.steps);\n      return singletonOrArray(testOuts);\n    } finally {\n      disposeNewTensors(standardizedOuts[0], x);\n      disposeNewTensors(standardizedOuts[1], y);\n    }\n  }\n\n  // TODO(cais): Add code snippet below once real dataset objects are\n  //   available.\n  /**\n   * Evaluate model using a dataset object.\n   *\n   * Note: Unlike `evaluate()`, this method is asynchronous (`async`);\n   *\n   * @param dataset A dataset object. Its `iterator()` method is expected\n   *   to generate a dataset iterator object, the `next()` method of which\n   *   is expected to produce data batches for evaluation. The return value\n   *   of the `next()` call ought to contain a boolean `done` field and a\n   *   `value` field. The `value` field is expected to be an array of two\n   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n   *   case is for models with exactly one input and one output (e.g..\n   *   a sequential model). The latter case is for models with multiple\n   *   inputs and/or multiple outputs. Of the two items in the array, the\n   *   first is the input feature(s) and the second is the output target(s).\n   * @param args A configuration object for the dataset-based evaluation.\n   * @returns Loss and metric values as an Array of `Scalar` objects.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async evaluateDataset(dataset: Dataset<{}>, args?: ModelEvaluateDatasetArgs):\n      Promise<Scalar|Scalar[]> {\n    this.makeTestFunction();\n    return evaluateDataset(this, dataset, args);\n  }\n\n  /**\n   * Get number of samples provided for training, evaluation or prediction.\n   *\n   * @param ins Input `tf.Tensor`.\n   * @param batchSize Integer batch size, optional.\n   * @param steps Total number of steps (batches of samples) before\n   * declaring loop finished. Optional.\n   * @param stepsName The public API's parameter name for `steps`.\n   * @returns Number of samples provided.\n   */\n  private checkNumSamples(\n      ins: Tensor|Tensor[], batchSize?: number, steps?: number,\n      stepsName = 'steps'): number {\n    let numSamples: number;\n    if (steps != null) {\n      numSamples = null;\n      if (batchSize != null) {\n        throw new ValueError(\n            `If ${stepsName} is set, batchSize must be null or undefined.` +\n            `Got batchSize = ${batchSize}`);\n      }\n    } else if (ins != null) {\n      if (Array.isArray(ins)) {\n        numSamples = ins[0].shape[0];\n      } else {\n        numSamples = ins.shape[0];\n      }\n    } else {\n      throw new ValueError(\n          `Either the input data should have a defined shape, or ` +\n          `${stepsName} shoud be specified.`);\n    }\n    return numSamples;\n  }\n\n  /**\n   * Execute internal tensors of the model with input data feed.\n   * @param inputs Input data feed. Must match the inputs of the model.\n   * @param outputs Names of the output tensors to be fetched. Must match\n   *   names of the SymbolicTensors that belong to the graph.\n   * @returns Fetched values for `outputs`.\n   */\n  execute(inputs: Tensor|Tensor[]|NamedTensorMap, outputs: string|string[]):\n      Tensor|Tensor[] {\n    if (Array.isArray(outputs) && outputs.length === 0) {\n      throw new ValueError(\n          '`outputs` is an empty Array, which is not allowed.');\n    }\n\n    const outputsIsArray = Array.isArray(outputs);\n    const outputNames =\n        (outputsIsArray ? outputs as string[] : [outputs as string]);\n    const outputSymbolicTensors = this.retrieveSymbolicTensors(outputNames);\n\n    // Format the input into a FeedDict.\n    const feedDict = new FeedDict();\n    if (inputs instanceof Tensor) {\n      inputs = [inputs];\n    }\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== this.inputs.length) {\n        throw new ValueError(\n            `The number of inputs provided (${inputs.length}) ` +\n            `does not match the number of inputs of this model ` +\n            `(${this.inputs.length}).`);\n      }\n      for (let i = 0; i < this.inputs.length; ++i) {\n        feedDict.add(this.inputs[i], inputs[i]);\n      }\n    } else {\n      for (const input of this.inputs) {\n        const tensorValue = inputs[input.name];\n        if (tensorValue == null) {\n          throw new ValueError(\n              `No value is provided for the model's input ${input.name}`);\n        }\n        feedDict.add(input, tensorValue);\n      }\n    }\n\n    // Run execution.\n    const executeOutputs = execute(outputSymbolicTensors, feedDict) as Tensor[];\n    return outputsIsArray ? executeOutputs : executeOutputs[0];\n  }\n\n  /**\n   * Retrieve the model's internal symbolic tensors from symbolic-tensor names.\n   */\n  private retrieveSymbolicTensors(symbolicTensorNames: string[]):\n      SymbolicTensor[] {\n    const outputSymbolicTensors: SymbolicTensor[] =\n        pyListRepeat(null, symbolicTensorNames.length);\n    let outputsRemaining = symbolicTensorNames.length;\n    for (const layer of this.layers) {\n      const layerOutputs: SymbolicTensor[] =\n          Array.isArray(layer.output) ? layer.output : [layer.output];\n      const layerOutputNames = layerOutputs.map(output => output.name);\n      for (let i = 0; i < symbolicTensorNames.length; ++i) {\n        const index = layerOutputNames.indexOf(symbolicTensorNames[i]);\n        if (index !== -1) {\n          outputSymbolicTensors[i] = layerOutputs[index];\n          outputsRemaining--;\n        }\n        if (outputsRemaining === 0) {\n          break;\n        }\n      }\n      if (outputsRemaining === 0) {\n        break;\n      }\n    }\n\n    if (outputsRemaining > 0) {\n      const remainingNames: string[] = [];\n      outputSymbolicTensors.forEach((tensor, i) => {\n        if (tensor == null) {\n          remainingNames.push(symbolicTensorNames[i]);\n        }\n      });\n      throw new ValueError(\n          `Cannot find SymbolicTensors for output name(s): ` +\n          `${JSON.stringify(remainingNames)}`);\n    }\n    return outputSymbolicTensors;\n  }\n\n  /**\n   * Helper method to loop over some data in batches.\n   *\n   * Porting Note: Not using the functional approach in the Python equivalent\n   *   due to the imperative backend.\n   * Porting Note: Does not support step mode currently.\n   *\n   * @param ins: input data\n   * @param batchSize: integer batch size.\n   * @param verbose: verbosity model\n   * @returns: Predictions as `tf.Tensor` (if a single output) or an `Array` of\n   *   `tf.Tensor` (if multipe outputs).\n   */\n  private predictLoop(ins: Tensor|Tensor[], batchSize = 32, verbose = false):\n      Tensor|Tensor[] {\n    return tfc.tidy(() => {\n      const numSamples = this.checkNumSamples(ins);\n      if (verbose) {\n        throw new NotImplementedError(\n            'Verbose predictLoop() is not implemented yet.');\n      }\n\n      // Sample-based predictions.\n      // Porting Note: Tensor currently does not support sliced assignments as\n      //   in numpy, e.g., x[1:3] = y. Therefore we use concatenation while\n      //   iterating over the batches.\n\n      const batches = makeBatches(numSamples, batchSize);\n      const outsBatches: Tensor[][] = this.outputs.map(output => []);\n\n      // TODO(cais): Can the scope() be pushed down inside the for loop?\n      for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n        const batchOuts = tfc.tidy(() => {\n          const batchStart = batches[batchIndex][0];\n          const batchEnd = batches[batchIndex][1];\n          // TODO(cais): Take care of the case of the last element is a flag for\n          //   training/test.\n          const insBatch = sliceArrays(ins, batchStart, batchEnd);\n\n          // Construct the feeds for execute();\n          const feeds = [];\n          if (Array.isArray(insBatch)) {\n            for (let i = 0; i < insBatch.length; ++i) {\n              feeds.push({key: this.inputs[i], value: insBatch[i]});\n            }\n          } else {\n            feeds.push({key: this.inputs[0], value: insBatch});\n          }\n          const feedDict = new FeedDict(feeds);\n          return execute(this.outputs, feedDict) as Tensor[];\n        });\n        batchOuts.forEach((batchOut, i) => outsBatches[i].push(batchOut));\n      }\n      return singletonOrArray(\n          outsBatches.map(batches => tfc.concat(batches, 0)));\n    });\n  }\n\n  /**\n   * Generates output predictions for the input samples.\n   *\n   * Computation is done in batches.\n   *\n   * Note: the \"step\" mode of predict() is currently not supported.\n   *   This is because the TensorFlow.js core backend is imperative only.\n   *\n   * ```js\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.predict(tf.ones([8, 10]), {batchSize: 4}).print();\n   * ```\n   *\n   * @param x The input data, as an Tensor, or an `Array` of `tf.Tensor`s if\n   *   the model has multiple inputs.\n   * @param args A `ModelPredictArgs` object containing optional fields.\n   *\n   * @return Prediction results as a `tf.Tensor`(s).\n   *\n   * @exception ValueError In case of mismatch between the provided input data\n   *   and the model's expectations, or in case a stateful model receives a\n   *   number of samples that is not a multiple of the batch size.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  predict(x: Tensor|Tensor[], args: ModelPredictArgs = {}): Tensor|Tensor[] {\n    const xsRank2OrHigher = ensureTensorsRank2OrHigher(x);\n    checkInputData(\n        xsRank2OrHigher, this.inputNames, this.feedInputShapes, false);\n    try {\n      // TODO(cais): Take care of stateful models.\n      //   if (this.stateful) ...\n      // TODO(cais): Take care of the learning_phase boolean flag.\n      //   if (this.useLearningPhase) ...\n      const batchSize = args.batchSize == null ? 32 : args.batchSize;\n      checkBatchSize(batchSize);\n      return this.predictLoop(xsRank2OrHigher, batchSize);\n    } finally {\n      disposeNewTensors(xsRank2OrHigher, x);\n    }\n  }\n\n  /**\n   * Returns predictions for a single batch of samples.\n   *\n   * ```js\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.predictOnBatch(tf.ones([8, 10])).print();\n   * ```\n   * @param x: Input samples, as an Tensor (for models with exactly one\n   *   input) or an array of Tensors (for models with more than one input).\n   * @return Tensor(s) of predictions\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  predictOnBatch(x: Tensor|Tensor[]): Tensor|Tensor[] {\n    checkInputData(x, this.inputNames, this.feedInputShapes, true);\n    // TODO(cais): Take care of the learning_phase boolean flag.\n    //   if (this.useLearningPhase) ...\n    const batchSize = (Array.isArray(x) ? x[0] : x).shape[0];\n    return this.predictLoop(x, batchSize);\n  }\n\n  protected standardizeUserDataXY(\n      x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      y: Tensor|Tensor[]|{[inputName: string]: Tensor}, checkBatchAxis = true,\n      batchSize?: number): [Tensor[], Tensor[]] {\n    // TODO(cais): Add sampleWeight, classWeight\n    if (this.optimizer_ == null) {\n      throw new RuntimeError(\n          'You must compile a model before training/testing. Use ' +\n          'LayersModel.compile(modelCompileArgs).');\n    }\n    const outputShapes: Shape[] = [];\n    for (let i = 0; i < this.feedOutputShapes.length; ++i) {\n      const outputShape = this.feedOutputShapes[i];\n      const lossFn = this.feedLossFns[i];\n      if (lossFn === losses.sparseCategoricalCrossentropy) {\n        outputShapes.push(\n            outputShape.slice(0, outputShape.length - 1).concat([1]));\n      } else {\n        // Porting Note: Because of strong typing `lossFn` must be a function.\n        outputShapes.push(outputShape);\n      }\n    }\n    x = standardizeInputData(\n        x, this.feedInputNames, this.feedInputShapes, false, 'input');\n    y = standardizeInputData(\n        y, this.feedOutputNames, outputShapes, false, 'target');\n    // TODO(cais): Standardize sampleWeights & classWeights.\n    checkArrayLengths(x, y, null);\n    // TODO(cais): Check sampleWeights as well.\n    checkLossAndTargetCompatibility(y, this.feedLossFns, this.feedOutputShapes);\n    if (this.stateful && batchSize != null && batchSize > 0) {\n      if (x[0].shape[0] % batchSize !== 0) {\n        throw new ValueError(\n            `In a stateful network, you should only pass inputs with a ` +\n            `number of samples that is divisible by the batch size ` +\n            `${batchSize}. Found: ${x[0].shape[0]} sample(s).`);\n      }\n    }\n    return [x, y];\n  }\n\n  protected async standardizeUserData(\n      x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      y: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      sampleWeight?: Tensor|Tensor[]|{[outputName: string]: Tensor},\n      classWeight?: ClassWeight|ClassWeight[]|ClassWeightMap,\n      checkBatchAxis = true,\n      batchSize?: number): Promise<[Tensor[], Tensor[], Tensor[]]> {\n    const [standardXs, standardYs] =\n        this.standardizeUserDataXY(x, y, checkBatchAxis, batchSize);\n    // TODO(cais): Handle sampleWeights.\n    if (sampleWeight != null) {\n      throw new Error('sample weight is not supported yet.');\n    }\n\n    let standardSampleWeights: Tensor[] = null;\n    if (classWeight != null) {\n      const classWeights =\n          standardizeClassWeights(classWeight, this.outputNames);\n      standardSampleWeights = [];\n      for (let i = 0; i < classWeights.length; ++i) {\n        standardSampleWeights.push(\n            await standardizeWeights(standardYs[i], null, classWeights[i]));\n      }\n    }\n\n    // TODO(cais): Deal with the case of model.stateful == true.\n    return [standardXs, standardYs, standardSampleWeights];\n  }\n\n  /**\n   * Loop over some test data in batches.\n   * @param f A Function returning a list of tensors.\n   * @param ins Array of tensors to be fed to `f`.\n   * @param batchSize Integer batch size or `null` / `undefined`.\n   * @param verbose verbosity mode.\n   * @param steps Total number of steps (batches of samples) before\n   * declaring test finished. Ignored with the default value of `null` /\n   * `undefined`.\n   * @returns Array of Scalars.\n   */\n  private testLoop(\n      f: (data: Tensor[]) => Scalar[], ins: Tensor[], batchSize?: number,\n      verbose = 0, steps?: number): Scalar[] {\n    return tfc.tidy(() => {\n      const numSamples = this.checkNumSamples(ins, batchSize, steps, 'steps');\n      const outs: Scalar[] = [];\n      if (verbose > 0) {\n        throw new NotImplementedError('Verbose mode is not implemented yet.');\n      }\n      // TODO(cais): Use `indicesForConversionToDense' to prevent slow down.\n      if (steps != null) {\n        throw new NotImplementedError(\n            'steps mode in testLoop() is not implemented yet');\n      } else {\n        const batches = makeBatches(numSamples, batchSize);\n        const indexArray = tensor1d(range(0, numSamples));\n        for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n          const batchStart = batches[batchIndex][0];\n          const batchEnd = batches[batchIndex][1];\n          const batchIds =\n              K.sliceAlongFirstAxis(\n                  indexArray, batchStart, batchEnd - batchStart) as Tensor1D;\n          // TODO(cais): In ins, train flag can be a number, instead of an\n          //   Tensor? Do we need to handle this in tfjs-layers?\n          const insBatch = sliceArraysByIndices(ins, batchIds) as Scalar[];\n          const batchOuts = f(insBatch);\n          if (batchIndex === 0) {\n            for (let i = 0; i < batchOuts.length; ++i) {\n              outs.push(scalar(0));\n            }\n          }\n          for (let i = 0; i < batchOuts.length; ++i) {\n            const batchOut = batchOuts[i];\n            outs[i] =\n                tfc.add(outs[i], tfc.mul(batchEnd - batchStart, batchOut));\n          }\n        }\n        for (let i = 0; i < outs.length; ++i) {\n          outs[i] = tfc.div(outs[i], numSamples);\n        }\n      }\n      return outs;\n    });\n  }\n\n  protected getDedupedMetricsNames(): string[] {\n    const outLabels = this.metricsNames;\n    // Rename duplicated metrics names (can happen with an output layer\n    // shared among multiple dataflows).\n    const dedupedOutLabels = [];\n    for (let i = 0; i < outLabels.length; ++i) {\n      const label = outLabels[i];\n      let newLabel = label;\n      if (count(outLabels, label) > 1) {\n        const dupIndex = count(outLabels.slice(0, i), label);\n        newLabel += `_${dupIndex}`;\n      }\n      dedupedOutLabels.push(newLabel);\n    }\n    return dedupedOutLabels;\n  }\n\n  /**\n   * Creates a function that performs the following actions:\n   *\n   * 1. computes the losses\n   * 2. sums them to get the total loss\n   * 3. call the optimizer computes the gradients of the LayersModel's\n   *    trainable weights w.r.t. the total loss and update the variables\n   * 4. calculates the metrics\n   * 5. returns the values of the losses and metrics.\n   */\n  protected makeTrainFunction(): (data: Tensor[]) => Scalar[] {\n    return (data: Tensor[]) => {\n      const lossValues: Scalar[] = [];\n\n      const inputs = data.slice(0, this.inputs.length);\n      const targets = data.slice(\n          this.inputs.length, this.inputs.length + this.outputs.length);\n      const sampleWeights = data.slice(\n          this.inputs.length + this.outputs.length,\n          this.inputs.length + this.outputs.length * 2);\n\n      const metricsValues: Scalar[] = [];\n\n      // Create a function that computes the total loss based on the\n      // inputs. This function is used for obtaining gradients through\n      // backprop.\n      const totalLossFunction = () => {\n        const feeds = [];\n        for (let i = 0; i < this.inputs.length; ++i) {\n          feeds.push({key: this.inputs[i], value: inputs[i]});\n        }\n        const feedDict = new FeedDict(feeds);\n        const outputs =\n            execute(this.outputs, feedDict, {'training': true}) as Tensor[];\n        // TODO(cais): Take care of the case of multiple outputs from a\n        //   single layer?\n\n        let totalLoss: Tensor;\n        for (let i = 0; i < this.lossFunctions.length; ++i) {\n          const lossFunction = this.lossFunctions[i];\n          let loss = lossFunction(targets[i], outputs[i]);\n          if (sampleWeights[i] != null) {\n            loss = computeWeightedLoss(loss, sampleWeights[i]);\n          }\n\n          // TODO(cais): push Scalar instead.\n          const meanLoss: Scalar = tfc.mean(loss);\n          // TODO(cais): Use a scope() instead, to avoid ownership.\n          lossValues.push(meanLoss);\n          if (i === 0) {\n            totalLoss = loss;\n          } else {\n            totalLoss = tfc.add(totalLoss, loss);\n          }\n        }\n\n        // Compute the metrics.\n        // TODO(cais): These should probably be calculated outside\n        //   totalLossFunction to benefit speed?\n        for (let i = 0; i < this.metricsTensors.length; ++i) {\n          let weightedMetric: Scalar;\n\n          if (this.outputs.length > 1 && i < this.outputs.length) {\n            weightedMetric = lossValues[i];\n          } else {\n            const metric = this.metricsTensors[i][0];\n            const outputIndex = this.metricsTensors[i][1];\n            weightedMetric =\n                tfc.mean(metric(targets[outputIndex], outputs[outputIndex]));\n          }\n\n          tfc.keep(weightedMetric);\n          // TODO(cais): Use a scope() instead, to avoid ownership.\n          metricsValues.push(weightedMetric);\n        }\n\n        totalLoss = tfc.mean(totalLoss);\n\n        // Add regularizer penalties.\n        this.calculateLosses().forEach(regularizerLoss => {\n          totalLoss = tfc.add(totalLoss, regularizerLoss);\n        });\n\n        return totalLoss as Scalar;\n      };\n\n      const variables = this.collectedTrainableWeights.map(\n          param => param.read() as tfc.Variable);\n      const returnCost = true;\n      const totalLossValue =\n          this.optimizer_.minimize(totalLossFunction, returnCost, variables);\n\n      return [totalLossValue].concat(metricsValues);\n    };\n  }\n\n  /**\n   * Create a function which, when invoked with an array of `tf.Tensor`s as a\n   * batch of inputs, returns the prespecified loss and metrics of the model\n   * under the batch of input data.\n   */\n  private makeTestFunction() {\n    this.testFunction = (data: Tensor[]) => {\n      return tfc.tidy(() => {\n        const valOutputs: Scalar[] = [];\n        let totalLoss: Scalar;\n        const inputs = data.slice(0, this.inputs.length);\n        const targets = data.slice(\n            this.inputs.length, this.inputs.length + this.outputs.length);\n        const feeds = [];\n        for (let i = 0; i < this.inputs.length; ++i) {\n          feeds.push({key: this.inputs[i], value: inputs[i]});\n        }\n        const feedDict = new FeedDict(feeds);\n        const outputs = execute(this.outputs, feedDict) as Tensor[];\n        // Compute total loss.\n        for (let i = 0; i < this.lossFunctions.length; ++i) {\n          const lossFunction = this.lossFunctions[i];\n          // TODO(cais): Add sample weighting and replace the simple\n          // averaging.\n          const loss: Scalar = tfc.mean(lossFunction(targets[i], outputs[i]));\n          if (i === 0) {\n            totalLoss = loss;\n          } else {\n            totalLoss = tfc.add(totalLoss, loss);\n          }\n          valOutputs.push(totalLoss);\n        }\n        // Compute the metrics.\n        for (let i = 0; i < this.metricsTensors.length; ++i) {\n          const metric = this.metricsTensors[i][0];\n          const outputIndex = this.metricsTensors[i][1];\n          // TODO(cais): Replace K.mean() with a proper weighting function.\n          const meanMetric =\n              tfc.mean(metric(targets[outputIndex], outputs[outputIndex]));\n          valOutputs.push(meanMetric as Scalar);\n        }\n        return valOutputs;\n      });\n    };\n  }\n\n  /**\n   * Trains the model for a fixed number of epochs (iterations on a\n   * dataset).\n   *\n   * ```js\n   * const model = tf.sequential({\n   *     layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n   * for (let i = 1; i < 5 ; ++i) {\n   *   const h = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {\n   *       batchSize: 4,\n   *       epochs: 3\n   *   });\n   *   console.log(\"Loss after Epoch \" + i + \" : \" + h.history.loss[0]);\n   * }\n   * ```\n   *\n   * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the\n   * model has multiple inputs. If all inputs in the model are named, you\n   * can also pass a dictionary mapping input names to `tf.Tensor`s.\n   * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if\n   * the model has multiple outputs. If all outputs in the model are named,\n   * you can also pass a dictionary mapping output names to `tf.Tensor`s.\n   * @param args A `ModelFitArgs`, containing optional fields.\n   *\n   * @return A `History` instance. Its `history` attribute contains all\n   *   information collected during training.\n   *\n   * @exception ValueError In case of mismatch between the provided input\n   * data and what the model expects.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async fit(\n      x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      y: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      args: ModelFitArgs = {}): Promise<History> {\n    return fitTensors(this, x, y, args);\n  }\n\n  // TODO(cais): Add code snippet below when it's possible to instantiate\n  //   actual dataset objects.\n  /**\n   * Trains the model using a dataset object.\n   *\n   * @param dataset A dataset object. Its `iterator()` method is expected\n   *   to generate a dataset iterator object, the `next()` method of which\n   *   is expected to produce data batches for training. The return value\n   *   of the `next()` call ought to contain a boolean `done` field and a\n   *   `value` field. The `value` field is expected to be an array of two\n   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n   *   case is for models with exactly one input and one output (e.g..\n   *   a sequential model). The latter case is for models with multiple\n   *   inputs and/or multiple outputs.\n   *   Of the two items in the array, the first is the input feature(s) and\n   *   the second is the output target(s).\n   * @param args A `ModelFitDatasetArgs`, containing optional fields.\n   *\n   * @return A `History` instance. Its `history` attribute contains all\n   *   information collected during training.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async fitDataset<T>(dataset: Dataset<T>, args: ModelFitDatasetArgs<T>):\n      Promise<History> {\n    return fitDataset(this, dataset, args);\n  }\n\n  /**\n   * Runs a single gradient update on a single batch of data.\n   *\n   * This method differs from `fit()` and `fitDataset()` in the following\n   * regards:\n   *   - It operates on exactly one batch of data.\n   *   - It returns only the loss and matric values, instead of\n   *     returning the batch-by-batch loss and metric values.\n   *   - It doesn't support fine-grained options such as verbosity and\n   *     callbacks.\n   *\n   * @param x Input data. It could be one of the following:\n   *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has\n   *     multiple inputs).\n   *   - An Object mapping input names to corresponding `tf.Tensor` (if the\n   *     model has named inputs).\n   * @param y Target darta. It could be either a `tf.Tensor` a multiple\n   *   `tf.Tensor`s. It should be consistent with `x`.\n   * @returns Training loss or losses (in case the model has\n   *   multiple outputs), along with metrics (if any), as numbers.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async trainOnBatch(\n      x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      y: Tensor|Tensor[]|\n      {[inputName: string]: Tensor}): Promise<number|number[]> {\n    // TODO(cais): Support sampleWeight and classWeight.\n    // TODO(cais): Support Dataset objects.\n    const standardizeOut = await this.standardizeUserData(x, y);\n    const inputs = standardizeOut[0];\n    const targets = standardizeOut[1];\n    const trainFunction = this.makeTrainFunction();\n    const losses = trainFunction(inputs.concat(targets));\n    const lossValues: number[] = [];\n    for (const loss of losses) {\n      const v = await loss.data();\n      lossValues.push(v[0]);\n    }\n    tfc.dispose(losses);\n    return singletonOrArray(lossValues);\n  }\n\n  /**\n   * Extract weight values of the model.\n   *\n   * @param config: An instance of `io.SaveConfig`, which specifies\n   * model-saving options such as whether only trainable weights are to be\n   * saved.\n   * @returns A `NamedTensorMap` mapping original weight names (i.e.,\n   *   non-uniqueified weight names) to their values.\n   */\n  protected getNamedWeights(config?: io.SaveConfig): NamedTensor[] {\n    const namedWeights: NamedTensor[] = [];\n\n    const trainableOnly = config != null && config.trainableOnly;\n    const weights = trainableOnly ? this.trainableWeights : this.weights;\n    const weightValues = this.getWeights(trainableOnly);\n    for (let i = 0; i < weights.length; ++i) {\n      if (trainableOnly && !weights[i].trainable) {\n        // Optionally skip non-trainable weights.\n        continue;\n      }\n      namedWeights.push(\n          {name: weights[i].originalName, tensor: weightValues[i]});\n    }\n    return namedWeights;\n  }\n\n  /**\n   * Setter used for force stopping of LayersModel.fit() (i.e., training).\n   *\n   * Example:\n   *\n   * ```js\n   * const input = tf.input({shape: [10]});\n   * const output = tf.layers.dense({units: 1}).apply(input);\n   * const model = tf.model({inputs: [input], outputs: [output]});\n   * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n   * const xs = tf.ones([8, 10]);\n   * const ys = tf.zeros([8, 1]);\n   *\n   * const history = await model.fit(xs, ys, {\n   *   epochs: 10,\n   *   callbacks: {\n   *     onEpochEnd: async (epoch, logs) => {\n   *       if (epoch === 2) {\n   *         model.stopTraining = true;\n   *       }\n   *     }\n   *   }\n   * });\n   *\n   * // There should be only 3 values in the loss array, instead of 10\n   * values,\n   * // due to the stopping after 3 epochs.\n   * console.log(history.history.loss);\n   * ```\n   */\n  set stopTraining(stop: boolean) {\n    this.stopTraining_ = stop;\n  }\n\n  get stopTraining(): boolean {\n    return this.stopTraining_;\n  }\n\n  get optimizer(): Optimizer {\n    return this.optimizer_;\n  }\n\n  set optimizer(optimizer: Optimizer) {\n    if (this.optimizer_ !== optimizer) {\n      this.optimizer_ = optimizer;\n      this.isOptimizerOwned = false;\n    }\n  }\n\n  dispose(): DisposeResult {\n    const result = super.dispose();\n    if (result.refCountAfterDispose === 0 && this.optimizer != null &&\n        this.isOptimizerOwned) {\n      const numTensorsBeforeOptmizerDisposal = tfc.memory().numTensors;\n      this.optimizer_.dispose();\n      result.numDisposedVariables +=\n          numTensorsBeforeOptmizerDisposal - tfc.memory().numTensors;\n    }\n    return result;\n  }\n\n  private getLossIdentifiers(): LossIdentifier|LossIdentifier[]|\n      {[outputName: string]: LossIdentifier} {\n    let lossNames: LossIdentifier|LossIdentifier[]|\n        {[outputName: string]: LossIdentifier};\n    if (typeof this.loss === 'string') {\n      lossNames = toSnakeCase(this.loss) as LossIdentifier;\n    } else if (Array.isArray(this.loss)) {\n      for (const loss of this.loss) {\n        if (typeof loss !== 'string') {\n          throw new Error('Serialization of non-string loss is not supported.');\n        }\n      }\n      lossNames = (this.loss as string[]).map(name => toSnakeCase(name)) as\n          LossIdentifier[];\n    } else {\n      const outputNames = Object.keys(this.loss);\n      lossNames = {} as {[outputName: string]: LossIdentifier};\n      const losses =\n          this.loss as {[outputName: string]: LossOrMetricFn | string};\n      for (const outputName of outputNames) {\n        if (typeof losses[outputName] === 'string') {\n          lossNames[outputName] =\n              toSnakeCase(losses[outputName] as string) as LossIdentifier;\n        } else {\n          throw new Error('Serialization of non-string loss is not supported.');\n        }\n      }\n    }\n    return lossNames;\n  }\n\n  private getMetricIdentifiers(): MetricsIdentifier[]|\n      {[key: string]: MetricsIdentifier} {\n    if (typeof this.metrics === 'string' ||\n        typeof this.metrics === 'function') {\n      return [toSnakeCase(Metrics.getLossOrMetricName(this.metrics))];\n    } else if (Array.isArray(this.metrics)) {\n      return this.metrics.map(\n          metric => toSnakeCase(Metrics.getLossOrMetricName(metric)));\n    } else {\n      const metricsIdentifiers: {[key: string]: MetricsIdentifier} = {};\n      for (const key in this.metrics) {\n        metricsIdentifiers[key] =\n            toSnakeCase(Metrics.getLossOrMetricName(this.metrics[key]));\n      }\n      return metricsIdentifiers;\n    }\n  }\n\n  protected getTrainingConfig(): TrainingConfig {\n    return {\n      loss: this.getLossIdentifiers(),\n      metrics: this.getMetricIdentifiers(),\n      optimizer_config: {\n        class_name: this.optimizer.getClassName(),\n        config: this.optimizer.getConfig()\n      } as OptimizerSerialization\n    };\n    // TODO(cais): Add weight_metrics when they are supported.\n    // TODO(cais): Add sample_weight_mode when it's supported.\n    // TODO(cais): Add loss_weights when it's supported.\n  }\n\n  loadTrainingConfig(trainingConfig: TrainingConfig) {\n    if (trainingConfig.weighted_metrics != null) {\n      throw new Error('Loading weight_metrics is not supported yet.');\n    }\n    if (trainingConfig.loss_weights != null) {\n      throw new Error('Loading loss_weights is not supported yet.');\n    }\n    if (trainingConfig.sample_weight_mode != null) {\n      throw new Error('Loading sample_weight_mode is not supported yet.');\n    }\n\n    const tsConfig = convertPythonicToTs(trainingConfig.optimizer_config) as\n        serialization.ConfigDict;\n    const optimizer = deserialize(tsConfig) as Optimizer;\n\n    let loss;\n    if (typeof trainingConfig.loss === 'string') {\n      loss = toCamelCase(trainingConfig.loss);\n    } else if (Array.isArray(trainingConfig.loss)) {\n      loss = trainingConfig.loss.map(lossEntry => toCamelCase(lossEntry));\n    } else if (trainingConfig.loss != null) {\n      loss = {} as {[outputName: string]: LossIdentifier};\n      for (const key in trainingConfig.loss) {\n        loss[key] = toCamelCase(trainingConfig.loss[key]) as LossIdentifier;\n      }\n    }\n\n    let metrics;\n    if (Array.isArray(trainingConfig.metrics)) {\n      metrics = trainingConfig.metrics.map(metric => toCamelCase(metric));\n    } else if (trainingConfig.metrics != null) {\n      metrics = {} as {[outputName: string]: MetricsIdentifier};\n      for (const key in trainingConfig.metrics) {\n        metrics[key] = toCamelCase(trainingConfig.metrics[key]);\n      }\n    }\n\n    this.compile({loss, metrics, optimizer});\n  }\n\n  /**\n   * Save the configuration and/or weights of the LayersModel.\n   *\n   * An `IOHandler` is an object that has a `save` method of the proper\n   * signature defined. The `save` method manages the storing or\n   * transmission of serialized data (\"artifacts\") that represent the\n   * model's topology and weights onto or via a specific medium, such as\n   * file downloads, local storage, IndexedDB in the web browser and HTTP\n   * requests to a server. TensorFlow.js provides `IOHandler`\n   * implementations for a number of frequently used saving mediums, such as\n   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n   * for more details.\n   *\n   * This method also allows you to refer to certain types of `IOHandler`s\n   * as URL-like string shortcuts, such as 'localstorage://' and\n   * 'indexeddb://'.\n   *\n   * Example 1: Save `model`'s topology and weights to browser [local\n   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n   * then load it back.\n   *\n   * ```js\n   * const model = tf.sequential(\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n   * console.log('Prediction from original model:');\n   * model.predict(tf.ones([1, 3])).print();\n   *\n   * const saveResults = await model.save('localstorage://my-model-1');\n   *\n   * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * loadedModel.predict(tf.ones([1, 3])).print();\n   * ```\n   *\n   * Example 2. Saving `model`'s topology and weights to browser\n   * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\n   * then load it back.\n   *\n   * ```js\n   * const model = tf.sequential(\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n   * console.log('Prediction from original model:');\n   * model.predict(tf.ones([1, 3])).print();\n   *\n   * const saveResults = await model.save('indexeddb://my-model-1');\n   *\n   * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * loadedModel.predict(tf.ones([1, 3])).print();\n   * ```\n   *\n   * Example 3. Saving `model`'s topology and weights as two files\n   * (`my-model-1.json` and `my-model-1.weights.bin`) downloaded from\n   * browser.\n   *\n   * ```js\n   * const model = tf.sequential(\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n   * const saveResults = await model.save('downloads://my-model-1');\n   * ```\n   *\n   * Example 4. Send  `model`'s topology and weights to an HTTP server.\n   * See the documentation of `tf.io.http` for more details\n   * including specifying request parameters and implementation of the\n   * server.\n   *\n   * ```js\n   * const model = tf.sequential(\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n   * const saveResults = await model.save('http://my-server/model/upload');\n   * ```\n   *\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n   * scheme-based string shortcut for `IOHandler`.\n   * @param config Options for saving the model.\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\n   * the saving, such as byte sizes of the saved artifacts for the model's\n   *   topology and weight values.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  async save(handlerOrURL: io.IOHandler|string, config?: io.SaveConfig):\n      Promise<io.SaveResult> {\n    if (typeof handlerOrURL === 'string') {\n      const handlers = io.getSaveHandlers(handlerOrURL);\n      if (handlers.length === 0) {\n        throw new ValueError(\n            `Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new ValueError(\n            `Found more than one (${handlers.length}) save handlers for ` +\n            `URL '${handlerOrURL}'`);\n      }\n      handlerOrURL = handlers[0];\n    }\n    if (handlerOrURL.save == null) {\n      throw new ValueError(\n          'LayersModel.save() cannot proceed because the IOHandler ' +\n          'provided does not have the `save` attribute defined.');\n    }\n\n    const weightDataAndSpecs =\n        await io.encodeWeights(this.getNamedWeights(config));\n\n    const returnString = false;\n    const unusedArg: {} = null;\n    const modelConfig = this.toJSON(unusedArg, returnString);\n    const modelArtifacts: io.ModelArtifacts = {\n      modelTopology: modelConfig,\n      format: LAYERS_MODEL_FORMAT_NAME,\n      generatedBy: `TensorFlow.js tfjs-layers v${version}`,\n      convertedBy: null,\n    };\n\n    const includeOptimizer = config == null ? false : config.includeOptimizer;\n    if (includeOptimizer && this.optimizer != null) {\n      modelArtifacts.trainingConfig = this.getTrainingConfig();\n      const weightType = 'optimizer';\n      const {data: optimizerWeightData, specs: optimizerWeightSpecs} =\n          await io.encodeWeights(await this.optimizer.getWeights(), weightType);\n      weightDataAndSpecs.specs.push(...optimizerWeightSpecs);\n      weightDataAndSpecs.data = io.concatenateArrayBuffers(\n          [weightDataAndSpecs.data, optimizerWeightData]);\n    }\n\n    if (this.userDefinedMetadata != null) {\n      // Check serialized size of user-defined metadata.\n      const checkSize = true;\n      checkUserDefinedMetadata(this.userDefinedMetadata, this.name, checkSize);\n      modelArtifacts.userDefinedMetadata = this.userDefinedMetadata;\n    }\n\n    modelArtifacts.weightData = weightDataAndSpecs.data;\n    modelArtifacts.weightSpecs = weightDataAndSpecs.specs;\n    return handlerOrURL.save(modelArtifacts);\n  }\n\n  /**\n   * Set user-defined metadata.\n   *\n   * The set metadata will be serialized together with the topology\n   * and weights of the model during `save()` calls.\n   *\n   * @param setUserDefinedMetadata\n   */\n  setUserDefinedMetadata(userDefinedMetadata: {}): void {\n    checkUserDefinedMetadata(userDefinedMetadata, this.name);\n    this.userDefinedMetadata = userDefinedMetadata;\n  }\n\n  /**\n   * Get user-defined metadata.\n   *\n   * The metadata is supplied via one of the two routes:\n   *   1. By calling `setUserDefinedMetadata()`.\n   *   2. Loaded during model loading (if the model is constructed\n   *      via `tf.loadLayersModel()`.)\n   *\n   * If no user-defined metadata is available from either of the\n   * two routes, this function will return `undefined`.\n   */\n  getUserDefinedMetadata(): {} {\n    return this.userDefinedMetadata;\n  }\n}\nserialization.registerClass(LayersModel);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Optimizers.\n */\n\nimport {Optimizer, train} from '@tensorflow/tfjs-core';\n\nimport {epsilon} from './backend/common';\n\nimport {ValueError} from './errors';\n\n// Add (de)serialize()\n\n// Porting note: This diverges from the PyKeras implementation and may need to\n// change based on (de)serialization requirements.\nexport function getOptimizer(identifier: string): Optimizer {\n  const optimizerMap: {[optimizerName: string]: () => Optimizer} = {\n    'Adagrad': () => train.adagrad(0.01),\n    'Adadelta': () => train.adadelta(1, 0.95, epsilon()),\n    'Adam': () => train.adam(0.001, 0.9, 0.999, epsilon()),\n    'Adamax': () => train.adamax(0.002, 0.9, 0.999, epsilon(), 0),\n    'RMSProp': () => train.rmsprop(0.001, 0.9, 0, epsilon()),\n    'SGD': () => train.sgd(0.01)\n  };\n  optimizerMap['adagrad'] = optimizerMap['Adagrad'];\n  optimizerMap['adadelta'] = optimizerMap['Adadelta'];\n  optimizerMap['adam'] = optimizerMap['Adam'];\n  optimizerMap['adamax'] = optimizerMap['Adamax'];\n  optimizerMap['rmsprop'] = optimizerMap['RMSProp'];\n  optimizerMap['sgd'] = optimizerMap['SGD'];\n\n  if (identifier in optimizerMap) {\n    return optimizerMap[identifier]();\n  }\n  throw new ValueError(`Unknown Optimizer ${identifier}`);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/engine/topology.py */\n\nimport {NamedTensorMap, Scalar, serialization, Tensor, tidy} from '@tensorflow/tfjs-core';\n\nimport {getUid} from '../backend/state';\nimport {NotImplementedError, RuntimeError, ValueError} from '../errors';\nimport {Shape} from '../keras_format/common';\nimport {TensorKeyWithArgsArray} from '../keras_format/node_config';\nimport {PyJsonDict} from '../keras_format/types';\nimport {deserialize as deserializeLayer} from '../layers/serialization';\nimport {Kwargs} from '../types';\nimport * as generic_utils from '../utils/generic_utils';\nimport {convertTsToPythonic} from '../utils/serialization_utils';\nimport * as types_utils from '../utils/types_utils';\nimport {batchSetValue, LayerVariable} from '../variables';\nimport {version as layersVersion} from '../version';\n\nimport {execute, FeedDict} from './executor';\nimport {InputLayer} from './input_layer';\nimport {DisposeResult, Layer, Node, SymbolicTensor} from './topology';\n\n/** Constructor config for Container. */\nexport interface ContainerArgs {\n  inputs: SymbolicTensor|SymbolicTensor[];\n  outputs: SymbolicTensor|SymbolicTensor[];\n  name?: string;\n}\n\n/**\n * A Container is a directed acyclic graph of layers.\n *\n * It is the topological form of a \"model\". A LayersModel\n * is simply a Container with added training routines.\n *\n */\nexport abstract class Container extends Layer {\n  inputs: SymbolicTensor[];\n  outputs: SymbolicTensor[];\n\n  inputLayers: Layer[];\n  inputLayersNodeIndices: number[];\n  inputLayersTensorIndices: number[];\n\n  outputLayers: Layer[];\n  outputLayersNodeIndices: number[];\n  outputLayersTensorIndices: number[];\n\n  layers: Layer[];\n  layersByDepth: {[depth: string]: Layer[]};\n  nodesByDepth: {[depth: string]: Node[]};\n\n  internalContainerRefs: Container[];\n\n  containerNodes = new Set<string>();\n\n  // TODO(michaelterry): Add cache support\n  // private outputMaskCache: any;\n  // private outputTensorCache: any;\n  // private outputShapeCache: any;\n\n  inputNames: string[];\n  outputNames: string[];\n  feedInputShapes: Shape[];\n\n  protected internalInputShapes: Shape[];\n  protected internalOutputShapes: Shape[];\n  // TODO(cais): Maybe 'feed' should not in the names of these variables,\n  //   due to the fact that our backend is not symbolic.\n  protected feedInputNames: string[];\n  protected feedOutputNames: string[];\n\n  constructor(args: ContainerArgs) {\n    // No args passed to super's constructor.\n    super({});\n    this.name = args.name;\n    if (this.name == null) {\n      const prefix = this.getClassName().toLowerCase();\n      this.name = getUid(prefix);\n    }\n\n    this.supportsMasking = false;\n    this.trainable_ = true;\n\n    // TODO(michaelterry): Initialize perInputLosses/Updates here.\n\n    // Container-specific properties.\n    if (Array.isArray(args.inputs)) {\n      this.inputs = args.inputs.slice();\n    } else {\n      this.inputs = [args.inputs];\n    }\n    if (Array.isArray(args.outputs)) {\n      this.outputs = args.outputs.slice();\n    } else {\n      this.outputs = [args.outputs];\n    }\n\n    // Check for redundancy in inputs.\n    if (generic_utils.unique(this.inputs).length !== this.inputs.length) {\n      throw new ValueError(\n          'The list of inputs passed to the model is ' +\n          'redundant. All inputs should only appear once. Found: ' +\n          `${this.inputs.map(x => x.name)}`);\n    }\n\n    // Check for redundancy in outputs.\n    if (generic_utils.unique(this.outputs).length !== this.outputs.length) {\n      console.warn(\n          'The list of outputs passed to the model is redundant. ' +\n          'All outputs should only appear once. Found: ' +\n          `${this.outputs.map(x => x.name)}`);\n    }\n\n    /*\n      List of initial layers (1 to 1 mapping with this.inputs, hence the same\n      layer might appear twice)\n    */\n    this.inputLayers = [];\n    this.inputLayersNodeIndices = [];\n    this.inputLayersTensorIndices = [];\n    /*\n      List of layers (1 to 1 mapping with this.outputs, hence the same layer\n      might appear twice)\n    */\n    this.outputLayers = [];\n    this.outputLayersNodeIndices = [];\n    this.outputLayersTensorIndices = [];\n    /*\n      All layers in order of horizontal graph traversal. Entries are unique.\n      Includes input and output layers.\n    */\n    this.layers = [];\n\n    /*\n      References to container layers that were constructed internally. We need\n      these to properly dispose of tensors from nested containers.\n    */\n    this.internalContainerRefs = [];\n\n    // TODO(michaelterry): Determine if caching still needed with eager\n    // backend.\n    /*\n      This is for performance optimization when calling the Container on new\n      inputs. Every time the Container is called on a set on input tensors,\n      we compute the output tensors, output masks and output shapes in one pass,\n      then cache them here. When one of these outputs is queried later,\n      we retrieve it from there instead of recomputing it.\n    */\n    // this.outputTensorCache = {};\n    // this.outputShapeCache = {};\n\n    // Build this.outputLayers:\n    for (const x of this.outputs) {\n      const layer = x.sourceLayer;\n      const nodeIndex = x.nodeIndex;\n      const tensorIndex = x.tensorIndex;\n      this.outputLayers.push(layer);\n      this.outputLayersNodeIndices.push(nodeIndex);\n      this.outputLayersTensorIndices.push(tensorIndex);\n    }\n\n    // TODO(michaelterry): Add output mask cache code.\n\n    // Build this.inputLayers:\n    for (const x of this.inputs) {\n      const layer = x.sourceLayer;\n      const nodeIndex = x.nodeIndex;\n      const tensorIndex = x.tensorIndex;\n      /*\n        It's supposed to be an input layer, so only one node\n        and one tensor output.\n      */\n      generic_utils.assert(nodeIndex === 0, 'input layer has >1 nodes');\n      generic_utils.assert(tensorIndex === 0, 'input layer has >1 tensors');\n      this.inputLayers.push(layer);\n      this.inputLayersNodeIndices.push(nodeIndex);\n      this.inputLayersTensorIndices.push(tensorIndex);\n    }\n\n    // Build this.inputNames and this.outputNames.\n    this.inputNames = [];\n    this.outputNames = [];\n    this.feedInputShapes = [];\n    this.feedInputNames = [];\n    this.feedOutputNames = [];\n    for (let i = 0; i < this.inputLayers.length; i++) {\n      const layer = this.inputLayers[i];\n      // Check that layer is an InputLayer.\n      if (!(layer instanceof InputLayer)) {\n        throw new TypeError(\n            'Input layers to a LayersModel must be InputLayer objects. ' +\n            `Received inputs: ${args.inputs}. ` +\n            `Input ${i} (0-based) originates ` +\n            `from layer type ${layer.getClassName()}.`);\n      }\n      this.inputNames.push(layer.name);\n      this.feedInputShapes.push(layer.batchInputShape);\n\n      this.feedInputNames.push(layer.name);\n    }\n    for (const layer of this.outputLayers) {\n      this.outputNames.push(layer.name);\n    }\n\n    this.internalInputShapes = this.inputs.map(x => x.shape);\n    this.internalOutputShapes = this.outputs.map(x => x.shape);\n\n    /*\n      Container_nodes: set of nodes included in the graph (not all nodes\n      included in the layers are relevant to the current graph).\n    */\n    // ids of all nodes relevant to the Container:\n    const nodesDepths: {[nodeID: string]: number} = {};\n    // To recover nodes from their ID.\n    const nodeIDToNode: {[nodeID: string]: Node} = {};\n    const layersDepths: {[layerID: string]: number} = {};\n    // To layers from their ID.\n    const layerIDToLayer: {[layerID: string]: Layer} = {};\n    const layerIndices: {[layerID: string]: number} = {};\n    const nodesInDecreasingDepth: Node[] = [];\n\n    /**\n     * Builds a map of the graph of layers.\n     *\n     * This recursively updates the map `layerIndices`,\n     * the list `nodesInDecreasingDepth` and the set `containerNodes`.\n     *\n     * @param tensor Some tensor in a graph.\n     * @param finishedNodes Set of nodes whose subgraphs have been traversed\n     *         completely. Useful to prevent duplicated work.\n     * @param nodesInProgress Set of nodes that are currently active on the\n     *         recursion stack. Useful to detect cycles.\n     * @param layer Layer from which `tensor` comes from. If not provided,\n     *   will be obtained from tensor.sourceLayer.\n     * @param nodeIndex Node index from which `tensor` comes from.\n     * @param tensorIndex TensorIndex from which `tensor` comes from.\n     *\n     * @exception RuntimeError if a cycle is detected.\n     */\n    const buildMapOfGraph =\n        (tensor: SymbolicTensor, finishedNodes: Node[], nodesInProgress: Node[],\n         layer?: Layer, nodeIndex?: number, tensorIndex?: number) => {\n          if (layer == null || nodeIndex == null || tensorIndex == null) {\n            layer = tensor.sourceLayer;\n            nodeIndex = tensor.nodeIndex;\n            tensorIndex = tensor.tensorIndex;\n          }\n          const node = layer.inboundNodes[nodeIndex];\n\n          // Prevent cycles.\n          if (nodesInProgress.indexOf(node) !== -1) {\n            throw new RuntimeError(\n                `The tensor ${tensor.name} at layer \"${layer.name}\" ` +\n                'is part of a cycle.');\n          }\n\n          // Don't repeat work for shared subgraphs\n          if (finishedNodes.indexOf(node) !== -1) {\n            return;\n          }\n\n          // Update containerNodes.\n          this.containerNodes.add(Container.nodeKey(layer, nodeIndex));\n\n          // Store the traversal order for layer sorting.\n          if (!(layer.id in layerIndices)) {\n            layerIndices[layer.id] = Object.keys(layerIndices).length;\n          }\n\n          if (nodesInProgress.indexOf(node) === -1) {\n            nodesInProgress.push(node);\n          }\n\n          // Propagate to all previous tensors connected to this node.\n          const numInboundLayers = node.inboundLayers.length;\n          for (let i = 0; i < numInboundLayers; i++) {\n            const x = node.inputTensors[i];\n            const layer = node.inboundLayers[i];\n            const nodeIndex = node.nodeIndices[i];\n            const tensorIndex = node.tensorIndices[i];\n            buildMapOfGraph(\n                x, finishedNodes, nodesInProgress, layer, nodeIndex,\n                tensorIndex);\n          }\n          finishedNodes.push(node);\n          while (nodesInProgress.indexOf(node) >= 0) {\n            nodesInProgress.splice(nodesInProgress.indexOf(node), 1);\n          }\n          nodesInDecreasingDepth.push(node);\n        };\n\n    const finishedNodes: Node[] = [];\n    const nodesInProgress: Node[] = [];\n    for (const x of this.outputs) {\n      buildMapOfGraph(x, finishedNodes, nodesInProgress);\n    }\n\n    const reversedNodesInDecreasingDepth =\n        nodesInDecreasingDepth.slice().reverse();\n    for (const node of reversedNodesInDecreasingDepth) {\n      nodeIDToNode[node.id] = node;\n      // If the depth is not set, the node has no outbound nodes (depth 0).\n      if (!(node.id in nodesDepths)) {\n        nodesDepths[node.id] = 0;\n      }\n      let depth = nodesDepths[node.id];\n\n      // Update the depth of the corresponding layer\n      const previousDepth =\n          (layersDepths[node.outboundLayer.id] == null ?\n               0 :\n               layersDepths[node.outboundLayer.id]);\n\n      /*\n        If we've seen this layer before at a higher depth, we should use that\n        depth instead of the node depth.  This is necessary for shared layers\n        that have inputs at different depth levels in the graph.\n      */\n      depth = Math.max(depth, previousDepth);\n      layersDepths[node.outboundLayer.id] = depth;\n      layerIDToLayer[node.outboundLayer.id] = node.outboundLayer;\n      nodesDepths[node.id] = depth;\n\n      // Update the depth of inbound nodes.\n      for (let i = 0; i < node.inboundLayers.length; i++) {\n        const inboundLayer = node.inboundLayers[i];\n        const nodeIndex = node.nodeIndices[i];\n        const inboundNode = inboundLayer.inboundNodes[nodeIndex];\n        const previousDepth =\n            (nodesDepths[inboundNode.id] == null ? 0 :\n                                                   nodesDepths[inboundNode.id]);\n        nodesDepths[inboundNode.id] = Math.max(depth + 1, previousDepth);\n        nodeIDToNode[inboundNode.id] = inboundNode;\n      }\n    }\n\n    // Build a dict {depth: list of nodes with this depth}\n    const nodesByDepth: {[depth: string]: Node[]} = {};\n    for (const nodeID in nodesDepths) {\n      const depth = nodesDepths[nodeID];\n      if (!(depth in nodesByDepth)) {\n        nodesByDepth[depth] = [];\n      }\n      nodesByDepth[depth].push(nodeIDToNode[nodeID]);\n    }\n\n    // Build a dict {depth: list of layers with this depth}\n    const layersByDepth: {[depth: string]: Layer[]} = {};\n    for (const layerID in layersDepths) {\n      const depth = layersDepths[layerID];\n      if (!(depth in layersByDepth)) {\n        layersByDepth[depth] = [];\n      }\n      layersByDepth[depth].push(layerIDToLayer[layerID]);\n    }\n\n    // Get sorted list of layer depths.\n    let depthKeys = Object.keys(layersByDepth)\n                        .map(x => parseInt(x, 10))\n                        .sort(generic_utils.reverseNumberCompare);\n\n    // Set this.layers and this.layersByDepth.\n    this.layers = [];\n    for (const depth of depthKeys) {\n      const layersForDepth = layersByDepth[depth];\n      // Container.layers needs to have a deterministic order:\n      // here we order them by traversal order.\n      layersForDepth.sort((a, b) => {\n        const aIndex = layerIndices[a.id];\n        const bIndex = layerIndices[b.id];\n        if (aIndex < bIndex) {\n          return -1;\n        }\n        if (aIndex > bIndex) {\n          return 1;\n        }\n        return 0;\n      });\n      for (const layer of layersForDepth) {\n        if (layer instanceof Container) {\n          this.internalContainerRefs.push(layer);\n        }\n        this.layers.push(layer);\n      }\n    }\n    this.layersByDepth = layersByDepth;\n\n    // Get sorted list of node depths;\n    depthKeys = Object.keys(nodesByDepth)\n                    .map(x => parseInt(x, 10))\n                    .sort(generic_utils.reverseNumberCompare);\n\n    // Check that all tensors required are computable.\n    // computable_tensors: all tensors in the graph\n    // that can be computed from the inputs provided.\n    const computableTensors = this.inputs.slice();\n\n    // To provide a better error msg.\n    const layersWithCompleteInput: string[] = [];\n    for (const depth of depthKeys) {\n      for (const node of nodesByDepth[depth]) {\n        const layer = node.outboundLayer;\n        if (layer != null) {\n          for (const x of node.inputTensors) {\n            if (computableTensors.indexOf(x) === -1) {\n              throw new RuntimeError(\n                  `Graph disconnected: cannot obtain value for tensor ${x}` +\n                  ` at layer \"${layer.name}\". ` +\n                  'The following previous layers were accessed without ' +\n                  `issue: ${layersWithCompleteInput}`);\n            }\n          }\n          for (const x of node.outputTensors) {\n            computableTensors.push(x);\n          }\n          layersWithCompleteInput.push(layer.name);\n        }\n      }\n    }\n\n    // Set this.containerNodes and this.nodesByDepth.\n    this.nodesByDepth = nodesByDepth;\n\n    // Ensure name unicity, which will be crucial for serialization\n    // (since serialized nodes refer to layers by their name).\n    const allNames = this.layers.map(x => x.name);\n    for (const name of allNames) {\n      const numOccurrences = allNames.filter(x => x === name).length;\n      if (numOccurrences !== 1) {\n        throw new RuntimeError(\n            `The name \"${name}\" is used ${numOccurrences} times ` +\n            'in the model. All layer names should be unique. Layer names: ' +\n            JSON.stringify(allNames));\n      }\n    }\n\n    // Layer parameters.\n    // The new container starts with a single inbound node\n    // for its inputs, and no outbound nodes.\n    // Will be appended to by future calls to apply().\n    this.outboundNodes = [];\n    // Will be appended to below, and by future calls to apply().\n    this.inboundNodes = [];\n\n    // Create the node linking internal inputs to internal outputs.\n    // (This call has side effects.)\n    // tslint:disable-next-line:no-unused-expression\n    new Node({\n      outboundLayer: this,\n      inboundLayers: [],\n      nodeIndices: [],\n      tensorIndices: [],\n      inputTensors: this.inputs,\n      outputTensors: this.outputs,\n      inputMasks: this.inputs.map(x => null),\n      outputMasks: this.outputs.map(x => null),\n      inputShapes: this.inputs.map(x => x.shape),\n      outputShapes: this.outputs.map(x => x.shape)\n    });\n    this.built = true;\n    this._refCount = 1;  // The ref count of a container always start at 1.\n  }\n\n  protected assertNotDisposed() {\n    if (this._refCount === 0) {\n      throw new Error(`Container '${this.name}' is already disposed.`);\n    }\n  }\n\n  /**\n   * Attempt to dispose a LayersModel's weights.\n   *\n   * This method decrease the reference count of the LayersModel object by 1.\n   *\n   * A LayersModel is reference-counted. Its reference count is incremented by 1\n   * when it is first constructed and when it is used as a Layer of another\n   * LayersModel.\n   *\n   * If the reference count of a LayersModel becomes 0, the `dispose` method of\n   * all its constituent `Layer`s will be called.\n   *\n   * Note: If the reference count is greater than 0 after the decrement, the\n   * `dispose` method of its constituent `Layer`s will *not* be called.\n   *\n   * After a LayersModel is disposed, it cannot be used in calls such as\n   * 'predict`, `evaluate` or `fit` anymore.\n   *\n   * @returns A DisposeResult Object with the following fields:\n   *   - refCountAfterDispose: The reference count of the LayersModel after this\n   *     `dispose()` call.\n   *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed\n   *     during this `dispose()` call.\n   * @throws {Error} If the layer is not built yet, or if the LayersModel has\n   *   already been disposed.\n   */\n  dispose(): DisposeResult {\n    this.assertNotDisposed();\n    const result:\n        DisposeResult = {refCountAfterDispose: null, numDisposedVariables: 0};\n    if (--this._refCount === 0) {\n      for (const layer of this.layers) {\n        result.numDisposedVariables += layer.dispose().numDisposedVariables;\n      }\n\n      // Call dispose on each internally created container layer again to ensure\n      // their refCounts hit zero and their tensors are subsequently deleted.\n      for (const container of this.internalContainerRefs) {\n        result.numDisposedVariables += container.dispose().numDisposedVariables;\n      }\n    }\n    result.refCountAfterDispose = this._refCount;\n    return result;\n  }\n\n  get trainable() {\n    return this.trainable_;\n  }\n\n  set trainable(trainable: boolean) {\n    this.layers.forEach(layer => {\n      // tslint:disable-next-line:no-any\n      ((layer as any)._trainableWeights as LayerVariable[])\n          .forEach(w => w.trainable = trainable);\n    });\n    this.trainable_ = trainable;\n  }\n\n  get trainableWeights(): LayerVariable[] {\n    // Porting Note: This check below is to prevent errors where the\n    //   _trainableWeights inherited from the parent class (Layer) gets\n    //   inadvertently used.\n    if (this._trainableWeights.length > 0) {\n      throw new ValueError(\n          'Container instance unexpectedly contains _trainableWeights.' +\n          'The trainable weights of a Container are a union of the ' +\n          'trainable weights of its consituent Layers. Its own ' +\n          '_trainableWeights must remain an empty Array.');\n    }\n\n    if (!this.trainable) {\n      return [];\n    }\n    let weights: LayerVariable[] = [];\n    for (const layer of this.layers) {\n      weights = weights.concat(layer.trainableWeights);\n    }\n    return weights;\n  }\n\n  get nonTrainableWeights(): LayerVariable[] {\n    const weights: LayerVariable[] = [];\n    for (const layer of this.layers) {\n      weights.push(...layer.nonTrainableWeights);\n    }\n    if (!this.trainable) {\n      const trainableWeights: LayerVariable[] = [];\n      for (const layer of this.layers) {\n        trainableWeights.push(...layer.trainableWeights);\n      }\n      return trainableWeights.concat(weights);\n    }\n    return weights;\n  }\n\n  get weights(): LayerVariable[] {\n    return this.trainableWeights.concat(this.nonTrainableWeights);\n  }\n\n  /**\n   * Loads all layer weights from a JSON object.\n   *\n   * Porting Note: HDF5 weight files cannot be directly loaded in JavaScript /\n   *   TypeScript. The utility script at `scripts/pykeras.py` offers means\n   *   to convert them into JSON strings compatible with this method.\n   * Porting Note: TensorFlow.js Layers supports only loading by name currently.\n   *\n   * @param weights A JSON mapping weight names to weight values as nested\n   *   arrays of numbers, or a `NamedTensorMap`, i.e., a JSON mapping weight\n   *   names to `tf.Tensor` objects.\n   * @param strict Require that the provided weights exactly match those\n   *   required by the container.  Default: `true`.  Passing `false` means that\n   *   extra weights and missing weights will be silently ignored.\n   */\n  loadWeights(weights: NamedTensorMap, strict = true) {\n    const nameToWeight: {[name: string]: LayerVariable} = {};\n    let totalWeightsCount = 0;\n    for (const layer of this.layers) {\n      for (const weight of layer.weights) {\n        if (nameToWeight[weight.originalName] != null) {\n          throw new ValueError(`Duplicate weight name: ${weight.originalName}`);\n        }\n        nameToWeight[weight.originalName] = weight;\n        totalWeightsCount++;\n      }\n    }\n\n    const weightValueTuples: Array<[LayerVariable, Tensor]> = [];\n    for (const name in weights) {\n      if (nameToWeight[name] != null) {\n        weightValueTuples.push([nameToWeight[name], weights[name]]);\n      } else if (strict) {\n        throw new ValueError(\n            `Provided weight data has no target variable: ${name}`);\n      }\n      delete nameToWeight[name];\n    }\n\n    if (strict) {\n      // Check that all weights are set.\n      const unsetNames: string[] = [];\n      for (const name in nameToWeight) {\n        unsetNames.push(name);\n      }\n      if (unsetNames.length > 0) {\n        throw new ValueError(\n            `${unsetNames.length} of ${\n                totalWeightsCount} weights are not set: ` +\n            `${unsetNames}`);\n      }\n    }\n\n    batchSetValue(weightValueTuples);\n  }\n\n  /**\n   * Util shared between different serialization methods.\n   * @returns LayersModel config with Keras version information added.\n   */\n  protected updatedConfig(): serialization.ConfigDict {\n    const theConfig = this.getConfig();\n    const modelConfig: serialization.ConfigDict = {};\n    modelConfig['className'] = this.getClassName();\n    modelConfig['config'] = theConfig;\n    modelConfig['kerasVersion'] = `tfjs-layers ${layersVersion}`;\n    // TODO(nielsene): Replace something like K.backend() once\n    // possible.\n    modelConfig['backend'] = 'TensorFlow.js';\n    return modelConfig;\n  }\n\n  /**\n   * Returns a JSON string containing the network configuration.\n   *\n   * To load a network from a JSON save file, use\n   * models.modelFromJSON(jsonString);\n   * @param extraJsonArgs Unused in tfjs-layers, maintained for PyKeras\n   * @param returnString Whether the return value should be stringified\n   *    (default: `true`).\n   * @returns a JSON string if `returnString` (default), or a JSON object if\n   *   `!returnString`.\n   */\n  // tslint:disable-next-line:no-any\n  toJSON(unused?: any, returnString = true): string|PyJsonDict {\n    const modelConfig = convertTsToPythonic(this.updatedConfig()) as PyJsonDict;\n    return returnString ? JSON.stringify(modelConfig) : modelConfig;\n  }\n\n  /**\n   * Call the model on new inputs.\n   *\n   * In this case `call` just reapplies all ops in the graph to the new inputs\n   * (e.g. build a new computational graph from the provided inputs).\n   *\n   * @param inputs A tensor or list of tensors.\n   * @param mask A mask or list of masks. A mask can be either a tensor or null\n   *   (no mask).\n   *\n   * @return A tensor if there is a single output, or a list of tensors if there\n   *   are more than one outputs.\n   */\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = generic_utils.toList(inputs);\n      const feedDict = new FeedDict();\n      for (let i = 0; i < this.inputs.length; ++i) {\n        feedDict.add(this.inputs[i], inputs[i]);\n      }\n      return execute(this.outputs, feedDict, kwargs) as Tensor | Tensor[];\n    });\n  }\n\n  /**\n   * Computes an output mask tensor.\n   *\n   * @param inputs Tensor or list of tensors.\n   * @param mask Tensor or list of tensors.\n   *\n   * @return null or a tensor (or list of tensors, one per output tensor of the\n   * layer).\n   */\n  computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]): Tensor\n      |Tensor[] {\n    return tidy(() => {\n      inputs = generic_utils.toList(inputs);\n      let masks: Tensor[];\n      if (mask == null) {\n        masks = generic_utils.pyListRepeat(null, inputs.length);\n      } else {\n        masks = generic_utils.toList(mask);\n      }\n      // TODO(michaelterry): Add support for mask caching.\n      return this.runInternalGraph(inputs, masks)[1];\n    });\n  }\n\n  /**\n   * Computes the output shape of the layer.\n   *\n   * Assumes that the layer will be built to match that input shape provided.\n   *\n   * @param inputShape A shape (tuple of integers) or a list of shape tuples\n   *   (one per output tensor of the layer). Shape tuples can include null for\n   *   free dimensions, instead of an integer.\n   */\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    const inputShapes = types_utils.normalizeShapeList(inputShape);\n    if (inputShapes.length !== this.inputLayers.length) {\n      throw new ValueError(\n          `Invalid inputShape argument ${inputShape}: ` +\n          `model has ${this.inputLayers.length} tensor inputs.`);\n    }\n\n    // TODO(michaelterry): Add caching\n    const layersToOutputShapes: {[shapeKey: string]: Shape} = {};\n    for (let i = 0; i < inputShapes.length; i++) {\n      const layer = this.inputLayers[i];\n      const inputShape = inputShapes[i];\n      // It's an input layer: computeOutputShape is identity,\n      // and there is only one node and one tensor output.\n      const shapeKey = layer.name + '_0_0';\n      layersToOutputShapes[shapeKey] = inputShape;\n    }\n\n    const depthKeys = Object.keys(this.nodesByDepth)\n                          .map(x => parseInt(x, 10))\n                          .sort(generic_utils.reverseNumberCompare);\n    // Iterate over nodes, by depth level.\n    if (depthKeys.length > 1) {\n      for (const depth of depthKeys) {\n        const nodes = this.nodesByDepth[depth];\n        for (const node of nodes) {\n          // This is always a single layer, never a list.\n          const layer = node.outboundLayer;\n          if (this.inputLayers.map(x => x.id).indexOf(layer.id) !== -1) {\n            // We've already covered the input layers a few lines above.\n            continue;\n          }\n          // Potentially redundant list, same size of node.inputTensors.\n          const inputShapes: Shape[] = [];\n          for (let j = 0; j < node.inboundLayers.length; j++) {\n            const inboundLayer = node.inboundLayers[j];\n            const nodeIndex = node.nodeIndices[j];\n            const tensorIndex = node.tensorIndices[j];\n            const shapeKey = `${inboundLayer.name}_${nodeIndex}_${tensorIndex}`;\n            const inputShape = layersToOutputShapes[shapeKey];\n            inputShapes.push(inputShape);\n          }\n\n          const outputShape = layer.computeOutputShape(\n              generic_utils.singletonOrArray(inputShapes));\n\n          const outputShapes = types_utils.normalizeShapeList(outputShape);\n          const nodeIndex = layer.inboundNodes.indexOf(node);\n          for (let j = 0; j < outputShapes.length; j++) {\n            const shapeKey = `${layer.name}_${nodeIndex}_${j}`;\n            layersToOutputShapes[shapeKey] = outputShapes[j];\n          }\n        }\n      }\n    }\n\n    // Read final output shapes from layersToOutputShapes.\n    const outputShapes: Shape[] = [];\n    const outputShapeKeys: string[] = [];\n    for (let i = 0; i < this.outputLayers.length; i++) {\n      const layer = this.outputLayers[i];\n      const nodeIndex = this.outputLayersNodeIndices[i];\n      const tensorIndex = this.outputLayersTensorIndices[i];\n      const shapeKey = `${layer.name}_${nodeIndex}_${tensorIndex}`;\n      outputShapeKeys.push(shapeKey);\n    }\n\n    for (let i = 0; i < outputShapeKeys.length; i++) {\n      const key = outputShapeKeys[i];\n      generic_utils.assert(key in layersToOutputShapes);\n      outputShapes.push(layersToOutputShapes[key]);\n    }\n\n    // TODO(michaelterry): Update cache\n    return generic_utils.singletonOrArray(outputShapes);\n  }\n\n  /**\n   * Computes output tensors for new inputs.\n   *\n   * Note:\n   *   - Expects `inputs` to be a list (potentially with 1 element).\n   *\n   * @param inputs List of tensors\n   * @param masks List of masks (tensors or null).\n   * @return Three lists: outputTensors, outputMasks, outputShapes\n   */\n  protected runInternalGraph(inputs: Tensor[], masks?: Tensor[]):\n      [Tensor[], Tensor[], Shape[]] {\n    if (masks == null) {\n      masks = generic_utils.pyListRepeat(null, inputs.length);\n    }\n\n    // Dictionary mapping reference tensors to tuples\n    // (computed tensor, compute mask)\n    // we assume a 1:1 mapping from tensor to mask\n    // TODO: raise exception when a `.computeMask()` call\n    // does not return a list the same size as `call`\n    const tensorMap: {[tensorID: string]: [Tensor, Tensor]} = {};\n    for (let i = 0; i < this.inputs.length; ++i) {\n      const x = this.inputs[i];\n      const y = inputs[i];\n      const mask = masks[i];\n      tensorMap[x.id] = [y, mask];\n    }\n\n    const depthKeys = Object.keys(this.nodesByDepth)\n                          .map(x => parseInt(x, 10))\n                          .sort(generic_utils.reverseNumberCompare);\n    for (const depth of depthKeys) {\n      const nodes = this.nodesByDepth[depth];\n      for (const node of nodes) {\n        // This is always a single layer, never a list.\n        const layer = node.outboundLayer;\n        const referenceInputTensors = node.inputTensors;\n        const referenceOutputTensors = node.outputTensors;\n\n        // If all previous input tensors are available in tensorMap,\n        // then call node.inboundLayer on them.\n        // List of tuples [input, mask]:\n        const computedData = new Array<[Tensor, Tensor]>();\n        for (const x of referenceInputTensors) {\n          if (x.id in tensorMap) {\n            computedData.push(tensorMap[x.id]);\n          }\n        }\n        if (computedData.length === referenceInputTensors.length) {\n          // TODO(michaelterry): Add K.name_scope here, if we need it.\n          let kwargs: Kwargs = {};\n          let computedTensors: Tensor[];\n          let computedMasks: Tensor[];\n          let outputTensors: Tensor[];\n          let outputMasks: Tensor[];\n          // call layer\n          if (node.callArgs != null) {\n            kwargs = node.callArgs;\n          }\n          if (computedData.length === 1) {\n            const [computedTensor, computedMask] = computedData[0];\n            if (kwargs['mask'] == null) {\n              kwargs['mask'] = computedMask;\n            }\n            outputTensors =\n                generic_utils.toList(layer.call(computedTensor, kwargs));\n            outputMasks = generic_utils.toList(\n                layer.computeMask(computedTensor, computedMask));\n            computedTensors = [computedTensor];\n            computedMasks = [computedMask];\n          } else {\n            computedTensors = computedData.map(x => x[0]);\n            computedMasks = computedData.map(x => x[1]);\n            if (kwargs['mask'] == null) {\n              kwargs['mask'] = computedMasks;\n            }\n            outputTensors =\n                generic_utils.toList(layer.call(computedTensors, kwargs));\n            outputMasks = generic_utils.toList(\n                layer.computeMask(computedTensors, computedMasks));\n          }\n\n          if (layer.activityRegularizer) {\n            throw new NotImplementedError(\n                'LayersModel invocation with concrete Tensor value(s) in the ' +\n                'presence of activity regularizer(s) is not supported yet.');\n          }\n          // TODO(michaelterry): Add model updates and losses\n\n          // Update tensor map.\n          for (let i = 0; i < referenceOutputTensors.length; ++i) {\n            const x = referenceOutputTensors[i];\n            const y = outputTensors[i];\n            const mask = outputMasks[i];\n            tensorMap[x.id] = [y, mask];\n          }\n        }\n      }\n    }\n\n    const outputTensors: Tensor[] = [];\n    const outputMasks: Tensor[] = [];\n    const outputShapes: Shape[] = [];\n    for (const x of this.outputs) {\n      generic_utils.assert(\n          x.id in tensorMap, `Could not compute output ${x.name} : ${x.id}`);\n      const [tensor, mask] = tensorMap[x.id];\n      outputShapes.push(tensor.shape);\n      outputTensors.push(tensor);\n      outputMasks.push(mask);\n    }\n\n    // TODO(michaelterry): Add support for caches.\n    return [outputTensors, outputMasks, outputShapes];\n  }\n\n  /**\n   * Builds a map of internal node keys to node ordering.\n   * Used in serializaion a node orderings may change as unused nodes are\n   * dropped. Porting Note:  This helper method was pulled out of getConfig to\n   * improve readability.\n   * @param layers An array of Layers in the model.\n   * @returns Map of Node Keys to index order within the layer.\n   */\n  private buildNodeConversionMap(layers: Layer[]): {[nodeKey: string]: number} {\n    const nodeConversionMap: {[nodeKey: string]: number} = {};\n    let keptNodes: number;\n    for (const layer of this.layers) {\n      keptNodes = layer instanceof Container ? 1 : 0;\n      for (let originalNodeIndex = 0;\n           originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++) {\n        const nodeKey = Container.nodeKey(layer, originalNodeIndex);\n        if (this.containerNodes.has(nodeKey)) {\n          // i.e. we mark it to be saved\n          nodeConversionMap[nodeKey] = keptNodes;\n          keptNodes += 1;\n        }\n      }\n    }\n    return nodeConversionMap;\n  }\n\n  /**\n   * Retrieves a layer based on either its name (unique) or index.\n   *\n   * Indices are based on order of horizontal graph traversal (bottom-up).\n   *\n   * If both `name` and `index` are specified, `index` takes precedence.\n   *\n   * @param name Name of layer.\n   * @param index Index of layer.\n   * @returns A Layer instance.\n   * @throws ValueError: In case of invalid layer name or index.\n   */\n  /**\n   * @doc {\n   *    heading: 'Layers',\n   *    subheading: 'Classes',\n   *    namespace: 'layers',\n   *    subclasses: ['LayersModel']\n   * }\n   */\n  getLayer(name?: string, index?: number): Layer {\n    if (index != null) {\n      if (this.layers.length <= index) {\n        throw new ValueError(\n            `Was asked to retrieve layer at index ${index}, but model only ` +\n            `has ${this.layers.length} layer(s).`);\n      } else {\n        return this.layers[index];\n      }\n    } else {\n      if (name == null) {\n        throw new ValueError('Provide either a layer name or layer index');\n      }\n    }\n\n    for (const layer of this.layers) {\n      if (layer.name === name) {\n        return layer;\n      }\n    }\n    throw new ValueError(`No such layer: ${name}`);\n  }\n\n  /**\n   * Retrieves the Container's current loss values.\n   *\n   * Used for regularizers during training.\n   */\n  calculateLosses(): Scalar[] {\n    // Porting Node: This is an augmentation to Container.loss in PyKeras.\n    //   In PyKeras, Container.loss returns symbolic tensors. Here a concrete\n    //   Tensor (specifically Scalar) values are returned. This is due to the\n    //   imperative backend.\n    return tidy(() => {\n      const losses: Scalar[] = [];\n      for (const layer of this.layers) {\n        for (let nodeIndex = 0; nodeIndex < layer.inboundNodes.length;\n             ++nodeIndex) {\n          const nodeKey = Container.nodeKey(layer, nodeIndex);\n          if (this.containerNodes.has(nodeKey)) {\n            losses.push(...layer.calculateLosses());\n          }\n        }\n      }\n      // TODO(cais): Add any unconditional model-level losses?\n      return losses;\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {name: this.name};\n\n    // Build a map from layer unique name (self._node_key)\n    // to the index of the nodes that are saved in the config.\n    // Only nodes in container_nodes are saved.\n    const nodeConversionMap: {[nodeKey: string]: number} =\n        this.buildNodeConversionMap(this.layers);\n\n    // Serialize and save the layers in layerConfigs\n    const layerConfigs = [];\n    for (const layer of this.layers) {\n      const layerClassName = layer.getClassName();\n      const layerConfig = layer.getConfig();\n      const filteredInboundNodes = [];\n      for (let originalNodeIndex = 0;\n           originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++) {\n        const node = layer.inboundNodes[originalNodeIndex];\n        const nodeKey = Container.nodeKey(layer, originalNodeIndex);\n        let kwargs = {};\n        if (this.containerNodes.has(nodeKey)) {\n          // The node is relevant to the model:\n          // add to filteredInboundNodes.\n          if (node.callArgs) {\n            try {\n              JSON.stringify(node.callArgs);\n              kwargs = node.callArgs;\n            } catch (err) {\n              console.warn(\n                  `Layer ${layer.name} was passed ` +\n                  `non-serializable keyword arguments: ` +\n                  `${node.callArgs}. They will not be included ` +\n                  `in the serialized model (and thus will be ` +\n                  `missing at deserialization time).`);\n              kwargs = {};\n            }\n          }\n          if (node.inboundLayers.length > 0) {\n            const nodeData = [];\n            for (let i = 0; i < node.inboundLayers.length; i++) {\n              const inboundLayer = node.inboundLayers[i];\n              const nodeIndex = node.nodeIndices[i];\n              const tensorIndex = node.tensorIndices[i];\n              const nodeKey = Container.nodeKey(inboundLayer, nodeIndex);\n              let newNodeIndex = nodeConversionMap[nodeKey];\n              if (newNodeIndex == null) {\n                newNodeIndex = 0;\n              }\n              nodeData.push(\n                  [inboundLayer.name, newNodeIndex, tensorIndex, kwargs]);\n            }\n            filteredInboundNodes.push(nodeData);\n          }\n        }\n      }\n      const dict: serialization.ConfigDict = {};\n      dict['name'] = layer.name;\n      dict['className'] = layerClassName;\n      dict['config'] = layerConfig;\n      dict['inboundNodes'] = filteredInboundNodes;\n      layerConfigs.push(dict);\n    }\n    config['layers'] = layerConfigs;\n    // Gather info about inputs and outputs\n    const modelInputs = [];\n    for (let i = 0; i < this.inputLayers.length; i++) {\n      const layer = this.inputLayers[i];\n      const nodeIndex = this.inputLayersNodeIndices[i];\n\n      const nodeKey = Container.nodeKey(layer, nodeIndex);\n      if (!this.containerNodes.has(nodeKey)) {\n        continue;\n      }\n      let newNodeIndex = nodeConversionMap[nodeKey];\n      if (newNodeIndex === null || newNodeIndex === undefined) {\n        newNodeIndex = 0;\n      }\n      const tensorIndex = this.inputLayersTensorIndices[i];\n      modelInputs.push([layer.name, newNodeIndex, tensorIndex]);\n    }\n    config['inputLayers'] = modelInputs;\n\n    const modelOutputs = [];\n    for (let i = 0; i < this.outputLayers.length; i++) {\n      const layer = this.outputLayers[i];\n      const nodeIndex = this.outputLayersNodeIndices[i];\n\n      const nodeKey = Container.nodeKey(layer, nodeIndex);\n      if (!this.containerNodes.has(nodeKey)) {\n        continue;\n      }\n      let newNodeIndex = nodeConversionMap[nodeKey];\n      if (newNodeIndex === null || newNodeIndex === undefined) {\n        newNodeIndex = 0;\n      }\n      const tensorIndex = this.outputLayersTensorIndices[i];\n      modelOutputs.push([layer.name, newNodeIndex, tensorIndex]);\n    }\n    config['outputLayers'] = modelOutputs;\n    return config;\n  }\n\n  /**\n   * Instantiates a LayersModel from its config (output of `get_config()`).\n   * @param cls the class to create\n   * @param config LayersModel config dictionary.\n   * @param customObjects An optional dictionary of custom objects.\n   * @param fastWeightInit Optional flag to use fast weight initialization\n   *   during deserialization. This is applicable to cases in which\n   *   the initialization will be immediately overwritten by loaded weight\n   *   values. Default: `false`.\n   * @returns A LayersModel instance.\n   * @throws ValueError: In case of improperly formatted config dict.\n   */\n  /** @nocollapse */\n  static fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict,\n      customObjects = {} as serialization.ConfigDict,\n      fastWeightInit = false): T {\n    // Layer instances created during\n    // the graph reconstruction process\n    const createdLayers: {[layerName: string]: Layer} = {};\n\n    // Dictionary mapping layer instances to\n    // node data that specifies a layer call.\n    // It acts as a queue that maintains any unprocessed\n    // layer call until it becomes possible to process it\n    // (i.e. until the input tensors to the call all exist).\n    const unprocessedNodes: {[layer: string]: TensorKeyWithArgsArray[][]} = {};\n    function addUnprocessedNode(\n        layer: Layer, nodeData: TensorKeyWithArgsArray[]) {\n      if (!(layer.name in unprocessedNodes)) {\n        unprocessedNodes[layer.name] = [nodeData];\n      } else {\n        unprocessedNodes[layer.name].push(nodeData);\n      }\n    }\n\n    function processNode(layer: Layer, nodeData: TensorKeyWithArgsArray[]) {\n      const inputTensors: SymbolicTensor[] = [];\n      let kwargs;\n      for (const inputData of nodeData) {\n        const inboundLayerName = inputData[0];\n        const inboundNodeIndex = inputData[1];\n        const inboundTensorIndex = inputData[2];\n\n        kwargs = inputData[3] == null ?\n            {} :\n            inputData[3] as serialization.ConfigDict;\n        if (!(inboundLayerName in createdLayers)) {\n          addUnprocessedNode(layer, nodeData);\n          return;\n        }\n        const inboundLayer = createdLayers[inboundLayerName];\n        if (inboundLayer.inboundNodes.length <= inboundNodeIndex) {\n          addUnprocessedNode(layer, nodeData);\n          return;\n        }\n        const inboundNode = inboundLayer.inboundNodes[inboundNodeIndex];\n        inputTensors.push(inboundNode.outputTensors[inboundTensorIndex]);\n      }\n      // Call layer on its inputs, thus creating the node\n      // and building the layer if needed.\n      // Note: This has Eager vs Graph Implications.\n      if (inputTensors.length > 0) {\n        layer.apply(\n            generic_utils.singletonOrArray(inputTensors),\n            kwargs);  // was ** kwargs\n      }\n    }\n\n    /**\n     * Deserialize a layer, then call it on appropriate inputs.\n     * @param layerData: layer config dict.\n     * @throws ValueError: In case of improperly formatted `layer_data`\n     * dict.\n     */\n    function processLayer(layerData: serialization.ConfigDict|null) {\n      const layerName = layerData['name'] as string;\n      // Instantiate layer.\n      const layer =\n          deserializeLayer(\n              layerData,\n              config['customObjects'] != null ?\n                  config['customObjects'] as serialization.ConfigDict :\n                  {}) as Layer;\n      layer.setFastWeightInitDuringBuild(fastWeightInit);\n      createdLayers[layerName] = layer;\n      // Gather layer inputs.\n      const inboundNodesData =\n          layerData['inboundNodes'] as TensorKeyWithArgsArray[][];\n      inboundNodesData.forEach(nodeData => {\n        if (!(nodeData instanceof Array)) {\n          throw new ValueError(\n              `Corrupted configuration, expected array for nodeData: ${\n                  nodeData}`);\n        }\n        // We don't process nodes (i.e. make layer calls)\n        // on the fly because the inbound node may not yet exist,\n        // in case of layer shared at different topological depths\n        // (e.g.a model such as A(B(A(B(x)))))\n        addUnprocessedNode(layer, nodeData);\n      });\n    }\n\n    // First, we create all layers and enqueue nodes to be processed.\n    const name = config['name'];\n    const layersFromConfig = config['layers'] as serialization.ConfigDict[];\n    for (const layerData of layersFromConfig) {\n      processLayer(layerData);\n    }\n\n    // Then we process nodes in order of layer depth.\n    // Nodes that cannot yet be processed(if the inbound node\n    // does not yet exist) are re - enqueued, and the process\n    // is repeated until all nodes are processed.\n    while (!generic_utils.isObjectEmpty(unprocessedNodes)) {\n      for (const layerData of layersFromConfig) {\n        const layer = createdLayers[layerData['name'] as string];\n        if (layer.name in unprocessedNodes) {\n          const currentUnprocessedNodesForLayer = unprocessedNodes[layer.name];\n          delete unprocessedNodes[layer.name];\n          for (const nodeData of currentUnprocessedNodesForLayer) {\n            processNode(layer, nodeData);\n          }\n        }\n      }\n    }\n\n    const inputTensors: SymbolicTensor[] = [];\n    const outputTensors: SymbolicTensor[] = [];\n    const inputLayersFromConfig =\n        config['inputLayers'] as serialization.ConfigDict[];\n    for (const layerData of inputLayersFromConfig) {\n      const layerName = layerData[0] as string;\n      const nodeIndex = layerData[1] as number;\n      const tensorIndex = layerData[2] as number;\n      generic_utils.assert(layerName in createdLayers);\n      const layer = createdLayers[layerName];\n      const layerOutputTensors = layer.inboundNodes[nodeIndex].outputTensors;\n      inputTensors.push(layerOutputTensors[tensorIndex]);\n    }\n    const outputLayersFromConfig =\n        config['outputLayers'] as serialization.ConfigDict[];\n    for (const layerData of outputLayersFromConfig) {\n      const layerName = layerData[0] as string;\n      const nodeIndex = layerData[1] as number;\n      const tensorIndex = layerData[2] as number;\n      generic_utils.assert(layerName in createdLayers);\n      const layer = createdLayers[layerName];\n      const layerOutputTensors = layer.inboundNodes[nodeIndex].outputTensors;\n      outputTensors.push(layerOutputTensors[tensorIndex]);\n    }\n    return new cls({inputs: inputTensors, outputs: outputTensors, name});\n  }\n\n  /**\n   * Determine whether the container is stateful.\n   *\n   * Porting Note: this is the equivalent of the stateful @property of\n   *   the Container class in PyKeras.\n   */\n  get stateful(): boolean {\n    // Porting Note: This check is to prevent inadvertent setting of the\n    //   _stateful property of the Container instance.\n    if (this._stateful) {\n      throw new ValueError(\n          'Container instance unexpectedly has _stateful = true. The ' +\n          'statefulness of a Container is determined by the Layers it ' +\n          'contains. Its _stateful property must remain the default false.');\n    }\n    for (const layer of this.layers) {\n      if (layer.stateful) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Reset the state of all stateful constituent layers (if any).\n   *\n   * Examples of stateful layers include RNN layers whose `stateful` property\n   * is set as `true`.\n   */\n  resetStates() {\n    tidy(() => {\n      this.layers.forEach(layer => {\n        // tslint:disable:no-any\n        if (layer.stateful) {\n          layer.resetStates();\n        }\n        // tslint:enable:no-any\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source keras/models.py */\n\nimport {dispose, io, NamedTensorMap, Optimizer, Scalar, serialization, Tensor, util} from '@tensorflow/tfjs-core';\n\nimport {getUid} from './backend/state';\nimport {History} from './base_callbacks';\nimport {Dataset} from './engine/dataset_stub';\nimport {Input} from './engine/input_layer';\nimport {getSourceInputs, Layer, Node, SymbolicTensor} from './engine/topology';\nimport {LayersModel, ModelCompileArgs, ModelEvaluateArgs} from './engine/training';\nimport {ModelEvaluateDatasetArgs, ModelFitDatasetArgs} from './engine/training_dataset';\nimport {ModelFitArgs} from './engine/training_tensors';\nimport {NotImplementedError, RuntimeError, ValueError} from './errors';\nimport {Shape} from './keras_format/common';\nimport {TrainingConfig} from './keras_format/training_config';\nimport {PyJsonDict} from './keras_format/types';\nimport {deserialize} from './layers/serialization';\nimport {Kwargs, NamedTensor} from './types';\nimport * as generic_utils from './utils/generic_utils';\nimport {convertPythonicToTs} from './utils/serialization_utils';\nimport {getExactlyOneShape} from './utils/types_utils';\n\n/**\n * Parses a JSON model configuration file and returns a model instance.\n *\n * ```js\n * // This example shows how to serialize a model using `toJSON()` and\n * // deserialize it as another model using `tf.models.modelFromJSON()`.\n * // Note: this example serializes and deserializes only the topology\n * // of the model; the weights of the loaded model will be different\n * // from those of the the original model, due to random weight\n * // initialization.\n * // To load the topology and weights of a model, use `tf.loadLayersModel()`.\n * const model1 = tf.sequential();\n * model1.add(tf.layers.repeatVector({inputShape: [2], n: 4}));\n * // Serialize `model1` as a JSON object.\n * const model1JSON = model1.toJSON(null, false);\n * model1.summary();\n *\n * const model2 = await tf.models.modelFromJSON(model1JSON);\n * model2.summary();\n * ```\n *\n *  @param modelAndWeightsConfig JSON object or string encoding a model and\n *       weights configuration. It can also be only the topology JSON of the\n *       model, in which case the weights will not be loaded.\n *  @param custom_objects Optional dictionary mapping names\n *       (strings) to custom classes or functions to be\n *       considered during deserialization.\n * @returns A TensorFlow.js Layers `tf.LayersModel` instance (uncompiled).\n */\nexport async function modelFromJSON(\n    modelAndWeightsConfig: ModelAndWeightsConfig|PyJsonDict,\n    customObjects?: serialization.ConfigDict): Promise<LayersModel> {\n  if (!('modelTopology' in modelAndWeightsConfig)) {\n    modelAndWeightsConfig = {modelTopology: modelAndWeightsConfig};\n  }\n  modelAndWeightsConfig = modelAndWeightsConfig as ModelAndWeightsConfig;\n\n  let modelTopology = modelAndWeightsConfig.modelTopology;\n  if (modelTopology['model_config'] != null) {\n    // If the model-topology JSON contains a 'model_config' field, then it is\n    // a full model JSON (e.g., from `keras.Model.save()`), which contains\n    // not only the model's architecture in its 'model_config' field, but\n    // additional information such as the model's optimizer. We use only the\n    // 'model_config' field currently.\n    modelTopology = modelTopology['model_config'] as PyJsonDict;\n  }\n  const tsConfig =\n      convertPythonicToTs(modelTopology) as serialization.ConfigDict;\n  const model = deserialize(tsConfig, customObjects) as LayersModel;\n\n  if (modelAndWeightsConfig.weightsManifest != null) {\n    // Load the weight values keyed by the original tensor names in the model\n    // file that was loaded.  These should match the keys of the weight\n    // manifest.\n    const weightValues = await io.loadWeights(\n        modelAndWeightsConfig.weightsManifest, modelAndWeightsConfig.pathPrefix,\n        model.weights.map(weight => weight.originalName));\n\n    // Map the weights to the unique tensor names generated during model loading\n    const uniqueWeightValues: NamedTensorMap = {};\n    for (const weight of model.weights) {\n      uniqueWeightValues[weight.originalName] =\n          weightValues[weight.originalName];\n    }\n\n    model.loadWeights(uniqueWeightValues);\n    // Dispose temporary weight values.\n    dispose(weightValues);\n  }\n  return model;\n}\n\n/**\n * Options for loading a saved mode in TensorFlow.js format.\n */\nexport interface ModelAndWeightsConfig {\n  /**\n   * A JSON object or JSON string containing the model config.\n   *\n   * This can be either of the following two formats:\n   *   - A model archiecture-only config,  i.e., a format consistent with the\n   *     return value of`keras.Model.to_json()`.\n   *   - A full model config, containing not only model architecture, but also\n   *     training options and state, i.e., a format consistent with the return\n   *     value of `keras.models.save_model()`.\n   */\n  modelTopology: PyJsonDict;\n\n  /**\n   * A weights manifest in TensorFlow.js format.\n   */\n  weightsManifest?: io.WeightsManifestConfig;\n\n  /**\n   * Path to prepend to the paths in `weightManifest` before fetching.\n   *\n   * The path may optionally end in a slash ('/').\n   */\n  pathPrefix?: string;\n}\n\n// TODO(nielsene): Remove after: https://github.com/tensorflow/tfjs/issues/400\nexport interface ModelPredictArgs {\n  /**\n   * Optional. Batch size (Integer). If unspecified, it will default to 32.\n   */\n  batchSize?: number;\n\n  /**\n   * Optional. Verbosity mode. Defaults to false.\n   */\n  verbose?: boolean;\n}\n\n/**\n * Load a model, including its topology and optionally weights.  See the\n * Tutorial named \"How to import a Keras Model\" for usage examples.\n *\n * Example 1: Save `model`'s topology and weights to browser [local\n * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n * then load it back.\n *\n * ```js\n * const model = tf.sequential(\n *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n * console.log('Prediction from original model:');\n * model.predict(tf.ones([1, 3])).print();\n *\n * const saveResults = await model.save('localstorage://my-model-1');\n *\n * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');\n * console.log('Prediction from loaded model:');\n * loadedModel.predict(tf.ones([1, 3])).print();\n * ```\n *\n * Example 2. Saving `model`'s topology and weights to browser\n * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\n * then load it back.\n *\n * ```js\n * const model = tf.sequential(\n *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n * console.log('Prediction from original model:');\n * model.predict(tf.ones([1, 3])).print();\n *\n * const saveResults = await model.save('indexeddb://my-model-1');\n *\n * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');\n * console.log('Prediction from loaded model:');\n * loadedModel.predict(tf.ones([1, 3])).print();\n * ```\n *\n * Example 3. Load a model from user-selected files from HTML\n * [file input\n * elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file).\n *\n * ```js\n * // Note: this code snippet will not work without the HTML elements in the\n * //   page\n * const jsonUpload = document.getElementById('json-upload');\n * const weightsUpload = document.getElementById('weights-upload');\n *\n * const model = await tf.loadLayersModel(\n *     tf.io.browserFiles([jsonUpload.files[0], weightsUpload.files[0]]));\n * ```\n *\n * Example 4. Load a model from an HTTP server.\n *\n * ```js\n * const model = await\n *     tf.loadLayersModel('https://storage.googleapis.com/tfjs-models/tfjs/iris_v1/model.json');\n * model.summary();\n * ```\n *\n * @param pathOrIOHandler Can be either of the two formats\n *   1. A string path to the `ModelAndWeightsConfig` JSON describing\n *      the model in the canonical TensorFlow.js format. This path will be\n *      interpreted as a relative HTTP path, to which `fetch` will be used to\n *      request the model topology and weight manifest JSON.\n *      The content of the JSON file is assumed to be a JSON object with the\n *      following fields and values:\n *      - 'modelTopology': A JSON object that can be either of:\n *        1. a model architecture JSON consistent with the format of the return\n *            value of `keras.Model.to_json()`\n *        2. a full model JSON in the format of `keras.models.save_model()`.\n *      - 'weightsManifest': A TensorFlow.js weights manifest.\n *      See the Python converter function `save_model()` for more details.\n *      It is also assumed that model weights can be accessed from relative\n *      paths described by the `paths` fields in weights manifest.\n *   2. An `tf.io.IOHandler` object that loads model artifacts with its `load`\n *      method.\n * @param options Optional configuration arguments for the model loading,\n *   including:\n *   - `strict`: Require that the provided weights exactly match those required\n *     by the layers.  Default true.  Passing false means that both extra\n *     weights and missing weights will be silently ignored.\n *   - `onProgress`: A progress callback of the form:\n *     `(fraction: number) => void`. This callback can be used to monitor the\n *     model-loading process.\n * @returns A `Promise` of `tf.LayersModel`, with the topology and weights\n *     loaded.\n */\nexport async function loadLayersModelInternal(\n    pathOrIOHandler: string|io.IOHandler,\n    options?: io.LoadOptions): Promise<LayersModel> {\n  if (options == null) {\n    options = {};\n  }\n  if (typeof pathOrIOHandler === 'string') {\n    const handlers = io.getLoadHandlers(pathOrIOHandler, options.onProgress);\n    if (handlers.length === 0) {\n      // For backward compatibility: if no load handler can be found,\n      // assume it is a relative http path.\n      // TODO(cais): Reformat the args into a single `LoadOptions` once the core\n      // is refactored.\n      handlers.push(io.browserHTTPRequest(pathOrIOHandler, options));\n    } else if (handlers.length > 1) {\n      throw new ValueError(\n          `Found more than one (${handlers.length}) load handlers for ` +\n          `URL '${pathOrIOHandler}'`);\n    }\n    pathOrIOHandler = handlers[0];\n  }\n  return loadLayersModelFromIOHandler(pathOrIOHandler, undefined, options);\n}\n\n/**\n * Load a model and optionally its weights, using an IOHandler object.\n *\n * @param handler The instance of `IOHandler` to be used during the model\n *   loading.\n * @param customObjects Any optional custom objects to be used during model\n *   loading.\n * @param strict Whether the weight loading will be done in strict mode.\n *   Default: `true`.\n */\nexport async function loadLayersModelFromIOHandler(\n    handler: io.IOHandler, customObjects?: serialization.ConfigDict,\n    options?: io.LoadOptions): Promise<LayersModel> {\n  if (options == null) {\n    options = {};\n  }\n  if (handler.load == null) {\n    throw new ValueError(\n        'Cannot proceed with model loading because the IOHandler provided ' +\n        'does not have the `load` method implemented.');\n  }\n  const artifacts = await handler.load();\n  let modelTopology = artifacts.modelTopology as PyJsonDict;\n  if (modelTopology['model_config'] != null) {\n    modelTopology = modelTopology['model_config'] as PyJsonDict;\n  }\n\n  const strict = options.strict == null ? true : options.strict;\n  // If weights are provided and the weight-loading mode is strict, use\n  // fast weight initialization. This skips costly initializers such as\n  // 'orthogonal' and saves unnecessary computation in cases where\n  // the initialized weight values will immediately be overwritten by\n  // loaded weight values.\n  const fastWeightInit =\n      artifacts.weightData != null && artifacts.weightSpecs != null && strict;\n  const model =\n      deserialize(\n          convertPythonicToTs(modelTopology) as serialization.ConfigDict,\n          customObjects, fastWeightInit) as LayersModel;\n\n  const trainingConfig = artifacts.trainingConfig as TrainingConfig;\n  if (trainingConfig != null) {\n    model.loadTrainingConfig(trainingConfig);\n  }\n  if (artifacts.userDefinedMetadata != null) {\n    model.setUserDefinedMetadata(artifacts.userDefinedMetadata);\n  }\n\n  // If weightData is present, load the weights into the model.\n  if (artifacts.weightData != null) {\n    // Loading weights requires weightSpecs.\n    if (artifacts.weightSpecs == null) {\n      throw new ValueError(\n          'LayersModel artifacts contains weight data, but not weight specs. ' +\n          'Therefore loading of weights cannot proceed.');\n    }\n\n    const {modelWeights, optimizerWeights} = decodeModelAndOptimizerWeights(\n        artifacts.weightData, artifacts.weightSpecs);\n    model.loadWeights(modelWeights, strict);\n\n    if (model.optimizer != null && optimizerWeights.length > 0) {\n      await model.optimizer.setWeights(optimizerWeights);\n    }\n\n    // Dispose temporary weight values.\n    dispose(modelWeights);\n    dispose(optimizerWeights.map(w => w.tensor));\n  }\n  return model;\n}\n\nfunction decodeModelAndOptimizerWeights(\n    buffer: ArrayBuffer, specs: io.WeightsManifestEntry[]):\n    {modelWeights: NamedTensorMap, optimizerWeights: NamedTensor[]} {\n  const name2Tensor = io.decodeWeights(buffer, specs);\n  const modelWeights: NamedTensorMap = {};\n  const optimizerWeights: NamedTensor[] = [];\n  specs.forEach(spec => {\n    if (spec.group === 'optimizer') {\n      optimizerWeights.push({name: spec.name, tensor: name2Tensor[spec.name]});\n    } else {\n      modelWeights[spec.name] = name2Tensor[spec.name];\n    }\n  });\n  return {modelWeights, optimizerWeights};\n}\n\n/**\n * Configuration for a Sequential model.\n */\nexport interface SequentialArgs {\n  /** Stack of layers for the model. */\n  layers?: Layer[];\n\n  /** The name of this model. */\n  name?: string;\n}\n\n/**\n * A model with a stack of layers, feeding linearly from one to the next.\n *\n * `tf.sequential` is a factory function that creates an instance of\n * `tf.Sequential`.\n *\n * ```js\n *  // Define a model for linear regression.\n *  const model = tf.sequential();\n *  model.add(tf.layers.dense({units: 1, inputShape: [1]}));\n *\n *  // Prepare the model for training: Specify the loss and the optimizer.\n *  model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n *\n *  // Generate some synthetic data for training.\n *  const xs = tf.tensor2d([1, 2, 3, 4], [4, 1]);\n *  const ys = tf.tensor2d([1, 3, 5, 7], [4, 1]);\n *\n *  // Train the model using the data then do inference on a data point the\n *  // model hasn't seen:\n *  await model.fit(xs, ys);\n *  model.predict(tf.tensor2d([5], [1, 1])).print();\n * ```\n */\n/** @doc {heading: 'Models', subheading: 'Classes'} */\nexport class Sequential extends LayersModel {\n  /** @nocollapse */\n  static className = 'Sequential';\n  private model: LayersModel;\n  constructor(args?: SequentialArgs) {\n    super({inputs: [], outputs: []});\n    args = args || {};\n\n    this.trainable = true;\n    this.built = false;\n\n    // Set model name.\n    this.name = (args.name != null) ? args.name : getUid('sequential_');\n\n    // Add to the model any layers passed to the constructor.\n    if (args.layers != null) {\n      for (const layer of args.layers) {\n        this.add(layer);\n      }\n    }\n  }\n\n  // Helper function to Sequential.add  Throws if the new output shape will be\n  // invalid.\n  private checkShape(layer: Layer) {\n    const shape = layer.inboundNodes[0].outputTensors[0].shape;\n    if (shape.some(x => x < 0)) {\n      throw new ValueError(\n          'Negative dimension size caused by adding layer ' +\n          `${layer.name} with input shape [` +\n          `${layer.inboundNodes[0].inputTensors[0].shape}]`);\n    }\n  }\n\n  /**\n   * Adds a layer instance on top of the layer stack.\n   *\n   * ```js\n   *  const model = tf.sequential();\n   *  model.add(tf.layers.dense({units: 8, inputShape: [1]}));\n   *  model.add(tf.layers.dense({units: 4, activation: 'relu6'}));\n   *  model.add(tf.layers.dense({units: 1, activation: 'relu6'}));\n   *  // Note that the untrained model is random at this point.\n   *  model.predict(tf.randomNormal([10, 1])).print();\n   * ```\n   * @param layer Layer instance.\n   *\n   * @exception ValueError In case the `layer` argument does not know its\n   * input shape.\n   * @exception ValueError In case the `layer` argument has multiple output\n   *   tensors, or is already connected somewhere else (forbidden in\n   *   `Sequential` models).\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  add(layer: Layer): void {\n    const isLayerModelInstance =\n        layer instanceof Sequential || layer instanceof LayersModel;\n    let modelLayer: LayersModel;\n    if (isLayerModelInstance) {\n      modelLayer = layer as LayersModel;\n      if (modelLayer.outputs.length !== 1) {\n        throw new ValueError(\n            'All layers in a Sequential model ' +\n            'should have a single output tensor. ' +\n            'For multi-output layers, ' +\n            'use the functional API.');\n      }\n      if (modelLayer.inputs.length !== 1) {\n        throw new ValueError(\n            'All layers in a Sequential model ' +\n            'should have a single input tensor. ' +\n            'For multi-input layers, ' +\n            'use the functional API.');\n      }\n    }\n\n    if (this.outputs.length === 0) {\n      // first layer in model: check that it is an input layer\n      if (layer.inboundNodes.length === 0) {\n        // create an input layer\n        if (layer.batchInputShape == null) {\n          throw new ValueError(\n              'The first layer in a Sequential model must ' +\n              'get an `inputShape` or `batchInputShape` argument.');\n        }\n        // Instantiate the input layer.\n        const x = Input({\n          batchShape: layer.batchInputShape,\n          dtype: layer.dtype,\n          name: layer.name + '_input'\n        });\n        // This will build the current layer and create the node connecting\n        // the current layer to the input layer we just created.\n        layer.apply(x);\n      }\n\n      if (isLayerModelInstance) {\n        this.outputs = modelLayer.outputs;\n        this.inputs = modelLayer.inputs;\n      } else {\n        if (layer.inboundNodes.length !== 1) {\n          throw new ValueError(\n              'A layer added to a Sequential model must not already be ' +\n              `connected somewhere else. LayersModel received layer ${\n                  layer.name} ` +\n              `which has ${layer.inboundNodes.length} pre-existing inbound ` +\n              'connections.');\n        }\n\n        if (layer.inboundNodes[0].outputTensors.length !== 1) {\n          throw new ValueError(\n              'All layers in a Sequential model ' +\n              'should have a single output tensor. ' +\n              'For multi-output layers, ' +\n              'use the functional API.');\n        }\n        this.checkShape(layer);\n        this.outputs = [layer.inboundNodes[0].outputTensors[0]];\n        this.inputs = getSourceInputs(this.outputs[0]);\n      }\n\n      this.inboundNodes = [];\n      // We create an input node, which we will keep updated\n      // as we add more layers.\n      // (This call has side effects.)\n      // tslint:disable-next-line:no-unused-expression\n      new Node({\n        outboundLayer: this,\n        inboundLayers: [],\n        nodeIndices: [],\n        tensorIndices: [],\n        inputTensors: this.inputs,\n        outputTensors: this.outputs,\n        // no model-level masking for now\n        inputMasks: generic_utils.pyListRepeat(null, this.inputs.length),\n        outputMasks: [null],\n        inputShapes: this.inputs.map(x => x.shape),\n        outputShapes: this.outputs[0].shape\n      });\n    } else {\n      const outputTensor = layer.apply(this.outputs[0]);\n      if (Array.isArray(outputTensor)) {\n        throw new TypeError(\n            'All layers in a Sequential model ' +\n            'should have a single output tensor. ' +\n            'For multi-output layers, ' +\n            'use the functional API.');\n      }\n      this.checkShape(layer);\n      this.outputs = [outputTensor as SymbolicTensor];\n      // update self.inbound_nodes\n      this.inboundNodes[0].outputTensors = this.outputs;\n      this.inboundNodes[0].outputShapes = [this.outputs[0].shape];\n    }\n\n    this.layers.push(layer);\n    this.built = false;\n  }\n\n  /**\n   * Removes the last layer in the model.\n   *\n   * @exception TypeError if there are no layers in the model.\n   */\n  pop(): void {\n    if (this.layers.length === 0) {\n      throw new TypeError('There are no layers in the model.');\n    }\n\n    this.layers.pop();\n    if (this.layers.length === 0) {\n      this.outputs = [];\n      this.inboundNodes = [];\n      this.outboundNodes = [];\n    } else {\n      const lastLayerIndex = this.layers.length - 1;\n      this.layers[lastLayerIndex].outboundNodes = [];\n      this.outputs = [this.layers[lastLayerIndex].output as SymbolicTensor];\n      // update self.inbound_nodes\n      this.inboundNodes[0].outputTensors = this.outputs;\n      this.inboundNodes[0].outputShapes = [this.outputs[0].shape];\n    }\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    if (this.model == null) {\n      this.build();\n    }\n    return this.model.call(inputs, kwargs);\n  }\n\n  build(inputShape?: Shape|Shape[]) {\n    // Call `getExactlyOneShape` without using its return value,\n    // to verify that exactly one input shape is provided.\n    getExactlyOneShape(inputShape);\n\n    if (this.inputs.length === 0 || this.outputs.length === 0) {\n      throw new TypeError(\n          'Sequential model cannot be built: model is empty.' +\n          ' Add some layers first.');\n    }\n    // actually create the model\n    this.model = new LayersModel({\n      inputs: this.inputs,\n      outputs: this.outputs[0],\n      name: this.name + '_model'\n    });\n    this.model.trainable = this.trainable;\n\n    // mirror model attributes\n    this.supportsMasking = this.model.supportsMasking;\n    // TODO(michaelterry): Add caches\n    this.inputLayers = this.model.inputLayers;\n    this.inputLayersNodeIndices = this.model.inputLayersNodeIndices;\n    this.inputLayersTensorIndices = this.model.inputLayersTensorIndices;\n    this.outputLayers = this.model.outputLayers;\n    this.outputLayersNodeIndices = this.model.outputLayersNodeIndices;\n    this.outputLayersTensorIndices = this.model.outputLayersTensorIndices;\n    this.nodesByDepth = this.model.nodesByDepth;\n    this.containerNodes = this.model.containerNodes;\n    this.outputNames = this.model.outputNames;\n    this.inputNames = this.model.inputNames;\n    // TODO(michaelterry): Add feedInputNames, feedInputs, if needed.\n    // TODO(michaelterry): Add callbackModel if needed.\n    this.built = true;\n  }\n\n  countParams(): number {\n    if (!this.built) {\n      this.build();\n    }\n    return super.countParams();\n  }\n\n  /**\n   * Print a text summary of the Sequential model's layers.\n   *\n   * The summary includes\n   * - Name and type of all layers that comprise the model.\n   * - Output shape(s) of the layers\n   * - Number of weight parameters of each layer\n   * - The total number of trainable and non-trainable parameters of the\n   * model.\n   *\n   * ```js\n   * const model = tf.sequential();\n   * model.add(\n   *     tf.layers.dense({units: 100, inputShape: [10], activation: 'relu'}));\n   * model.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));\n   *\n   * model.summary();\n   * ```\n   *\n   * @param lineLength Custom line length, in number of characters.\n   * @param positions Custom widths of each of the columns, as either\n   *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number\n   *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to\n   *   right-most (i.e., ending) position of a column.\n   * @param printFn Custom print function. Can be used to replace the default\n   *   `console.log`. For example, you can use `x => {}` to mute the printed\n   *   messages in the console.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  summary(\n      lineLength?: number, positions?: number[],\n      printFn:\n          // tslint:disable-next-line:no-any\n      (message?: any, ...optionalParams: any[]) => void = console.log) {\n    if (!this.built) {\n      this.build();\n    }\n    super.summary(lineLength, positions, printFn);\n  }\n\n  /**\n   * Sets the weights of the model.\n   *\n   * @param weights Should be a list of Tensors with shapes and types matching\n   *   the output of `model.getWeights()`.\n   */\n  setWeights(weights: Tensor[]): void {\n    if (this.model == null) {\n      this.build();\n    }\n    this.model.setWeights(weights);\n  }\n\n  /**\n   * Returns the loss value & metrics values for the model in test mode.\n   *\n   * Loss and metrics are specified during `compile()`, which needs to happen\n   * before calls to `evaluate()`.\n   *\n   * Computation is done in batches.\n   *\n   * ```js\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n   * const result = model.evaluate(tf.ones([8, 10]), tf.ones([8, 1]), {\n   *   batchSize: 4,\n   * });\n   * result.print();\n   * ```\n   *\n   * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the\n   * model has multiple inputs.\n   * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the\n   * model has multiple outputs.\n   * @param args A `ModelEvaluateConfig`, containing optional fields.\n   *\n   * @return `Scalar` test loss (if the model has a single output and no\n   *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs\n   *   and/or metrics). The attribute `model.metricsNames`\n   *   will give you the display labels for the scalar outputs.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  evaluate(\n      x: Tensor|Tensor[], y: Tensor|Tensor[],\n      args: ModelEvaluateArgs = {}): Scalar|Scalar[] {\n    if (!this.built) {\n      throw new RuntimeError(\n          'The model needs to be compiled before being used.');\n    }\n    return this.model.evaluate(x, y, args);\n  }\n\n  // TODO(cais): Add code snippet below once real dataset objects are\n  //   available.\n  /**\n   * Evaluate model using a dataset object.\n   *\n   * Note: Unlike `evaluate()`, this method is asynchronous (`async`);\n   *\n   * @param dataset A dataset object. Its `iterator()` method is expected\n   *   to generate a dataset iterator object, the `next()` method of which\n   *   is expected to produce data batches for evaluation. The return value\n   *   of the `next()` call ought to contain a boolean `done` field and a\n   *   `value` field. The `value` field is expected to be an array of two\n   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n   *   case is for models with exactly one input and one output (e.g..\n   *   a sequential model). The latter case is for models with multiple\n   *   inputs and/or multiple outputs. Of the two items in the array, the\n   *   first is the input feature(s) and the second is the output target(s).\n   * @param args A configuration object for the dataset-based evaluation.\n   * @returns Loss and metric values as an Array of `Scalar` objects.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async evaluateDataset(dataset: Dataset<{}>, args: ModelEvaluateDatasetArgs):\n      Promise<Scalar|Scalar[]> {\n    if (!this.built) {\n      throw new RuntimeError(\n          'The model needs to be compiled before being used.');\n    }\n    return this.model.evaluateDataset(dataset, args);\n  }\n\n  /**\n   * Generates output predictions for the input samples.\n   *\n   * Computation is done in batches.\n   *\n   * Note: the \"step\" mode of predict() is currently not supported.\n   *   This is because the TensorFow.js core backend is imperative only.\n   *\n   * ```js\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.predict(tf.ones([2, 10])).print();\n   * ```\n   *\n   * @param x The input data, as an Tensor, or an `Array` of `tf.Tensor`s if\n   *   the model has multiple inputs.\n   * @param conifg A `ModelPredictConfig` object containing optional fields.\n   *\n   * @return `tf.Tensor`(s) of predictions.\n   *\n   * @exception ValueError In case of mismatch between the provided input data\n   *   and the model's expectations, or in case a stateful model receives a\n   *   number of samples that is not a multiple of the batch size.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  predict(x: Tensor|Tensor[], args: ModelPredictArgs = {}): Tensor|Tensor[] {\n    if (this.model == null) {\n      this.build();\n    }\n    return this.model.predict(x, args);\n  }\n\n  /**\n   * Returns predictions for a single batch of samples.\n   *\n   * @param x: Input samples, as an Tensor, or list of Tensors (if the model\n   *   has multiple inputs).\n   * @return Tensor(s) of predictions\n   */\n  predictOnBatch(x: Tensor): Tensor|Tensor[] {\n    if (this.model == null) {\n      this.build();\n    }\n    return this.model.predictOnBatch(x);\n  }\n\n  /**\n   * See `LayersModel.compile`.\n   *\n   * @param args\n   */\n  compile(args: ModelCompileArgs): void {\n    this.build();\n    this.model.compile(args);\n    this.optimizer_ = this.model.optimizer;\n    // tslint:disable-next-line:no-any\n    this.isOptimizerOwned = (this.model as any).isOptimizerOwned;\n    this.loss = this.model.loss;\n    this.metrics = this.model.metrics;\n    // TODO(cais): Add this.lossWeights, this.sampleWeightMode,\n    //   this.weightedMetrics, this.targets.\n    this.metricsTensors = this.model.metricsTensors;\n    this.metricsNames = this.model.metricsNames;\n    // TODO(cais): Add sampleWeights.\n  }\n\n  get optimizer(): Optimizer {\n    return this.model == null ? undefined : this.model.optimizer;\n  }\n\n  set optimizer(optimizer: Optimizer) {\n    this.model.optimizer = optimizer;\n  }\n\n  /**\n   * Trains the model for a fixed number of epochs (iterations on a dataset).\n   *\n   * ```js\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n   * const history = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {\n   *   batchSize: 4,\n   *   epochs: 3\n   * });\n   * console.log(history.history.loss[0]);\n   * ```\n   *\n   * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the\n   * model has multiple inputs. If all inputs in the model are named, you can\n   * also pass a dictionary mapping input names to `tf.Tensor`s.\n   * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if\n   * the model has multiple outputs. If all outputs in the model are named, you\n   *  can also pass a dictionary mapping output names to `tf.Tensor`s.\n   * @param args  A `ModelFitConfig`, containing optional fields.\n   *\n   * @return A `History` instance. Its `history` attribute contains all\n   *   information collected during training.\n   *\n   * @exception ValueError In case of mismatch between the provided input data\n   *   and what the model expects.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async fit(\n      x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      y: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      args: ModelFitArgs = {}): Promise<History> {\n    if (!this.built) {\n      throw new RuntimeError(\n          'The model needs to be compiled before ' +\n          'being used.');\n    }\n    return this.model.fit(x, y, args);\n  }\n\n  /**\n   * Trains the model using a dataset object.\n   *\n   * ```js\n   * const xArray = [\n   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],\n   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],\n   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],\n   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],\n   * ];\n   * const yArray = [1, 1, 1, 1];\n   * // Create a dataset from the JavaScript array.\n   * const xDataset = tf.data.array(xArray);\n   * const yDataset = tf.data.array(yArray);\n   * // Zip combines the `x` and `y` Datasets into a single Dataset, the\n   * // iterator of which will return an object containing of two tensors,\n   * // corresponding to `x` and `y`.  The call to `batch(4)` will bundle\n   * // four such samples into a single object, with the same keys now pointing\n   * // to tensors that hold 4 examples, organized along the batch dimension.\n   * // The call to `shuffle(4)` causes each iteration through the dataset to\n   * // happen in a different order.  The size of the shuffle window is 4.\n   * const xyDataset = tf.data.zip({xs: xDataset, ys: yDataset})\n   *     .batch(4)\n   *     .shuffle(4);\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [9]})]\n   * });\n   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n   * const history = await model.fitDataset(xyDataset, {\n   *   epochs: 4,\n   *   callbacks: {onEpochEnd: (epoch, logs) => console.log(logs.loss)}\n   * });\n   * ```\n   *\n   * @param dataset A dataset object. Its `iterator()` method is expected to\n   *   generate a dataset iterator object, the `next()` method of which is\n   *   expected to produce data batches for evaluation. The return value of the\n   *   `next()` call ought to contain a boolean `done` field and a `value`\n   *   field.\n   *\n   *   The `value` field is expected to be an object of with fields\n   *   `xs` and `ys`, which point to the feature tensor and the target tensor,\n   *   respectively. This case is for models with exactly one input and one\n   *   output (e.g.. a sequential model). For example:\n   *   ```js\n   *   {value: {xs: xsTensor, ys: ysTensor}, done: false}\n   *   ```\n   *\n   *   If the model has multiple inputs, the `xs` field of `value` should\n   *   be an object mapping input names to their respective feature tensors.\n   *   For example:\n   *   ```js\n   *   {\n   *     value: {\n   *       xs: {\n   *         input_1: xsTensor1,\n   *         input_2: xsTensor2\n   *       },\n   *       ys: ysTensor\n   *     },\n   *     done: false\n   *   }\n   *   ```\n   *   If the model has multiple outputs, the `ys` field of `value` should\n   *   be an object mapping output names to their respective target tensors.\n   *   For example:\n   *   ```js\n   *   {\n   *     value: {\n   *       xs: xsTensor,\n   *       ys: {\n   *         output_1: ysTensor1,\n   *         output_2: ysTensor2\n   *       },\n   *     },\n   *     done: false\n   *   }\n   *   ```\n   * @param args A `ModelFitDatasetArgs`, containing optional fields.\n   *\n   * @return A `History` instance. Its `history` attribute contains all\n   *   information collected during training.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  async fitDataset<T>(dataset: Dataset<T>, args: ModelFitDatasetArgs<T>):\n      Promise<History> {\n    if (!this.built) {\n      throw new RuntimeError(\n          'The model needs to be compiled before ' +\n          'being used.');\n    }\n    return this.model.fitDataset(dataset, args);\n  }\n\n  /**\n   * Runs a single gradient update on a single batch of data.\n   *\n   * This method differs from `fit()` and `fitDataset()` in the following\n   * regards:\n   *   - It operates on exactly one batch of data.\n   *   - It returns only the loss and matric values, instead of\n   *     returning the batch-by-batch loss and metric values.\n   *   - It doesn't support fine-grained options such as verbosity and\n   *     callbacks.\n   *\n   * @param x Input data. It could be one of the following:\n   *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has\n   *     multiple inputs).\n   *   - An Object mapping input names to corresponding `tf.Tensor` (if the\n   *     model has named inputs).\n   * @param y Target darta. It could be either a `tf.Tensor` a multiple\n   *   `tf.Tensor`s. It should be consistent with `x`.\n   * @returns Training loss or losses (in case the model has\n   *   multiple outputs), along with metrics (if any), as numbers.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async trainOnBatch(\n      x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      y: Tensor|Tensor[]|\n      {[inputName: string]: Tensor}): Promise<number|number[]> {\n    return this.model.trainOnBatch(x, y);\n  }\n\n  /* See parent class for JsDoc */\n  /** @nocollapse */\n  static fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict,\n      customObjects = {} as serialization.ConfigDict,\n      fastWeightInit = false): T {\n    let configArray: serialization.ConfigDictArray;\n    let extraModelConfig: serialization.ConfigDict = {};\n    if (config instanceof Array) {\n      if (!(config[0].className != null) ||\n          config[0]['className'] === 'Merge') {\n        throw new ValueError('Legacy serialization format not supported yet.');\n      }\n      configArray = config;\n    } else {\n      util.assert(\n          config['layers'] != null,\n          () =>\n              `When the config data for a Sequential model is not an Array, ` +\n              `it must be an Object that contains the 'layers' field.`);\n      configArray = config['layers'] as serialization.ConfigDictArray;\n      delete config['layers'];\n      extraModelConfig = config;\n    }\n\n    const model = new cls(extraModelConfig);\n    if (!(model instanceof Sequential)) {\n      throw new NotImplementedError(\n          `Sequential.fromConfig called on non-Sequential input: ${model}`);\n    }\n    for (const conf of configArray) {\n      const customObjects: serialization.ConfigDict = undefined;\n      const layer = deserialize(\n                        conf as serialization.ConfigDict, customObjects,\n                        fastWeightInit) as Layer;\n      if (fastWeightInit) {\n        layer.setFastWeightInitDuringBuild(true);\n      }\n      model.add(layer);\n    }\n    return model;\n  }\n\n  /**\n   * Setter used for force stopping of LayersModel.fit() (i.e., training).\n   *\n   * Example:\n   *\n   * ```js\n   * const model = tf.sequential();\n   * model.add(tf.layers.dense({units: 1, inputShape: [10]}));\n   * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n   * const xs = tf.ones([8, 10]);\n   * const ys = tf.zeros([8, 1]);\n   *\n   * const history = await model.fit(xs, ys, {\n   *   epochs: 10,\n   *   callbacks: {\n   *     onEpochEnd: async (epoch, logs) => {\n   *       if (epoch === 2) {\n   *         model.stopTraining = true;\n   *       }\n   *     }\n   *   }\n   * });\n   *\n   * // There should be only 3 values in the loss array, instead of 10 values,\n   * // due to the stopping after 3 epochs.\n   * console.log(history.history.loss);\n   * ```\n   */\n  set stopTraining(stop: boolean) {\n    // TODO(cais): When refactoring to remove the composition pattern happens,\n    // remove this method overriding.\n    if (this.model == null) {\n      throw new ValueError(\n          'Cannot set the stopTraining property of a sequential model before ' +\n          'it is compiled.');\n    }\n    this.model.stopTraining = stop;\n  }\n\n  get stopTraining(): boolean {\n    if (this.model == null) {\n      throw new ValueError(\n          'Cannot get the stopTraining property of a sequential model before ' +\n          'it is compiled.');\n    }\n    return this.model.stopTraining;\n  }\n\n  // TODO(cais): Override get trainableWeights() here\n\n  // tslint:disable-next-line:no-any\n  getConfig(): any {\n    // NOTE(cais): We override the return type of getConfig() to `any` here,\n    //   because the `Sequential` class is a special case among `Container`\n    //   subtypes in that its getConfig() method returns an Array (not a\n    //   dict).\n    const layers: serialization.ConfigDict[] = [];\n    for (const layer of this.layers) {\n      const dict: serialization.ConfigDict = {};\n      dict['className'] = layer.getClassName();\n      dict['config'] = layer.getConfig();\n      layers.push(dict);\n    }\n    return {name: this.name, layers};\n  }\n}\nserialization.registerClass(Sequential);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Exported functions.\n */\n\nimport {io} from '@tensorflow/tfjs-core';\n\nimport {BaseCallbackConstructor, CallbackConstructorRegistry} from './base_callbacks';\nimport {ContainerArgs} from './engine/container';\nimport {Input, InputConfig,} from './engine/input_layer';\nimport {SymbolicTensor} from './engine/topology';\nimport {LayersModel} from './engine/training';\nimport {loadLayersModelInternal, Sequential, SequentialArgs} from './models';\n\n// TODO(cais): Add doc string to all the public static functions in this\n//   class; include exectuable JavaScript code snippets where applicable\n//   (b/74074458).\n\n// LayersModel and related factory methods.\n\n/**\n * A model is a data structure that consists of `Layers` and defines inputs\n * and outputs.\n *\n * The key difference between `tf.model` and `tf.sequential` is that\n * `tf.model` is more generic, supporting an arbitrary graph (without\n * cycles) of layers. `tf.sequential` is less generic and supports only a linear\n * stack of layers.\n *\n * When creating a `tf.LayersModel`, specify its input(s) and output(s). Layers\n * are used to wire input(s) to output(s).\n *\n * For example, the following code snippet defines a model consisting of\n * two `dense` layers, with 10 and 4 units, respectively.\n *\n * ```js\n * // Define input, which has a size of 5 (not including batch dimension).\n * const input = tf.input({shape: [5]});\n *\n * // First dense layer uses relu activation.\n * const denseLayer1 = tf.layers.dense({units: 10, activation: 'relu'});\n * // Second dense layer uses softmax activation.\n * const denseLayer2 = tf.layers.dense({units: 4, activation: 'softmax'});\n *\n * // Obtain the output symbolic tensor by applying the layers on the input.\n * const output = denseLayer2.apply(denseLayer1.apply(input));\n *\n * // Create the model based on the inputs.\n * const model = tf.model({inputs: input, outputs: output});\n *\n * // The model can be used for training, evaluation and prediction.\n * // For example, the following line runs prediction with the model on\n * // some fake data.\n * model.predict(tf.ones([2, 5])).print();\n * ```\n * See also:\n *   `tf.sequential`, `tf.loadLayersModel`.\n */\n\n/**\n * @doc {heading: 'Models', subheading: 'Creation'}\n */\nexport function model(args: ContainerArgs): LayersModel {\n  return new LayersModel(args);\n}\n\n/**\n * Creates a `tf.Sequential` model.  A sequential model is any model where the\n * outputs of one layer are the inputs to the next layer, i.e. the model\n * topology is a simple 'stack' of layers, with no branching or skipping.\n *\n * This means that the first layer passed to a `tf.Sequential` model should have\n * a defined input shape. What that means is that it should have received an\n * `inputShape` or `batchInputShape` argument, or for some type of layers\n * (recurrent, Dense...) an `inputDim` argument.\n *\n * The key difference between `tf.model` and `tf.sequential` is that\n * `tf.sequential` is less generic, supporting only a linear stack of layers.\n * `tf.model` is more generic and supports an arbitrary graph (without\n * cycles) of layers.\n *\n * Examples:\n *\n * ```js\n * const model = tf.sequential();\n *\n * // First layer must have an input shape defined.\n * model.add(tf.layers.dense({units: 32, inputShape: [50]}));\n * // Afterwards, TF.js does automatic shape inference.\n * model.add(tf.layers.dense({units: 4}));\n *\n * // Inspect the inferred shape of the model's output, which equals\n * // `[null, 4]`. The 1st dimension is the undetermined batch dimension; the\n * // 2nd is the output size of the model's last layer.\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n *\n * It is also possible to specify a batch size (with potentially undetermined\n * batch dimension, denoted by \"null\") for the first layer using the\n * `batchInputShape` key. The following example is equivalent to the above:\n *\n * ```js\n * const model = tf.sequential();\n *\n * // First layer must have a defined input shape\n * model.add(tf.layers.dense({units: 32, batchInputShape: [null, 50]}));\n * // Afterwards, TF.js does automatic shape inference.\n * model.add(tf.layers.dense({units: 4}));\n *\n * // Inspect the inferred shape of the model's output.\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n *\n * You can also use an `Array` of already-constructed `Layer`s to create\n * a `tf.Sequential` model:\n *\n * ```js\n * const model = tf.sequential({\n *   layers: [tf.layers.dense({units: 32, inputShape: [50]}),\n *            tf.layers.dense({units: 4})]\n * });\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n */\n/**\n * @doc {heading: 'Models', subheading: 'Creation'}\n */\nexport function sequential(config?: SequentialArgs): Sequential {\n  return new Sequential(config);\n}\n\n/**\n * Load a model composed of Layer objects, including its topology and optionally\n * weights. See the Tutorial named \"How to import a Keras Model\" for usage\n * examples.\n *\n * This method is applicable to:\n *\n * 1. Models created with the `tf.layers.*`, `tf.sequential`, and\n * `tf.model` APIs of TensorFlow.js and later saved with the\n * `tf.LayersModel.save` method.\n * 2. Models converted from Keras or TensorFlow tf.keras using\n *    the [tensorflowjs_converter](https://github.com/tensorflow/tfjs-converter)\n *\n * This mode is *not* applicable to TensorFlow `SavedModel`s or their converted\n * forms. For those models, use `tf.loadGraphModel`.\n *\n * Example 1. Load a model from an HTTP server.\n *\n * ```js\n * const model = await tf.loadLayersModel(\n *     'https://storage.googleapis.com/tfjs-models/tfjs/iris_v1/model.json');\n * model.summary();\n * ```\n *\n * Example 2: Save `model`'s topology and weights to browser [local\n * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n * then load it back.\n *\n * ```js\n * const model = tf.sequential(\n *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n * console.log('Prediction from original model:');\n * model.predict(tf.ones([1, 3])).print();\n *\n * const saveResults = await model.save('localstorage://my-model-1');\n *\n * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');\n * console.log('Prediction from loaded model:');\n * loadedModel.predict(tf.ones([1, 3])).print();\n * ```\n *\n * Example 3. Saving `model`'s topology and weights to browser\n * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\n * then load it back.\n *\n * ```js\n * const model = tf.sequential(\n *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n * console.log('Prediction from original model:');\n * model.predict(tf.ones([1, 3])).print();\n *\n * const saveResults = await model.save('indexeddb://my-model-1');\n *\n * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');\n * console.log('Prediction from loaded model:');\n * loadedModel.predict(tf.ones([1, 3])).print();\n * ```\n *\n * Example 4. Load a model from user-selected files from HTML\n * [file input\n * elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file).\n *\n * ```js\n * // Note: this code snippet will not work without the HTML elements in the\n * //   page\n * const jsonUpload = document.getElementById('json-upload');\n * const weightsUpload = document.getElementById('weights-upload');\n *\n * const model = await tf.loadLayersModel(\n *     tf.io.browserFiles([jsonUpload.files[0], weightsUpload.files[0]]));\n * ```\n *\n * @param pathOrIOHandler Can be either of the two formats\n *   1. A string path to the `ModelAndWeightsConfig` JSON describing\n *      the model in the canonical TensorFlow.js format. For file://\n *      (tfjs-node-only), http:// and https:// schemas, the path can be\n *      either absolute or relative.\n *   2. An `tf.io.IOHandler` object that loads model artifacts with its `load`\n *      method.\n * @param options Optional configuration arguments for the model loading,\n *   including:\n *   - `strict`: Require that the provided weights exactly match those required\n *     by the layers.  Default true.  Passing false means that both extra\n *     weights and missing weights will be silently ignored.\n *   - ｀onProgress｀: A function of the signature `(fraction: number) => void',\n *     that can be used as the progress callback for the model loading.\n * @returns A `Promise` of `tf.LayersModel`, with the topology and weights\n *     loaded.\n */\n/** @doc {heading: 'Models', subheading: 'Loading'} */\nexport function loadLayersModel(\n    pathOrIOHandler: string|io.IOHandler,\n    options?: io.LoadOptions): Promise<LayersModel> {\n  if (options == null) {\n    options = {};\n  }\n  return loadLayersModelInternal(pathOrIOHandler, options);\n}\n\n/**\n * Used to instantiate an input to a model as a `tf.SymbolicTensor`.\n *\n * Users should call the `input` factory function for\n * consistency with other generator functions.\n *\n * Example:\n *\n * ```js\n * // Defines a simple logistic regression model with 32 dimensional input\n * // and 3 dimensional output.\n * const x = tf.input({shape: [32]});\n * const y = tf.layers.dense({units: 3, activation: 'softmax'}).apply(x);\n * const model = tf.model({inputs: x, outputs: y});\n * model.predict(tf.ones([2, 32])).print();\n * ```\n *\n * Note: `input` is only necessary when using `model`. When using\n * `sequential`, specify `inputShape` for the first layer or use `inputLayer`\n * as the first layer.\n */\n/** @doc {heading: 'Models', subheading: 'Inputs'} */\nexport function input(config: InputConfig): SymbolicTensor {\n  return Input(config);\n}\n\nexport function registerCallbackConstructor(\n    verbosityLevel: number,\n    callbackConstructor: BaseCallbackConstructor): void {\n  CallbackConstructorRegistry.registerCallbackConstructor(\n      verbosityLevel, callbackConstructor);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n// Layer activation functions\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, tidy} from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport {ActivationIdentifier} from './keras_format/activation_config';\nimport {deserializeKerasObject} from './utils/generic_utils';\n\n/**\n * Base class for Activations.\n *\n * Special note: due to cross-language compatibility reasons, the\n * static readonly className field in this family of classes must be set to\n * the initialLowerCamelCase name of the activation.\n */\nexport abstract class Activation extends serialization.Serializable {\n  abstract apply(tensor: Tensor, axis?: number): Tensor;\n  getConfig(): serialization.ConfigDict {\n    return {};\n  }\n}\n\n/**\n * Exponential linear unit (ELU).\n * Reference: https://arxiv.org/abs/1511.07289\n */\nexport class Elu extends Activation {\n  /** @nocollapse */\n  static readonly className = 'elu';\n  /**\n   * Calculate the activation function.\n   *\n   * @param x: Input.\n   * @param alpha: Scaling factor the negative section.\n   * @return Output of the ELU activation.\n   */\n  apply(x: Tensor, alpha = 1): Tensor {\n    return K.elu(x, alpha);\n  }\n}\nserialization.registerClass(Elu);\n\n/**\n * Scaled Exponential Linear Unit. (Klambauer et al., 2017).\n * Reference: Self-Normalizing Neural Networks, https://arxiv.org/abs/1706.02515\n * Notes:\n *   - To be used together with the initialization \"lecunNormal\".\n *   - To be used together with the dropout variant \"AlphaDropout\".\n */\nexport class Selu extends Activation {\n  /** @nocollapse */\n  static readonly className = 'selu';\n  apply(x: Tensor): Tensor {\n    return tfc.selu(x);\n  }\n}\nserialization.registerClass(Selu);\n\n/**\n *  Rectified linear unit\n */\nexport class Relu extends Activation {\n  /** @nocollapse */\n  static readonly className = 'relu';\n  apply(x: Tensor): Tensor {\n    return tfc.relu(x);\n  }\n}\nserialization.registerClass(Relu);\n\n/**\n * Rectified linear unit activation maxing out at 6.0.\n */\nexport class Relu6 extends Activation {\n  /** @nocollapse */\n  static readonly className = 'relu6';\n  apply(x: Tensor): Tensor {\n    return tidy(() => tfc.minimum(6.0, tfc.relu(x)));\n  }\n}\nserialization.registerClass(Relu6);\n\n//* Linear activation (no-op) */\nexport class Linear extends Activation {\n  /** @nocollapse */\n  static readonly className = 'linear';\n  apply(x: Tensor): Tensor {\n    return x;\n  }\n}\nserialization.registerClass(Linear);\n\n/**\n * Sigmoid activation function.\n */\nexport class Sigmoid extends Activation {\n  /** @nocollapse */\n  static readonly className = 'sigmoid';\n  apply(x: Tensor): Tensor {\n    return tfc.sigmoid(x);\n  }\n}\nserialization.registerClass(Sigmoid);\n\n/**\n * Segment-wise linear approximation of sigmoid.\n */\nexport class HardSigmoid extends Activation {\n  /** @nocollapse */\n  static readonly className = 'hardSigmoid';\n  apply(x: Tensor): Tensor {\n    return K.hardSigmoid(x);\n  }\n}\nserialization.registerClass(HardSigmoid);\n\n/**\n * Softplus activation function.\n */\nexport class Softplus extends Activation {\n  /** @nocollapse */\n  static readonly className = 'softplus';\n  apply(x: Tensor): Tensor {\n    return tfc.softplus(x);\n  }\n}\nserialization.registerClass(Softplus);\n\n/**\n * Softsign activation function.\n */\nexport class Softsign extends Activation {\n  /** @nocollapse */\n  static readonly className = 'softsign';\n  apply(x: Tensor): Tensor {\n    return K.softsign(x);\n  }\n}\nserialization.registerClass(Softsign);\n\n/**\n * Hyperbolic tangent function.\n */\nexport class Tanh extends Activation {\n  /** @nocollapse */\n  static readonly className = 'tanh';\n  apply(x: Tensor): Tensor {\n    return tfc.tanh(x);\n  }\n}\nserialization.registerClass(Tanh);\n\n/**\n * Softmax activation function\n */\nexport class Softmax extends Activation {\n  /** @nocollapse */\n  static readonly className = 'softmax';\n  /**\n   * Calculate the activation function.\n   *\n   * @param x Tensor.\n   * @param axis Integer, axis along which the softmax normalization is applied.\n   * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be\n   * an error.\n   *\n   * @returns a Tensor of the same shape as x\n   *\n   * @throws ValueError: In case `dim(x) < 2`.\n   */\n  apply(x: Tensor, axis: number = (-1)): Tensor {\n    return tfc.softmax(x, axis);\n  }\n}\nserialization.registerClass(Softmax);\n\n/**\n * Log softmax activation function\n */\nexport class LogSoftmax extends Activation {\n  /** @nocollapse */\n  static readonly className = 'logSoftmax';\n  /**\n   * Calculate the activation function of log softmax:\n   * log( exp(x_i) / sum(exp(x)) )\n   *\n   * @param x Tensor.\n   * @param axis Integer, axis along which the softmax normalization is applied.\n   * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be\n   * an error.\n   *\n   * @returns a Tensor of the same shape as x\n   *\n   * @throws ValueError: In case `dim(x) < 2`.\n   */\n  apply(x: Tensor, axis: number = (-1)): Tensor {\n    return tfc.logSoftmax(x, axis);\n  }\n}\nserialization.registerClass(LogSoftmax);\n\nexport function serializeActivation(activation: Activation): string {\n  return activation.getClassName();\n}\n\nexport function deserializeActivation(\n   config: serialization.ConfigDict,\n   customObjects: serialization.ConfigDict = {}): Activation {\n  return deserializeKerasObject(\n      config, serialization.SerializationMap.getMap().classNameMap,\n      customObjects, 'activation');\n}\n\nexport function getActivation(identifier: ActivationIdentifier|\n                              serialization.ConfigDict|Activation): Activation {\n  if (identifier == null) {\n    const config: serialization.ConfigDict = {};\n    config['className'] = 'linear';\n    config['config'] = {};\n    return deserializeActivation(config);\n  }\n  if (typeof identifier === 'string') {\n    const config: serialization.ConfigDict = {};\n    config['className'] = identifier;\n    config['config'] = {};\n    return deserializeActivation(config);\n  } else if (identifier instanceof Activation) {\n    return identifier;\n  } else {\n    return deserializeActivation(identifier);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* original source: keras/regularizers.py */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {abs, add, Scalar, serialization, sum, Tensor, tidy, zeros} from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport {deserializeKerasObject, serializeKerasObject} from './utils/generic_utils';\n\nfunction assertObjectArgs(args: L1Args | L2Args | L1L2Args): void {\n  if (args != null && typeof args !== 'object') {\n    throw new Error(\n        `Argument to L1L2 regularizer's constructor is expected to be an ` +\n        `object, but received: ${args}`);\n  }\n}\n\n/**\n * Regularizer base class.\n */\nexport abstract class Regularizer extends serialization.Serializable {\n  abstract apply(x: Tensor): Scalar;\n}\n\nexport interface L1L2Args {\n  /** L1 regularization rate. Defaults to 0.01. */\n  l1?: number;\n  /** L2 regularization rate. Defaults to 0.01. */\n  l2?: number;\n}\n\nexport interface L1Args {\n  /** L1 regularization rate. Defaults to 0.01. */\n  l1: number;\n}\n\nexport interface L2Args {\n  /** L2 regularization rate. Defaults to 0.01. */\n  l2: number;\n}\n\nexport class L1L2 extends Regularizer {\n  /** @nocollapse */\n  static className = 'L1L2';\n\n  private readonly l1: number;\n  private readonly l2: number;\n  private readonly hasL1: boolean;\n  private readonly hasL2: boolean;\n  constructor(args?: L1L2Args) {\n    super();\n\n    assertObjectArgs(args);\n\n    this.l1 = args == null || args.l1 == null ? 0.01 : args.l1;\n    this.l2 = args == null || args.l2 == null ? 0.01 : args.l2;\n    this.hasL1 = this.l1 !== 0;\n    this.hasL2 = this.l2 !== 0;\n  }\n\n  /**\n   * Porting note: Renamed from __call__.\n   * @param x Variable of which to calculate the regularization score.\n   */\n  apply(x: Tensor): Scalar {\n    return tidy(() => {\n      let regularization: Tensor = zeros([1]);\n      if (this.hasL1) {\n        regularization = add(regularization, sum(tfc.mul(this.l1, abs(x))));\n      }\n      if (this.hasL2) {\n        regularization =\n            add(regularization, sum(tfc.mul(this.l2, K.square(x))));\n      }\n      return regularization.asScalar();\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {'l1': this.l1, 'l2': this.l2};\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict): T {\n    return new cls({l1: config['l1'] as number, l2: config['l2'] as number});\n  }\n}\nserialization.registerClass(L1L2);\n\nexport function l1(args?: L1Args) {\n  assertObjectArgs(args);\n  return new L1L2({l1: args != null ? args.l1 : null, l2: 0});\n}\n\nexport function l2(args: L2Args) {\n  assertObjectArgs(args);\n  return new L1L2({l2: args != null ? args.l2 : null, l1: 0});\n}\n\n/** @docinline */\nexport type RegularizerIdentifier = 'l1l2'|string;\n\n// Maps the JavaScript-like identifier keys to the corresponding keras symbols.\nexport const REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP:\n    {[identifier in RegularizerIdentifier]: string} = {\n      'l1l2': 'L1L2'\n    };\n\nexport function serializeRegularizer(constraint: Regularizer):\n    serialization.ConfigDictValue {\n  return serializeKerasObject(constraint);\n}\n\nexport function deserializeRegularizer(\n    config: serialization.ConfigDict,\n    customObjects: serialization.ConfigDict = {}): Regularizer {\n  return deserializeKerasObject(\n      config, serialization.SerializationMap.getMap().classNameMap,\n      customObjects, 'regularizer');\n}\n\nexport function getRegularizer(identifier: RegularizerIdentifier|\n                               serialization.ConfigDict|\n                               Regularizer): Regularizer {\n  if (identifier == null) {\n    return null;\n  }\n  if (typeof identifier === 'string') {\n    const className = identifier in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n        REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n        identifier;\n    const config = {className, config: {}};\n    return deserializeRegularizer(config);\n  } else if (identifier instanceof Regularizer) {\n    return identifier;\n  } else {\n    return deserializeRegularizer(identifier);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n *  Advanced activation layers.\n */\n\nimport {clipByValue, elu, leakyRelu, prelu, relu, serialization, Tensor} from '@tensorflow/tfjs-core';\n\nimport {Softmax as softmaxActivation} from '../activations';\nimport {cast} from '../backend/tfjs_backend';\nimport {Constraint, getConstraint, serializeConstraint} from '../constraints';\nimport {InputSpec, Layer, LayerArgs} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\nexport declare interface ReLULayerArgs extends LayerArgs {\n  /**\n   * Float, the maximum output value.\n   */\n  maxValue?: number;\n}\n\nexport class ReLU extends Layer {\n  /** @nocollapse */\n  static className = 'ReLU';\n  maxValue: number;\n\n  constructor(args?: ReLULayerArgs) {\n    super(args == null ? {} : args);\n    this.supportsMasking = true;\n    if (args != null) {\n      this.maxValue = args.maxValue;\n    }\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    inputs = getExactlyOneTensor(inputs);\n    let output = relu(inputs);\n    if (this.maxValue != null) {\n      output = clipByValue(output, 0, this.maxValue);\n    }\n    return output;\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {maxValue: this.maxValue};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(ReLU);\n\nexport declare interface LeakyReLULayerArgs extends LayerArgs {\n  /**\n   * Float `>= 0`. Negative slope coefficient. Defaults to `0.3`.\n   */\n  alpha?: number;\n}\n\nexport class LeakyReLU extends Layer {\n  /** @nocollapse */\n  static className = 'LeakyReLU';\n  readonly alpha: number;\n\n  readonly DEFAULT_ALPHA = 0.3;\n\n  constructor(args?: LeakyReLULayerArgs) {\n    super(args == null ? {} : args);\n    if (args == null) {\n      args = {};\n    }\n    this.alpha = args.alpha == null ? this.DEFAULT_ALPHA : args.alpha;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    const x = getExactlyOneTensor(inputs);\n    return leakyRelu(x, this.alpha);\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {alpha: this.alpha};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(LeakyReLU);\n\nexport declare interface PReLULayerArgs extends LayerArgs {\n  /**\n   * Initializer for the learnable alpha.\n   */\n  alphaInitializer?: Initializer|InitializerIdentifier;\n\n  /**\n   * Regularizer for the learnable alpha.\n   */\n  alphaRegularizer?: Regularizer;\n\n  /**\n   * Constraint for the learnable alpha.\n   */\n  alphaConstraint?: Constraint;\n\n  /**\n   * The axes along which to share learnable parameters for the activation\n   * function. For example, if the incoming feature maps are from a 2D\n   * convolution with output shape `[numExamples, height, width, channels]`,\n   * and you wish to share parameters across space (height and width) so that\n   * each filter channels has only one set of parameters, set\n   * `shared_axes: [1, 2]`.\n   */\n  sharedAxes?: number|number[];\n}\n\nexport class PReLU extends Layer {\n  /** @nocollapse */\n  static className = 'PReLU';\n  private readonly alphaInitializer: Initializer;\n  private readonly alphaRegularizer: Regularizer;\n  private readonly alphaConstraint: Constraint;\n  private readonly sharedAxes: number[];\n  private alpha: LayerVariable;\n\n  readonly DEFAULT_ALPHA_INITIALIZER: InitializerIdentifier = 'zeros';\n\n  constructor(args?: PReLULayerArgs) {\n    super(args == null ? {} : args);\n    if (args == null) {\n      args = {};\n    }\n\n    this.supportsMasking = true;\n    this.alphaInitializer =\n        getInitializer(args.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER);\n    this.alphaRegularizer = getRegularizer(args.alphaRegularizer);\n    this.alphaConstraint = getConstraint(args.alphaConstraint);\n    if (args.sharedAxes == null) {\n      this.sharedAxes = null;\n    } else if (Array.isArray(args.sharedAxes)) {\n      this.sharedAxes = args.sharedAxes;\n    } else if (typeof args.sharedAxes === 'number') {\n      this.sharedAxes = [args.sharedAxes];\n    } else {\n      throw new ValueError(\n          `Expected sharedAxes to be a number or an array of numbers, ` +\n          `but got ${args.sharedAxes}`);\n    }\n  }\n\n  build(inputShape: Shape|Shape[]) {\n    inputShape = getExactlyOneShape(inputShape);\n    const paramShape: Shape = inputShape.slice(1);\n    if (this.sharedAxes != null) {\n      for (const i of this.sharedAxes) {\n        paramShape[i - 1] = 1;\n      }\n    }\n    this.alpha = this.addWeight(\n        'alpha', paramShape, 'float32', this.alphaInitializer,\n        this.alphaRegularizer, true, this.alphaConstraint);\n    // Set input spec.\n    const axes: {[axis: number]: number} = {};\n    if (this.sharedAxes != null) {\n      for (let i = 1; i < inputShape.length; ++i) {\n        axes[i] = inputShape[i];\n      }\n    }\n    this.inputSpec = [new InputSpec({\n      ndim: inputShape.length,\n      axes,\n    })];\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    inputs = getExactlyOneTensor(inputs);\n    return prelu(inputs, this.alpha.read());\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      alphaInitializer: serializeInitializer(this.alphaInitializer),\n      alphaRegularizer: serializeRegularizer(this.alphaRegularizer),\n      alphaConstraint: serializeConstraint(this.alphaConstraint),\n      sharedAxes: this.sharedAxes\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(PReLU);\n\nexport declare interface ELULayerArgs extends LayerArgs {\n  /**\n   * Float `>= 0`. Negative slope coefficient. Defaults to `1.0`.\n   */\n  alpha?: number;\n}\n\nexport class ELU extends Layer {\n  /** @nocollapse */\n  static className = 'ELU';\n  readonly alpha: number;\n\n  readonly DEFAULT_ALPHA = 1.0;\n\n  constructor(args?: ELULayerArgs) {\n    super(args == null ? {} : args);\n    if (args == null) {\n      args = {};\n    }\n\n    if (args.alpha != null && args.alpha !== this.DEFAULT_ALPHA) {\n      throw new NotImplementedError(\n          `Non-default alpha value (${args.alpha}) is not supported by the ` +\n          `ELU layer yet.`);\n    }\n\n    this.alpha = args.alpha == null ? this.DEFAULT_ALPHA : args.alpha;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    const x = getExactlyOneTensor(inputs);\n    return elu(x);\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {alpha: this.alpha};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(ELU);\n\nexport declare interface ThresholdedReLULayerArgs extends LayerArgs {\n  /**\n   * Float >= 0. Threshold location of activation.\n   */\n  theta?: number;\n}\n\nexport class ThresholdedReLU extends Layer {\n  /** @nocollapse */\n  static className = 'ThresholdedReLU';\n  readonly theta: number;\n\n  readonly DEFAULT_THETA = 1.0;\n\n  constructor(args?: ThresholdedReLULayerArgs) {\n    super(args == null ? {} : args);\n    if (args == null) {\n      args = {};\n    }\n\n    this.theta = args.theta == null ? this.DEFAULT_THETA : args.theta;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    const x = getExactlyOneTensor(inputs);\n    return x.mul(cast(x.greater(this.theta), 'float32'));\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {theta: this.theta};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(ThresholdedReLU);\n\nexport declare interface SoftmaxLayerArgs extends LayerArgs {\n  /**\n   * Integer, axis along which the softmax normalization is applied.\n   * Defaults to `-1` (i.e., the last axis).\n   */\n  axis?: number;\n}\n\nexport class Softmax extends Layer {\n  /** @nocollapse */\n  static className = 'Softmax';\n  readonly axis: number;\n  readonly softmax: (t: Tensor, a?: number) => Tensor;\n  readonly DEFAULT_AXIS = 1.0;\n\n  constructor(args?: SoftmaxLayerArgs) {\n    super(args == null ? {} : args);\n    if (args == null) {\n      args = {};\n    }\n    this.softmax = new softmaxActivation().apply;\n    this.axis = args.axis == null ? this.DEFAULT_AXIS : args.axis;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    const x = getExactlyOneTensor(inputs);\n    return this.softmax(x, this.axis);\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {axis: this.axis};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Softmax);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {ValueError} from '../errors';\nimport {PaddingMode} from '../keras_format/common';\n\nimport {pyListRepeat} from './generic_utils';\nimport {isInteger, max} from './math_utils';\n\n/**\n * Transforms a single number of array of numbers into an array of numbers.\n * @param value\n * @param n: The size of the tuple to be returned.\n * @param name: Name of the parameter, used for generating error messages.\n * @returns An array of numbers.\n */\nexport function normalizeArray(\n    value: number|number[], n: number, name: string): number[] {\n  if (typeof value === 'number') {\n    return pyListRepeat(value, n);\n  } else {\n    if (value.length !== n) {\n      throw new ValueError(\n          `The ${name} argument must be an integer or tuple of ${n} integers.` +\n          ` Received: ${value.length} elements.`);\n    }\n    for (let i = 0; i < n; ++i) {\n      const singleValue = value[i];\n      if (!isInteger(singleValue)) {\n        throw new ValueError(\n            `The ${name} argument must be an integer or tuple of ${n}` +\n            ` integers. Received: ${JSON.stringify(value)} including a` +\n            ` non-integer number ${singleValue}`);\n      }\n    }\n    return value;\n  }\n}\n\n/**\n * Determines output length of a convolution given input length.\n * @param inputLength\n * @param filterSize\n * @param padding\n * @param stride\n * @param dilation: dilation rate.\n */\nexport function convOutputLength(\n    inputLength: number, filterSize: number, padding: PaddingMode,\n    stride: number, dilation = 1): number {\n  if (inputLength == null) {\n    return inputLength;\n  }\n  const dilatedFilterSize = filterSize + (filterSize - 1) * (dilation - 1);\n  let outputLength: number;\n  if (padding === 'same') {\n    outputLength = inputLength;\n  } else {  // VALID\n    outputLength = inputLength - dilatedFilterSize + 1;\n  }\n  return Math.floor((outputLength + stride - 1) / stride);\n}\n\nexport function deconvLength(\n    dimSize: number, strideSize: number, kernelSize: number,\n    padding: PaddingMode): number {\n  if (dimSize == null) {\n    return null;\n  }\n\n  if (padding === 'valid') {\n    dimSize = dimSize * strideSize + max([kernelSize - strideSize, 0]);\n  } else if (padding === 'same') {\n    dimSize = dimSize * strideSize;\n  } else {\n    throw new ValueError(`Unsupport padding mode: ${padding}.`);\n  }\n  return dimSize;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Convolutional Layers\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {fused, serialization, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, tidy} from '@tensorflow/tfjs-core';\n\nimport {Activation, getActivation, serializeActivation} from '../activations';\nimport {imageDataFormat} from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport {checkDataFormat, checkPaddingMode} from '../common';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {InputSpec, Layer, LayerArgs} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {ActivationIdentifier} from '../keras_format/activation_config';\nimport {DataFormat, PaddingMode, Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport {convOutputLength, deconvLength, normalizeArray} from '../utils/conv_utils';\nimport * as generic_utils from '../utils/generic_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\n/**\n * Transpose and cast the input before the conv2d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv2DInput(\n    x: Tensor, dataFormat: DataFormat): Tensor {\n  // TODO(cais): Cast type to float32 if not.\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 1]);  // NCHW -> NHWC.\n    } else {\n      return x;\n    }\n  });\n}\n\n/**\n * Transpose and cast the input before the conv3d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv3DInput(\n    x: Tensor, dataFormat: DataFormat): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 4, 1]);  // NCDHW -> NDHWC.\n    } else {\n      return x;\n    }\n  });\n}\n\n/**\n * 1D-convolution with bias added.\n *\n * Porting Note: This function does not exist in the Python Keras backend.\n *   It is exactly the same as `conv2d`, except the added `bias`.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.\n * @param bias Bias, rank-3, of shape `[outDepth]`.\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1dWithBias(\n    x: Tensor, kernel: Tensor, bias: Tensor, strides = 1, padding = 'valid',\n    dataFormat?: DataFormat, dilationRate = 1): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    // Check the ranks of x, kernel and bias.\n    if (x.shape.length !== 3) {\n      throw new ValueError(\n          `The input of a conv1dWithBias operation should be 3, but is ` +\n          `${x.shape.length} instead.`);\n    }\n    if (kernel.shape.length !== 3) {\n      throw new ValueError(\n          `The kernel for a conv1dWithBias operation should be 3, but is ` +\n          `${kernel.shape.length} instead`);\n    }\n    if (bias != null && bias.shape.length !== 1) {\n      throw new ValueError(\n          `The bias for a conv1dWithBias operation should be 1, but is ` +\n          `${kernel.shape.length} instead`);\n    }\n    // TODO(cais): Support CAUSAL padding mode.\n    if (dataFormat === 'channelsFirst') {\n      x = tfc.transpose(x, [0, 2, 1]);  // NCW -> NWC.\n    }\n    if (padding === 'causal') {\n      throw new NotImplementedError(\n          'The support for CAUSAL padding mode in conv1dWithBias is not ' +\n          'implemented yet.');\n    }\n    let y: Tensor = tfc.conv1d(\n        x as Tensor2D | Tensor3D, kernel as Tensor3D, strides,\n        padding === 'same' ? 'same' : 'valid', 'NWC', dilationRate);\n    if (bias != null) {\n      y = K.biasAdd(y, bias);\n    }\n    return y;\n  });\n}\n\n/**\n * 1D-convolution.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.s\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1d(\n    x: Tensor, kernel: Tensor, strides = 1, padding = 'valid',\n    dataFormat?: DataFormat, dilationRate = 1): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv1dWithBias(\n        x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n\n/**\n * 2D Convolution\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 2D pooling.\n */\nexport function conv2d(\n    x: Tensor, kernel: Tensor, strides = [1, 1], padding = 'valid',\n    dataFormat?: DataFormat, dilationRate?: [number, number]): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv2dWithBiasActivation(\n        x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n\n/**\n * 2D Convolution with an added bias and optional activation.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv2d`, except the added `bias`.\n */\nexport function conv2dWithBiasActivation(\n    x: Tensor, kernel: Tensor, bias: Tensor, strides = [1, 1],\n    padding = 'valid', dataFormat?: DataFormat, dilationRate?: [number, number],\n    activation: fused.Activation = null): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    if (x.rank !== 3 && x.rank !== 4) {\n      throw new ValueError(\n          `conv2dWithBiasActivation expects input to be of rank 3 or 4, ` +\n          `but received ${x.rank}.`);\n    }\n    if (kernel.rank !== 3 && kernel.rank !== 4) {\n      throw new ValueError(\n          `conv2dWithBiasActivation expects kernel to be of rank 3 or 4, ` +\n          `but received ${x.rank}.`);\n    }\n    let y = preprocessConv2DInput(x, dataFormat);\n    if (padding === 'causal') {\n      throw new NotImplementedError(\n          'The support for CAUSAL padding mode in conv1dWithBias is not ' +\n          'implemented yet.');\n    }\n    y = tfc.fused.conv2d({\n      x: y as Tensor3D | Tensor4D,\n      filter: kernel as Tensor4D,\n      strides: strides as [number, number],\n      pad: padding === 'same' ? 'same' : 'valid',\n      dilations: dilationRate,\n      dataFormat: 'NHWC',\n      bias,\n      activation\n    });\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n    return y;\n  });\n}\n\n/**\n * 3D Convolution.\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 3D convolution.\n */\nexport function conv3d(\n    x: Tensor, kernel: Tensor, strides = [1, 1, 1], padding = 'valid',\n    dataFormat?: DataFormat, dilationRate?: [number, number, number]): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv3dWithBias(\n        x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n\n/**\n * 3D Convolution with an added bias.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv3d`, except the added `bias`.\n */\nexport function conv3dWithBias(\n    x: Tensor, kernel: Tensor, bias: Tensor, strides = [1, 1, 1],\n    padding = 'valid', dataFormat?: DataFormat,\n    dilationRate?: [number, number, number]): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    if (x.rank !== 4 && x.rank !== 5) {\n      throw new ValueError(\n          `conv3dWithBias expects input to be of rank 4 or 5, but received ` +\n          `${x.rank}.`);\n    }\n    if (kernel.rank !== 4 && kernel.rank !== 5) {\n      throw new ValueError(\n          `conv3dWithBias expects kernel to be of rank 4 or 5, but received ` +\n          `${x.rank}.`);\n    }\n    let y = preprocessConv3DInput(x, dataFormat);\n    if (padding === 'causal') {\n      throw new NotImplementedError(\n          'The support for CAUSAL padding mode in conv3dWithBias is not ' +\n          'implemented yet.');\n    }\n    y = tfc.conv3d(\n        y as Tensor4D | tfc.Tensor<tfc.Rank.R5>,\n        kernel as tfc.Tensor<tfc.Rank.R5>, strides as [number, number, number],\n        padding === 'same' ? 'same' : 'valid', 'NDHWC', dilationRate);\n    if (bias != null) {\n      y = K.biasAdd(y, bias as Tensor1D);\n    }\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 4, 1, 2, 3]);\n    }\n    return y;\n  });\n}\n\n/**\n * Base LayerConfig for depthwise and non-depthwise convolutional layers.\n */\nexport declare interface BaseConvLayerArgs extends LayerArgs {\n  /**\n   * The dimensions of the convolution window. If kernelSize is a number, the\n   * convolutional window will be square.\n   */\n  kernelSize: number|number[];\n\n  /**\n   * The strides of the convolution in each dimension. If strides is a number,\n   * strides in both dimensions are equal.\n   *\n   * Specifying any stride value != 1 is incompatible with specifying any\n   * `dilationRate` value != 1.\n   */\n  strides?: number|number[];\n\n  /**\n   * Padding mode.\n   */\n  padding?: PaddingMode;\n\n  /**\n   * Format of the data, which determines the ordering of the dimensions in\n   * the inputs.\n   *\n   * `channels_last` corresponds to inputs with shape\n   *   `(batch, ..., channels)`\n   *\n   *  `channels_first` corresponds to inputs with shape `(batch, channels,\n   * ...)`.\n   *\n   * Defaults to `channels_last`.\n   */\n  dataFormat?: DataFormat;\n\n  /**\n   * The dilation rate to use for the dilated convolution in each dimension.\n   * Should be an integer or array of two or three integers.\n   *\n   * Currently, specifying any `dilationRate` value != 1 is incompatible with\n   * specifying any `strides` value != 1.\n   */\n  dilationRate?: number|[number]|[number, number]|[number, number, number];\n\n  /**\n   * Activation function of the layer.\n   *\n   * If you don't specify the activation, none is applied.\n   */\n  activation?: ActivationIdentifier;\n\n  /**\n   * Whether the layer uses a bias vector. Defaults to `true`.\n   */\n  useBias?: boolean;\n\n  /**\n   * Initializer for the convolutional kernel weights matrix.\n   */\n  kernelInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the bias vector.\n   */\n  biasInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Constraint for the convolutional kernel weights.\n   */\n  kernelConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint for the bias vector.\n   */\n  biasConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Regularizer function applied to the kernel weights matrix.\n   */\n  kernelRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the bias vector.\n   */\n  biasRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the activation.\n   */\n  activityRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\n/**\n * LayerConfig for non-depthwise convolutional layers.\n * Applies to non-depthwise convolution of all ranks (e.g, Conv1D, Conv2D,\n * Conv3D).\n */\nexport declare interface ConvLayerArgs extends BaseConvLayerArgs {\n  /**\n   * The dimensionality of the output space (i.e. the number of filters in the\n   * convolution).\n   */\n  filters: number;\n}\n\n/**\n * Abstract convolution layer.\n */\nexport abstract class BaseConv extends Layer {\n  protected readonly rank: number;\n  protected readonly kernelSize: number[];\n  protected readonly strides: number[];\n  protected readonly padding: PaddingMode;\n  protected readonly dataFormat: DataFormat;\n  protected readonly activation: Activation;\n  protected readonly useBias: boolean;\n  protected readonly dilationRate: number[];\n\n  // Bias-related members are here because all convolution subclasses use the\n  // same configuration parmeters to control bias.  Kernel-related members\n  // are in subclass `Conv` because some subclasses use different parameters to\n  // control kernel properties, for instance, `DepthwiseConv2D` uses\n  // `depthwiseInitializer` instead of `kernelInitializer`.\n  protected readonly biasInitializer?: Initializer;\n  protected readonly biasConstraint?: Constraint;\n  protected readonly biasRegularizer?: Regularizer;\n\n  protected bias: LayerVariable = null;\n\n  readonly DEFAULT_KERNEL_INITIALIZER: InitializerIdentifier = 'glorotNormal';\n  readonly DEFAULT_BIAS_INITIALIZER: InitializerIdentifier = 'zeros';\n\n  constructor(rank: number, args: BaseConvLayerArgs) {\n    super(args as LayerArgs);\n    BaseConv.verifyArgs(args);\n    this.rank = rank;\n    generic_utils.assertPositiveInteger(this.rank, 'rank');\n    if (this.rank !== 1 && this.rank !== 2 && this.rank !== 3) {\n      throw new NotImplementedError(\n          `Convolution layer for rank other than 1, 2, or 3 (${\n              this.rank}) is ` +\n          `not implemented yet.`);\n    }\n    this.kernelSize = normalizeArray(args.kernelSize, rank, 'kernelSize');\n    this.strides = normalizeArray(\n        args.strides == null ? 1 : args.strides, rank, 'strides');\n    this.padding = args.padding == null ? 'valid' : args.padding;\n    checkPaddingMode(this.padding);\n    this.dataFormat =\n        args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.activation = getActivation(args.activation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.dilationRate = normalizeArray(\n        args.dilationRate == null ? 1 : args.dilationRate, rank,\n        'dilationRate');\n    if (this.rank === 1 &&\n        (Array.isArray(this.dilationRate) && this.dilationRate.length !== 1)) {\n      throw new ValueError(\n          `dilationRate must be a number or an array of a single number ` +\n          `for 1D convolution, but received ` +\n          `${JSON.stringify(this.dilationRate)}`);\n    } else if (this.rank === 2) {\n      if (typeof this.dilationRate === 'number') {\n        this.dilationRate = [this.dilationRate, this.dilationRate];\n      } else if (this.dilationRate.length !== 2) {\n        throw new ValueError(\n            `dilationRate must be a number or array of two numbers for 2D ` +\n            `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n      }\n    } else if (this.rank === 3) {\n      if (typeof this.dilationRate === 'number') {\n        this.dilationRate =\n            [this.dilationRate, this.dilationRate, this.dilationRate];\n      } else if (this.dilationRate.length !== 3) {\n        throw new ValueError(\n            `dilationRate must be a number or array of three numbers for 3D ` +\n            `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n      }\n    }\n  }\n\n  protected static verifyArgs(args: BaseConvLayerArgs) {\n    // Check config.kernelSize type and shape.\n    generic_utils.assert(\n        'kernelSize' in args, `required key 'kernelSize' not in config`);\n    if (typeof args.kernelSize !== 'number' &&\n        !generic_utils.checkArrayTypeAndLength(\n            args.kernelSize, 'number', 1, 3)) {\n      throw new ValueError(\n          `BaseConv expects config.kernelSize to be number or number[] with ` +\n          `length 1, 2, or 3, but received ${\n              JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      kernelSize: this.kernelSize,\n      strides: this.strides,\n      padding: this.padding,\n      dataFormat: this.dataFormat,\n      dilationRate: this.dilationRate,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      biasConstraint: serializeConstraint(this.biasConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n\n/**\n * Abstract nD convolution layer.  Ancestor of convolution layers which reduce\n * across channels, i.e., Conv1D and Conv2D, but not DepthwiseConv2D.\n */\nexport abstract class Conv extends BaseConv {\n  protected readonly filters: number;\n\n  protected kernel: LayerVariable = null;\n\n  // Bias-related properties are stored in the superclass `BaseConv` because all\n  // convolution subclasses use the same configuration parameters to control\n  // bias. Kernel-related properties are defined here rather than in the\n  // superclass because some convolution subclasses use different names and\n  // configuration parameters for their internal kernel state.\n  protected readonly kernelInitializer?: Initializer;\n  protected readonly kernelConstraint?: Constraint;\n  protected readonly kernelRegularizer?: Regularizer;\n\n  constructor(rank: number, args: ConvLayerArgs) {\n    super(rank, args as BaseConvLayerArgs);\n    Conv.verifyArgs(args);\n    this.filters = args.filters;\n    generic_utils.assertPositiveInteger(this.filters, 'filters');\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(\n          `The channel dimension of the input should be defined. ` +\n          `Found ${inputShape[channelAxis]}`);\n    }\n    const inputDim = inputShape[channelAxis];\n\n    const kernelShape = this.kernelSize.concat([inputDim, this.filters]);\n\n    this.kernel = this.addWeight(\n        'kernel', kernelShape, null, this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], null, this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    this.inputSpec = [{ndim: this.rank + 2, axes: {[channelAxis]: inputDim}}];\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let outputs: Tensor;\n      const biasValue = this.bias == null ? null : this.bias.read();\n      const fusedActivationName = generic_utils.mapActivationToFusedKernel(\n                                            this.activation.getClassName());\n\n      if (fusedActivationName != null && this.rank === 2) {\n        outputs = conv2dWithBiasActivation(\n            inputs, this.kernel.read(), biasValue, this.strides, this.padding,\n            this.dataFormat, this.dilationRate as [number, number],\n            fusedActivationName);\n      } else {\n        if (this.rank === 1) {\n          outputs = conv1dWithBias(\n              inputs, this.kernel.read(), biasValue, this.strides[0],\n              this.padding, this.dataFormat, this.dilationRate[0]);\n        } else if (this.rank === 2) {\n          // TODO(cais): Move up to constructor.\n          outputs = conv2dWithBiasActivation(\n              inputs, this.kernel.read(), biasValue, this.strides, this.padding,\n              this.dataFormat, this.dilationRate as [number, number]);\n        } else if (this.rank === 3) {\n          outputs = conv3dWithBias(\n              inputs, this.kernel.read(), biasValue, this.strides, this.padding,\n              this.dataFormat, this.dilationRate as [number, number, number]);\n        } else {\n          throw new NotImplementedError(\n              'convolutions greater than 3D are not implemented yet.');\n        }\n\n        if (this.activation != null) {\n          outputs = this.activation.apply(outputs);\n        }\n      }\n\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const newSpace: number[] = [];\n    const space = (this.dataFormat === 'channelsLast') ?\n        inputShape.slice(1, inputShape.length - 1) :\n        inputShape.slice(2);\n    for (let i = 0; i < space.length; ++i) {\n      const newDim = convOutputLength(\n          space[i], this.kernelSize[i], this.padding, this.strides[i],\n          typeof this.dilationRate === 'number' ? this.dilationRate :\n                                                  this.dilationRate[i]);\n      newSpace.push(newDim);\n    }\n\n    let outputShape = [inputShape[0]];\n    if (this.dataFormat === 'channelsLast') {\n      outputShape = outputShape.concat(newSpace);\n      outputShape.push(this.filters);\n    } else {\n      outputShape.push(this.filters);\n      outputShape = outputShape.concat(newSpace);\n    }\n    return outputShape;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      filters: this.filters,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  protected static verifyArgs(args: ConvLayerArgs) {\n    // Check config.filters type, shape, and value.\n    if (!('filters' in args) || typeof args.filters !== 'number' ||\n        args.filters < 1) {\n      throw new ValueError(\n          `Convolution layer expected config.filters to be a 'number' > 0 ` +\n          `but got ${JSON.stringify(args.filters)}`);\n    }\n  }\n}\n\nexport class Conv2D extends Conv {\n  /** @nocollapse */\n  static className = 'Conv2D';\n  constructor(args: ConvLayerArgs) {\n    super(2, args);\n    Conv2D.verifyArgs(args);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    return config;\n  }\n\n  protected static verifyArgs(args: ConvLayerArgs) {\n    // config.kernelSize must be a number or array of numbers.\n    if ((typeof args.kernelSize !== 'number') &&\n        !generic_utils.checkArrayTypeAndLength(\n            args.kernelSize, 'number', 1, 2)) {\n      throw new ValueError(\n          `Conv2D expects config.kernelSize to be number or number[] with ` +\n          `length 1 or 2, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n}\nserialization.registerClass(Conv2D);\n\nexport class Conv3D extends Conv {\n  /** @nocollapse */\n  static className = 'Conv3D';\n  constructor(args: ConvLayerArgs) {\n    super(3, args);\n    Conv3D.verifyArgs(args);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    return config;\n  }\n\n  protected static verifyArgs(args: ConvLayerArgs) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number') {\n      if (!(Array.isArray(args.kernelSize) &&\n            (args.kernelSize.length === 1 || args.kernelSize.length === 3))) {\n        throw new ValueError(\n            `Conv3D expects config.kernelSize to be number or` +\n            ` [number, number, number], but received ${\n                JSON.stringify(args.kernelSize)}.`);\n      }\n    }\n  }\n}\nserialization.registerClass(Conv3D);\n\nexport class Conv2DTranspose extends Conv2D {\n  /** @nocollapse */\n  static className = 'Conv2DTranspose';\n  inputSpec: InputSpec[];\n\n  constructor(args: ConvLayerArgs) {\n    super(args);\n    this.inputSpec = [new InputSpec({ndim: 4})];\n\n    if (this.padding !== 'same' && this.padding !== 'valid') {\n      throw new ValueError(\n          `Conv2DTranspose currently supports only padding modes 'same' ` +\n          `and 'valid', but received padding mode ${this.padding}`);\n    }\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (inputShape.length !== 4) {\n      throw new ValueError(\n          'Input should have rank 4; Received input shape: ' +\n          JSON.stringify(inputShape));\n    }\n\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(\n          'The channel dimension of the inputs should be defined. ' +\n          'Found `None`.');\n    }\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n\n    this.kernel = this.addWeight(\n        'kernel', kernelShape, 'float32', this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], 'float32', this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    // Set input spec.\n    this.inputSpec =\n        [new InputSpec({ndim: 4, axes: {[channelAxis]: inputDim}})];\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs);\n      if (input.shape.length !== 4) {\n        throw new ValueError(\n            `Conv2DTranspose.call() expects input tensor to be rank-4, but ` +\n            `received a tensor of rank-${input.shape.length}`);\n      }\n\n      const inputShape = input.shape;\n      const batchSize = inputShape[0];\n\n      let hAxis: number;\n      let wAxis: number;\n      if (this.dataFormat === 'channelsFirst') {\n        hAxis = 2;\n        wAxis = 3;\n      } else {\n        hAxis = 1;\n        wAxis = 2;\n      }\n\n      const height = inputShape[hAxis];\n      const width = inputShape[wAxis];\n      const kernelH = this.kernelSize[0];\n      const kernelW = this.kernelSize[1];\n      const strideH = this.strides[0];\n      const strideW = this.strides[1];\n\n      // Infer the dynamic output shape.\n      const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n      const outWidth = deconvLength(width, strideW, kernelW, this.padding);\n\n      // Porting Note: We don't branch based on `this.dataFormat` here,\n      // because\n      //   the tjfs-core function `conv2dTranspose` called below always\n      //   assumes channelsLast.\n      const outputShape: [number, number, number, number] =\n          [batchSize, outHeight, outWidth, this.filters];\n\n      if (this.dataFormat !== 'channelsLast') {\n        input = tfc.transpose(input, [0, 2, 3, 1]);\n      }\n      let outputs = tfc.conv2dTranspose(\n          input as Tensor4D, this.kernel.read() as Tensor4D, outputShape,\n          this.strides as [number, number], this.padding as 'same' | 'valid');\n      if (this.dataFormat !== 'channelsLast') {\n        outputs = tfc.transpose(outputs, [0, 3, 1, 2]);\n      }\n\n      if (this.bias != null) {\n        outputs =\n            K.biasAdd(outputs, this.bias.read(), this.dataFormat) as Tensor4D;\n      }\n      if (this.activation != null) {\n        outputs = this.activation.apply(outputs) as Tensor4D;\n      }\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n\n    let channelAxis: number;\n    let heightAxis: number;\n    let widthAxis: number;\n    if (this.dataFormat === 'channelsFirst') {\n      channelAxis = 1;\n      heightAxis = 2;\n      widthAxis = 3;\n    } else {\n      channelAxis = 3;\n      heightAxis = 1;\n      widthAxis = 2;\n    }\n\n    const kernelH = this.kernelSize[0];\n    const kernelW = this.kernelSize[1];\n    const strideH = this.strides[0];\n    const strideW = this.strides[1];\n\n    outputShape[channelAxis] = this.filters;\n    outputShape[heightAxis] =\n        deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n    outputShape[widthAxis] =\n        deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n    return outputShape;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['dilationRate'];\n    return config;\n  }\n}\nserialization.registerClass(Conv2DTranspose);\n\nexport declare interface SeparableConvLayerArgs extends ConvLayerArgs {\n  /**\n   * The number of depthwise convolution output channels for each input\n   * channel.\n   * The total number of depthwise convolution output channels will be equal\n   * to `filtersIn * depthMultiplier`. Default: 1.\n   */\n  depthMultiplier?: number;\n\n  /**\n   * Initializer for the depthwise kernel matrix.\n   */\n  depthwiseInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the pointwise kernel matrix.\n   */\n  pointwiseInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Regularizer function applied to the depthwise kernel matrix.\n   */\n  depthwiseRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the pointwise kernel matrix.\n   */\n  pointwiseRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Constraint function applied to the depthwise kernel matrix.\n   */\n  depthwiseConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the pointwise kernel matrix.\n   */\n  pointwiseConstraint?: ConstraintIdentifier|Constraint;\n}\n\nexport class SeparableConv extends Conv {\n  /** @nocollapse */\n  static className = 'SeparableConv';\n\n  readonly depthMultiplier: number;\n\n  protected readonly depthwiseInitializer?: Initializer;\n  protected readonly depthwiseRegularizer?: Regularizer;\n  protected readonly depthwiseConstraint?: Constraint;\n  protected readonly pointwiseInitializer?: Initializer;\n  protected readonly pointwiseRegularizer?: Regularizer;\n  protected readonly pointwiseConstraint?: Constraint;\n\n  readonly DEFAULT_DEPTHWISE_INITIALIZER: InitializerIdentifier =\n      'glorotUniform';\n  readonly DEFAULT_POINTWISE_INITIALIZER: InitializerIdentifier =\n      'glorotUniform';\n\n  protected depthwiseKernel: LayerVariable = null;\n  protected pointwiseKernel: LayerVariable = null;\n\n  constructor(rank: number, config?: SeparableConvLayerArgs) {\n    super(rank, config);\n\n    if (config.filters == null) {\n      throw new ValueError(\n          'The `filters` configuration field is required by SeparableConv, ' +\n          'but is unspecified.');\n    }\n    if (config.kernelInitializer != null || config.kernelRegularizer != null ||\n        config.kernelConstraint != null) {\n      throw new ValueError(\n          'Fields kernelInitializer, kernelRegularizer and kernelConstraint ' +\n          'are invalid for SeparableConv2D. Use depthwiseInitializer, ' +\n          'depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, ' +\n          'pointwiseRegularizer and pointwiseConstraint instead.');\n    }\n    if (config.padding != null && config.padding !== 'same' &&\n        config.padding !== 'valid') {\n      throw new ValueError(\n          `SeparableConv${this.rank}D supports only padding modes: ` +\n          `'same' and 'valid', but received ${JSON.stringify(config.padding)}`);\n    }\n\n    this.depthMultiplier =\n        config.depthMultiplier == null ? 1 : config.depthMultiplier;\n    this.depthwiseInitializer = getInitializer(\n        config.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER);\n    this.depthwiseRegularizer = getRegularizer(config.depthwiseRegularizer);\n    this.depthwiseConstraint = getConstraint(config.depthwiseConstraint);\n    this.pointwiseInitializer = getInitializer(\n        config.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER);\n    this.pointwiseRegularizer = getRegularizer(config.pointwiseRegularizer);\n    this.pointwiseConstraint = getConstraint(config.pointwiseConstraint);\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape.length < this.rank + 2) {\n      throw new ValueError(\n          `Inputs to SeparableConv${this.rank}D should have rank ` +\n          `${this.rank + 2}, but received input shape: ` +\n          `${JSON.stringify(inputShape)}`);\n    }\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n      throw new ValueError(\n          `The channel dimension of the inputs should be defined, ` +\n          `but found ${JSON.stringify(inputShape[channelAxis])}`);\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const depthwiseKernelShape =\n        this.kernelSize.concat([inputDim, this.depthMultiplier]);\n    const pointwiseKernelShape = [];\n    for (let i = 0; i < this.rank; ++i) {\n      pointwiseKernelShape.push(1);\n    }\n    pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);\n\n    const trainable = true;\n    this.depthwiseKernel = this.addWeight(\n        'depthwise_kernel', depthwiseKernelShape, 'float32',\n        this.depthwiseInitializer, this.depthwiseRegularizer, trainable,\n        this.depthwiseConstraint);\n    this.pointwiseKernel = this.addWeight(\n        'pointwise_kernel', pointwiseKernelShape, 'float32',\n        this.pointwiseInitializer, this.pointwiseRegularizer, trainable,\n        this.pointwiseConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], 'float32', this.biasInitializer,\n          this.biasRegularizer, trainable, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n\n    this.inputSpec =\n        [new InputSpec({ndim: this.rank + 2, axes: {[channelAxis]: inputDim}})];\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n\n      let output: Tensor;\n      if (this.rank === 1) {\n        throw new NotImplementedError(\n            '1D separable convolution is not implemented yet.');\n      } else if (this.rank === 2) {\n        if (this.dataFormat === 'channelsFirst') {\n          inputs = tfc.transpose(inputs, [0, 2, 3, 1]);  // NCHW -> NHWC.\n        }\n\n        output = tfc.separableConv2d(\n            inputs as Tensor4D, this.depthwiseKernel.read() as Tensor4D,\n            this.pointwiseKernel.read() as Tensor4D,\n            this.strides as [number, number], this.padding as 'same' | 'valid',\n            this.dilationRate as [number, number], 'NHWC');\n      }\n\n      if (this.useBias) {\n        output = K.biasAdd(output, this.bias.read(), this.dataFormat);\n      }\n      if (this.activation != null) {\n        output = this.activation.apply(output);\n      }\n\n      if (this.dataFormat === 'channelsFirst') {\n        output = tfc.transpose(output, [0, 3, 1, 2]);  // NHWC -> NCHW.\n      }\n      return output;\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    delete config['kernelInitializer'];\n    delete config['kernelRegularizer'];\n    delete config['kernelConstraint'];\n    config['depthwiseInitializer'] =\n        serializeInitializer(this.depthwiseInitializer);\n    config['pointwiseInitializer'] =\n        serializeInitializer(this.pointwiseInitializer);\n    config['depthwiseRegularizer'] =\n        serializeRegularizer(this.depthwiseRegularizer);\n    config['pointwiseRegularizer'] =\n        serializeRegularizer(this.pointwiseRegularizer);\n    config['depthwiseConstraint'] =\n        serializeConstraint(this.depthwiseConstraint);\n    config['pointwiseConstraint'] =\n        serializeConstraint(this.pointwiseConstraint);\n    return config;\n  }\n}\n\nexport class SeparableConv2D extends SeparableConv {\n  /** @nocollapse */\n  static className = 'SeparableConv2D';\n  constructor(args?: SeparableConvLayerArgs) {\n    super(2, args);\n  }\n}\nserialization.registerClass(SeparableConv2D);\n\nexport class Conv1D extends Conv {\n  /** @nocollapse */\n  static className = 'Conv1D';\n  constructor(args: ConvLayerArgs) {\n    super(1, args);\n    Conv1D.verifyArgs(args);\n    this.inputSpec = [{ndim: 3}];\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    delete config['dataFormat'];\n    return config;\n  }\n\n  protected static verifyArgs(args: ConvLayerArgs) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number' &&\n        !generic_utils.checkArrayTypeAndLength(\n            args.kernelSize, 'number', 1, 1)) {\n      throw new ValueError(\n          `Conv1D expects config.kernelSize to be number or number[] with ` +\n          `length 1, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n}\nserialization.registerClass(Conv1D);\n\nexport declare interface Cropping2DLayerArgs extends LayerArgs {\n  /**\n   * Dimension of the cropping along the width and the height.\n   * - If integer: the same symmetric cropping\n   *  is applied to width and height.\n   * - If list of 2 integers:\n   *   interpreted as two different\n   *   symmetric cropping values for height and width:\n   *   `[symmetric_height_crop, symmetric_width_crop]`.\n   * - If a list of 2 list of 2 integers:\n   *   interpreted as\n   *   `[[top_crop, bottom_crop], [left_crop, right_crop]]`\n   */\n  cropping: number|[number, number]|[[number, number], [number, number]];\n\n  /**\n   * Format of the data, which determines the ordering of the dimensions in\n   * the inputs.\n   *\n   * `channels_last` corresponds to inputs with shape\n   *   `(batch, ..., channels)`\n   *\n   *  `channels_first` corresponds to inputs with shape `(batch, channels,\n   * ...)`.\n   *\n   * Defaults to `channels_last`.\n   */\n  dataFormat?: DataFormat;\n}\n\nexport class Cropping2D extends Layer {\n  /** @nocollapse */\n  static className = 'Cropping2D';\n  protected readonly cropping: [[number, number], [number, number]];\n  protected readonly dataFormat: DataFormat;\n\n  constructor(args: Cropping2DLayerArgs) {\n    super(args);\n    if (typeof args.cropping === 'number') {\n      this.cropping =\n          [[args.cropping, args.cropping], [args.cropping, args.cropping]];\n    } else if (typeof args.cropping[0] === 'number') {\n      this.cropping = [\n        [args.cropping[0], args.cropping[0]],\n        [args.cropping[1] as number, args.cropping[1] as number]\n      ];\n    } else {\n      this.cropping = args.cropping as [[number, number], [number, number]];\n    }\n    this.dataFormat =\n        args.dataFormat === undefined ? 'channelsLast' : args.dataFormat;\n    this.inputSpec = [{ndim: 4}];\n  }\n\n  computeOutputShape(inputShape: Shape): Shape {\n    if (this.dataFormat === 'channelsFirst') {\n      return [\n        inputShape[0], inputShape[1],\n        inputShape[2] - this.cropping[0][0] - this.cropping[0][1],\n        inputShape[3] - this.cropping[1][0] - this.cropping[1][1]\n      ];\n    } else {\n      return [\n        inputShape[0],\n        inputShape[1] - this.cropping[0][0] - this.cropping[0][1],\n        inputShape[2] - this.cropping[1][0] - this.cropping[1][1], inputShape[3]\n      ];\n    }\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n\n      if (this.dataFormat === 'channelsLast') {\n        const hSliced = K.sliceAlongAxis(\n            inputs, this.cropping[0][0],\n            inputs.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);\n        return K.sliceAlongAxis(\n            hSliced, this.cropping[1][0],\n            inputs.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);\n      } else {\n        const hSliced = K.sliceAlongAxis(\n            inputs, this.cropping[0][0],\n            inputs.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);\n        return K.sliceAlongAxis(\n            hSliced, this.cropping[1][0],\n            inputs.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);\n      }\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {cropping: this.cropping, dataFormat: this.dataFormat};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Cropping2D);\n\nexport declare interface UpSampling2DLayerArgs extends LayerArgs {\n  /**\n   * The upsampling factors for rows and columns.\n   *\n   * Defaults to `[2, 2]`.\n   */\n  size?: number[];\n  /**\n   * Format of the data, which determines the ordering of the dimensions in\n   * the inputs.\n   *\n   * `\"channelsLast\"` corresponds to inputs with shape\n   *   `[batch, ..., channels]`\n   *\n   *  `\"channelsFirst\"` corresponds to inputs with shape `[batch, channels,\n   * ...]`.\n   *\n   * Defaults to `\"channelsLast\"`.\n   */\n  dataFormat?: DataFormat;\n}\n\nexport class UpSampling2D extends Layer {\n  /** @nocollapse */\n  static className = 'UpSampling2D';\n  protected readonly DEFAULT_SIZE = [2, 2];\n  protected readonly size: number[];\n  protected readonly dataFormat: DataFormat;\n\n  constructor(args: UpSampling2DLayerArgs) {\n    super(args);\n    this.inputSpec = [{ndim: 4}];\n    this.size = args.size == null ? this.DEFAULT_SIZE : args.size;\n    this.dataFormat =\n        args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n  }\n\n  computeOutputShape(inputShape: Shape): Shape {\n    if (this.dataFormat === 'channelsFirst') {\n      const height =\n          inputShape[2] == null ? null : this.size[0] * inputShape[2];\n      const width = inputShape[3] == null ? null : this.size[1] * inputShape[3];\n      return [inputShape[0], inputShape[1], height, width];\n    } else {\n      const height =\n          inputShape[1] == null ? null : this.size[0] * inputShape[1];\n      const width = inputShape[2] == null ? null : this.size[1] * inputShape[2];\n      return [inputShape[0], height, width, inputShape[3]];\n    }\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs) as Tensor4D;\n      const inputShape = input.shape;\n\n      if (this.dataFormat === 'channelsFirst') {\n        input = tfc.transpose(input, [0, 2, 3, 1]);\n        const height = this.size[0] * inputShape[2];\n        const width = this.size[1] * inputShape[3];\n        const resized = input.resizeNearestNeighbor([height, width]);\n        return tfc.transpose(resized, [0, 3, 1, 2]);\n      } else {\n        const height = this.size[0] * inputShape[1];\n        const width = this.size[1] * inputShape[2];\n        return input.resizeNearestNeighbor([height, width]);\n      }\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {size: this.size, dataFormat: this.dataFormat};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(UpSampling2D);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Depthwise Convolutional Layers\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, Tensor4D, tidy} from '@tensorflow/tfjs-core';\n\nimport {imageDataFormat} from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport {checkDataFormat} from '../common';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {DataFormat, Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport {convOutputLength} from '../utils/conv_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\nimport {BaseConv, BaseConvLayerArgs, ConvLayerArgs, preprocessConv2DInput} from './convolutional';\n\n/**\n * 2D convolution with separable filters.\n * @param x Input tensor.\n * @param depthwiseKernel Convolution kernel for depthwise convolution.\n * @param strides Strides (Array of two integers).\n * @param padding Padding model.\n * @param dataFormat Data format.\n * @param dilationRate Array of two integers, dilation rates for the separable\n *   convolution.\n * @returns Output tensor.\n * @throws ValueError If depthwiseKernel is not a 4D array.\n */\nexport function depthwiseConv2d(\n    x: Tensor, depthwiseKernel: Tensor, strides: [number, number] = [1, 1],\n    padding = 'valid', dataFormat?: DataFormat,\n    dilationRate?: [number, number]): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    let y = preprocessConv2DInput(x, dataFormat);\n    if (x.rank !== 4) {\n      throw new ValueError(\n          `Input for depthwiseConv2d is required to be 4-D, but is instead ` +\n          `${x.rank}-D`);\n    }\n    if (depthwiseKernel.rank !== 4) {\n      throw new ValueError(\n          `depthwiseKernel is required to be 4-D, but is instead ` +\n          `${depthwiseKernel.rank}-D`);\n    }\n    y = tfc.depthwiseConv2d(\n        y as Tensor4D, depthwiseKernel as Tensor4D, strides,\n        padding === 'same' ? 'same' : 'valid', 'NHWC', dilationRate);\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n    return y;\n  });\n}\n\nexport declare interface DepthwiseConv2DLayerArgs extends BaseConvLayerArgs {\n  /**\n   * An integer or Array of 2 integers, specifying the width and height of the\n   * 2D convolution window. Can be a single integer to specify the same value\n   * for all spatial dimensions.\n   */\n  kernelSize: number|[number, number];\n\n  /**\n   * The number of depthwise convolution output channels for each input\n   * channel.\n   * The total number of depthwise convolution output channels will be equal to\n   * `filtersIn * depthMultiplier`.\n   * Default: 1.\n   */\n  depthMultiplier?: number;\n\n  /**\n   * Initializer for the depthwise kernel matrix.\n   * Default: GlorotNormal.\n   */\n  depthwiseInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Constraint for the depthwise kernel matrix.\n   */\n  depthwiseConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Regulzarizer function for the depthwise kernel matrix.\n   */\n  depthwiseRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\nexport class DepthwiseConv2D extends BaseConv {\n  /** @nocollapse */\n  static className = 'DepthwiseConv2D';\n  private readonly depthMultiplier: number;\n  private readonly depthwiseInitializer: Initializer;\n  private readonly depthwiseConstraint: Constraint;\n  private readonly depthwiseRegularizer: Regularizer;\n\n  private depthwiseKernel: LayerVariable = null;\n\n  constructor(args: DepthwiseConv2DLayerArgs) {\n    super(2, args as ConvLayerArgs);\n    this.depthMultiplier =\n        args.depthMultiplier == null ? 1 : args.depthMultiplier;\n    this.depthwiseInitializer = getInitializer(\n        args.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.depthwiseConstraint = getConstraint(args.depthwiseConstraint);\n    this.depthwiseRegularizer = getRegularizer(args.depthwiseRegularizer);\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape.length < 4) {\n      throw new ValueError(\n          `Inputs to DepthwiseConv2D should have rank 4. ` +\n          `Received input shape: ${JSON.stringify(inputShape)}.`);\n    }\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : 3;\n    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n      throw new ValueError(\n          'The channel dimension of the inputs to DepthwiseConv2D should ' +\n          `be defined, but is not (${inputShape[channelAxis]}).`);\n    }\n    const inputDim = inputShape[channelAxis];\n    const depthwiseKernelShape: Shape = [\n      this.kernelSize[0], this.kernelSize[1], inputDim, this.depthMultiplier\n    ];\n\n    this.depthwiseKernel = this.addWeight(\n        'depthwise_kernel', depthwiseKernelShape, null,\n        this.depthwiseInitializer, this.depthwiseRegularizer, true,\n        this.depthwiseConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [inputDim * this.depthMultiplier], null, this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let outputs = depthwiseConv2d(\n          inputs, this.depthwiseKernel.read(), this.strides as [number, number],\n          this.padding, this.dataFormat, null);\n      // TODO(cais): Add support for dilation.\n      if (this.useBias) {\n        outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n      }\n      if (this.activation != null) {\n        outputs = this.activation.apply(outputs);\n      }\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const rows =\n        this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n    const cols =\n        this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n    const outFilters = this.dataFormat === 'channelsFirst' ?\n        inputShape[1] * this.depthMultiplier :\n        inputShape[3] * this.depthMultiplier;\n    const outRows = convOutputLength(\n        rows, this.kernelSize[0], this.padding, this.strides[0]);\n    const outCols = convOutputLength(\n        cols, this.kernelSize[1], this.padding, this.strides[1]);\n    if (this.dataFormat === 'channelsFirst') {\n      return [inputShape[0], outFilters, outRows, outCols];\n    } else {\n      // In this case, assume 'channelsLast'.\n      return [inputShape[0], outRows, outCols, outFilters];\n    }\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    config['depthMultiplier'] = this.depthMultiplier;\n    config['depthwiseInitializer'] =\n        serializeInitializer(this.depthwiseInitializer);\n    config['depthwiseRegularizer'] =\n        serializeRegularizer(this.depthwiseRegularizer);\n    config['depthwiseConstraint'] =\n        serializeConstraint(this.depthwiseRegularizer);\n    return config;\n  }\n}\nserialization.registerClass(DepthwiseConv2D);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Basic Layers.\n */\n\nimport {any, notEqual, serialization, Tensor, tidy, transpose, util} from '@tensorflow/tfjs-core';\n\nimport {Activation as ActivationFn, getActivation, serializeActivation} from '../activations';\nimport * as K from '../backend/tfjs_backend';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {DisposeResult, InputSpec, Layer, LayerArgs} from '../engine/topology';\nimport {ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {ActivationIdentifier} from '../keras_format/activation_config';\nimport {DataFormat, Shape} from '../keras_format/common';\nimport {LayerConfig} from '../keras_format/topology_config';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport {assertPositiveInteger, mapActivationToFusedKernel} from '../utils/generic_utils';\nimport {arrayProd, range} from '../utils/math_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\nexport declare interface DropoutLayerArgs extends LayerArgs {\n  /** Float between 0 and 1. Fraction of the input units to drop. */\n  rate: number;\n\n  /**\n   * Integer array representing the shape of the binary dropout mask that will\n   * be multiplied with the input.\n   *\n   * For instance, if your inputs have shape `(batchSize, timesteps, features)`\n   * and you want the dropout mask to be the same for all timesteps, you can use\n   * `noise_shape=(batch_size, 1, features)`.\n   */\n  noiseShape?: number[];\n\n  /** An integer to use as random seed. */\n  seed?: number;\n}\n\nexport class Dropout extends Layer {\n  /** @nocollapse */\n  static className = 'Dropout';\n  private readonly rate: number;\n  private readonly noiseShape: number[];\n  private readonly seed: number;\n\n  constructor(args: DropoutLayerArgs) {\n    super(args);\n    this.rate = Math.max(Math.min(args.rate, 1), 0);\n    // So that the scalar doesn't get tidied up between executions.\n    this.noiseShape = args.noiseShape;\n    this.seed = args.seed;\n    this.supportsMasking = true;\n  }\n\n  protected getNoiseShape(input: Tensor): Shape {\n    if (this.noiseShape == null) {\n      return this.noiseShape;\n    }\n    const inputShape = input.shape;\n    const noiseShape: Shape = [];\n    for (let i = 0; i < this.noiseShape.length; ++i) {\n      noiseShape.push(\n          this.noiseShape[i] == null ? inputShape[i] : this.noiseShape[i]);\n    }\n    return noiseShape;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n      if (0 < this.rate && this.rate < 1) {\n        const training =\n            kwargs['training'] == null ? false : kwargs['training'];\n        const noiseShape = this.getNoiseShape(input);\n        const output = K.inTrainPhase(\n            () => K.dropout(input, this.rate, noiseShape, this.seed),\n            () => input, training);\n        return output;\n      }\n      return inputs;\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      rate: this.rate,\n      noiseShape: this.noiseShape,\n      seed: this.seed,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  dispose(): DisposeResult {\n    return super.dispose();\n  }\n}\nserialization.registerClass(Dropout);\n\nexport declare interface DenseLayerArgs extends LayerArgs {\n  /** Positive integer, dimensionality of the output space. */\n  units: number;\n  /**\n   * Activation function to use.\n   *\n   * If unspecified, no activation is applied.\n   */\n  activation?: ActivationIdentifier;\n  /** Whether to apply a bias. */\n  useBias?: boolean;\n  /**\n   * Initializer for the dense kernel weights matrix.\n   */\n  kernelInitializer?: InitializerIdentifier|Initializer;\n  /**\n   * Initializer for the bias vector.\n   */\n  biasInitializer?: InitializerIdentifier|Initializer;\n  /**\n   * If specified, defines inputShape as `[inputDim]`.\n   */\n  inputDim?: number;\n\n  /**\n   * Constraint for the kernel weights.\n   */\n  kernelConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint for the bias vector.\n   */\n  biasConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Regularizer function applied to the dense kernel weights matrix.\n   */\n  kernelRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the bias vector.\n   */\n  biasRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the activation.\n   */\n  activityRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\nexport interface SpatialDropout1DLayerConfig extends LayerConfig {\n  /** Float between 0 and 1. Fraction of the input units to drop. */\n  rate: number;\n\n  /** An integer to use as random seed. */\n  seed?: number;\n}\n\nexport class SpatialDropout1D extends Dropout {\n  /** @nocollapse */\n  static className = 'SpatialDropout1D';\n\n  constructor(args: SpatialDropout1DLayerConfig) {\n    super(args);\n    this.inputSpec = [{ndim: 3}];\n  }\n\n  protected getNoiseShape(input: Tensor): Shape {\n    const inputShape = input.shape;\n    return [inputShape[0], 1, inputShape[2]];\n  }\n}\nserialization.registerClass(SpatialDropout1D);\n\nexport class Dense extends Layer {\n  /** @nocollapse */\n  static className = 'Dense';\n  private units: number;\n  // Default activation: Linear (none).\n  private activation: ActivationFn = null;\n  private useBias = true;\n  private kernelInitializer: Initializer;\n  private biasInitializer: Initializer;\n  private kernel: LayerVariable = null;\n  private bias: LayerVariable = null;\n\n  readonly DEFAULT_KERNEL_INITIALIZER: InitializerIdentifier = 'glorotNormal';\n  readonly DEFAULT_BIAS_INITIALIZER: InitializerIdentifier = 'zeros';\n  private readonly kernelConstraint?: Constraint;\n  private readonly biasConstraint?: Constraint;\n  private readonly kernelRegularizer?: Regularizer;\n  private readonly biasRegularizer?: Regularizer;\n\n  constructor(args: DenseLayerArgs) {\n    super(args);\n    if (args.batchInputShape == null && args.inputShape == null &&\n        args.inputDim != null) {\n      // This logic is copied from Layer's constructor, since we can't\n      // do exactly what the Python constructor does for Dense().\n      let batchSize: number = null;\n      if (args.batchSize != null) {\n        batchSize = args.batchSize;\n      }\n      this.batchInputShape = [batchSize, args.inputDim];\n    }\n\n    this.units = args.units;\n    assertPositiveInteger(this.units, 'units');\n    this.activation = getActivation(args.activation);\n    if (args.useBias != null) {\n      this.useBias = args.useBias;\n    }\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.supportsMasking = true;\n\n    this.inputSpec = [{minNDim: 2}];\n  }\n\n  public build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const inputLastDim = inputShape[inputShape.length - 1];\n    if (this.kernel == null) {\n      this.kernel = this.addWeight(\n          'kernel', [inputLastDim, this.units], null, this.kernelInitializer,\n          this.kernelRegularizer, true, this.kernelConstraint);\n      if (this.useBias) {\n        this.bias = this.addWeight(\n            'bias', [this.units], null, this.biasInitializer,\n            this.biasRegularizer, true, this.biasConstraint);\n      }\n    }\n\n    this.inputSpec = [{minNDim: 2, axes: {[-1]: inputLastDim}}];\n    this.built = true;\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n    outputShape[outputShape.length - 1] = this.units;\n    return outputShape;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      // Dense layer accepts only a single input.\n      const input = getExactlyOneTensor(inputs);\n      const fusedActivationName =\n          mapActivationToFusedKernel(this.activation.getClassName());\n      let output: Tensor;\n\n      if (fusedActivationName != null) {\n        output = K.dot(\n            input, this.kernel.read(), fusedActivationName,\n            this.bias ? this.bias.read() : null);\n      } else {\n        output = K.dot(input, this.kernel.read());\n        if (this.bias != null) {\n          output = K.biasAdd(output, this.bias.read());\n        }\n        if (this.activation != null) {\n          output = this.activation.apply(output);\n        }\n      }\n\n      return output;\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Dense);\n\nexport declare interface FlattenLayerArgs extends LayerArgs {\n  /** Image data format: channeLast (default) or channelFirst. */\n  dataFormat?: DataFormat;\n}\n\nexport class Flatten extends Layer {\n  private dataFormat: DataFormat;\n\n  /** @nocollapse */\n  static className = 'Flatten';\n  constructor(args?: FlattenLayerArgs) {\n    args = args || {};\n    super(args);\n    this.inputSpec = [{minNDim: 3}];\n    this.dataFormat = args.dataFormat;\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    for (const dim of inputShape.slice(1)) {\n      if (dim == null) {\n        throw new ValueError(\n            `The shape of the input to \"Flatten\" is not fully defined ` +\n            `(got ${inputShape.slice(1)}). Make sure to pass a complete ` +\n            `\"input_shape\" or \"batch_input_shape\" argument to the first ` +\n            `layer in your model.`);\n      }\n    }\n    return [inputShape[0], arrayProd(inputShape, 1)];\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n\n      let input = getExactlyOneTensor(inputs);\n      if (this.dataFormat === 'channelsFirst' && input.rank > 1) {\n        const permutation: number[] = [0];\n        for (let i = 2; i < input.rank; ++i) {\n          permutation.push(i);\n        }\n        permutation.push(1);\n        input = input.transpose(permutation);\n      }\n\n      return K.batchFlatten(input);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {};\n    if (this.dataFormat != null) {\n      config['dataFormat'] = this.dataFormat;\n    }\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Flatten);\n\nexport declare interface ActivationLayerArgs extends LayerArgs {\n  /**\n   * Name of the activation function to use.\n   */\n  activation: ActivationIdentifier;\n}\n\nexport class Activation extends Layer {\n  /** @nocollapse */\n  static className = 'Activation';\n  activation: ActivationFn;\n\n  constructor(args: ActivationLayerArgs) {\n    super(args);\n    this.supportsMasking = true;\n    this.activation = getActivation(args.activation);\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n      return this.activation.apply(input);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {activation: serializeActivation(this.activation)};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Activation);\n\nexport declare interface ReshapeLayerArgs extends LayerArgs {\n  /** The target shape. Does not include the batch axis. */\n  targetShape: Shape;\n}\n\nexport declare interface RepeatVectorLayerArgs extends LayerArgs {\n  /**\n   * The integer number of times to repeat the input.\n   */\n  n: number;\n}\n\nexport class RepeatVector extends Layer {\n  /** @nocollapse */\n  static className = 'RepeatVector';\n  readonly n: number;\n\n  constructor(args: RepeatVectorLayerArgs) {\n    super(args);\n    this.n = args.n;\n    this.inputSpec = [{ndim: 2}];\n  }\n\n  computeOutputShape(inputShape: Shape): Shape {\n    return [inputShape[0], this.n, inputShape[1]];\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      return K.repeat(inputs, this.n);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      n: this.n,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(RepeatVector);\n\nexport class Reshape extends Layer {\n  /** @nocollapse */\n  static className = 'Reshape';\n  private targetShape: Shape;\n\n  constructor(args: ReshapeLayerArgs) {\n    super(args);\n    this.targetShape = args.targetShape;\n\n    // Make sure that all unknown dimensions are represented as `null`.\n    for (let i = 0; i < this.targetShape.length; ++i) {\n      if (this.isUnknown(this.targetShape[i])) {\n        this.targetShape[i] = null;\n      }\n    }\n  }\n\n  private isUnknown(dim: number): boolean {\n    return dim < 0 || dim == null;\n  }\n\n  /**\n   * Finds and replaces a missing dimension in output shape.\n   *\n   * This is a near direct port of the internal Numpy function\n   * `_fix_unknown_dimension` in `numpy/core/src/multiarray/shape.c`.\n   *\n   * @param inputShape: Original shape of array begin reshape.\n   * @param outputShape: Target shape of the array, with at most a single\n   * `null` or negative number, which indicates an underdetermined dimension\n   * that should be derived from `inputShape` and the known dimensions of\n   *   `outputShape`.\n   * @returns: The output shape with `null` replaced with its computed value.\n   * @throws: ValueError: If `inputShape` and `outputShape` do not match.\n   */\n  private fixUnknownDimension(inputShape: Shape, outputShape: Shape): Shape {\n    const errorMsg = 'Total size of new array must be unchanged.';\n    const finalShape = outputShape.slice();\n    let known = 1;\n    let unknown = null;\n    for (let i = 0; i < finalShape.length; ++i) {\n      const dim = finalShape[i];\n      if (this.isUnknown(dim)) {\n        if (unknown === null) {\n          unknown = i;\n        } else {\n          throw new ValueError('Can only specifiy one unknown dimension.');\n        }\n      } else {\n        known *= dim;\n      }\n    }\n\n    const originalSize = arrayProd(inputShape);\n    if (unknown !== null) {\n      if (known === 0 || originalSize % known !== 0) {\n        throw new ValueError(errorMsg);\n      }\n      finalShape[unknown] = originalSize / known;\n    } else if (originalSize !== known) {\n      throw new ValueError(errorMsg);\n    }\n\n    return finalShape;\n  }\n\n  computeOutputShape(inputShape: Shape): Shape {\n    let anyUnknownDims = false;\n    for (let i = 0; i < inputShape.length; ++i) {\n      if (this.isUnknown(inputShape[i])) {\n        anyUnknownDims = true;\n        break;\n      }\n    }\n\n    if (anyUnknownDims) {\n      return inputShape.slice(0, 1).concat(this.targetShape);\n    } else {\n      return inputShape.slice(0, 1).concat(\n          this.fixUnknownDimension(inputShape.slice(1), this.targetShape));\n    }\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n      const inputShape = input.shape;\n      const outputShape = inputShape.slice(0, 1).concat(\n          this.fixUnknownDimension(inputShape.slice(1), this.targetShape));\n      return input.reshape(outputShape);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      targetShape: this.targetShape,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Reshape);\n\nexport declare interface PermuteLayerArgs extends LayerArgs {\n  /**\n   * Array of integers. Permutation pattern. Does not include the\n   * sample (batch) dimension. Index starts at 1.\n   * For instance, `[2, 1]` permutes the first and second dimensions\n   * of the input.\n   */\n  dims: number[];\n}\n\nexport class Permute extends Layer {\n  /** @nocollapse */\n  static className = 'Permute';\n  readonly dims: number[];\n  private readonly dimsIncludingBatch: number[];\n\n  constructor(args: PermuteLayerArgs) {\n    super(args);\n    if (args.dims == null) {\n      throw new Error(\n          'Required configuration field `dims` is missing during Permute ' +\n          'constructor call.');\n    }\n    if (!Array.isArray(args.dims)) {\n      throw new Error(\n          'Permute constructor requires `dims` to be an Array, but received ' +\n          `${args.dims} instead.`);\n    }\n\n    // Check the validity of the permutation indices.\n    const expectedSortedIndices = range(1, args.dims.length + 1);\n    if (!util.arraysEqual(args.dims.slice().sort(), expectedSortedIndices)) {\n      throw new Error(\n          'Invalid permutation `dims`: ' + JSON.stringify(args.dims) +\n          ' `dims` must contain consecutive integers starting from 1.');\n    }\n\n    this.dims = args.dims;\n    this.dimsIncludingBatch = [0].concat(this.dims);\n    this.inputSpec = [new InputSpec({ndim: this.dims.length + 1})];\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n    this.dims.forEach((dim: number, i: number) => {\n      outputShape[i + 1] = (inputShape as Shape)[dim];\n    });\n    return outputShape;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return transpose(getExactlyOneTensor(inputs), this.dimsIncludingBatch);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      dims: this.dims,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Permute);\n\nexport declare interface MaskingArgs extends LayerArgs {\n  /**\n   * Masking Value. Defaults to `0.0`.\n   */\n  maskValue?: number;\n}\n\nexport class Masking extends Layer {\n  /** @nocollapse */\n  static className = 'Masking';\n  maskValue: number;\n\n  constructor(args?: MaskingArgs) {\n    super(args == null ? {} : args);\n    this.supportsMasking = true;\n    if (args != null) {\n      this.maskValue = args.maskValue == null ? 0 : args.maskValue;\n    } else {\n      this.maskValue = 0;\n    }\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {maskValue: this.maskValue};\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]): Tensor {\n    const input = getExactlyOneTensor(inputs);\n    const axis = -1;\n    return any(notEqual(input, this.maskValue), axis);\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n      const axis = -1;\n      const keepDims = true;\n      const booleanMask = any(notEqual(input, this.maskValue), axis, keepDims);\n      const output = input.mul(booleanMask.asType(input.dtype));\n      return output;\n    });\n  }\n}\nserialization.registerClass(Masking);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Embedding Layer.\n *\n * Original source: keras/constraints.py\n */\nimport {notEqual, serialization, Tensor, tidy, zerosLike} from '@tensorflow/tfjs-core';\n\nimport * as K from '../backend/tfjs_backend';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {Layer, LayerArgs} from '../engine/topology';\nimport {ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport * as generic_utils from '../utils/generic_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\nexport declare interface EmbeddingLayerArgs extends LayerArgs {\n  /**\n   * Integer > 0. Size of the vocabulary, i.e. maximum integer index + 1.\n   */\n  inputDim: number;\n  /**\n   * Integer >= 0. Dimension of the dense embedding.\n   */\n  outputDim: number;\n  /**\n   * Initializer for the `embeddings` matrix.\n   */\n  embeddingsInitializer?: InitializerIdentifier|Initializer;\n  /**\n   * Regularizer function applied to the `embeddings` matrix.\n   */\n  embeddingsRegularizer?: RegularizerIdentifier|Regularizer;\n  /**\n   * Regularizer function applied to the activation.\n   */\n  activityRegularizer?: RegularizerIdentifier|Regularizer;\n  /**\n   * Constraint function applied to the `embeddings` matrix.\n   */\n  embeddingsConstraint?: ConstraintIdentifier|Constraint;\n  /**\n   * Whether the input value 0 is a special \"padding\" value that should be\n   * masked out. This is useful when using recurrent layers which may take\n   * variable length input.\n   *\n   * If this is `True` then all subsequent layers in the model need to support\n   * masking or an exception will be raised. If maskZero is set to `True`, as a\n   * consequence, index 0 cannot be used in the vocabulary (inputDim should\n   * equal size of vocabulary + 1).\n   */\n  maskZero?: boolean;\n  /**\n   * Length of input sequences, when it is constant.\n   *\n   * This argument is required if you are going to connect `flatten` then\n   * `dense` layers upstream (without it, the shape of the dense outputs cannot\n   * be computed).\n   */\n  inputLength?: number|number[];\n}\n\nexport class Embedding extends Layer {\n  /** @nocollapse */\n  static className = 'Embedding';\n  private inputDim: number;\n  private outputDim: number;\n  private embeddingsInitializer: Initializer;\n  private maskZero: boolean;\n  private inputLength: number|number[];\n\n  private embeddings: LayerVariable = null;\n\n  readonly DEFAULT_EMBEDDINGS_INITIALIZER: InitializerIdentifier =\n      'randomUniform';\n  private readonly embeddingsRegularizer?: Regularizer;\n  private readonly embeddingsConstraint?: Constraint;\n\n  constructor(args: EmbeddingLayerArgs) {\n    super(args);\n    if (args.batchInputShape == null && args.inputShape == null) {\n      // Porting Note: This logic is copied from Layer's constructor, since we\n      // can't do exactly what the Python constructor does for Embedding().\n      // Specifically, the super constructor can not be called after the\n      // mutation of the `config` argument.\n      let batchSize: number = null;\n      if (args.batchSize != null) {\n        batchSize = args.batchSize;\n      }\n      if (args.inputLength == null) {\n        // Fix super-constructor to what it would have done if\n        // 'config.inputShape' were (None, )\n        this.batchInputShape = [batchSize, null];\n      } else {\n        // Fix super-constructor to what it would have done if\n        // 'config.inputShape' were (config.inputLength, )\n        this.batchInputShape =\n            [batchSize].concat(generic_utils.toList(args.inputLength));\n      }\n    }\n    this.inputDim = args.inputDim;\n    generic_utils.assertPositiveInteger(this.inputDim, 'inputDim');\n    this.outputDim = args.outputDim;\n    generic_utils.assertPositiveInteger(this.outputDim, 'outputDim');\n    this.embeddingsInitializer = getInitializer(\n        args.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER);\n    this.embeddingsRegularizer = getRegularizer(args.embeddingsRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.embeddingsConstraint = getConstraint(args.embeddingsConstraint);\n    this.maskZero = args.maskZero;\n    this.supportsMasking = args.maskZero;\n    this.inputLength = args.inputLength;\n  }\n\n  public build(inputShape: Shape|Shape[]): void {\n    this.embeddings = this.addWeight(\n        'embeddings', [this.inputDim, this.outputDim], this.dtype,\n        this.embeddingsInitializer, this.embeddingsRegularizer, true,\n        this.embeddingsConstraint);\n    this.built = true;\n  }\n\n  // Override warnOnIncompatibleInputShape because an embedding layer allows\n  // the input to have varying ranks.\n  protected warnOnIncompatibleInputShape(inputShape: Shape) {}\n\n  computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]): Tensor {\n    return tidy(() => {\n      if (!this.maskZero) {\n        return null;\n      } else {\n        inputs = getExactlyOneTensor(inputs);\n        return notEqual(inputs, zerosLike(inputs));\n      }\n    });\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    if (this.inputLength == null) {\n      return [...inputShape, this.outputDim];\n    }\n    // inputLength can be an array if input is 3D or higher.\n    const inLens: number[] = generic_utils.toList(this.inputLength);\n    if (inLens.length !== inputShape.length - 1) {\n      throw new ValueError(\n          `\"inputLength\" is ${this.inputLength}, but received ` +\n          `input shape has shape ${inputShape}`);\n    } else {\n      let i = 0;\n      for (let k = 0; k < inLens.length; ++k) {\n        const s1 = inLens[k];\n        const s2 = inputShape[k + 1];\n        if ((s1 != null) && (s2 != null) && (s1 !== s2)) {\n          throw new ValueError(\n              `\"inputLength\" is ${this.inputLength}, but received ` +\n              `input shape has shape ${inputShape}`);\n        } else if (s1 == null) {\n          inLens[i] = s2;\n        }\n        i++;\n      }\n    }\n    return [inputShape[0], ...inLens, this.outputDim];\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      // Embedding layer accepts only a single input.\n      let input = getExactlyOneTensor(inputs);\n      if (input.dtype !== 'int32') {\n        input = K.cast(input, 'int32');\n      }\n      const output = K.gather(this.embeddings.read(), input.as1D());\n      return output.reshape(\n          getExactlyOneShape(this.computeOutputShape(input.shape)));\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      inputDim: this.inputDim,\n      outputDim: this.outputDim,\n      embeddingsInitializer: serializeInitializer(this.embeddingsInitializer),\n      embeddingsRegularizer: serializeRegularizer(this.embeddingsRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      embeddingsConstraint: serializeConstraint(this.embeddingsConstraint),\n      maskZero: this.maskZero,\n      inputLength: this.inputLength\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Embedding);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Merge Layers.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, tidy, util} from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport {Layer, LayerArgs, SymbolicTensor} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {Shape} from '../keras_format/common';\nimport {l2Normalize} from '../losses';\nimport {Kwargs} from '../types';\nimport * as generic_utils from '../utils/generic_utils';\nimport * as mathUtils from '../utils/math_utils';\nimport {getExactlyOneShape} from '../utils/types_utils';\n\n/**\n * Generic Merge layer for element-wise merge functions.\n *\n * Used to implement `Sum`, `Average`, `Concatenate`, etc.\n */\nexport abstract class Merge extends Layer {\n  protected reshapeRequired: boolean;\n\n  constructor(args?: LayerArgs) {\n    super(args || {});\n    this.supportsMasking = true;\n  }\n\n  /**\n   * Logic for merging multiple tensors, to be overridden by subclasses.\n   * @param inputs\n   */\n  protected mergeFunction(inputs: Tensor[]): Tensor {\n    throw new NotImplementedError();\n  }\n\n  /**\n   * Computes the shape of the result of an elementwise operation.\n   *\n   * @param shape1: Shape of the first tensor.\n   * @param shape2: Shape of the second tensor.\n   * @returns Expected output shape when an elementwise operation is carried\n   *   out on 2 tensors with shapes `shape1` and `shape2`.\n   * @throws ValueError: If `shape1` and `shape2` are not compatible for\n   *   element-wise operations.\n   */\n  private computeElementwiseOpOutputShape(shape1: Shape, shape2: Shape): Shape {\n    if (shape1 == null || shape2 == null) {\n      return null;\n    } else if (shape1.length < shape2.length) {\n      return this.computeElementwiseOpOutputShape(shape2, shape1);\n    } else if (shape2.length === 0) {\n      return shape1;\n    }\n    const outputShape: Shape = shape1.slice(0, shape1.length - shape2.length);\n    for (let k = 0; k < shape2.length; ++k) {\n      const i = shape1[shape1.length - shape2.length + k];\n      const j = shape2[k];\n      if (i == null || j == null || i < 0 || j < 0) {\n        outputShape.push(null);\n      } else if (i === 1) {\n        outputShape.push(j);\n      } else if (j === 1) {\n        outputShape.push(i);\n      } else {\n        if (i !== j) {\n          throw new ValueError(\n              'Operands could not be broadcast together with shapes ' +\n              JSON.stringify(shape1) + ' ' + JSON.stringify(shape2));\n        }\n        outputShape.push(i);\n      }\n    }\n    return outputShape;\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    // Used purely for shape validation.\n    if (Array.isArray(inputShape) && !Array.isArray(inputShape[0])) {\n      // Make sure that inputShape is an Array of shape.\n      inputShape = [getExactlyOneShape(inputShape)];\n    }\n    inputShape = inputShape as Shape[];\n    if (inputShape.length < 2) {\n      throw new ValueError(\n          'A merge layer should be called on an Array of at least 2 inputs.' +\n          ` Got ${inputShape.length} input(s).`);\n    }\n\n    // Make sure that there is at most one unique batch size among the input\n    // shapes.\n    let batchSizes: number[] = [];\n    for (const shape of inputShape) {\n      if (shape != null && shape[0] !== null) {\n        batchSizes.push(shape[0]);\n      }\n    }\n    batchSizes = generic_utils.unique(batchSizes);\n    if (batchSizes.length > 1) {\n      throw new ValueError(\n          `Can not merge tensors with different batch sizes. ` +\n          `Got tensors with shapes: ${JSON.stringify(inputShape)}.`);\n    }\n\n    let outputShape: Shape =\n        inputShape[0] == null ? null : inputShape[0].slice(1);\n    for (let i = 1; i < inputShape.length; ++i) {\n      const shape = inputShape[i] == null ? null : inputShape[i].slice(1);\n      outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\n    }\n    // If the inputs have different ranks, we have to reshape them to make them\n    // broadcastable.\n    const allRanks = inputShape.map(shape => shape.length);\n    if (inputShape.indexOf(null) === -1 &&\n        generic_utils.unique(allRanks).length === 1) {\n      this.reshapeRequired = false;\n    } else {\n      this.reshapeRequired = true;\n    }\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = inputs as Tensor[];\n      if (this.reshapeRequired) {\n        const reshapedInputs: Tensor[] = [];\n        const inputDims = inputs.map(input => input.rank);\n        if (inputDims.indexOf(null) === -1) {\n          // If ranks of all inputs are available, we simply expand each of them\n          // at axis=1 until all of them have the same rank.\n          const maxNDim = mathUtils.max(inputDims);\n          for (let x of inputs) {\n            const xNDim = x.rank;\n            for (let k = 0; k < maxNDim - xNDim; ++k) {\n              x = K.expandDims(x, 1);\n            }\n            reshapedInputs.push(x);\n          }\n          return this.mergeFunction(reshapedInputs);\n        } else {\n          // Transpose all inputs so that batch size is the last dimension.\n          // [batchSize, dim1, dim2, ...] -> [dim1, dim2, ..., batchSize]\n          let transposed = false;\n          for (const x of inputs) {\n            const xNDim = x.rank;\n            if (xNDim == null) {\n              const xShape = x.shape;\n              const batchSize = xShape[0];\n              const newShape = xShape.slice(1).concat([batchSize]);\n              let xTransposed = x.reshape(\n                  [batchSize].concat(mathUtils.arrayProd(xShape.slice(1))));\n              xTransposed = tfc.transpose(xTransposed, [1, 0]);\n              xTransposed = xTransposed.reshape(newShape);\n              reshapedInputs.push(xTransposed);\n              transposed = true;\n            } else if (xNDim > 1) {\n              const dims = mathUtils.range(1, xNDim).concat([0]);\n              reshapedInputs.push(tfc.transpose(x, dims));\n              transposed = true;\n            } else {\n              // We don't transpose inputs if they are 1D vectors or scalars.\n              reshapedInputs.push(x);\n            }\n          }\n          let y = this.mergeFunction(reshapedInputs);\n          const yNDim = y.rank;\n          if (transposed) {\n            // If inputs have been transposed, we have to transpose the output\n            // too.\n            if (yNDim == null) {\n              const yShape = y.shape;\n              const yNDim = yShape.length;\n              const batchSize = yShape[yNDim - 1];\n              const newShape =\n                  [batchSize].concat(yShape.slice(0, yShape.length - 1));\n              y = tfc.transpose(y.reshape([-1, batchSize]), [1, 0])\n                      .reshape(newShape);\n            } else if (yNDim > 1) {\n              const dims = [yNDim - 1].concat(mathUtils.range(0, yNDim - 1));\n              y = tfc.transpose(y, dims);\n            }\n          }\n          return y;\n        }\n      } else {\n        return this.mergeFunction(inputs);\n      }\n    });\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = inputShape as Shape[];\n    let outputShape: Shape;\n    if (inputShape[0] == null) {\n      outputShape = null;\n    } else {\n      outputShape = inputShape[0].slice(1);\n    }\n    for (let i = 1; i < inputShape.length; ++i) {\n      const shape = inputShape[i] == null ? null : inputShape[i].slice(1);\n      outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\n    }\n\n    let batchSizes: number[] = [];\n    for (const shape of inputShape) {\n      if (shape != null && shape[0] !== null) {\n        batchSizes.push(shape[0]);\n      }\n    }\n    batchSizes = generic_utils.unique(batchSizes);\n    if (batchSizes.length === 1) {\n      outputShape = batchSizes.concat(outputShape);\n    } else {\n      outputShape = [null].concat(outputShape);\n    }\n    return outputShape;\n  }\n\n  computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]): Tensor {\n    return tfc.tidy(() => {\n      if (mask == null) {\n        return null;\n      }\n      if (!Array.isArray(mask)) {\n        throw new ValueError('`mask` should be an Array');\n      }\n      if (!Array.isArray(inputs)) {\n        throw new ValueError('`inputs` should be an Array');\n      }\n      if (mask.length !== inputs.length) {\n        throw new ValueError(\n            `The Array 'inputs' and 'mask' are expected to have the same ` +\n            `length, but have different lengths ` +\n            `(${inputs.length} vs ${mask.length})`);\n      }\n      if (mask.every(m => m == null)) {\n        return null;\n      }\n      mask = mask.map(m => m == null ? m : tfc.expandDims(m, 0));\n      let output = mask[0];\n      for (let i = 1; i < mask.length - 1; ++i) {\n        output = tfc.logicalAnd(output, mask[i]);\n      }\n      return output;\n    });\n  }\n}\n\nexport class Add extends Merge {\n  /** @nocollapse */\n  static className = 'Add';\n  constructor(args?: LayerArgs) {\n    super(args);\n  }\n\n  protected mergeFunction(inputs: Tensor[]): Tensor {\n    return tidy(() => {\n      let output = inputs[0].clone();\n      for (let i = 1; i < inputs.length; ++i) {\n        output = tfc.add(output, inputs[i]);\n      }\n      return output;\n    });\n  }\n}\nserialization.registerClass(Add);\n\n/**\n * Calculate the element-wise sum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Add` layer, by using no input argument\n *    or a single configuration argument. The resultant `Add` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const addLayer = tf.layers.add();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = addLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.add([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.add([input1, input2]).print();\n * // Gives [[11, 22], [33, 44]].\n *\n */\nexport function add(config?: SymbolicTensor[]|Tensor[]|LayerArgs): Layer|\n    SymbolicTensor|Tensor {\n  if (Array.isArray(config)) {\n    const layer = new Add({});\n    return layer.apply(config) as SymbolicTensor | Tensor;\n  } else {\n    return new Add(config);\n  }\n}\n\nexport class Multiply extends Merge {\n  /** @nocollapse */\n  static className = 'Multiply';\n  constructor(args?: LayerArgs) {\n    super(args);\n  }\n\n  protected mergeFunction(inputs: Tensor[]): Tensor {\n    return tidy(() => {\n      let output = inputs[0].clone();\n      for (let i = 1; i < inputs.length; ++i) {\n        output = tfc.mul(output, inputs[i]);\n      }\n      return output;\n    });\n  }\n}\nserialization.registerClass(Multiply);\n\n/**\n * Calculate the element-wise product of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Multiply` layer, by using no input argument\n *    or a single configuration argument. The resultant `Multiply` layer can\n *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const multiplyLayer = tf.layers.multiply();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = multiplyLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.multiply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.multiply([input1, input2]).print();\n * // Gives [[10, 40], [90, 160]].\n *\n */\nexport function multiply(config?: SymbolicTensor[]|Tensor[]|LayerArgs): Layer|\n    SymbolicTensor|Tensor {\n  if (Array.isArray(config)) {\n    const layer = new Multiply({});\n    return layer.apply(config) as SymbolicTensor | Tensor;\n  } else {\n    return new Multiply(config);\n  }\n}\n\nexport class Average extends Merge {\n  /** @nocollapse */\n  static className = 'Average';\n  constructor(args?: LayerArgs) {\n    super(args);\n  }\n\n  protected mergeFunction(inputs: Tensor[]): Tensor {\n    return tidy(() => {\n      let output = inputs[0].clone();\n      for (let i = 1; i < inputs.length; ++i) {\n        output = tfc.add(output, inputs[i]);\n      }\n      return tfc.mul(1 / inputs.length, output);\n    });\n  }\n}\nserialization.registerClass(Average);\n\n/**\n * Calculate the element-wise arithmetic mean of inputs, which all have the same\n * shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Average` layer, by using no input argument\n *    or a single configuration argument. The resultant `Average` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const averageLayer = tf.layers.average();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = averageLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.average([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.average([input1, input2]).print();\n * // Gives [[5.5, 11], [16.5, 22]].\n *\n */\nexport function average(config?: SymbolicTensor[]|Tensor[]|LayerArgs): Layer|\n    SymbolicTensor|Tensor {\n  if (Array.isArray(config)) {\n    const layer = new Average({});\n    return layer.apply(config) as SymbolicTensor | Tensor;\n  } else {\n    return new Average(config);\n  }\n}\n\nexport class Maximum extends Merge {\n  /** @nocollapse */\n  static className = 'Maximum';\n  constructor(args?: LayerArgs) {\n    super(args);\n  }\n\n  protected mergeFunction(inputs: Tensor[]): Tensor {\n    return tidy(() => {\n      let output = inputs[0];\n      for (let i = 1; i < inputs.length; ++i) {\n        output = tfc.maximum(output, inputs[i]);\n      }\n      return output;\n    });\n  }\n}\nserialization.registerClass(Maximum);\n\n/**\n * Calculate the element-wise maximum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Maximum` layer, by using no input argument\n *    or a single configuration argument. The resultant `Maximum` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const maximumLayer = tf.layers.maximum();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = maximumLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.maximum([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);\n * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);\n * tf.layers.maximum([input1, input2]).print();\n * // Gives [[10, 20], [30, 40]].\n *\n */\nexport function maximum(config?: SymbolicTensor[]|Tensor[]|LayerArgs): Layer|\n    SymbolicTensor|Tensor {\n  if (Array.isArray(config)) {\n    const layer = new Maximum({});\n    return layer.apply(config) as SymbolicTensor | Tensor;\n  } else {\n    return new Maximum(config);\n  }\n}\n\nexport class Minimum extends Merge {\n  /** @nocollapse */\n  static className = 'Minimum';\n  constructor(args?: LayerArgs) {\n    super(args);\n  }\n\n  protected mergeFunction(inputs: Tensor[]): Tensor {\n    return tidy(() => {\n      let output = inputs[0];\n      for (let i = 1; i < inputs.length; ++i) {\n        output = tfc.minimum(output, inputs[i]);\n      }\n      return output;\n    });\n  }\n}\nserialization.registerClass(Minimum);\n\n/**\n * Calculate the element-wise minimum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Minimum` layer, by using no input argument\n *    or a single configuration argument. The resultant `Minimum` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const minimumLayer = tf.layers.minimum();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = minimumLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.minimum([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);\n * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);\n * tf.layers.minimum([input1, input2]).print();\n * // Gives [[1, 2], [3, 4]].\n *\n */\nexport function minimum(config?: SymbolicTensor[]|Tensor[]|LayerArgs): Layer|\n    SymbolicTensor|Tensor {\n  if (Array.isArray(config)) {\n    const layer = new Minimum({});\n    return layer.apply(config) as SymbolicTensor | Tensor;\n  } else {\n    return new Minimum(config);\n  }\n}\n\nexport declare interface ConcatenateLayerArgs extends LayerArgs {\n  /**\n   * Axis along which to concatenate.\n   */\n  axis?: number;\n}\n\nexport class Concatenate extends Merge {\n  /** @nocollapse */\n  static className = 'Concatenate';\n  readonly DEFAULT_AXIS = -1;\n  private readonly axis: number;\n\n  constructor(args?: ConcatenateLayerArgs) {\n    super(args);\n    if (args == null) {\n      args = {};\n    }\n    this.axis = args.axis == null ? this.DEFAULT_AXIS : args.axis;\n    this.supportsMasking = true;\n    this.reshapeRequired = false;\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    // Used purely for shape validation.]\n    if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0])) ||\n        inputShape.length === 1) {\n      throw new ValueError(\n          'A `Concatenate` layer should be called on a list of at least 2 ' +\n          'inputs');\n    }\n    inputShape = inputShape as Shape[];\n\n    let allNoneShape = true;\n    for (const shape of inputShape) {\n      if (shape != null) {\n        allNoneShape = false;\n        break;\n      }\n    }\n    if (allNoneShape) {\n      return;\n    }\n\n    const shapeSet: Shape[] = [];\n    for (let i = 0; i < inputShape.length; ++i) {\n      const shapeWithoutConcatAxis = inputShape[i].slice();\n      shapeWithoutConcatAxis.splice(this.axis, 1);\n      let exists = false;\n      for (const shape of shapeSet) {\n        if (util.arraysEqual(shape, shapeWithoutConcatAxis)) {\n          exists = true;\n          break;\n        }\n      }\n      if (!exists) {\n        shapeSet.push(shapeWithoutConcatAxis);\n      }\n    }\n    if (shapeSet.length > 1) {\n      throw new ValueError(\n          'A `Concatenate` layer requires inputs with matching shapes ' +\n          'except for the concat axis. Got input shapes: ' +\n          JSON.stringify(inputShape));\n    }\n  }\n\n  protected mergeFunction(inputs: Tensor[]): Tensor {\n    return tidy(() => {\n      return K.concatenate(inputs, this.axis);\n    });\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0]))) {\n      throw new ValueError(\n          'A `Concatenate` layer should be called on a list of inputs.');\n    }\n    const inputShapes = inputShape as Shape[];\n    const outputShape = inputShapes[0].slice();\n    const axis = this.axis < 0 ? outputShape.length + this.axis : this.axis;\n    // Porting Note: the line above is because TypeScript doesn't support\n    //   negative indices.\n    for (const shape of inputShapes.slice(1)) {\n      if (outputShape[axis] == null || shape[axis] == null) {\n        outputShape[axis] = null;\n        break;\n      }\n      outputShape[axis] += shape[axis];\n    }\n    return outputShape;\n  }\n\n  computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]): Tensor {\n    if (mask == null) {\n      return null;\n    }\n    if (!Array.isArray(mask)) {\n      throw new ValueError('`mask` should be an array for Concatenate');\n    }\n    if (!Array.isArray(inputs)) {\n      throw new ValueError('`inputs` should be an array for Concatenate');\n    }\n    if (mask.length !== inputs.length) {\n      throw new ValueError(\n          `Mismatch in the length of mask (${mask.length}) ` +\n          `and the legnth of inputs (${inputs.length})`);\n    }\n    return tfc.tidy(() => {\n      let allNullMasks = true;\n      mask.forEach(m => {\n        if (m != null) {\n          allNullMasks = false;\n          return;\n        }\n      });\n      if (allNullMasks) {\n        return null;\n      }\n      const outputMasks: Tensor[] = [];\n      for (let i = 0; i < inputs.length; ++i) {\n        if (mask[i] == null) {\n          // Input is unmasked. Append all 1's to masks.\n          outputMasks.push(tfc.onesLike(inputs[i]).asType('bool'));\n        } else if (mask[i].rank < inputs[i].rank) {\n          // Mask is smaller than the input, expand it.\n          outputMasks.push(tfc.expandDims(mask[i], -1));\n        } else {\n          outputMasks.push(mask[i]);\n        }\n      }\n      const concatenatedMasks = tfc.concat(outputMasks, this.axis);\n      return tfc.all(concatenatedMasks, -1, false);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      'axis': this.axis,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Concatenate);\n\n/**\n * Concatenate an `Array` of inputs.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Concatenate` layer, by using no input argument\n *    or a single configuration argument. The resultant `Concatenate` layer can\n *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const concatLayer = tf.layers.concatenate();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 3]});\n * const input2 = tf.input({shape: [2, 4]});\n * const output = concatLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 7], with the first dimension as the undetermined batch\n * // dimension and the last dimension as the result of concatenating the\n * // last dimensions of the two inputs.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 3]});\n * const input2 = tf.input({shape: [2, 4]});\n * const output = tf.layers.concatenate([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension and the last dimension as the result of concatenating the\n * // last dimensions of the two inputs.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([[1, 2], [3, 4]], [2, 2]);\n * const input2 = tf.tensor2d([[10, 20], [30, 40]], [2, 2]);\n * tf.layers.concatenate([input1, input2]).print();\n * // Gives [[1, 2, 10, 20], [3, 4, 30, 40]].\n *\n */\nexport function concatenate(config?: SymbolicTensor[]|Tensor[]|\n                            ConcatenateLayerArgs): Layer|SymbolicTensor|Tensor {\n  if (Array.isArray(config)) {\n    const layer = new Concatenate({});\n    return layer.apply(config) as SymbolicTensor | Tensor;\n  } else {\n    return new Concatenate(config);\n  }\n}\n\nexport declare interface DotLayerArgs extends LayerArgs {\n  /**\n   * Axis or axes along which the dot product will be taken.\n   *\n   * Integer or an Array of integers.\n   */\n  axes: number|[number, number];\n\n  /**\n   * Whether to L2-normalize samples along the dot product axis\n   * before taking the dot product.\n   *\n   * If set to `true`, the output of the dot product isthe cosine\n   * proximity between the two samples.\n   */\n  normalize?: boolean;\n}\n\n/**\n * Interpretable potentially negative axis index.\n *\n * For example, given axis = -1, and dim = 3, this function will return 2.\n *\n * @param axis The axis index, may be a positive, zero or negative integer.\n * @param dim Total number of dimensions, a positive integer.\n * @returns A non-negative axis index equivalent to the input `axis`.\n */\nfunction interpretAxis(axis: number, dim: number): number {\n  while (axis < 0) {\n    axis += dim;\n  }\n  return axis;\n}\n\nfunction batchDot(x: Tensor, y: Tensor, axes: number|[number, number]): Tensor {\n  if (x.shape.length > 3 || y.shape.length > 3) {\n    throw new NotImplementedError(\n        'batchDot is not implemented for tensors of 4D or higher rank yet');\n  }\n  tfc.util.assert(\n      x.shape.length >= 2,\n      () => `batchDot requires the rank of x to be >= 2, ` +\n          `but got ${x.shape.length}`);\n  tfc.util.assert(\n      x.shape.length >= 2,\n      () => `batchDot requires the rank of y to be >= 2, ` +\n          `but got ${y.shape.length}`);\n\n  if (typeof axes === 'number') {\n    axes = [axes, axes];\n  }\n\n  if (x.dtype === 'complex64' || y.dtype === 'complex64') {\n    throw new NotImplementedError(\n        'batchDot is not implemented for complex64-type Tensors yet.');\n  }\n\n  const xNDim = x.shape.length;\n  const yNDim = y.shape.length;\n  if (axes == null) {\n    // Behave like batchMatmul by default.\n    axes = [xNDim - 1, yNDim - 2];\n  }\n  const axesArray = axes as [number, number];\n\n  return tfc.tidy(() => {\n    let diff: number;\n    if (xNDim > yNDim) {\n      diff = xNDim - yNDim;\n      const diffShape: Shape = [];\n      for (let i = 0; i < diff; ++i) {\n        diffShape.push(1);\n      }\n      y = y.reshape(y.shape.concat(diffShape));\n    } else if (yNDim > xNDim) {\n      diff = yNDim - xNDim;\n      const diffShape: Shape = [];\n      for (let i = 0; i < diff; ++i) {\n        diffShape.push(1);\n      }\n      x = x.reshape(x.shape.concat(diffShape));\n    } else {\n      diff = 0;\n    }\n\n    let out: Tensor;\n    if (x.shape.length === 2 && y.shape.length === 2) {\n      if (axesArray[0] === axesArray[1]) {\n        out = x.mulStrict(y).sum(axesArray[0]);\n      } else {\n        out = x.transpose([1, 0]).mulStrict(y).sum(axesArray[1]);\n      }\n    } else {\n      const adjX = axesArray[0] !== x.shape.length - 1;\n      const adjY = axesArray[1] === y.shape.length - 1;\n      out = x.matMul(y, adjX, adjY);\n    }\n\n    if (diff > 0) {\n      let idx: number;\n      if (xNDim > yNDim) {\n        idx = xNDim + yNDim - 3;\n      } else {\n        idx = xNDim - 1;\n      }\n      const squeezeAxes: number[] = [];\n      for (let i = idx; i < idx + diff; ++i) {\n        squeezeAxes.push(i);\n      }\n      out = out.squeeze(squeezeAxes);\n    }\n    if (out.shape.length === 1) {\n      out = out.expandDims(1);\n    }\n    return out;\n  });\n}\n\nexport class Dot extends Merge {\n  /** @nocollapse */\n  static className = 'Dot';\n\n  private axes: number|[number, number];\n  private normalize: boolean;\n\n  constructor(args: DotLayerArgs) {\n    super(args);\n    this.axes = args.axes;\n    this.normalize = args.normalize == null ? false : args.normalize;\n    this.supportsMasking = true;\n    this.reshapeRequired = false;\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    tfc.util.assert(\n        Array.isArray(inputShape) && inputShape.length === 2 &&\n            Array.isArray(inputShape[0]) && Array.isArray(inputShape[1]),\n        () => 'A `Dot` layer should be called on a list of exactly 2 inputs.');\n    const shape1 = inputShape[0] as Shape;\n    const shape2 = inputShape[1] as Shape;\n    if (shape1.length > 3 || shape2.length > 3) {\n      throw new NotImplementedError(\n          'Dot layer does not support tensors of 4D or higher rank yet.');\n    }\n\n    const axes = this.interpretAxes(shape1, shape2);\n    if (shape1[axes[0]] !== shape2[axes[1]]) {\n      throw new ValueError(\n          `Dimension incompatibility: ` +\n          `${shape1[axes[0]]} !== ${shape2[axes[1]]}`);\n    }\n  }\n\n  protected mergeFunction(inputs: Tensor[]): Tensor {\n    if (inputs.length !== 2) {\n      throw new ValueError(\n          'A `Dot` layer must be called on exactly 2 inputs, ' +\n          `but received ${inputs.length} input(s).`);\n    }\n\n    let x1 = inputs[0];\n    let x2 = inputs[1];\n    let axes: [number, number];\n    if (!Array.isArray(this.axes)) {\n      axes = [\n        interpretAxis(this.axes, x1.shape.length),\n        interpretAxis(this.axes, x2.shape.length)\n      ];\n    } else {\n      axes = this.axes.map(\n                 (axis, i) => interpretAxis(\n                     axis, inputs[i].shape.length)) as [number, number];\n    }\n    if (this.normalize) {\n      x1 = l2Normalize(x1, axes[0]);\n      x2 = l2Normalize(x2, axes[1]);\n    }\n    return batchDot(x1, x2, axes);\n  }\n\n  private interpretAxes(shape1: Shape, shape2: Shape): number[] {\n    let axes: number[];\n    if (!Array.isArray(this.axes)) {\n      // `this.axes` is a single integer.\n      axes = [\n        interpretAxis(this.axes, shape1.length),\n        interpretAxis(this.axes, shape2.length)\n      ];\n    } else {\n      // `this.axes` is an Array of integers.\n      axes = this.axes;\n    }\n    return axes;\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    tfc.util.assert(\n        Array.isArray(inputShape) && inputShape.length === 2 &&\n            Array.isArray(inputShape[0]) && Array.isArray(inputShape[1]),\n        () => 'A `Dot` layer should be called on a list of exactly 2 inputs.');\n    const shape1 = (inputShape[0] as Shape).slice();\n    const shape2 = (inputShape[1] as Shape).slice();\n    if (shape1.length > 3 || shape2.length > 3) {\n      throw new NotImplementedError(\n          'Dot layer does not support tensors of 4D or higher rank yet.');\n    }\n\n    const axes = this.interpretAxes(shape1, shape2);\n    shape1.splice(axes[0], 1);\n    shape2.splice(axes[1], 1);\n    shape2.splice(0, 1);\n    const outputShape = shape1.concat(shape2);\n    if (outputShape.length === 1) {\n      outputShape.push(1);\n    }\n    return outputShape;\n  }\n\n  computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]): Tensor {\n    return null;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      'axes': this.axes,\n      'normalize': this.normalize\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Dot);\n\n// TODO(cais): Add functional interfaces for the merge layers.\n","/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */\r\n\r\n/**\r\n * TensorFlow.js Layers: Noise Layers.\r\n */\r\n\r\nimport {greaterEqual, randomUniform, serialization, Tensor, tidy} from '@tensorflow/tfjs-core';\r\n\r\nimport * as K from '../backend/tfjs_backend';\r\nimport {Layer, LayerArgs} from '../engine/topology';\r\nimport {Shape} from '../keras_format/common';\r\nimport {Kwargs} from '../types';\r\nimport {getExactlyOneTensor} from '../utils/types_utils';\r\n\r\nexport declare interface GaussianNoiseArgs extends LayerArgs {\r\n  /** Standard Deviation.  */\r\n  stddev: number;\r\n}\r\n\r\nexport class GaussianNoise extends Layer {\r\n  /** @nocollapse */\r\n  static className = 'GaussianNoise';\r\n  readonly stddev: number;\r\n\r\n  constructor(args: GaussianNoiseArgs) {\r\n    super(args);\r\n    this.supportsMasking = true;\r\n    this.stddev = args.stddev;\r\n  }\r\n\r\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\r\n    return inputShape;\r\n  }\r\n\r\n  getConfig() {\r\n    const baseConfig = super.getConfig();\r\n    const config = {stddev: this.stddev};\r\n    Object.assign(config, baseConfig);\r\n    return config;\r\n  }\r\n\r\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\r\n    return tidy(() => {\r\n      this.invokeCallHook(inputs, kwargs);\r\n      const input = getExactlyOneTensor(inputs);\r\n      const noised = () =>\r\n          K.randomNormal(input.shape, 0, this.stddev).add(input);\r\n      const output =\r\n          K.inTrainPhase(noised, () => input, kwargs['training'] || false);\r\n      return output;\r\n    });\r\n  }\r\n}\r\nserialization.registerClass(GaussianNoise);\r\n\r\nexport declare interface GaussianDropoutArgs extends LayerArgs {\r\n  /** drop probability.  */\r\n  rate: number;\r\n}\r\n\r\nexport class GaussianDropout extends Layer {\r\n  /** @nocollapse */\r\n  static className = 'GaussianDropout';\r\n  readonly rate: number;\r\n\r\n  constructor(args: GaussianDropoutArgs) {\r\n    super(args);\r\n    this.supportsMasking = true;\r\n    this.rate = args.rate;\r\n  }\r\n\r\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\r\n    return inputShape;\r\n  }\r\n\r\n  getConfig() {\r\n    const baseConfig = super.getConfig();\r\n    const config = {rate: this.rate};\r\n    Object.assign(config, baseConfig);\r\n    return config;\r\n  }\r\n\r\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\r\n    return tidy(() => {\r\n      this.invokeCallHook(inputs, kwargs);\r\n      const input = getExactlyOneTensor(inputs);\r\n      if (this.rate > 0 && this.rate < 1) {\r\n        const noised = () => {\r\n          const stddev = Math.sqrt(this.rate / (1 - this.rate));\r\n          return input.mul(K.randomNormal(input.shape, 1, stddev));\r\n        };\r\n        return K.inTrainPhase(noised, () => input, kwargs['training'] || false);\r\n      }\r\n      return input;\r\n    });\r\n  }\r\n}\r\nserialization.registerClass(GaussianDropout);\r\n\r\nexport declare interface AlphaDropoutArgs extends LayerArgs {\r\n  /** drop probability.  */\r\n  rate: number;\r\n  /**\r\n   * A 1-D `Tensor` of type `int32`, representing the\r\n   * shape for randomly generated keep/drop flags.\r\n   */\r\n  noiseShape?: Shape;\r\n}\r\n\r\n/**\r\n * Applies Alpha Dropout to the input.\r\n *\r\n * As it is a regularization layer, it is only active at training time.\r\n *\r\n * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs\r\n * to their original values, in order to ensure the self-normalizing property\r\n * even after this dropout.\r\n * Alpha Dropout fits well to Scaled Exponential Linear Units\r\n * by randomly setting activations to the negative saturation value.\r\n *\r\n * Arguments:\r\n *   - `rate`: float, drop probability (as with `Dropout`).\r\n *     The multiplicative noise will have\r\n *     standard deviation `sqrt(rate / (1 - rate))`.\r\n *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the\r\n *     shape for randomly generated keep/drop flags.\r\n *\r\n * Input shape:\r\n *   Arbitrary. Use the keyword argument `inputShape`\r\n *   (tuple of integers, does not include the samples axis)\r\n *   when using this layer as the first layer in a model.\r\n *\r\n * Output shape:\r\n *   Same shape as input.\r\n *\r\n * References:\r\n *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\r\n */\r\nexport class AlphaDropout extends Layer {\r\n  /** @nocollapse */\r\n  static className = 'AlphaDropout';\r\n  readonly rate: number;\r\n  readonly noiseShape: Shape;\r\n\r\n  constructor(args: AlphaDropoutArgs) {\r\n    super(args);\r\n    this.supportsMasking = true;\r\n    this.rate = args.rate;\r\n    this.noiseShape = args.noiseShape;\r\n  }\r\n\r\n  _getNoiseShape(inputs: Tensor|Tensor[]) {\r\n    return this.noiseShape || getExactlyOneTensor(inputs).shape;\r\n  }\r\n\r\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\r\n    return inputShape;\r\n  }\r\n\r\n  getConfig() {\r\n    const baseConfig = super.getConfig();\r\n    const config = {rate: this.rate};\r\n    Object.assign(config, baseConfig);\r\n    return config;\r\n  }\r\n\r\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\r\n    return tidy(() => {\r\n      if (this.rate < 1 && this.rate > 0) {\r\n        const noiseShape = this._getNoiseShape(inputs);\r\n\r\n        const droppedInputs = () => {\r\n          const input = getExactlyOneTensor(inputs);\r\n\r\n          const alpha = 1.6732632423543772848170429916717;\r\n          const scale = 1.0507009873554804934193349852946;\r\n\r\n          const alphaP = -alpha * scale;\r\n\r\n          let keptIdx = greaterEqual(randomUniform(noiseShape), this.rate);\r\n\r\n          keptIdx = K.cast(keptIdx, 'float32');  // get default dtype.\r\n\r\n          // Get affine transformation params.\r\n          const a = ((1 - this.rate) * (1 + this.rate * alphaP ** 2)) ** -0.5;\r\n          const b = -a * alphaP * this.rate;\r\n\r\n          // Apply mask.\r\n          const x = input.mul(keptIdx).add(keptIdx.add(-1).mul(alphaP));\r\n\r\n          return x.mul(a).add(b);\r\n        };\r\n        return K.inTrainPhase(\r\n            droppedInputs, () => getExactlyOneTensor(inputs),\r\n            kwargs['training'] || false);\r\n      }\r\n      return inputs;\r\n    });\r\n  }\r\n}\r\nserialization.registerClass(AlphaDropout);\r\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Normalization layers.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {moments, serialization, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {InputSpec, Layer, LayerArgs} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport * as generic_utils from '../utils/generic_utils';\nimport * as math_utils from '../utils/math_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\n/**\n * Applies batch normalization on x given mean, var, beta and gamma.\n *\n * I.e. returns:\n *   `output = (x - mean) / (sqrt(var) + epsilon) * gamma + beta`\n *\n * @param x Input tensor.\n * @param mean Mean of batch.\n * @param variance Variance of batch.\n * @param beta Tensor with which to center the input.\n * @param gamma Tensor by which to scale the input.\n * @param epsilon Fuzz factor.\n * @returns The result of the batch normalization.\n */\nexport function batchNormalization(\n    x: Tensor, mean: Tensor, variance: Tensor, beta?: Tensor, gamma?: Tensor,\n    epsilon = 1e-3): Tensor {\n  let out: Tensor;\n  if (x.rank === 2) {\n    out = tfc.batchNorm2d(\n        x as Tensor2D, mean as Tensor2D | Tensor1D,\n        variance as Tensor2D | Tensor1D, beta as Tensor2D | Tensor1D,\n        gamma as Tensor2D | Tensor1D, epsilon);\n  } else if (x.rank === 3) {\n    // TODO(cais): Check rank; give proper error message.\n    out = tfc.batchNorm3d(\n        x as Tensor3D, mean as Tensor3D | Tensor1D,\n        variance as Tensor3D | Tensor1D, beta as Tensor3D | Tensor1D,\n        gamma as Tensor3D | Tensor1D, epsilon);\n  } else if (x.rank === 4) {\n    out = tfc.batchNorm4d(\n        x as Tensor4D, mean as Tensor4D | Tensor1D,\n        variance as Tensor4D | Tensor1D, beta as Tensor4D | Tensor1D,\n        gamma as Tensor4D | Tensor1D, epsilon);\n  } else {\n    throw new NotImplementedError(\n        `batchNormalization is not implemented for array of rank ${x.rank} ` +\n        `yet`);\n  }\n  return out;\n}\n\n/**\n * Non-broadcasting batch normalization for use in training (not inference).\n *\n * The input is normalized to zero mean and unit variance along the\n * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.\n * The result of that is returned as the first element\n * of the returned `Array`. The other two elements are the mean and variance,\n * respectively.\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nfunction regularNormalizeBatchInTraining(\n    x: Tensor, gamma: Tensor, beta: Tensor, reductionAxes: number[],\n    epsilon = 1e-3): [Tensor, Tensor, Tensor] {\n  return tidy(() => {\n           const meanAndVariance = tfc.moments(x, reductionAxes);\n           const mean = meanAndVariance.mean;\n           const variance = meanAndVariance.variance;\n           const normed =\n               batchNormalization(x, mean, variance, beta, gamma, epsilon);\n           return [normed, mean, variance];\n         }) as [Tensor, Tensor, Tensor];\n}\n\n/**\n * Broadcasting batch normalization for use in training (not inference).\n *\n * The input is normalized to zero mean and unit variance along the\n * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.\n * The result of that is returned as the first element\n * of the returned `Array`. The other two elements are the mean and variance,\n * respectively.\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nfunction broadcastNormalizeBatchInTraining(\n    x: Tensor, gamma: Tensor, beta: Tensor, reductionAxes: number[],\n    epsilon = 1e-3): [Tensor, Tensor, Tensor] {\n  return tidy(() => {\n           const meanAndVariance = tfc.moments(x, reductionAxes);\n           const mean = meanAndVariance.mean;\n           const variance = meanAndVariance.variance;\n           const targetShape: number[] = [];\n           for (const axis of math_utils.range(0, x.rank)) {\n             if (reductionAxes.indexOf(axis) !== -1) {\n               targetShape.push(1);\n             } else {\n               targetShape.push(x.shape[axis]);\n             }\n           }\n           const broadcastMean = mean.reshape(targetShape);\n           const broadcastVariance = variance.reshape(targetShape);\n           const broadcastGamma =\n               gamma == null ? null : gamma.reshape(targetShape);\n           const broadcastBeta =\n               beta == null ? null : beta.reshape(targetShape);\n           const normed = batchNormalization(\n               x, broadcastMean, broadcastVariance, broadcastBeta,\n               broadcastGamma, epsilon);\n           return [normed, mean, variance];\n         }) as [Tensor, Tensor, Tensor];\n}\n\n/**\n * Batch normalization for use in training (not inference).\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nexport function normalizeBatchInTraining(\n    x: Tensor, gamma: Tensor, beta: Tensor, reductionAxes: number[],\n    epsilon = 1e-3): [Tensor, Tensor, Tensor] {\n  if (util.arraysEqual(\n          reductionAxes.slice().sort(), math_utils.range(0, x.rank - 1))) {\n    return regularNormalizeBatchInTraining(\n        x, gamma, beta, reductionAxes, epsilon);\n  } else {\n    return broadcastNormalizeBatchInTraining(\n        x, gamma, beta, reductionAxes, epsilon);\n  }\n}\n\nexport declare interface BatchNormalizationLayerArgs extends LayerArgs {\n  /**\n   * The integer axis that should be normalized (typically the features axis).\n   * Defaults to -1.\n   *\n   * For instance, after a `Conv2D` layer with `data_format=\"channels_first\"`,\n   * set `axis=1` in `batchNormalization`.\n   */\n  axis?: number;\n\n  /**\n   * Momentum of the moving average. Defaults to 0.99.\n   */\n  momentum?: number;\n\n  /**\n   * Small float added to the variance to avoid dividing by zero. Defaults to\n   * 1e-3.\n   */\n  epsilon?: number;\n\n  /**\n   * If `true`, add offset of `beta` to normalized tensor.\n   * If `false`, `beta` is ignored.\n   * Defaults to `true`.\n   */\n  center?: boolean;\n\n  /**\n   * If `true`, multiply by `gamma`.\n   * If `false`, `gamma` is not used.\n   * When the next layer is linear (also e.g. `nn.relu`),\n   * this can be disabled since the scaling will be done by the next layer.\n   * Defaults to `true`.\n   */\n  scale?: boolean;\n\n  /**\n   * Initializer for the beta weight.\n   *  Defaults to 'zeros'.\n   */\n  betaInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the gamma weight.\n   *  Defaults to `ones`.\n   */\n  gammaInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the moving mean.\n   * Defaults to `zeros`\n   */\n  movingMeanInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the moving variance.\n   *  Defaults to 'Ones'.\n   */\n  movingVarianceInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Constraint for the beta weight.\n   */\n  betaConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint for gamma weight.\n   */\n  gammaConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Regularizer for the beta weight.\n   */\n  betaRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer for the gamma weight.\n   */\n  gammaRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\nexport class BatchNormalization extends Layer {\n  /** @nocollapse */\n  static className = 'BatchNormalization';\n  private readonly axis: number;\n  private readonly momentum: number;\n  private readonly epsilon: number;\n  private readonly center: boolean;\n  private readonly scale: boolean;\n  private readonly betaInitializer: Initializer;\n  private readonly gammaInitializer: Initializer;\n  private readonly movingMeanInitializer: Initializer;\n  private readonly movingVarianceInitializer: Initializer;\n  private readonly betaConstraint: Constraint;\n  private readonly gammaConstraint: Constraint;\n  private readonly betaRegularizer: Regularizer;\n  private readonly gammaRegularizer: Regularizer;\n  private gamma: LayerVariable;\n  private beta: LayerVariable;\n  private movingMean: LayerVariable;\n  private movingVariance: LayerVariable;\n\n  constructor(args?: BatchNormalizationLayerArgs) {\n    if (args == null) {\n      args = {};\n    }\n    super(args);\n\n    this.supportsMasking = true;\n    this.axis = args.axis == null ? -1 : args.axis;\n    this.momentum = args.momentum == null ? 0.99 : args.momentum;\n    this.epsilon = args.epsilon == null ? 1e-3 : args.epsilon;\n    this.center = args.center == null ? true : args.center;\n    this.scale = args.scale == null ? true : args.scale;\n    this.betaInitializer = getInitializer(args.betaInitializer || 'zeros');\n    this.gammaInitializer = getInitializer(args.gammaInitializer || 'ones');\n    this.movingMeanInitializer =\n        getInitializer(args.movingMeanInitializer || 'zeros');\n    this.movingVarianceInitializer =\n        getInitializer(args.movingVarianceInitializer || 'ones');\n    this.betaConstraint = getConstraint(args.betaConstraint);\n    this.gammaConstraint = getConstraint(args.gammaConstraint);\n    this.betaRegularizer = getRegularizer(args.betaRegularizer);\n    this.gammaRegularizer = getRegularizer(args.gammaRegularizer);\n  }\n\n  public build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const axis = this.axis >= 0 ? this.axis : (this.axis + inputShape.length);\n    const dim = inputShape[axis];\n    if (dim == null) {\n      throw new ValueError(\n          `Axis ${axis} of input tensor should have a defined dimension but ` +\n          `the layer received an input with shape ` +\n          `${JSON.stringify(inputShape)}.`);\n    }\n    this.inputSpec =\n        [new InputSpec({ndim: inputShape.length, axes: {[axis]: dim}})];\n    const shape = [dim];\n    if (this.scale) {\n      this.gamma = this.addWeight(\n          'gamma', shape, null, this.gammaInitializer, this.gammaRegularizer,\n          true, this.gammaConstraint);\n    }\n    if (this.center) {\n      this.beta = this.addWeight(\n          'beta', shape, null, this.betaInitializer, this.betaRegularizer, true,\n          this.betaConstraint);\n    }\n    this.movingMean = this.addWeight(\n        'moving_mean', shape, null, this.movingMeanInitializer, null, false);\n    this.movingVariance = this.addWeight(\n        'moving_variance', shape, null, this.movingVarianceInitializer, null,\n        false);\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n      const input = getExactlyOneTensor(inputs);\n      const inputShape = input.shape;\n      const ndim = inputShape.length;\n      const reductionAxes = math_utils.range(0, ndim);\n      const axis = this.axis >= 0 ? this.axis : (this.axis + ndim);\n      reductionAxes.splice(axis, 1);\n      const broadcastShape = generic_utils.pyListRepeat(1, ndim);\n      broadcastShape[axis] = inputShape[axis];\n\n      const sortedReductionAxes = reductionAxes.slice();\n      sortedReductionAxes.sort();\n      const needsBroadcasting = !util.arraysEqual(\n          sortedReductionAxes, math_utils.range(0, ndim).slice(0, ndim - 1));\n\n      const normalizeInference: () => Tensor = () => {\n        if (needsBroadcasting) {\n          const broadcastMovingMean =\n              this.movingMean.read().reshape(broadcastShape);\n          const broadcastMovingVariance =\n              this.movingVariance.read().reshape(broadcastShape);\n          const broadcastBeta =\n              this.center ? this.beta.read().reshape(broadcastShape) : null;\n          const broadcastGamma =\n              this.scale ? this.gamma.read().reshape(broadcastShape) : null;\n          return batchNormalization(\n              input, broadcastMovingMean, broadcastMovingVariance,\n              broadcastBeta, broadcastGamma, this.epsilon);\n        } else {\n          return batchNormalization(\n              input, this.movingMean.read(), this.movingVariance.read(),\n              this.beta == null ? null : this.beta.read(),\n              this.gamma == null ? null : this.gamma.read(), this.epsilon);\n        }\n      };\n\n      if (!training) {\n        return normalizeInference();\n      }\n\n      const [normedTraining, mean, variance] = normalizeBatchInTraining(\n          input, this.gamma.read(), this.beta.read(), reductionAxes,\n          this.epsilon);\n\n      const doMovingAverage =\n          (variable: LayerVariable, value: Tensor, momentum: number): void => {\n            tfc.tidy(() => {\n              const decay = 1 - momentum;\n              const origValue = variable.read();\n              const updateDelta = origValue.sub(value).mul(decay);\n              variable.write(origValue.sub(updateDelta));\n            });\n          };\n\n      // Perform updates to moving mean and moving variance for training.\n      // Porting Note: In PyKeras, these updates to `movingMean` and\n      //   `movingAverage` are done as a deferred Graph, added to the `Layer`'s\n      //   `update`s using the `add_update()` method. Here we do it imperatively\n      //   and encapsulate the updates in a function that is invoked\n      //   immediately.\n      const updateMovingMeanAndVariance = () => {\n        doMovingAverage(this.movingMean, mean, this.momentum);\n        doMovingAverage(this.movingVariance, variance, this.momentum);\n      };\n      updateMovingMeanAndVariance();\n\n      return normedTraining;\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      axis: this.axis,\n      momentum: this.momentum,\n      epsilon: this.epsilon,\n      center: this.center,\n      scale: this.scale,\n      betaInitializer: serializeInitializer(this.betaInitializer),\n      gammaInitializer: serializeInitializer(this.gammaInitializer),\n      movingMeanInitializer: serializeInitializer(this.movingMeanInitializer),\n      movingVarianceInitializer:\n          serializeInitializer(this.movingVarianceInitializer),\n      betaRegularizer: serializeRegularizer(this.betaRegularizer),\n      gammaRegularizer: serializeRegularizer(this.gammaRegularizer),\n      betaConstraint: serializeConstraint(this.betaConstraint),\n      gammaConstraint: serializeConstraint(this.gammaConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(BatchNormalization);\n\nexport interface LayerNormalizationLayerArgs extends LayerArgs {\n  /**\n   * The axis or axes that should be normalized (typically, the feature axis.)\n   * Defaults to -1 (the last axis.)\n   */\n  axis?: number|number[];\n\n  /**\n   * A small positive float added to variance to avoid divison by zero.\n   * Defaults to 1e-3.\n   */\n  epsilon?: number;\n\n  /**\n   * If `true`, add offset of `beta` to normalized tensor.\n   * If `false`, `beta` is ignored.\n   * Default: `true`.\n   */\n  center?: boolean;\n\n  /**\n   * If `true`, multiply output by `gamma`.\n   * If `false`, `gamma` is not used.\n   * When the next layer is linear, this can be disabled since scaling will\n   * be done by the next layer.\n   * Default: `true`.\n   */\n  scale?: boolean;\n\n  /**\n   * Initializer for the beta weight.\n   * Default: `'zeros'`.\n   */\n  betaInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the gamma weight.\n   * Default: `'ones'`.\n   */\n  gammaInitializer?: InitializerIdentifier|Initializer;\n\n  /** Regularizer for the beta weight. */\n  betaRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /** Regularizer for the gamma weight. */\n  gammaRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\nexport class LayerNormalization extends Layer {\n  /** @nocollapse */\n  static className = 'LayerNormalization';\n\n  private axis: number|number[];\n  readonly epsilon: number;\n  readonly center: boolean;\n  readonly scale: boolean;\n  readonly betaInitializer: Initializer;\n  readonly gammaInitializer: Initializer;\n  readonly betaRegularizer: Regularizer;\n  readonly gammaRegularizer: Regularizer;\n\n  private gamma: LayerVariable;\n  private beta: LayerVariable;\n\n  constructor(args?: LayerNormalizationLayerArgs) {\n    if (args == null) {\n      args = {};\n    }\n    super(args);\n\n    this.axis = args.axis == null ? -1 : args.axis;\n    if (typeof this.axis === 'number') {\n      if (!Number.isInteger(this.axis)) {\n        throw new Error(\n            `Expected axis to be an integer, but received ${this.axis}`);\n      }\n    } else if (Array.isArray(this.axis)) {\n      for (const axis of this.axis) {\n        if (!Number.isInteger(axis)) {\n          throw new Error(\n              `Expected axis to be an array of integers, ` +\n              `but received ${JSON.stringify(this.axis)}`);\n        }\n      }\n    } else {\n      throw new Error(\n          `Expected axis to be an integer or an array of integers, ` +\n          `but received ${JSON.stringify(this.axis)}`);\n    }\n\n    this.epsilon = args.epsilon == null ? 1e-3 : args.epsilon;\n    this.center = args.center == null ? true : args.center;\n    this.scale = args.scale == null ? true : args.scale;\n    this.betaInitializer = getInitializer(args.betaInitializer || 'zeros');\n    this.gammaInitializer = getInitializer(args.gammaInitializer || 'ones');\n    this.betaRegularizer = getRegularizer(args.betaRegularizer);\n    this.gammaRegularizer = getRegularizer(args.gammaRegularizer);\n\n    this.supportsMasking = true;\n  }\n\n  public build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const nDims = inputShape.length;\n\n    // Convert axis to array and resolve negatives.\n    if (typeof this.axis === 'number') {\n      this.axis = [this.axis];\n    }\n    for (let i = 0; i < this.axis.length; ++i) {\n      if (this.axis[i] < 0) {\n        this.axis[i] += nDims;\n      }\n    }\n\n    // Further validate axes.\n    for (const axis of this.axis) {\n      if (axis < 0 || axis >= nDims) {\n        throw new Error(`Invalid axis: ${axis}`);\n      }\n    }\n    if (this.axis.length !== generic_utils.unique(this.axis).length) {\n      throw new Error(`Found duplicate axes in: ${this.axis}`);\n    }\n\n    const paramShape = this.axis.map(axis => inputShape[axis]) as number[];\n\n    const trainable = true;\n    if (this.scale) {\n      this.gamma = this.addWeight(\n          'gamma', paramShape, 'float32', this.gammaInitializer,\n          this.gammaRegularizer, trainable);\n    } else {\n      this.gamma = null;\n    }\n    if (this.center) {\n      this.beta = this.addWeight(\n          'beta', paramShape, 'float32', this.betaInitializer,\n          this.betaRegularizer, trainable);\n    } else {\n      this.beta = null;\n    }\n\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    const input = getExactlyOneTensor(inputs);\n    const inputShape = input.shape;\n    const nDims = inputShape.length;\n\n    return tidy(() => {\n      const keepDims = true;\n      let {mean, variance} = moments(input, this.axis, keepDims);\n      const broadcastShape = generic_utils.pyListRepeat(1, nDims);\n      for (const dim of this.axis as number[]) {\n        broadcastShape[dim] = inputShape[dim];\n      }\n\n      const broadcast = (v: Tensor) => {\n        if (v != null && v.shape.length !== nDims &&\n            this.axis !== [nDims - 1]) {\n          return v.reshape(broadcastShape);\n        } else {\n          return v;\n        }\n      };\n\n      let scale = broadcast(this.gamma.read());\n      let offset = broadcast(this.beta.read());\n\n      // TODO(https://github.com/tensorflow/tfjs/issues/2120): The tiling below\n      // is a workaround for the limitation of core's batchNormalization?d don't\n      // support broadcasting in their gradients. In addition, the tiling is\n      // necessary to ensure correctness on the browser CPU backend regardless\n      // of forward or backward computation. Remove this workaround once the\n      // limitation is addressed. See .\n      const momentsTiling: number[] = [];\n      const scaleOffsetTiling: number[] = [];\n      for (let i = 0; i < nDims; ++i) {\n        if ((this.axis as number[]).indexOf(i) !== -1) {\n          momentsTiling.push(inputShape[i]);\n          scaleOffsetTiling.push(1);\n        } else {\n          momentsTiling.push(1);\n          scaleOffsetTiling.push(inputShape[i]);\n        }\n      }\n      mean = mean.tile(momentsTiling);\n      variance = variance.tile(momentsTiling);\n      scale = scale.tile(scaleOffsetTiling);\n      offset = offset.tile(scaleOffsetTiling);\n\n      return batchNormalization(\n          input, mean, variance, offset, scale, this.epsilon);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      axis: this.axis,\n      epsilon: this.epsilon,\n      center: this.center,\n      scale: this.scale,\n      betaInitializer: serializeInitializer(this.betaInitializer),\n      gammaInitializer: serializeInitializer(this.gammaInitializer),\n      betaRegularizer: serializeRegularizer(this.betaRegularizer),\n      gammaRegularizer: serializeRegularizer(this.gammaRegularizer)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(LayerNormalization);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Padding Layers.\n */\n\n// Porting Note: In Python Keras, the padding layers are in convolutional.py,\n//   but we decided to put them in a separate file (padding.ts) for clarity.\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, tidy} from '@tensorflow/tfjs-core';\n\nimport {imageDataFormat} from '../backend/common';\nimport {InputSpec, Layer, LayerArgs} from '../engine/topology';\nimport {ValueError} from '../errors';\nimport {DataFormat, Shape} from '../keras_format/common';\nimport {Kwargs} from '../types';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\n\n/**\n * Pads the middle dimension of a 3D tensor.\n *\n * @param x Input `tf.Tensor` to be padded.\n * @param padding `Array` of 2 integers, how many zeros to add at the start and\n *   end of the middle dimension (i.e., dimension 1).\n * @return A padded 3D `tf.Tensor`.\n */\nexport function temporalPadding(x: Tensor, padding?: [number, number]): Tensor {\n  return tidy(() => {\n    if (x.rank !== 3) {\n      throw new ValueError(\n          `temporalPadding expects input tensor to be 3-D, but received a ` +\n          `${x.rank}-D tensor.`);\n    }\n\n    if (padding == null) {\n      padding = [1, 1];\n    }\n    if (padding.length !== 2) {\n      throw new ValueError(\n          `temporalPadding expects input padding pattern to be a length-2 ` +\n          `array, but received a length-${padding.length} array.`);\n    }\n\n    const pattern: Array<[number, number]> = [[0, 0], padding, [0, 0]];\n    return tfc.pad(x, pattern);\n  });\n}\n\n/**\n * Pads the 2nd and 3rd dimensions of a 4D tensor.\n *\n * @param x Input `tf.Tensor` to be padded.\n * @param padding `Array` of two `Array`s, each of which is an `Array` of two\n *   integers. The amount of padding at the beginning and end of the 2nd and 3rd\n *   dimensions, respectively.\n * @param dataFormat 'channelsLast' (default) or 'channelsFirst'.\n * @return Padded 4D `tf.Tensor`.\n */\nexport function spatial2dPadding(\n    x: Tensor, padding?: [[number, number], [number, number]],\n    dataFormat?: DataFormat): Tensor {\n  return tidy(() => {\n    if (x.rank !== 4) {\n      throw new ValueError(\n          `temporalPadding expects input tensor to be 4-D, but received a ` +\n          `${x.rank}-D tensor.`);\n    }\n\n    if (padding == null) {\n      padding = [[1, 1], [1, 1]];\n    }\n    if (padding.length !== 2 || padding[0].length !== 2 ||\n        padding[1].length !== 2) {\n      throw new ValueError(\n          'spatial2dPadding expects `padding` to be an Array of two Arrays, ' +\n          'each of which is an Array of two integers.');\n    }\n\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    if (dataFormat !== 'channelsLast' && dataFormat !== 'channelsFirst') {\n      throw new ValueError(\n          `Unknown data format: ${dataFormat}. ` +\n          `Supported data formats are 'channelsLast' and 'channelsFirst.`);\n    }\n\n    let pattern: Array<[number, number]>;\n    if (dataFormat === 'channelsFirst') {\n      pattern = [[0, 0], [0, 0], padding[0], padding[1]];\n    } else {\n      pattern = [[0, 0], padding[0], padding[1], [0, 0]];\n    }\n\n    return tfc.pad(x, pattern);\n  });\n}\n\nexport declare interface ZeroPadding2DLayerArgs extends LayerArgs {\n  /**\n   * Integer, or `Array` of 2 integers, or `Array` of 2 `Array`s, each of\n   * which is an `Array` of 2 integers.\n   * - If integer, the same symmetric padding is applied to width and height.\n   * - If Array` of 2 integers, interpreted as two different symmetric values\n   *   for height and width:\n   *   `[symmetricHeightPad, symmetricWidthPad]`.\n   * - If `Array` of 2 `Array`s, interpreted as:\n   *   `[[topPad, bottomPad], [leftPad, rightPad]]`.\n   */\n  padding?: number|[number, number]|[[number, number], [number, number]];\n\n  /**\n   * One of `'channelsLast'` (default) and `'channelsFirst'`.\n   *\n   * The ordering of the dimensions in the inputs.\n   * `channelsLast` corresponds to inputs with shape\n   * `[batch, height, width, channels]` while `channelsFirst`\n   * corresponds to inputs with shape\n   * `[batch, channels, height, width]`.\n   */\n  dataFormat?: DataFormat;\n}\n\nexport class ZeroPadding2D extends Layer {\n  /** @nocollapse */\n  static className = 'ZeroPadding2D';\n  readonly dataFormat: DataFormat;\n  readonly padding: [[number, number], [number, number]];\n\n  constructor(args?: ZeroPadding2DLayerArgs) {\n    if (args == null) {\n      args = {};\n    }\n    super(args);\n\n    this.dataFormat =\n        args.dataFormat == null ? imageDataFormat() : args.dataFormat;\n    // TODO(cais): Maybe refactor the following logic surrounding `padding`\n    //   into a helper method.\n    if (args.padding == null) {\n      this.padding = [[1, 1], [1, 1]];\n    } else if (typeof args.padding === 'number') {\n      this.padding =\n          [[args.padding, args.padding], [args.padding, args.padding]];\n    } else {\n      args.padding = args.padding;\n      if (args.padding.length !== 2) {\n        throw new ValueError(\n            `ZeroPadding2D expects padding to be a length-2 array, but ` +\n            `received a length-${args.padding.length} array.`);\n      }\n\n      let heightPadding: [number, number];\n      let widthPadding: [number, number];\n      if (typeof args.padding[0] === 'number') {\n        heightPadding = [args.padding[0], args.padding[0]];\n        widthPadding = [args.padding[1] as number, args.padding[1] as number];\n      } else {\n        args.padding = args.padding as [[number, number], [number, number]];\n\n        if (args.padding[0].length !== 2) {\n          throw new ValueError(\n              `ZeroPadding2D expects height padding to be a length-2 array, ` +\n              `but received a length-${args.padding[0].length} array.`);\n        }\n        heightPadding = args.padding[0] as [number, number];\n\n        if (args.padding[1].length !== 2) {\n          throw new ValueError(\n              `ZeroPadding2D expects width padding to be a length-2 array, ` +\n              `but received a length-${args.padding[1].length} array.`);\n        }\n        widthPadding = args.padding[1] as [number, number];\n      }\n      this.padding = [heightPadding, widthPadding];\n    }\n    this.inputSpec = [new InputSpec({ndim: 4})];\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n\n    let rows: number;\n    let cols: number;\n    if (this.dataFormat === 'channelsFirst') {\n      if (inputShape[2] != null && inputShape[2] >= 0) {\n        rows = inputShape[2] + this.padding[0][0] + this.padding[0][1];\n      } else {\n        rows = null;\n      }\n      if (inputShape[3] != null && inputShape[3] >= 0) {\n        cols = inputShape[3] + this.padding[1][0] + this.padding[1][1];\n      } else {\n        cols = null;\n      }\n      return [inputShape[0], inputShape[1], rows, cols];\n    } else {\n      if (inputShape[1] != null && inputShape[1] >= 0) {\n        rows = inputShape[1] + this.padding[0][0] + this.padding[0][1];\n      } else {\n        rows = null;\n      }\n      if (inputShape[2] != null && inputShape[2] >= 0) {\n        cols = inputShape[2] + this.padding[1][0] + this.padding[1][1];\n      } else {\n        cols = null;\n      }\n      return [inputShape[0], rows, cols, inputShape[3]];\n    }\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(\n        () => spatial2dPadding(\n            getExactlyOneTensor(inputs), this.padding, this.dataFormat));\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      padding: this.padding,\n      dataFormat: this.dataFormat,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(ZeroPadding2D);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Pooling Layers.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, Tensor3D, Tensor4D, Tensor5D, tidy} from '@tensorflow/tfjs-core';\n\nimport {imageDataFormat} from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport {checkDataFormat, checkPaddingMode, checkPoolMode} from '../common';\nimport {InputSpec} from '../engine/topology';\nimport {Layer, LayerArgs} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {DataFormat, PaddingMode, PoolMode, Shape} from '../keras_format/common';\nimport {Kwargs} from '../types';\nimport {convOutputLength} from '../utils/conv_utils';\nimport {assertPositiveInteger} from '../utils/generic_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\n\nimport {preprocessConv2DInput, preprocessConv3DInput} from './convolutional';\n\n/**\n * 2D pooling.\n * @param x\n * @param poolSize\n * @param stridesdes strides. Defaults to [1, 1].\n * @param padding padding. Defaults to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param poolMode Mode of pooling. Defaults to 'max'.\n * @returns Result of the 2D pooling.\n */\nexport function pool2d(\n    x: Tensor, poolSize: [number, number], strides?: [number, number],\n    padding?: PaddingMode, dataFormat?: DataFormat,\n    poolMode?: PoolMode): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    checkPoolMode(poolMode);\n    checkPaddingMode(padding);\n    if (strides == null) {\n      strides = [1, 1];\n    }\n    if (padding == null) {\n      padding = 'valid';\n    }\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    if (poolMode == null) {\n      poolMode = 'max';\n    }\n\n    // TODO(cais): Remove the preprocessing step once deeplearn.js supports\n    // dataFormat as an input argument.\n    x = preprocessConv2DInput(x, dataFormat);  // x is NHWC after preprocessing.\n    let y: Tensor;\n    const paddingString = (padding === 'same') ? 'same' : 'valid';\n    if (poolMode === 'max') {\n      // TODO(cais): Rank check?\n      y = tfc.maxPool(x as Tensor4D, poolSize, strides, paddingString);\n    } else {  // 'avg'\n      // TODO(cais): Check the dtype and rank of x and give clear error message\n      //   if those are incorrect.\n      y = tfc.avgPool(\n          // TODO(cais): Rank check?\n          x as Tensor3D | Tensor4D, poolSize, strides, paddingString);\n    }\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);  // NHWC -> NCHW.\n    }\n    return y;\n  });\n}\n\n/**\n * 3D pooling.\n * @param x\n * @param poolSize. Default to [1, 1, 1].\n * @param strides strides. Defaults to [1, 1, 1].\n * @param padding padding. Defaults to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param poolMode Mode of pooling. Defaults to 'max'.\n * @returns Result of the 3D pooling.\n */\nexport function pool3d(\n    x: Tensor5D, poolSize: [number, number, number],\n    strides?: [number, number, number], padding?: PaddingMode,\n    dataFormat?: DataFormat, poolMode?: PoolMode): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    checkPoolMode(poolMode);\n    checkPaddingMode(padding);\n    if (strides == null) {\n      strides = [1, 1, 1];\n    }\n    if (padding == null) {\n      padding = 'valid';\n    }\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    if (poolMode == null) {\n      poolMode = 'max';\n    }\n\n    // x is NDHWC after preprocessing.\n    x = preprocessConv3DInput(x as Tensor, dataFormat) as Tensor5D;\n    let y: Tensor;\n    const paddingString = (padding === 'same') ? 'same' : 'valid';\n    if (poolMode === 'max') {\n      y = tfc.maxPool3d(x, poolSize, strides, paddingString);\n    } else {  // 'avg'\n      y = tfc.avgPool3d(x, poolSize, strides, paddingString);\n    }\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 4, 1, 2, 3]);  // NDHWC -> NCDHW.\n    }\n    return y;\n  });\n}\n\nexport declare interface Pooling1DLayerArgs extends LayerArgs {\n  /**\n   * Size of the window to pool over, should be an integer.\n   */\n  poolSize?: number|[number];\n  /**\n   * Period at which to sample the pooled values.\n   *\n   * If `null`, defaults to `poolSize`.\n   */\n  strides?: number|[number];\n  /** How to fill in data that's not an integer multiple of poolSize. */\n  padding?: PaddingMode;\n}\n\n/**\n * Abstract class for different pooling 1D layers.\n */\nexport abstract class Pooling1D extends Layer {\n  protected readonly poolSize: [number];\n  protected readonly strides: [number];\n  protected readonly padding: PaddingMode;\n\n  /**\n   *\n   * @param args Parameters for the Pooling layer.\n   *\n   * config.poolSize defaults to 2.\n   */\n  constructor(args: Pooling1DLayerArgs) {\n    if (args.poolSize == null) {\n      args.poolSize = 2;\n    }\n    super(args);\n    if (typeof args.poolSize === 'number') {\n      this.poolSize = [args.poolSize];\n    } else if (\n        Array.isArray(args.poolSize) &&\n        (args.poolSize as number[]).length === 1 &&\n        typeof (args.poolSize as number[])[0] === 'number') {\n      this.poolSize = args.poolSize;\n    } else {\n      throw new ValueError(\n          `poolSize for 1D convolutional layer must be a number or an ` +\n          `Array of a single number, but received ` +\n          `${JSON.stringify(args.poolSize)}`);\n    }\n    assertPositiveInteger(this.poolSize, 'poolSize');\n    if (args.strides == null) {\n      this.strides = this.poolSize;\n    } else {\n      if (typeof args.strides === 'number') {\n        this.strides = [args.strides];\n      } else if (\n          Array.isArray(args.strides) &&\n          (args.strides as number[]).length === 1 &&\n          typeof (args.strides as number[])[0] === 'number') {\n        this.strides = args.strides;\n      } else {\n        throw new ValueError(\n            `strides for 1D convolutional layer must be a number or an ` +\n            `Array of a single number, but received ` +\n            `${JSON.stringify(args.strides)}`);\n      }\n    }\n    assertPositiveInteger(this.strides, 'strides');\n\n    this.padding = args.padding == null ? 'valid' : args.padding;\n    checkPaddingMode(this.padding);\n    this.inputSpec = [new InputSpec({ndim: 3})];\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const length = convOutputLength(\n        inputShape[1], this.poolSize[0], this.padding, this.strides[0]);\n    return [inputShape[0], length, inputShape[2]];\n  }\n\n  protected abstract poolingFunction(\n      inputs: Tensor, poolSize: [number, number], strides: [number, number],\n      padding: PaddingMode, dataFormat: DataFormat): Tensor;\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      // Add dummy last dimension.\n      inputs = K.expandDims(getExactlyOneTensor(inputs), 2);\n      const output = this.poolingFunction(\n          getExactlyOneTensor(inputs), [this.poolSize[0], 1],\n          [this.strides[0], 1], this.padding, 'channelsLast');\n      // Remove dummy last dimension.\n      return tfc.squeeze(output, [2]);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      poolSize: this.poolSize,\n      padding: this.padding,\n      strides: this.strides,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n\nexport class MaxPooling1D extends Pooling1D {\n  /** @nocollapse */\n  static className = 'MaxPooling1D';\n  constructor(args: Pooling1DLayerArgs) {\n    super(args);\n  }\n\n  protected poolingFunction(\n      inputs: Tensor, poolSize: [number, number], strides: [number, number],\n      padding: PaddingMode, dataFormat: DataFormat): Tensor {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n  }\n}\nserialization.registerClass(MaxPooling1D);\n\nexport class AveragePooling1D extends Pooling1D {\n  /** @nocollapse */\n  static className = 'AveragePooling1D';\n  constructor(args: Pooling1DLayerArgs) {\n    super(args);\n  }\n\n  protected poolingFunction(\n      inputs: Tensor, poolSize: [number, number], strides: [number, number],\n      padding: PaddingMode, dataFormat: DataFormat): Tensor {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n  }\n}\nserialization.registerClass(AveragePooling1D);\n\nexport declare interface Pooling2DLayerArgs extends LayerArgs {\n  /**\n   * Factors by which to downscale in each dimension [vertical, horizontal].\n   * Expects an integer or an array of 2 integers.\n   *\n   * For example, `[2, 2]` will halve the input in both spatial dimension.\n   * If only one integer is specified, the same window length\n   * will be used for both dimensions.\n   */\n  poolSize?: number|[number, number];\n\n  /**\n   * The size of the stride in each dimension of the pooling window. Expects\n   * an integer or an array of 2 integers. Integer, tuple of 2 integers, or\n   * None.\n   *\n   * If `null`, defaults to `poolSize`.\n   */\n  strides?: number|[number, number];\n\n  /** The padding type to use for the pooling layer. */\n  padding?: PaddingMode;\n  /** The data format to use for the pooling layer. */\n  dataFormat?: DataFormat;\n}\n\n/**\n * Abstract class for different pooling 2D layers.\n */\nexport abstract class Pooling2D extends Layer {\n  protected readonly poolSize: [number, number];\n  protected readonly strides: [number, number];\n  protected readonly padding: PaddingMode;\n  protected readonly dataFormat: DataFormat;\n\n  constructor(args: Pooling2DLayerArgs) {\n    if (args.poolSize == null) {\n      args.poolSize = [2, 2];\n    }\n    super(args);\n    this.poolSize = Array.isArray(args.poolSize) ?\n        args.poolSize :\n        [args.poolSize, args.poolSize];\n    if (args.strides == null) {\n      this.strides = this.poolSize;\n    } else if (Array.isArray(args.strides)) {\n      if (args.strides.length !== 2) {\n        throw new ValueError(\n            `If the strides property of a 2D pooling layer is an Array, ` +\n            `it is expected to have a length of 2, but received length ` +\n            `${args.strides.length}.`);\n      }\n      this.strides = args.strides;\n    } else {\n      // `config.strides` is a number.\n      this.strides = [args.strides, args.strides];\n    }\n    assertPositiveInteger(this.poolSize, 'poolSize');\n    assertPositiveInteger(this.strides, 'strides');\n    this.padding = args.padding == null ? 'valid' : args.padding;\n    this.dataFormat =\n        args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    checkPaddingMode(this.padding);\n\n    this.inputSpec = [new InputSpec({ndim: 4})];\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    let rows =\n        this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n    let cols =\n        this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n    rows =\n        convOutputLength(rows, this.poolSize[0], this.padding, this.strides[0]);\n    cols =\n        convOutputLength(cols, this.poolSize[1], this.padding, this.strides[1]);\n    if (this.dataFormat === 'channelsFirst') {\n      return [inputShape[0], inputShape[1], rows, cols];\n    } else {\n      return [inputShape[0], rows, cols, inputShape[3]];\n    }\n  }\n\n  protected abstract poolingFunction(\n      inputs: Tensor, poolSize: [number, number], strides: [number, number],\n      padding: PaddingMode, dataFormat: DataFormat): Tensor;\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      return this.poolingFunction(\n          getExactlyOneTensor(inputs), this.poolSize, this.strides,\n          this.padding, this.dataFormat);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      poolSize: this.poolSize,\n      padding: this.padding,\n      strides: this.strides,\n      dataFormat: this.dataFormat\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n\nexport class MaxPooling2D extends Pooling2D {\n  /** @nocollapse */\n  static className = 'MaxPooling2D';\n  constructor(args: Pooling2DLayerArgs) {\n    super(args);\n  }\n\n  protected poolingFunction(\n      inputs: Tensor, poolSize: [number, number], strides: [number, number],\n      padding: PaddingMode, dataFormat: DataFormat): Tensor {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n  }\n}\nserialization.registerClass(MaxPooling2D);\n\nexport class AveragePooling2D extends Pooling2D {\n  /** @nocollapse */\n  static className = 'AveragePooling2D';\n  constructor(args: Pooling2DLayerArgs) {\n    super(args);\n  }\n\n  protected poolingFunction(\n      inputs: Tensor, poolSize: [number, number], strides: [number, number],\n      padding: PaddingMode, dataFormat: DataFormat): Tensor {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n  }\n}\nserialization.registerClass(AveragePooling2D);\n\nexport declare interface Pooling3DLayerArgs extends LayerArgs {\n  /**\n   * Factors by which to downscale in each dimension [depth, height, width].\n   * Expects an integer or an array of 3 integers.\n   *\n   * For example, `[2, 2, 2]` will halve the input in three dimensions.\n   * If only one integer is specified, the same window length\n   * will be used for all dimensions.\n   */\n  poolSize?: number|[number, number, number];\n\n  /**\n   * The size of the stride in each dimension of the pooling window. Expects\n   * an integer or an array of 3 integers. Integer, tuple of 3 integers, or\n   * None.\n   *\n   * If `null`, defaults to `poolSize`.\n   */\n  strides?: number|[number, number, number];\n\n  /** The padding type to use for the pooling layer. */\n  padding?: PaddingMode;\n  /** The data format to use for the pooling layer. */\n  dataFormat?: DataFormat;\n}\n\n/**\n * Abstract class for different pooling 3D layers.\n */\nexport abstract class Pooling3D extends Layer {\n  protected readonly poolSize: [number, number, number];\n  protected readonly strides: [number, number, number];\n  protected readonly padding: PaddingMode;\n  protected readonly dataFormat: DataFormat;\n\n  constructor(args: Pooling3DLayerArgs) {\n    if (args.poolSize == null) {\n      args.poolSize = [2, 2, 2];\n    }\n    super(args);\n    this.poolSize = Array.isArray(args.poolSize) ?\n        args.poolSize :\n        [args.poolSize, args.poolSize, args.poolSize];\n    if (args.strides == null) {\n      this.strides = this.poolSize;\n    } else if (Array.isArray(args.strides)) {\n      if (args.strides.length !== 3) {\n        throw new ValueError(\n            `If the strides property of a 3D pooling layer is an Array, ` +\n            `it is expected to have a length of 3, but received length ` +\n            `${args.strides.length}.`);\n      }\n      this.strides = args.strides;\n    } else {\n      // `config.strides` is a number.\n      this.strides = [args.strides, args.strides, args.strides];\n    }\n    assertPositiveInteger(this.poolSize, 'poolSize');\n    assertPositiveInteger(this.strides, 'strides');\n    this.padding = args.padding == null ? 'valid' : args.padding;\n    this.dataFormat =\n        args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    checkPaddingMode(this.padding);\n\n    this.inputSpec = [new InputSpec({ndim: 5})];\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    let depths =\n        this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n    let rows =\n        this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n    let cols =\n        this.dataFormat === 'channelsFirst' ? inputShape[4] : inputShape[3];\n    depths = convOutputLength(\n        depths, this.poolSize[0], this.padding, this.strides[0]);\n    rows =\n        convOutputLength(rows, this.poolSize[1], this.padding, this.strides[1]);\n    cols =\n        convOutputLength(cols, this.poolSize[2], this.padding, this.strides[2]);\n    if (this.dataFormat === 'channelsFirst') {\n      return [inputShape[0], inputShape[1], depths, rows, cols];\n    } else {\n      return [inputShape[0], depths, rows, cols, inputShape[4]];\n    }\n  }\n\n  protected abstract poolingFunction(\n      inputs: Tensor, poolSize: [number, number, number],\n      strides: [number, number, number], padding: PaddingMode,\n      dataFormat: DataFormat): Tensor;\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      return this.poolingFunction(\n          getExactlyOneTensor(inputs), this.poolSize, this.strides,\n          this.padding, this.dataFormat);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      poolSize: this.poolSize,\n      padding: this.padding,\n      strides: this.strides,\n      dataFormat: this.dataFormat\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n\nexport class MaxPooling3D extends Pooling3D {\n  /** @nocollapse */\n  static className = 'MaxPooling3D';\n  constructor(args: Pooling3DLayerArgs) {\n    super(args);\n  }\n\n  protected poolingFunction(\n      inputs: Tensor, poolSize: [number, number, number],\n      strides: [number, number, number], padding: PaddingMode,\n      dataFormat: DataFormat): Tensor {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool3d(\n        inputs as Tensor5D, poolSize, strides, padding, dataFormat, 'max');\n  }\n}\nserialization.registerClass(MaxPooling3D);\n\nexport class AveragePooling3D extends Pooling3D {\n  /** @nocollapse */\n  static className = 'AveragePooling3D';\n  constructor(args: Pooling3DLayerArgs) {\n    super(args);\n  }\n\n  protected poolingFunction(\n      inputs: Tensor, poolSize: [number, number, number],\n      strides: [number, number, number], padding: PaddingMode,\n      dataFormat: DataFormat): Tensor {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool3d(\n        inputs as Tensor5D, poolSize, strides, padding, dataFormat, 'avg');\n  }\n}\nserialization.registerClass(AveragePooling3D);\n\n/**\n * Abstract class for different global pooling 1D layers.\n */\nexport abstract class GlobalPooling1D extends Layer {\n  constructor(args: LayerArgs) {\n    super(args);\n    this.inputSpec = [new InputSpec({ndim: 3})];\n  }\n\n  computeOutputShape(inputShape: Shape): Shape {\n    return [inputShape[0], inputShape[2]];\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    throw new NotImplementedError();\n  }\n}\n\nexport class GlobalAveragePooling1D extends GlobalPooling1D {\n  /** @nocollapse */\n  static className = 'GlobalAveragePooling1D';\n  constructor(args?: LayerArgs) {\n    super(args || {});\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const input = getExactlyOneTensor(inputs);\n      return tfc.mean(input, 1);\n    });\n  }\n}\nserialization.registerClass(GlobalAveragePooling1D);\n\nexport class GlobalMaxPooling1D extends GlobalPooling1D {\n  /** @nocollapse */\n  static className = 'GlobalMaxPooling1D';\n  constructor(args: LayerArgs) {\n    super(args || {});\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const input = getExactlyOneTensor(inputs);\n      return tfc.max(input, 1);\n    });\n  }\n}\nserialization.registerClass(GlobalMaxPooling1D);\n\nexport declare interface GlobalPooling2DLayerArgs extends LayerArgs {\n  /**\n   * One of `CHANNEL_LAST` (default) or `CHANNEL_FIRST`.\n   *\n   * The ordering of the dimensions in the inputs. `CHANNEL_LAST` corresponds\n   * to inputs with shape `[batch, height, width, channels[` while\n   * `CHANNEL_FIRST` corresponds to inputs with shape\n   * `[batch, channels, height, width]`.\n   */\n  dataFormat?: DataFormat;\n}\n\n/**\n * Abstract class for different global pooling 2D layers.\n */\nexport abstract class GlobalPooling2D extends Layer {\n  protected dataFormat: DataFormat;\n  constructor(args: GlobalPooling2DLayerArgs) {\n    super(args);\n    this.dataFormat =\n        args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.inputSpec = [new InputSpec({ndim: 4})];\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = inputShape as Shape;\n    if (this.dataFormat === 'channelsLast') {\n      return [inputShape[0], inputShape[3]];\n    } else {\n      return [inputShape[0], inputShape[1]];\n    }\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    throw new NotImplementedError();\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {dataFormat: this.dataFormat};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n\nexport class GlobalAveragePooling2D extends GlobalPooling2D {\n  /** @nocollapse */\n  static className = 'GlobalAveragePooling2D';\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const input = getExactlyOneTensor(inputs);\n      if (this.dataFormat === 'channelsLast') {\n        return tfc.mean(input, [1, 2]);\n      } else {\n        return tfc.mean(input, [2, 3]);\n      }\n    });\n  }\n}\nserialization.registerClass(GlobalAveragePooling2D);\n\nexport class GlobalMaxPooling2D extends GlobalPooling2D {\n  /** @nocollapse */\n  static className = 'GlobalMaxPooling2D';\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const input = getExactlyOneTensor(inputs);\n      if (this.dataFormat === 'channelsLast') {\n        return tfc.max(input, [1, 2]);\n      } else {\n        return tfc.max(input, [2, 3]);\n      }\n    });\n  }\n}\nserialization.registerClass(GlobalMaxPooling2D);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Recurrent Neural Network Layers.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {DataType, serialization, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {Activation, getActivation, serializeActivation} from '../activations';\nimport * as K from '../backend/tfjs_backend';\nimport {nameScope} from '../common';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {InputSpec, SymbolicTensor} from '../engine/topology';\nimport {Layer, LayerArgs} from '../engine/topology';\nimport {AttributeError, NotImplementedError, ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, Ones, serializeInitializer} from '../initializers';\nimport {ActivationIdentifier} from '../keras_format/activation_config';\nimport {Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs, RnnStepFunction} from '../types';\nimport {assertPositiveInteger} from '../utils/generic_utils';\nimport * as math_utils from '../utils/math_utils';\nimport {getExactlyOneShape, getExactlyOneTensor, isArrayOfShapes} from '../utils/types_utils';\nimport {batchGetValue, batchSetValue, LayerVariable} from '../variables';\nimport {deserialize} from './serialization';\n\n/**\n * Standardize `apply()` args to a single list of tensor inputs.\n *\n * When running a model loaded from file, the input tensors `initialState` and\n * `constants` are passed to `RNN.apply()` as part of `inputs` instead of the\n * dedicated kwargs fields. `inputs` consists of\n * `[inputs, initialState0, initialState1, ..., constant0, constant1]` in this\n * case.\n * This method makes sure that arguments are\n * separated and that `initialState` and `constants` are `Array`s of tensors\n * (or None).\n *\n * @param inputs Tensor or `Array` of  tensors.\n * @param initialState Tensor or `Array` of tensors or `null`/`undefined`.\n * @param constants Tensor or `Array` of tensors or `null`/`undefined`.\n * @returns An object consisting of\n *   inputs: A tensor.\n *   initialState: `Array` of tensors or `null`.\n *   constants: `Array` of tensors or `null`.\n * @throws ValueError, if `inputs` is an `Array` but either `initialState` or\n *   `constants` is provided.\n */\nexport function standardizeArgs(\n    inputs: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n    initialState: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n    constants: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n    numConstants?: number): {\n  inputs: Tensor|SymbolicTensor,\n  initialState: Tensor[]|SymbolicTensor[],\n  constants: Tensor[]|SymbolicTensor[]\n} {\n  if (Array.isArray(inputs)) {\n    if (initialState != null || constants != null) {\n      throw new ValueError(\n          'When inputs is an array, neither initialState or constants ' +\n          'should be provided');\n    }\n    if (numConstants != null) {\n      constants = inputs.slice(inputs.length - numConstants, inputs.length);\n      inputs = inputs.slice(0, inputs.length - numConstants);\n    }\n    if (inputs.length > 1) {\n      initialState = inputs.slice(1, inputs.length);\n    }\n    inputs = inputs[0];\n  }\n\n  function toListOrNull(x: Tensor|Tensor[]|SymbolicTensor|\n                        SymbolicTensor[]): Tensor[]|SymbolicTensor[] {\n    if (x == null || Array.isArray(x)) {\n      return x as Tensor[] | SymbolicTensor[];\n    } else {\n      return [x] as Tensor[] | SymbolicTensor[];\n    }\n  }\n\n  initialState = toListOrNull(initialState);\n  constants = toListOrNull(constants);\n\n  return {inputs, initialState, constants};\n}\n\n/**\n * Iterates over the time dimension of a tensor.\n *\n * @param stepFunction RNN step function.\n *   Parameters:\n *     inputs: tensor with shape `[samples, ...]` (no time dimension),\n *       representing input for the batch of samples at a certain time step.\n *     states: an Array of tensors.\n *   Returns:\n *     outputs: tensor with shape `[samples, outputDim]` (no time dimension).\n *     newStates: list of tensors, same length and shapes as `states`. The first\n *       state in the list must be the output tensor at the previous timestep.\n * @param inputs Tensor of temporal data of shape `[samples, time, ...]` (at\n *   least 3D).\n * @param initialStates Tensor with shape `[samples, outputDim]` (no time\n *   dimension), containing the initial values of the states used in the step\n *   function.\n * @param goBackwards If `true`, do the iteration over the time dimension in\n *   reverse order and return the reversed sequence.\n * @param mask Binary tensor with shape `[sample, time, 1]`, with a zero for\n *   every element that is masked.\n * @param constants An Array of constant values passed at each step.\n * @param unroll Whether to unroll the RNN or to use a symbolic loop. *Not*\n *   applicable to this imperative deeplearn.js backend. Its value is ignored.\n * @param needPerStepOutputs Whether the per-step outputs are to be\n *   concatenated into a single tensor and returned (as the second return\n *   value). Default: `false`. This arg is included so that the relatively\n *   expensive concatenation of the stepwise outputs can be omitted unless\n *   the stepwise outputs need to be kept (e.g., for an LSTM layer of which\n *   `returnSequence` is `true`.)\n * @returns An Array: `[lastOutput, outputs, newStates]`.\n *   lastOutput: the lastest output of the RNN, of shape `[samples, ...]`.\n *   outputs: tensor with shape `[samples, time, ...]` where each entry\n *     `output[s, t]` is the output of the step function at time `t` for sample\n *     `s`. This return value is provided if and only if the\n *     `needPerStepOutputs` is set as `true`. If it is set as `false`, this\n *     return value will be `undefined`.\n *   newStates: Array of tensors, latest states returned by the step function,\n *      of shape `(samples, ...)`.\n * @throws ValueError If input dimension is less than 3.\n *\n * TODO(nielsene): This needs to be tidy-ed.\n */\nexport function rnn(\n    stepFunction: RnnStepFunction, inputs: Tensor, initialStates: Tensor[],\n    goBackwards = false, mask?: Tensor, constants?: Tensor[], unroll = false,\n    needPerStepOutputs = false): [Tensor, Tensor, Tensor[]] {\n  return tfc.tidy(() => {\n    const ndim = inputs.shape.length;\n    if (ndim < 3) {\n      throw new ValueError(`Input should be at least 3D, but is ${ndim}D.`);\n    }\n\n    // Transpose to time-major, i.e., from [batch, time, ...] to [time, batch,\n    // ...].\n    const axes = [1, 0].concat(math_utils.range(2, ndim));\n    inputs = tfc.transpose(inputs, axes);\n\n    if (constants != null) {\n      throw new NotImplementedError(\n          'The rnn() functoin of the deeplearn.js backend does not support ' +\n          'constants yet.');\n    }\n\n    // Porting Note: the unroll option is ignored by the imperative backend.\n    if (unroll) {\n      console.warn(\n          'Backend rnn(): the unroll = true option is not applicable to the ' +\n          'imperative deeplearn.js backend.');\n    }\n\n    if (mask != null) {\n      mask = mask.asType('bool').asType('float32');\n      if (mask.rank === ndim - 1) {\n        mask = tfc.expandDims(mask, -1);\n      }\n      mask = tfc.transpose(mask, axes);\n    }\n\n    if (goBackwards) {\n      inputs = tfc.reverse(inputs, 0);\n      if (mask != null) {\n        mask = tfc.reverse(mask, 0);\n      }\n    }\n\n    // Porting Note: PyKeras with TensorFlow backend uses a symbolic loop\n    //   (tf.while_loop). But for the imperative deeplearn.js backend, we just\n    //   use the usual TypeScript control flow to iterate over the time steps in\n    //   the inputs.\n    // Porting Note: PyKeras patches a \"_use_learning_phase\" attribute to\n    // outputs.\n    //   This is not idiomatic in TypeScript. The info regarding whether we are\n    //   in a learning (i.e., training) phase for RNN is passed in a different\n    //   way.\n\n    const perStepOutputs: Tensor[] = [];\n    let lastOutput: Tensor;\n    let states = initialStates;\n    const timeSteps = inputs.shape[0];\n    const perStepInputs = tfc.unstack(inputs);\n    let perStepMasks: Tensor[];\n    if (mask != null) {\n      perStepMasks = tfc.unstack(mask);\n    }\n\n    for (let t = 0; t < timeSteps; ++t) {\n      const currentInput = perStepInputs[t];\n      const stepOutputs = tfc.tidy(() => stepFunction(currentInput, states));\n\n      if (mask == null) {\n        lastOutput = stepOutputs[0];\n        states = stepOutputs[1];\n      } else {\n        const maskedOutputs = tfc.tidy(() => {\n          const stepMask = perStepMasks[t];\n          const negStepMask = tfc.onesLike(stepMask).sub(stepMask);\n          // TODO(cais): Would tfc.where() be better for performance?\n          const output = stepOutputs[0].mul(stepMask).addStrict(\n              states[0].mul(negStepMask));\n          const newStates = states.map((state, i) => {\n            return stepOutputs[1][i].mul(stepMask).addStrict(\n                state.mul(negStepMask));\n          });\n          return {output, newStates};\n        });\n        lastOutput = maskedOutputs.output;\n        states = maskedOutputs.newStates;\n      }\n\n      if (needPerStepOutputs) {\n        perStepOutputs.push(lastOutput);\n      }\n    }\n    let outputs: Tensor;\n    if (needPerStepOutputs) {\n      const axis = 1;\n      outputs = tfc.stack(perStepOutputs, axis);\n    }\n    return [lastOutput, outputs, states] as [Tensor, Tensor, Tensor[]];\n  });\n}\n\nexport declare interface BaseRNNLayerArgs extends LayerArgs {\n  /**\n   * A RNN cell instance. A RNN cell is a class that has:\n   *   - a `call()` method, which takes `[Tensor, Tensor]` as the\n   *     first input argument. The first item is the input at time t, and\n   *     second item is the cell state at time t.\n   *     The `call()` method returns `[outputAtT, statesAtTPlus1]`.\n   *     The `call()` method of the cell can also take the argument `constants`,\n   *     see section \"Note on passing external constants\" below.\n   *     Porting Node: PyKeras overrides the `call()` signature of RNN cells,\n   *       which are Layer subtypes, to accept two arguments. tfjs-layers does\n   *       not do such overriding. Instead we preseve the `call()` signature,\n   *       which due to its `Tensor|Tensor[]` argument and return value, is\n   *       flexible enough to handle the inputs and states.\n   *   - a `stateSize` attribute. This can be a single integer (single state)\n   *     in which case it is the size of the recurrent state (which should be\n   *     the same as the size of the cell output). This can also be an Array of\n   *     integers (one size per state). In this case, the first entry\n   *     (`stateSize[0]`) should be the same as the size of the cell output.\n   * It is also possible for `cell` to be a list of RNN cell instances, in which\n   * case the cells get stacked on after the other in the RNN, implementing an\n   * efficient stacked RNN.\n   */\n  cell?: RNNCell|RNNCell[];\n\n  /**\n   * Whether to return the last output in the output sequence, or the full\n   * sequence.\n   */\n  returnSequences?: boolean;\n\n  /**\n   * Whether to return the last state in addition to the output.\n   */\n  returnState?: boolean;\n\n  /**\n   * If `true`, process the input sequence backwards and return the reversed\n   * sequence (default: `false`).\n   */\n  goBackwards?: boolean;\n\n  /**\n   * If `true`, the last state for each sample at index i in a batch will be\n   * used as initial state of the sample of index i in the following batch\n   * (default: `false`).\n   *\n   * You can set RNN layers to be \"stateful\", which means that the states\n   * computed for the samples in one batch will be reused as initial states\n   * for the samples in the next batch. This assumes a one-to-one mapping\n   * between samples in different successive batches.\n   *\n   * To enable \"statefulness\":\n   *   - specify `stateful: true` in the layer constructor.\n   *   - specify a fixed batch size for your model, by passing\n   *     - if sequential model:\n   *       `batchInputShape: [...]` to the first layer in your model.\n   *     - else for functional model with 1 or more Input layers:\n   *       `batchShape: [...]` to all the first layers in your model.\n   *     This is the expected shape of your inputs\n   *     *including the batch size*.\n   *     It should be a tuple of integers, e.g., `[32, 10, 100]`.\n   *   - specify `shuffle: false` when calling `LayersModel.fit()`.\n   *\n   * To reset the state of your model, call `resetStates()` on either the\n   * specific layer or on the entire model.\n   */\n  stateful?: boolean;\n  // TODO(cais): Explore whether we can warn users when they fail to set\n  //   `shuffle: false` when training a model consisting of stateful RNNs\n  //   and any stateful Layers in general.\n\n  /**\n   * If `true`, the network will be unrolled, else a symbolic loop will be\n   * used. Unrolling can speed-up a RNN, although it tends to be more memory-\n   * intensive. Unrolling is only suitable for short sequences (default:\n   * `false`).\n   * Porting Note: tfjs-layers has an imperative backend. RNNs are executed with\n   *   normal TypeScript control flow. Hence this property is inapplicable and\n   *   ignored in tfjs-layers.\n   */\n  unroll?: boolean;\n\n  /**\n   * Dimensionality of the input (integer).\n   *   This option (or alternatively, the option `inputShape`) is required when\n   *   this layer is used as the first layer in a model.\n   */\n  inputDim?: number;\n\n  /**\n   * Length of the input sequences, to be specified when it is constant.\n   * This argument is required if you are going to connect `Flatten` then\n   * `Dense` layers upstream (without it, the shape of the dense outputs cannot\n   * be computed). Note that if the recurrent layer is not the first layer in\n   * your model, you would need to specify the input length at the level of the\n   * first layer (e.g., via the `inputShape` option).\n   */\n  inputLength?: number;\n}\n\nexport class RNN extends Layer {\n  /** @nocollapse */\n  static className = 'RNN';\n  public readonly cell: RNNCell;\n  public readonly returnSequences: boolean;\n  public readonly returnState: boolean;\n  public readonly goBackwards: boolean;\n  public readonly unroll: boolean;\n\n  public stateSpec: InputSpec[];\n  private states_: Tensor[];\n\n  // NOTE(cais): For stateful RNNs, the old states cannot be disposed right\n  // away when new states are set, because the old states may need to be used\n  // later for backpropagation through time (BPTT) and other purposes. So we\n  // keep them here for final disposal when the state is reset completely\n  // (i.e., through no-arg call to `resetStates()`).\n  private keptStates: Tensor[][];\n\n  private numConstants: number;\n\n  constructor(args: RNNLayerArgs) {\n    super(args);\n    let cell: RNNCell;\n    if (args.cell == null) {\n      throw new ValueError(\n          'cell property is missing for the constructor of RNN.');\n    } else if (Array.isArray(args.cell)) {\n      cell = new StackedRNNCells({cells: args.cell});\n    } else {\n      cell = args.cell;\n    }\n    if (cell.stateSize == null) {\n      throw new ValueError(\n          'The RNN cell should have an attribute `stateSize` (tuple of ' +\n          'integers, one integer per RNN state).');\n    }\n    this.cell = cell;\n    this.returnSequences =\n        args.returnSequences == null ? false : args.returnSequences;\n    this.returnState = args.returnState == null ? false : args.returnState;\n    this.goBackwards = args.goBackwards == null ? false : args.goBackwards;\n    this._stateful = args.stateful == null ? false : args.stateful;\n    this.unroll = args.unroll == null ? false : args.unroll;\n\n    this.supportsMasking = true;\n    this.inputSpec = [new InputSpec({ndim: 3})];\n    this.stateSpec = null;\n    this.states_ = null;\n    // TODO(cais): Add constantsSpec and numConstants.\n    this.numConstants = null;\n    // TODO(cais): Look into the use of initial_state in the kwargs of the\n    //   constructor.\n\n    this.keptStates = [];\n  }\n\n  // Porting Note: This is the equivalent of `RNN.states` property getter in\n  //   PyKeras.\n  getStates(): Tensor[] {\n    if (this.states_ == null) {\n      const numStates =\n          Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      return math_utils.range(0, numStates).map(x => null);\n    } else {\n      return this.states_;\n    }\n  }\n\n  // Porting Note: This is the equivalent of the `RNN.states` property setter in\n  //   PyKeras.\n  setStates(states: Tensor[]): void {\n    this.states_ = states;\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    if (isArrayOfShapes(inputShape)) {\n      inputShape = (inputShape as Shape[])[0];\n    }\n    inputShape = inputShape as Shape;\n\n    // TODO(cais): Remove the casting once stacked RNN cells become supported.\n    let stateSize = this.cell.stateSize;\n    if (!Array.isArray(stateSize)) {\n      stateSize = [stateSize];\n    }\n    const outputDim = stateSize[0];\n    let outputShape: Shape|Shape[];\n    if (this.returnSequences) {\n      outputShape = [inputShape[0], inputShape[1], outputDim];\n    } else {\n      outputShape = [inputShape[0], outputDim];\n    }\n\n    if (this.returnState) {\n      const stateShape: Shape[] = [];\n      for (const dim of stateSize) {\n        stateShape.push([inputShape[0], dim]);\n      }\n      return [outputShape].concat(stateShape);\n    } else {\n      return outputShape;\n    }\n  }\n\n  computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]): Tensor\n      |Tensor[] {\n    return tfc.tidy(() => {\n      if (Array.isArray(mask)) {\n        mask = mask[0];\n      }\n      const outputMask = this.returnSequences ? mask : null;\n\n      if (this.returnState) {\n        const stateMask = this.states.map(s => null);\n        return [outputMask].concat(stateMask);\n      } else {\n        return outputMask;\n      }\n    });\n  }\n\n  /**\n   * Get the current state tensors of the RNN.\n   *\n   * If the state hasn't been set, return an array of `null`s of the correct\n   * length.\n   */\n  get states(): Tensor[] {\n    if (this.states_ == null) {\n      const numStates =\n          Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      const output: Tensor[] = [];\n      for (let i = 0; i < numStates; ++i) {\n        output.push(null);\n      }\n      return output;\n    } else {\n      return this.states_;\n    }\n  }\n\n  set states(s: Tensor[]) {\n    this.states_ = s;\n  }\n\n  public build(inputShape: Shape|Shape[]): void {\n    // Note inputShape will be an Array of Shapes of initial states and\n    // constants if these are passed in apply().\n    const constantShape: Shape[] = null;\n    if (this.numConstants != null) {\n      throw new NotImplementedError(\n          'Constants support is not implemented in RNN yet.');\n    }\n\n    if (isArrayOfShapes(inputShape)) {\n      inputShape = (inputShape as Shape[])[0];\n    }\n    inputShape = inputShape as Shape;\n\n    const batchSize: number = this.stateful ? inputShape[0] : null;\n    const inputDim = inputShape[inputShape.length - 1];\n    this.inputSpec[0] = new InputSpec({shape: [batchSize, null, inputDim]});\n\n    // Allow cell (if RNNCell Layer) to build before we set or validate\n    // stateSpec.\n    const stepInputShape = [inputShape[0]].concat(inputShape.slice(2));\n    if (constantShape != null) {\n      throw new NotImplementedError(\n          'Constants support is not implemented in RNN yet.');\n    } else {\n      this.cell.build(stepInputShape);\n    }\n\n    // Set or validate stateSpec.\n    let stateSize: number[];\n    if (Array.isArray(this.cell.stateSize)) {\n      stateSize = this.cell.stateSize;\n    } else {\n      stateSize = [this.cell.stateSize];\n    }\n\n    if (this.stateSpec != null) {\n      if (!util.arraysEqual(\n              this.stateSpec.map(spec => spec.shape[spec.shape.length - 1]),\n              stateSize)) {\n        throw new ValueError(\n            `An initialState was passed that is not compatible with ` +\n            `cell.stateSize. Received stateSpec=${this.stateSpec}; ` +\n            `However cell.stateSize is ${this.cell.stateSize}`);\n      }\n    } else {\n      this.stateSpec =\n          stateSize.map(dim => new InputSpec({shape: [null, dim]}));\n    }\n    if (this.stateful) {\n      this.resetStates();\n    }\n  }\n\n  /**\n   * Reset the state tensors of the RNN.\n   *\n   * If the `states` argument is `undefined` or `null`, will set the\n   * state tensor(s) of the RNN to all-zero tensors of the appropriate\n   * shape(s).\n   *\n   * If `states` is provided, will set the state tensors of the RNN to its\n   * value.\n   *\n   * @param states Optional externally-provided initial states.\n   * @param training Whether this call is done during training. For stateful\n   *   RNNs, this affects whether the old states are kept or discarded. In\n   *   particular, if `training` is `true`, the old states will be kept so\n   *   that subsequent backpropgataion through time (BPTT) may work properly.\n   *   Else, the old states will be discarded.\n   */\n  resetStates(states?: Tensor|Tensor[], training = false): void {\n    tidy(() => {\n      if (!this.stateful) {\n        throw new AttributeError(\n            'Cannot call resetStates() on an RNN Layer that is not stateful.');\n      }\n      const batchSize = this.inputSpec[0].shape[0];\n      if (batchSize == null) {\n        throw new ValueError(\n            'If an RNN is stateful, it needs to know its batch size. Specify ' +\n            'the batch size of your input tensors: \\n' +\n            '- If using a Sequential model, specify the batch size by ' +\n            'passing a `batchInputShape` option to your first layer.\\n' +\n            '- If using the functional API, specify the batch size by ' +\n            'passing a `batchShape` option to your Input layer.');\n      }\n      // Initialize state if null.\n      if (this.states_ == null) {\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ =\n              this.cell.stateSize.map(dim => tfc.zeros([batchSize, dim]));\n        } else {\n          this.states_ = [tfc.zeros([batchSize, this.cell.stateSize])];\n        }\n      } else if (states == null) {\n        // Dispose old state tensors.\n        tfc.dispose(this.states_);\n        // For stateful RNNs, fully dispose kept old states.\n        if (this.keptStates != null) {\n          tfc.dispose(this.keptStates);\n          this.keptStates = [];\n        }\n\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ =\n              this.cell.stateSize.map(dim => tfc.zeros([batchSize, dim]));\n        } else {\n          this.states_[0] = tfc.zeros([batchSize, this.cell.stateSize]);\n        }\n      } else {\n        if (!Array.isArray(states)) {\n          states = [states];\n        }\n        if (states.length !== this.states_.length) {\n          throw new ValueError(\n              `Layer ${this.name} expects ${this.states_.length} state(s), ` +\n              `but it received ${states.length} state value(s). Input ` +\n              `received: ${states}`);\n        }\n\n        if (training === true) {\n          // Store old state tensors for complete disposal later, i.e., during\n          // the next no-arg call to this method. We do not dispose the old\n          // states immediately because that BPTT (among other things) require\n          // them.\n          this.keptStates.push(this.states_.slice());\n        } else {\n          tfc.dispose(this.states_);\n        }\n\n        for (let index = 0; index < this.states_.length; ++index) {\n          const value = states[index];\n          const dim = Array.isArray(this.cell.stateSize) ?\n              this.cell.stateSize[index] :\n              this.cell.stateSize;\n          const expectedShape = [batchSize, dim];\n          if (!util.arraysEqual(value.shape, expectedShape)) {\n            throw new ValueError(\n                `State ${index} is incompatible with layer ${this.name}: ` +\n                `expected shape=${expectedShape}, received shape=${\n                    value.shape}`);\n          }\n          this.states_[index] = value;\n        }\n      }\n      this.states_ = this.states_.map(state => tfc.keep(state.clone()));\n    });\n  }\n\n  apply(\n      inputs: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n      kwargs?: Kwargs): Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[] {\n    // TODO(cais): Figure out whether initialState is in kwargs or inputs.\n    let initialState: Tensor[]|SymbolicTensor[] =\n        kwargs == null ? null : kwargs['initialState'];\n    let constants: Tensor[]|SymbolicTensor[] =\n        kwargs == null ? null : kwargs['constants'];\n    if (kwargs == null) {\n      kwargs = {};\n    }\n\n    const standardized =\n        standardizeArgs(inputs, initialState, constants, this.numConstants);\n    inputs = standardized.inputs;\n    initialState = standardized.initialState;\n    constants = standardized.constants;\n\n    // If any of `initial_state` or `constants` are specified and are\n    // `tf.SymbolicTensor`s, then add them to the inputs and temporarily modify\n    // the input_spec to include them.\n\n    let additionalInputs: Array<Tensor|SymbolicTensor> = [];\n    let additionalSpecs: InputSpec[] = [];\n    if (initialState != null) {\n      kwargs['initialState'] = initialState;\n      additionalInputs = additionalInputs.concat(initialState);\n      this.stateSpec = [];\n      for (const state of initialState) {\n        this.stateSpec.push(new InputSpec({shape: state.shape}));\n      }\n      // TODO(cais): Use the following instead.\n      // this.stateSpec = initialState.map(state => new InputSpec({shape:\n      // state.shape}));\n      additionalSpecs = additionalSpecs.concat(this.stateSpec);\n    }\n    if (constants != null) {\n      kwargs['constants'] = constants;\n      additionalInputs = additionalInputs.concat(constants);\n      // TODO(cais): Add this.constantsSpec.\n      this.numConstants = constants.length;\n    }\n\n    const isTensor = additionalInputs[0] instanceof SymbolicTensor;\n    if (isTensor) {\n      // Compute full input spec, including state and constants.\n      const fullInput =\n          [inputs].concat(additionalInputs) as Tensor[] | SymbolicTensor[];\n      const fullInputSpec = this.inputSpec.concat(additionalSpecs);\n      // Perform the call with temporarily replaced inputSpec.\n      const originalInputSpec = this.inputSpec;\n      this.inputSpec = fullInputSpec;\n      const output = super.apply(fullInput, kwargs);\n      this.inputSpec = originalInputSpec;\n      return output;\n    } else {\n      return super.apply(inputs, kwargs);\n    }\n  }\n\n  // tslint:disable-next-line:no-any\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    // Input shape: `[samples, time (padded with zeros), input_dim]`.\n    // Note that the .build() method of subclasses **must** define\n    // this.inputSpec and this.stateSpec owith complete input shapes.\n    return tidy(() => {\n      const mask = kwargs == null ? null : kwargs['mask'] as Tensor;\n      const training = kwargs == null ? null : kwargs['training'];\n      let initialState: Tensor[] =\n          kwargs == null ? null : kwargs['initialState'];\n\n      inputs = getExactlyOneTensor(inputs);\n      if (initialState == null) {\n        if (this.stateful) {\n          initialState = this.states_;\n        } else {\n          initialState = this.getInitialState(inputs);\n        }\n      }\n\n      const numStates =\n          Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      if (initialState.length !== numStates) {\n        throw new ValueError(\n            `RNN Layer has ${numStates} state(s) but was passed ` +\n            `${initialState.length} initial state(s).`);\n      }\n      if (this.unroll) {\n        console.warn(\n            'Ignoring unroll = true for RNN layer, due to imperative backend.');\n      }\n\n      const cellCallKwargs: Kwargs = {training};\n\n      // TODO(cais): Add support for constants.\n      const step = (inputs: Tensor, states: Tensor[]) => {\n        // `inputs` and `states` are concatenated to form a single `Array` of\n        // `tf.Tensor`s as the input to `cell.call()`.\n        const outputs =\n            this.cell.call([inputs].concat(states), cellCallKwargs) as Tensor[];\n        // Marshall the return value into output and new states.\n        return [outputs[0], outputs.slice(1)] as [Tensor, Tensor[]];\n      };\n\n      // TODO(cais): Add support for constants.\n\n      const rnnOutputs =\n          rnn(step, inputs, initialState, this.goBackwards, mask, null,\n              this.unroll, this.returnSequences);\n      const lastOutput = rnnOutputs[0];\n      const outputs = rnnOutputs[1];\n      const states = rnnOutputs[2];\n\n      if (this.stateful) {\n        this.resetStates(states, training);\n      }\n\n      const output = this.returnSequences ? outputs : lastOutput;\n\n      // TODO(cais): Porperty set learning phase flag.\n\n      if (this.returnState) {\n        return [output].concat(states);\n      } else {\n        return output;\n      }\n    });\n  }\n\n  getInitialState(inputs: Tensor): Tensor[] {\n    return tidy(() => {\n      // Build an all-zero tensor of shape [samples, outputDim].\n      // [Samples, timeSteps, inputDim].\n      let initialState = tfc.zeros(inputs.shape);\n      // [Samples].\n      initialState = tfc.sum(initialState, [1, 2]);\n      initialState = K.expandDims(initialState);  // [Samples, 1].\n\n      if (Array.isArray(this.cell.stateSize)) {\n        return this.cell.stateSize.map(\n            dim => dim > 1 ? K.tile(initialState, [1, dim]) : initialState);\n      } else {\n        return this.cell.stateSize > 1 ?\n            [K.tile(initialState, [1, this.cell.stateSize])] :\n            [initialState];\n      }\n    });\n  }\n\n  get trainableWeights(): LayerVariable[] {\n    if (!this.trainable) {\n      return [];\n    }\n    // Porting Note: In TypeScript, `this` is always an instance of `Layer`.\n    return this.cell.trainableWeights;\n  }\n\n  get nonTrainableWeights(): LayerVariable[] {\n    // Porting Note: In TypeScript, `this` is always an instance of `Layer`.\n    if (!this.trainable) {\n      return this.cell.weights;\n    }\n    return this.cell.nonTrainableWeights;\n  }\n\n  setFastWeightInitDuringBuild(value: boolean) {\n    super.setFastWeightInitDuringBuild(value);\n    if (this.cell != null) {\n      this.cell.setFastWeightInitDuringBuild(value);\n    }\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      returnSequences: this.returnSequences,\n      returnState: this.returnState,\n      goBackwards: this.goBackwards,\n      stateful: this.stateful,\n      unroll: this.unroll,\n    };\n    if (this.numConstants != null) {\n      config['numConstants'] = this.numConstants;\n    }\n    const cellConfig = this.cell.getConfig();\n    config['cell'] = {\n      'className': this.cell.getClassName(),\n      'config': cellConfig,\n    } as serialization.ConfigDictValue;\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict,\n      customObjects = {} as serialization.ConfigDict): T {\n    const cellConfig = config['cell'] as serialization.ConfigDict;\n    const cell = deserialize(cellConfig, customObjects) as RNNCell;\n    return new cls(Object.assign(config, {cell}));\n  }\n}\nserialization.registerClass(RNN);\n\n/**\n * An RNNCell layer.\n */\n// Porting Note: This is a common parent class for RNN cells. There is no\n// equivalent of this in PyKeras. Having a common parent class forgoes the\n//  need for `has_attr(cell, ...)` checks or its TypeScript equivalent.\n/** @doc {heading: 'Layers', subheading: 'Classes'} */\nexport abstract class RNNCell extends Layer {\n  /**\n   * Size(s) of the states.\n   * For RNN cells with only a single state, this is a single integer.\n   */\n  public stateSize: number|number[];\n  public dropoutMask: Tensor|Tensor[];\n  public recurrentDropoutMask: Tensor|Tensor[];\n}\n\nexport declare interface SimpleRNNCellLayerArgs extends LayerArgs {\n  /**\n   * units: Positive integer, dimensionality of the output space.\n   */\n  units: number;\n\n  /**\n   * Activation function to use.\n   * Default: hyperbolic tangent ('tanh').\n   * If you pass `null`,  'linear' activation will be applied.\n   */\n  activation?: ActivationIdentifier;\n\n  /**\n   * Whether the layer uses a bias vector.\n   */\n  useBias?: boolean;\n\n  /**\n   * Initializer for the `kernel` weights matrix, used for the linear\n   * transformation of the inputs.\n   */\n  kernelInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the `recurrentKernel` weights matrix, used for\n   * linear transformation of the recurrent state.\n   */\n  recurrentInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the bias vector.\n   */\n  biasInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Regularizer function applied to the `kernel` weights matrix.\n   */\n  kernelRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the `recurrent_kernel` weights matrix.\n   */\n  recurrentRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the bias vector.\n   */\n  biasRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Constraint function applied to the `kernel` weights matrix.\n   */\n  kernelConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the `recurrentKernel` weights matrix.\n   */\n  recurrentConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraintfunction applied to the bias vector.\n   */\n  biasConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Float number between 0 and 1. Fraction of the units to drop for the linear\n   * transformation of the inputs.\n   */\n  dropout?: number;\n\n  /**\n   * Float number between 0 and 1. Fraction of the units to drop for the linear\n   * transformation of the recurrent state.\n   */\n  recurrentDropout?: number;\n}\n\nexport class SimpleRNNCell extends RNNCell {\n  /** @nocollapse */\n  static className = 'SimpleRNNCell';\n  readonly units: number;\n  readonly activation: Activation;\n  readonly useBias: boolean;\n\n  readonly kernelInitializer: Initializer;\n  readonly recurrentInitializer: Initializer;\n  readonly biasInitializer: Initializer;\n\n  readonly kernelConstraint: Constraint;\n  readonly recurrentConstraint: Constraint;\n  readonly biasConstraint: Constraint;\n\n  readonly kernelRegularizer: Regularizer;\n  readonly recurrentRegularizer: Regularizer;\n  readonly biasRegularizer: Regularizer;\n\n  readonly dropout: number;\n  readonly recurrentDropout: number;\n\n  readonly stateSize: number;\n\n  kernel: LayerVariable;\n  recurrentKernel: LayerVariable;\n  bias: LayerVariable;\n\n  readonly DEFAULT_ACTIVATION = 'tanh';\n  readonly DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n  readonly DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n  readonly DEFAULT_BIAS_INITIALIZER: InitializerIdentifier = 'zeros';\n\n  constructor(args: SimpleRNNCellLayerArgs) {\n    super(args);\n    this.units = args.units;\n    assertPositiveInteger(this.units, `units`);\n    this.activation = getActivation(\n        args.activation == null ? this.DEFAULT_ACTIVATION : args.activation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(\n        args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n\n    this.dropout = math_utils.min(\n        [1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = math_utils.min([\n      1,\n      math_utils.max(\n          [0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n    ]);\n    this.stateSize = this.units;\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    // TODO(cais): Use regularizer.\n    this.kernel = this.addWeight(\n        'kernel', [inputShape[inputShape.length - 1], this.units], null,\n        this.kernelInitializer, this.kernelRegularizer, true,\n        this.kernelConstraint);\n    this.recurrentKernel = this.addWeight(\n        'recurrent_kernel', [this.units, this.units], null,\n        this.recurrentInitializer, this.recurrentRegularizer, true,\n        this.recurrentConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.units], null, this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    this.built = true;\n  }\n\n  // Porting Note: PyKeras' equivalent of this method takes two tensor inputs:\n  //   `inputs` and `states`. Here, the two tensors are combined into an\n  //   `Tensor[]` Array as the first input argument.\n  //   Similarly, PyKeras' equivalent of this method returns two values:\n  //    `output` and `[output]`. Here the two are combined into one length-2\n  //    `Tensor[]`, consisting of `output` repeated.\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = inputs as Tensor[];\n      if (inputs.length !== 2) {\n        throw new ValueError(\n            `SimpleRNNCell expects 2 input Tensors, got ${inputs.length}.`);\n      }\n      let prevOutput = inputs[1];\n      inputs = inputs[0];\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask(\n                               () => tfc.onesLike(inputs as Tensor),\n                               this.dropout, training) as Tensor;\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n          this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask =\n            generateDropoutMask(\n                () => tfc.onesLike(prevOutput), this.recurrentDropout,\n                training) as Tensor;\n      }\n      let h: Tensor;\n      const dpMask: Tensor = this.dropoutMask as Tensor;\n      const recDpMask: Tensor = this.recurrentDropoutMask as Tensor;\n      if (dpMask != null) {\n        h = K.dot(tfc.mul(inputs, dpMask), this.kernel.read());\n      } else {\n        h = K.dot(inputs, this.kernel.read());\n      }\n      if (this.bias != null) {\n        h = K.biasAdd(h, this.bias.read());\n      }\n      if (recDpMask != null) {\n        prevOutput = tfc.mul(prevOutput, recDpMask);\n      }\n      let output = tfc.add(h, K.dot(prevOutput, this.recurrentKernel.read()));\n      if (this.activation != null) {\n        output = this.activation.apply(output);\n      }\n\n      // TODO(cais): Properly set learning phase on output tensor?\n      return [output, output];\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(SimpleRNNCell);\n\nexport declare interface SimpleRNNLayerArgs extends BaseRNNLayerArgs {\n  /**\n   * Positive integer, dimensionality of the output space.\n   */\n  units: number;\n\n  /**\n   * Activation function to use.\n   *\n   * Defaults to  hyperbolic tangent (`tanh`)\n   *\n   * If you pass `null`, no activation will be applied.\n   */\n  activation?: ActivationIdentifier;\n\n  /**\n   * Whether the layer uses a bias vector.\n   */\n  useBias?: boolean;\n\n  /**\n   * Initializer for the `kernel` weights matrix, used for the linear\n   * transformation of the inputs.\n   */\n  kernelInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the `recurrentKernel` weights matrix, used for\n   * linear transformation of the recurrent state.\n   */\n  recurrentInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the bias vector.\n   */\n  biasInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Regularizer function applied to the kernel weights matrix.\n   */\n  kernelRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the recurrentKernel weights matrix.\n   */\n  recurrentRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the bias vector.\n   */\n  biasRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Constraint function applied to the kernel weights matrix.\n   */\n  kernelConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the recurrentKernel weights matrix.\n   */\n  recurrentConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the bias vector.\n   */\n  biasConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Number between 0 and 1. Fraction of the units to drop for the linear\n   * transformation of the inputs.\n   */\n  dropout?: number;\n\n  /**\n   * Number between 0 and 1. Fraction of the units to drop for the linear\n   * transformation of the recurrent state.\n   */\n  recurrentDropout?: number;\n}\n\n/**\n * RNNLayerConfig is identical to BaseRNNLayerConfig, except it makes the\n * `cell` property required. This interface is to be used with constructors\n * of concrete RNN layer subtypes.\n */\nexport declare interface RNNLayerArgs extends BaseRNNLayerArgs {\n  cell: RNNCell|RNNCell[];\n}\n\nexport class SimpleRNN extends RNN {\n  /** @nocollapse */\n  static className = 'SimpleRNN';\n  constructor(args: SimpleRNNLayerArgs) {\n    args.cell = new SimpleRNNCell(args);\n    super(args as RNNLayerArgs);\n    // TODO(cais): Add activityRegularizer.\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState: Tensor[] =\n          kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {mask, training, initialState});\n    });\n  }\n\n  // TODO(cais): Research possibility of refactoring out the tedious all\n  //   the getters that delegate to `this.cell` below.\n  get units(): number {\n    return (this.cell as SimpleRNNCell).units;\n  }\n\n  get activation(): Activation {\n    return (this.cell as SimpleRNNCell).activation;\n  }\n\n  get useBias(): boolean {\n    return (this.cell as SimpleRNNCell).useBias;\n  }\n\n  get kernelInitializer(): Initializer {\n    return (this.cell as SimpleRNNCell).kernelInitializer;\n  }\n\n  get recurrentInitializer(): Initializer {\n    return (this.cell as SimpleRNNCell).recurrentInitializer;\n  }\n\n  get biasInitializer(): Initializer {\n    return (this.cell as SimpleRNNCell).biasInitializer;\n  }\n\n  get kernelRegularizer(): Regularizer {\n    return (this.cell as SimpleRNNCell).kernelRegularizer;\n  }\n\n  get recurrentRegularizer(): Regularizer {\n    return (this.cell as SimpleRNNCell).recurrentRegularizer;\n  }\n\n  get biasRegularizer(): Regularizer {\n    return (this.cell as SimpleRNNCell).biasRegularizer;\n  }\n\n  get kernelConstraint(): Constraint {\n    return (this.cell as SimpleRNNCell).kernelConstraint;\n  }\n\n  get recurrentConstraint(): Constraint {\n    return (this.cell as SimpleRNNCell).recurrentConstraint;\n  }\n\n  get biasConstraint(): Constraint {\n    return (this.cell as SimpleRNNCell).biasConstraint;\n  }\n\n  get dropout(): number {\n    return (this.cell as SimpleRNNCell).dropout;\n  }\n\n  get recurrentDropout(): number {\n    return (this.cell as SimpleRNNCell).recurrentDropout;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n    };\n    const baseConfig = super.getConfig();\n    delete baseConfig['cell'];\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict): T {\n    return new cls(config);\n  }\n}\nserialization.registerClass(SimpleRNN);\n\n// Porting Note: Since this is a superset of SimpleRNNLayerConfig, we extend\n//   that interface instead of repeating the fields.\nexport declare interface GRUCellLayerArgs extends SimpleRNNCellLayerArgs {\n  /**\n   * Activation function to use for the recurrent step.\n   *\n   * Defaults to hard sigmoid (`hardSigmoid`).\n   *\n   * If `null`, no activation is applied.\n   */\n  recurrentActivation?: ActivationIdentifier;\n\n  /**\n   * Implementation mode, either 1 or 2.\n   *\n   * Mode 1 will structure its operations as a larger number of\n   *   smaller dot products and additions.\n   *\n   * Mode 2 will batch them into fewer, larger operations. These modes will\n   * have different performance profiles on different hardware and\n   * for different applications.\n   *\n   * Note: For superior performance, TensorFlow.js always uses implementation\n   * 2, regardless of the actual value of this configuration field.\n   */\n  implementation?: number;\n}\n\nexport class GRUCell extends RNNCell {\n  /** @nocollapse */\n  static className = 'GRUCell';\n  readonly units: number;\n  readonly activation: Activation;\n  readonly recurrentActivation: Activation;\n  readonly useBias: boolean;\n\n  readonly kernelInitializer: Initializer;\n  readonly recurrentInitializer: Initializer;\n  readonly biasInitializer: Initializer;\n\n  readonly kernelRegularizer: Regularizer;\n  readonly recurrentRegularizer: Regularizer;\n  readonly biasRegularizer: Regularizer;\n\n  readonly kernelConstraint: Constraint;\n  readonly recurrentConstraint: Constraint;\n  readonly biasConstraint: Constraint;\n\n  readonly dropout: number;\n  readonly recurrentDropout: number;\n\n  readonly stateSize: number;\n  readonly implementation: number;\n\n  readonly DEFAULT_ACTIVATION = 'tanh';\n  readonly DEFAULT_RECURRENT_ACTIVATION: ActivationIdentifier = 'hardSigmoid';\n\n  readonly DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n  readonly DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n  readonly DEFAULT_BIAS_INITIALIZER: InitializerIdentifier = 'zeros';\n\n  kernel: LayerVariable;\n  recurrentKernel: LayerVariable;\n  bias: LayerVariable;\n\n  constructor(args: GRUCellLayerArgs) {\n    super(args);\n\n    this.units = args.units;\n    assertPositiveInteger(this.units, 'units');\n    this.activation = getActivation(\n        args.activation === undefined ? this.DEFAULT_ACTIVATION :\n                                        args.activation);\n    this.recurrentActivation = getActivation(\n        args.recurrentActivation === undefined ?\n            this.DEFAULT_RECURRENT_ACTIVATION :\n            args.recurrentActivation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(\n        args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n\n    this.dropout = math_utils.min(\n        [1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = math_utils.min([\n      1,\n      math_utils.max(\n          [0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n    ]);\n    this.implementation = args.implementation;\n    this.stateSize = this.units;\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n\n  public build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const inputDim = inputShape[inputShape.length - 1];\n    this.kernel = this.addWeight(\n        'kernel', [inputDim, this.units * 3], null, this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    this.recurrentKernel = this.addWeight(\n        'recurrent_kernel', [this.units, this.units * 3], null,\n        this.recurrentInitializer, this.recurrentRegularizer, true,\n        this.recurrentConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.units * 3], null, this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    // Porting Notes: Unlike the PyKeras implementation, we perform slicing\n    //   of the weights and bias in the call() method, at execution time.\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = inputs as Tensor[];\n      if (inputs.length !== 2) {\n        throw new ValueError(\n            `GRUCell expects 2 input Tensors (inputs, h, c), got ` +\n            `${inputs.length}.`);\n      }\n\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n      let hTMinus1 = inputs[1];  // Previous memory state.\n      inputs = inputs[0];\n\n      // Note: For superior performance, TensorFlow.js always uses\n      // implementation 2, regardless of the actual value of\n      // config.implementation.\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask(\n                               () => tfc.onesLike(inputs as Tensor),\n                               this.dropout, training, 3) as Tensor[];\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n          this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask =\n            generateDropoutMask(\n                () => tfc.onesLike(hTMinus1), this.recurrentDropout, training,\n                3) as Tensor[];\n      }\n      const dpMask = this.dropoutMask as [Tensor, Tensor, Tensor];\n      const recDpMask = this.recurrentDropoutMask as [Tensor, Tensor, Tensor];\n      let z: Tensor;\n      let r: Tensor;\n      let hh: Tensor;\n\n      if (0 < this.dropout && this.dropout < 1) {\n        inputs = tfc.mul(inputs, dpMask[0]);\n      }\n      let matrixX = K.dot(inputs, this.kernel.read());\n      if (this.useBias) {\n        matrixX = K.biasAdd(matrixX, this.bias.read());\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1) {\n        hTMinus1 = tfc.mul(hTMinus1, recDpMask[0]);\n      }\n\n      const recurrentKernelValue = this.recurrentKernel.read();\n      const [rk1, rk2] = tfc.split(\n          recurrentKernelValue, [2 * this.units, this.units],\n          recurrentKernelValue.rank - 1);\n      const matrixInner = K.dot(hTMinus1, rk1);\n\n      const [xZ, xR, xH] = tfc.split(matrixX, 3, matrixX.rank - 1);\n      const [recurrentZ, recurrentR] =\n          tfc.split(matrixInner, 2, matrixInner.rank - 1);\n      z = this.recurrentActivation.apply(tfc.add(xZ, recurrentZ));\n      r = this.recurrentActivation.apply(tfc.add(xR, recurrentR));\n\n      const recurrentH = K.dot(tfc.mul(r, hTMinus1), rk2);\n      hh = this.activation.apply(tfc.add(xH, recurrentH));\n\n      const h =\n          tfc.add(tfc.mul(z, hTMinus1), tfc.mul(tfc.add(1, tfc.neg(z)), hh));\n      // TODO(cais): Add use_learning_phase flag properly.\n      return [h, h];\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      recurrentActivation: serializeActivation(this.recurrentActivation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n      implementation: this.implementation,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(GRUCell);\n\n// Porting Note: Since this is a superset of SimpleRNNLayerConfig, we inherit\n//   from that interface instead of repeating the fields here.\nexport declare interface GRULayerArgs extends SimpleRNNLayerArgs {\n  /**\n   * Activation function to use for the recurrent step.\n   *\n   * Defaults to hard sigmoid (`hardSigmoid`).\n   *\n   * If `null`, no activation is applied.\n   */\n  recurrentActivation?: ActivationIdentifier;\n\n  /**\n   * Implementation mode, either 1 or 2.\n   *\n   * Mode 1 will structure its operations as a larger number of\n   * smaller dot products and additions.\n   *\n   * Mode 2 will batch them into fewer, larger operations. These modes will\n   * have different performance profiles on different hardware and\n   * for different applications.\n   *\n   * Note: For superior performance, TensorFlow.js always uses implementation\n   * 2, regardless of the actual value of this configuration field.\n   */\n  implementation?: number;\n}\n\nexport class GRU extends RNN {\n  /** @nocollapse */\n  static className = 'GRU';\n  constructor(args: GRULayerArgs) {\n    if (args.implementation === 0) {\n      console.warn(\n          '`implementation=0` has been deprecated, and now defaults to ' +\n          '`implementation=1`. Please update your layer call.');\n    }\n    args.cell = new GRUCell(args);\n    super(args as RNNLayerArgs);\n    // TODO(cais): Add activityRegularizer.\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState: Tensor[] =\n          kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {mask, training, initialState});\n    });\n  }\n\n  get units(): number {\n    return (this.cell as GRUCell).units;\n  }\n\n  get activation(): Activation {\n    return (this.cell as GRUCell).activation;\n  }\n\n  get recurrentActivation(): Activation {\n    return (this.cell as GRUCell).recurrentActivation;\n  }\n\n  get useBias(): boolean {\n    return (this.cell as GRUCell).useBias;\n  }\n\n  get kernelInitializer(): Initializer {\n    return (this.cell as GRUCell).kernelInitializer;\n  }\n\n  get recurrentInitializer(): Initializer {\n    return (this.cell as GRUCell).recurrentInitializer;\n  }\n\n  get biasInitializer(): Initializer {\n    return (this.cell as GRUCell).biasInitializer;\n  }\n\n  get kernelRegularizer(): Regularizer {\n    return (this.cell as GRUCell).kernelRegularizer;\n  }\n\n  get recurrentRegularizer(): Regularizer {\n    return (this.cell as GRUCell).recurrentRegularizer;\n  }\n\n  get biasRegularizer(): Regularizer {\n    return (this.cell as GRUCell).biasRegularizer;\n  }\n\n  get kernelConstraint(): Constraint {\n    return (this.cell as GRUCell).kernelConstraint;\n  }\n\n  get recurrentConstraint(): Constraint {\n    return (this.cell as GRUCell).recurrentConstraint;\n  }\n\n  get biasConstraint(): Constraint {\n    return (this.cell as GRUCell).biasConstraint;\n  }\n\n  get dropout(): number {\n    return (this.cell as GRUCell).dropout;\n  }\n\n  get recurrentDropout(): number {\n    return (this.cell as GRUCell).recurrentDropout;\n  }\n\n  get implementation(): number {\n    return (this.cell as GRUCell).implementation;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      recurrentActivation: serializeActivation(this.recurrentActivation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n      implementation: this.implementation,\n    };\n    const baseConfig = super.getConfig();\n    delete baseConfig['cell'];\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict): T {\n    if (config['implmentation'] === 0) {\n      config['implementation'] = 1;\n    }\n    return new cls(config);\n  }\n}\nserialization.registerClass(GRU);\n\n// Porting Note: Since this is a superset of SimpleRNNLayerConfig, we extend\n//   that interface instead of repeating the fields.\nexport declare interface LSTMCellLayerArgs extends SimpleRNNCellLayerArgs {\n  /**\n   * Activation function to use for the recurrent step.\n   *\n   * Defaults to hard sigmoid (`hardSigmoid`).\n   *\n   * If `null`, no activation is applied.\n   */\n  recurrentActivation?: ActivationIdentifier;\n\n  /**\n   * If `true`, add 1 to the bias of the forget gate at initialization.\n   * Setting it to `true` will also force `biasInitializer = 'zeros'`.\n   * This is recommended in\n   * [Jozefowicz et\n   * al.](http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf).\n   */\n  unitForgetBias?: boolean;\n\n  /**\n   * Implementation mode, either 1 or 2.\n   *\n   * Mode 1 will structure its operations as a larger number of\n   *   smaller dot products and additions.\n   *\n   * Mode 2 will batch them into fewer, larger operations. These modes will\n   * have different performance profiles on different hardware and\n   * for different applications.\n   *\n   * Note: For superior performance, TensorFlow.js always uses implementation\n   * 2, regardless of the actual value of this configuration field.\n   */\n  implementation?: number;\n}\n\nexport class LSTMCell extends RNNCell {\n  /** @nocollapse */\n  static className = 'LSTMCell';\n  readonly units: number;\n  readonly activation: Activation;\n  readonly recurrentActivation: Activation;\n  readonly useBias: boolean;\n\n  readonly kernelInitializer: Initializer;\n  readonly recurrentInitializer: Initializer;\n  readonly biasInitializer: Initializer;\n  readonly unitForgetBias: boolean;\n\n  readonly kernelConstraint: Constraint;\n  readonly recurrentConstraint: Constraint;\n  readonly biasConstraint: Constraint;\n\n  readonly kernelRegularizer: Regularizer;\n  readonly recurrentRegularizer: Regularizer;\n  readonly biasRegularizer: Regularizer;\n\n  readonly dropout: number;\n  readonly recurrentDropout: number;\n\n  readonly stateSize: number[];\n  readonly implementation: number;\n\n  readonly DEFAULT_ACTIVATION = 'tanh';\n  readonly DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';\n  readonly DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n  readonly DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n\n  readonly DEFAULT_BIAS_INITIALIZER = 'zeros';\n\n  kernel: LayerVariable;\n  recurrentKernel: LayerVariable;\n  bias: LayerVariable;\n\n  constructor(args: LSTMCellLayerArgs) {\n    super(args);\n\n    this.units = args.units;\n    assertPositiveInteger(this.units, 'units');\n    this.activation = getActivation(\n        args.activation === undefined ? this.DEFAULT_ACTIVATION :\n                                        args.activation);\n    this.recurrentActivation = getActivation(\n        args.recurrentActivation === undefined ?\n            this.DEFAULT_RECURRENT_ACTIVATION :\n            args.recurrentActivation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(\n        args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.unitForgetBias = args.unitForgetBias;\n\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n\n    this.dropout = math_utils.min(\n        [1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = math_utils.min([\n      1,\n      math_utils.max(\n          [0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n    ]);\n    this.implementation = args.implementation;\n    this.stateSize = [this.units, this.units];\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n\n  public build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const inputDim = inputShape[inputShape.length - 1];\n    this.kernel = this.addWeight(\n        'kernel', [inputDim, this.units * 4], null, this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    this.recurrentKernel = this.addWeight(\n        'recurrent_kernel', [this.units, this.units * 4], null,\n        this.recurrentInitializer, this.recurrentRegularizer, true,\n        this.recurrentConstraint);\n    let biasInitializer: Initializer;\n    if (this.useBias) {\n      if (this.unitForgetBias) {\n        const capturedBiasInit = this.biasInitializer;\n        const capturedUnits = this.units;\n        biasInitializer = new (class CustomInit extends Initializer {\n          /** @nocollapse */\n          static className = 'CustomInit';\n\n          apply(shape: Shape, dtype?: DataType): Tensor {\n            // TODO(cais): More informative variable names?\n            const bI = capturedBiasInit.apply([capturedUnits]);\n            const bF = (new Ones()).apply([capturedUnits]);\n            const bCAndH = capturedBiasInit.apply([capturedUnits * 2]);\n            return K.concatAlongFirstAxis(\n                K.concatAlongFirstAxis(bI, bF), bCAndH);\n          }\n        })();\n      } else {\n        biasInitializer = this.biasInitializer;\n      }\n      this.bias = this.addWeight(\n          'bias', [this.units * 4], null, biasInitializer, this.biasRegularizer,\n          true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    // Porting Notes: Unlike the PyKeras implementation, we perform slicing\n    //   of the weights and bias in the call() method, at execution time.\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n      inputs = inputs as Tensor[];\n      if (inputs.length !== 3) {\n        throw new ValueError(\n            `LSTMCell expects 3 input Tensors (inputs, h, c), got ` +\n            `${inputs.length}.`);\n      }\n      let hTMinus1 = inputs[1];    // Previous memory state.\n      const cTMinus1 = inputs[2];  // Previous carry state.\n      inputs = inputs[0];\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask(\n                               () => tfc.onesLike(inputs as Tensor),\n                               this.dropout, training, 4) as Tensor[];\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n          this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask =\n            generateDropoutMask(\n                () => tfc.onesLike(hTMinus1), this.recurrentDropout, training,\n                4) as Tensor[];\n      }\n      const dpMask = this.dropoutMask as [Tensor, Tensor, Tensor, Tensor];\n      const recDpMask =\n          this.recurrentDropoutMask as [Tensor, Tensor, Tensor, Tensor];\n\n      // Note: For superior performance, TensorFlow.js always uses\n      // implementation 2 regardless of the actual value of\n      // config.implementation.\n      let i: Tensor;\n      let f: Tensor;\n      let c: Tensor;\n      let o: Tensor;\n      if (0 < this.dropout && this.dropout < 1) {\n        inputs = tfc.mul(inputs, dpMask[0]);\n      }\n      let z = K.dot(inputs, this.kernel.read());\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1) {\n        hTMinus1 = tfc.mul(hTMinus1, recDpMask[0]);\n      }\n      z = tfc.add(z, K.dot(hTMinus1, this.recurrentKernel.read()));\n      if (this.useBias) {\n        z = K.biasAdd(z, this.bias.read());\n      }\n\n      const [z0, z1, z2, z3] = tfc.split(z, 4, z.rank - 1);\n\n      i = this.recurrentActivation.apply(z0);\n      f = this.recurrentActivation.apply(z1);\n      c = tfc.add(tfc.mul(f, cTMinus1), tfc.mul(i, this.activation.apply(z2)));\n      o = this.recurrentActivation.apply(z3);\n\n      const h = tfc.mul(o, this.activation.apply(c));\n      // TODO(cais): Add use_learning_phase flag properly.\n      return [h, h, c];\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      recurrentActivation: serializeActivation(this.recurrentActivation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      unitForgetBias: this.unitForgetBias,\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n      implementation: this.implementation,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(LSTMCell);\n\n// Porting Note: Since this is a superset of SimpleRNNLayerConfig, we inherit\n//   from that interface instead of repeating the fields here.\nexport declare interface LSTMLayerArgs extends SimpleRNNLayerArgs {\n  /**\n   * Activation function to use for the recurrent step.\n   *\n   * Defaults to hard sigmoid (`hardSigmoid`).\n   *\n   * If `null`, no activation is applied.\n   */\n  recurrentActivation?: ActivationIdentifier;\n\n  /**\n   * If `true`, add 1 to the bias of the forget gate at initialization.\n   * Setting it to `true` will also force `biasInitializer = 'zeros'`.\n   * This is recommended in\n   * [Jozefowicz et\n   * al.](http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf).\n   */\n  unitForgetBias?: boolean;\n\n  /**\n   * Implementation mode, either 1 or 2.\n   *   Mode 1 will structure its operations as a larger number of\n   *   smaller dot products and additions, whereas mode 2 will\n   *   batch them into fewer, larger operations. These modes will\n   *   have different performance profiles on different hardware and\n   *   for different applications.\n   *\n   * Note: For superior performance, TensorFlow.js always uses implementation\n   * 2, regardless of the actual value of this config field.\n   */\n  implementation?: number;\n}\n\nexport class LSTM extends RNN {\n  /** @nocollapse */\n  static className = 'LSTM';\n  constructor(args: LSTMLayerArgs) {\n    if (args.implementation === 0) {\n      console.warn(\n          '`implementation=0` has been deprecated, and now defaults to ' +\n          '`implementation=1`. Please update your layer call.');\n    }\n    args.cell = new LSTMCell(args);\n    super(args as RNNLayerArgs);\n    // TODO(cais): Add activityRegularizer.\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState: Tensor[] =\n          kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {mask, training, initialState});\n    });\n  }\n\n  get units(): number {\n    return (this.cell as LSTMCell).units;\n  }\n\n  get activation(): Activation {\n    return (this.cell as LSTMCell).activation;\n  }\n\n  get recurrentActivation(): Activation {\n    return (this.cell as LSTMCell).recurrentActivation;\n  }\n\n  get useBias(): boolean {\n    return (this.cell as LSTMCell).useBias;\n  }\n\n  get kernelInitializer(): Initializer {\n    return (this.cell as LSTMCell).kernelInitializer;\n  }\n\n  get recurrentInitializer(): Initializer {\n    return (this.cell as LSTMCell).recurrentInitializer;\n  }\n\n  get biasInitializer(): Initializer {\n    return (this.cell as LSTMCell).biasInitializer;\n  }\n\n  get unitForgetBias(): boolean {\n    return (this.cell as LSTMCell).unitForgetBias;\n  }\n\n  get kernelRegularizer(): Regularizer {\n    return (this.cell as LSTMCell).kernelRegularizer;\n  }\n\n  get recurrentRegularizer(): Regularizer {\n    return (this.cell as LSTMCell).recurrentRegularizer;\n  }\n\n  get biasRegularizer(): Regularizer {\n    return (this.cell as LSTMCell).biasRegularizer;\n  }\n\n  get kernelConstraint(): Constraint {\n    return (this.cell as LSTMCell).kernelConstraint;\n  }\n\n  get recurrentConstraint(): Constraint {\n    return (this.cell as LSTMCell).recurrentConstraint;\n  }\n\n  get biasConstraint(): Constraint {\n    return (this.cell as LSTMCell).biasConstraint;\n  }\n\n  get dropout(): number {\n    return (this.cell as LSTMCell).dropout;\n  }\n\n  get recurrentDropout(): number {\n    return (this.cell as LSTMCell).recurrentDropout;\n  }\n\n  get implementation(): number {\n    return (this.cell as LSTMCell).implementation;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      recurrentActivation: serializeActivation(this.recurrentActivation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      unitForgetBias: this.unitForgetBias,\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n      implementation: this.implementation,\n    };\n    const baseConfig = super.getConfig();\n    delete baseConfig['cell'];\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict): T {\n    if (config['implmentation'] === 0) {\n      config['implementation'] = 1;\n    }\n    return new cls(config);\n  }\n}\nserialization.registerClass(LSTM);\n\nexport declare interface StackedRNNCellsArgs extends LayerArgs {\n  /**\n   * A `Array` of `RNNCell` instances.\n   */\n  cells: RNNCell[];\n}\n\nexport class StackedRNNCells extends RNNCell {\n  /** @nocollapse */\n  static className = 'StackedRNNCells';\n  protected cells: RNNCell[];\n\n  constructor(args: StackedRNNCellsArgs) {\n    super(args);\n    this.cells = args.cells;\n  }\n\n  get stateSize(): number[] {\n    // States are a flat list in reverse order of the cell stack.\n    // This allows perserving the requirement `stack.statesize[0] ===\n    // outputDim`. E.g., states of a 2-layer LSTM would be `[h2, c2, h1, c1]`,\n    // assuming one LSTM has states `[h, c]`.\n    const stateSize: number[] = [];\n    for (const cell of this.cells.slice().reverse()) {\n      if (Array.isArray(cell.stateSize)) {\n        stateSize.push(...cell.stateSize);\n      } else {\n        stateSize.push(cell.stateSize);\n      }\n    }\n    return stateSize;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = inputs as Tensor[];\n      let states = inputs.slice(1);\n\n      // Recover per-cell states.\n      const nestedStates: Tensor[][] = [];\n      for (const cell of this.cells.slice().reverse()) {\n        if (Array.isArray(cell.stateSize)) {\n          nestedStates.push(states.splice(0, cell.stateSize.length));\n        } else {\n          nestedStates.push(states.splice(0, 1));\n        }\n      }\n      nestedStates.reverse();\n\n      // Call the cells in order and store the returned states.\n      const newNestedStates: Tensor[][] = [];\n      let callInputs: Tensor[];\n      for (let i = 0; i < this.cells.length; ++i) {\n        const cell = this.cells[i];\n        states = nestedStates[i];\n        // TODO(cais): Take care of constants.\n        if (i === 0) {\n          callInputs = [inputs[0]].concat(states);\n        } else {\n          callInputs = [callInputs[0]].concat(states);\n        }\n        callInputs = cell.call(callInputs, kwargs) as Tensor[];\n        newNestedStates.push(callInputs.slice(1));\n      }\n\n      // Format the new states as a flat list in reverse cell order.\n      states = [];\n      for (const cellStates of newNestedStates.slice().reverse()) {\n        states.push(...cellStates);\n      }\n      return [callInputs[0]].concat(states);\n    });\n  }\n\n  public build(inputShape: Shape|Shape[]): void {\n    if (isArrayOfShapes(inputShape)) {\n      // TODO(cais): Take care of input constants.\n      // const constantShape = inputShape.slice(1);\n      inputShape = (inputShape as Shape[])[0];\n    }\n    inputShape = inputShape as Shape;\n    let outputDim: number;\n    this.cells.forEach((cell, i) => {\n      nameScope(`RNNCell_${i}`, () => {\n        // TODO(cais): Take care of input constants.\n\n        cell.build(inputShape);\n        if (Array.isArray(cell.stateSize)) {\n          outputDim = cell.stateSize[0];\n        } else {\n          outputDim = cell.stateSize;\n        }\n        inputShape = [inputShape[0], outputDim] as Shape;\n      });\n    });\n    this.built = true;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const cellConfigs: serialization.ConfigDict[] = [];\n    for (const cell of this.cells) {\n      cellConfigs.push({\n        'className': cell.getClassName(),\n        'config': cell.getConfig(),\n      });\n    }\n    const config: serialization.ConfigDict = {'cells': cellConfigs};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict,\n      customObjects = {} as serialization.ConfigDict): T {\n    const cells: RNNCell[] = [];\n    for (const cellConfig of (config['cells'] as serialization.ConfigDict[])) {\n      cells.push(deserialize(cellConfig, customObjects) as RNNCell);\n    }\n    return new cls({cells});\n  }\n\n  get trainableWeights(): LayerVariable[] {\n    if (!this.trainable) {\n      return [];\n    }\n    const weights: LayerVariable[] = [];\n    for (const cell of this.cells) {\n      weights.push(...cell.trainableWeights);\n    }\n    return weights;\n  }\n\n  get nonTrainableWeights(): LayerVariable[] {\n    const weights: LayerVariable[] = [];\n    for (const cell of this.cells) {\n      weights.push(...cell.nonTrainableWeights);\n    }\n    if (!this.trainable) {\n      const trainableWeights: LayerVariable[] = [];\n      for (const cell of this.cells) {\n        trainableWeights.push(...cell.trainableWeights);\n      }\n      return trainableWeights.concat(weights);\n    }\n    return weights;\n  }\n\n  /**\n   * Retrieve the weights of a the model.\n   *\n   * @returns A flat `Array` of `tf.Tensor`s.\n   */\n  getWeights(): Tensor[] {\n    const weights: LayerVariable[] = [];\n    for (const cell of this.cells) {\n      weights.push(...cell.weights);\n    }\n    return batchGetValue(weights);\n  }\n\n  /**\n   * Set the weights of the model.\n   *\n   * @param weights An `Array` of `tf.Tensor`s with shapes and types matching\n   *     the output of `getWeights()`.\n   */\n  setWeights(weights: Tensor[]): void {\n    const tuples: Array<[LayerVariable, Tensor]> = [];\n    for (const cell of this.cells) {\n      const numParams = cell.weights.length;\n      const inputWeights = weights.splice(numParams);\n      for (let i = 0; i < cell.weights.length; ++i) {\n        tuples.push([cell.weights[i], inputWeights[i]]);\n      }\n    }\n    batchSetValue(tuples);\n  }\n\n  // TODO(cais): Maybe implemnt `losses` and `getLossesFor`.\n}\nserialization.registerClass(StackedRNNCells);\n\nfunction generateDropoutMask(\n    ones: () => Tensor, rate: number, training: boolean = null,\n    count = 1): Tensor|Tensor[] {\n  function droppedInputs(): Tensor {\n    return K.dropout(ones(), rate);\n  }\n  if (count > 1) {\n    const mask: Tensor[] = [];\n    for (let i = 0; i < count; i++) {\n      mask.push(K.inTrainPhase(droppedInputs, ones, training));\n    }\n    return mask.map(m => tfc.keep(m.clone()));\n  } else {\n    return tfc.keep(K.inTrainPhase(droppedInputs, ones, training).clone());\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Layers that augment the functionality of a base layer.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, tidy} from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport {nameScope} from '../common';\nimport {InputSpec, Layer, LayerArgs, SymbolicTensor} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {BidirectionalMergeMode, Shape, VALID_BIDIRECTIONAL_MERGE_MODES} from '../keras_format/common';\nimport {Kwargs} from '../types';\nimport {RegularizerFn, RnnStepFunction} from '../types';\nimport * as generic_utils from '../utils/generic_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\nimport {rnn, RNN, standardizeArgs} from './recurrent';\nimport {deserialize} from './serialization';\n\nexport declare interface WrapperLayerArgs extends LayerArgs {\n  /**\n   * The layer to be wrapped.\n   */\n  layer: Layer;\n}\n\n/**\n * Abstract wrapper base class.\n *\n * Wrappers take another layer and augment it in various ways.\n * Do not use this class as a layer, it is only an abstract base class.\n * Two usable wrappers are the `TimeDistributed` and `Bidirectional` wrappers.\n */\nexport abstract class Wrapper extends Layer {\n  readonly layer: Layer;\n\n  constructor(args: WrapperLayerArgs) {\n    // Porting Note: In PyKeras, `self.layer` is set prior to the calling\n    //   `super()`. But we can't do that here due to TypeScript's restriction.\n    //   See: https://github.com/Microsoft/TypeScript/issues/8277\n    //   As a result, we have to add checks in `get trainable()` and\n    //   `set trainable()` below in order to prevent using `this.layer` when\n    //   its value is `undefined`. The super constructor does use the getter\n    //   and the setter of `this.layer`.\n    super(args);\n    this.layer = args.layer;\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    this.built = true;\n  }\n\n  // TODO(cais): Implement activityRegularizer getter.\n\n  get trainable(): boolean {\n    // Porting Note: the check of `this.layer` here is necessary due to the\n    //   way the `constructor` of this class is written (see Porting Note\n    //   above).\n    if (this.layer != null) {\n      return this.layer.trainable;\n    } else {\n      return false;\n    }\n  }\n\n  set trainable(value: boolean) {\n    // Porting Note: the check of `this.layer` here is necessary due to the\n    //   way the `constructor` of this class is written (see Porting Note\n    //   above).\n    if (this.layer != null) {\n      this.layer.trainable = value;\n    }\n  }\n\n  get trainableWeights(): LayerVariable[] {\n    return this.layer.trainableWeights;\n  }\n  // TODO(cais): Implement setter for trainableWeights.\n\n  get nonTrainableWeights(): LayerVariable[] {\n    return this.layer.nonTrainableWeights;\n  }\n  // TODO(cais): Implement setter for nonTrainableWeights.\n\n  get updates(): Tensor[] {\n    // tslint:disable-next-line:no-any\n    return (this.layer as any)._updates;\n  }\n\n  // TODO(cais): Implement getUpdatesFor().\n\n  get losses(): RegularizerFn[] {\n    return this.layer.losses;\n  }\n\n  // TODO(cais): Implement getLossesFor().\n\n  getWeights(): Tensor[] {\n    return this.layer.getWeights();\n  }\n\n  setWeights(weights: Tensor[]): void {\n    this.layer.setWeights(weights);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      'layer': {\n        'className': this.layer.getClassName(),\n        'config': this.layer.getConfig(),\n      }\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  setFastWeightInitDuringBuild(value: boolean) {\n    super.setFastWeightInitDuringBuild(value);\n    if (this.layer != null) {\n      this.layer.setFastWeightInitDuringBuild(value);\n    }\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict,\n      customObjects = {} as serialization.ConfigDict): T {\n    const layerConfig = config['layer'] as serialization.ConfigDict;\n    const layer = deserialize(layerConfig, customObjects) as Layer;\n    delete config['layer'];\n    const newConfig = {layer};\n    Object.assign(newConfig, config);\n    return new cls(newConfig);\n  }\n}\n\nexport class TimeDistributed extends Wrapper {\n  /** @nocollapse */\n  static className = 'TimeDistributed';\n  constructor(args: WrapperLayerArgs) {\n    super(args);\n    this.supportsMasking = true;\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape.length < 3) {\n      throw new ValueError(\n          `TimeDistributed layer expects an input shape >= 3D, but received ` +\n          `input shape ${JSON.stringify(inputShape)}`);\n    }\n    this.inputSpec = [{shape: inputShape}];\n    const childInputShape = [inputShape[0]].concat(inputShape.slice(2));\n    if (!this.layer.built) {\n      this.layer.build(childInputShape);\n      this.layer.built = true;\n    }\n    super.build(inputShape);\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const childInputShape = [inputShape[0]].concat(inputShape.slice(2));\n    const childOutputShape =\n        this.layer.computeOutputShape(childInputShape) as Shape;\n    const timesteps = inputShape[1];\n    return [childOutputShape[0], timesteps].concat(childOutputShape.slice(1));\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      // TODO(cais): Add 'training' and 'useLearningPhase' to kwargs.\n      inputs = getExactlyOneTensor(inputs);\n      // Porting Note: In tfjs-layers, `inputs` are always concrete tensor\n      // values. Hence the inputs can't have an undetermined first (batch)\n      // dimension, which is why we always use the K.rnn approach here.\n      const step: RnnStepFunction = (inputs: Tensor, states: Tensor[]) => {\n        // TODO(cais): Add useLearningPhase.\n        // NOTE(cais): `layer.call` may return a length-1 array of Tensor in\n        //   some cases (e.g., `layer` is a `Sequential` instance), which is\n        //   why `getExactlyOneTensor` is used below.\n        const output = getExactlyOneTensor(this.layer.call(inputs, kwargs));\n        return [output, []];\n      };\n      const rnnOutputs =\n          rnn(step, inputs, [], false /* goBackwards */, null /* mask */,\n              null /* constants */, false /* unroll */,\n              true /* needPerStepOutputs */);\n      const y = rnnOutputs[1];\n      // TODO(cais): Add activity regularization.\n      // TODO(cais): Add useLearningPhase.\n      return y;\n    });\n  }\n\n  // TODO(cais): Implement detailed computeMask() logic.\n}\nserialization.registerClass(TimeDistributed);\n\nexport function checkBidirectionalMergeMode(value?: string): void {\n  generic_utils.checkStringTypeUnionValue(\n      VALID_BIDIRECTIONAL_MERGE_MODES, 'BidirectionalMergeMode', value);\n}\n\nexport declare interface BidirectionalLayerArgs extends WrapperLayerArgs {\n  /**\n   * The instance of an `RNN` layer to be wrapped.\n   */\n  layer: RNN;\n\n  /**\n   * Mode by which outputs of the forward and backward RNNs are\n   * combined. If `null` or `undefined`, the output will not be\n   * combined, they will be returned as an `Array`.\n   *\n   * If `undefined` (i.e., not provided), defaults to `'concat'`.\n   */\n  mergeMode?: BidirectionalMergeMode;\n}\n\nconst DEFAULT_BIDIRECTIONAL_MERGE_MODE: BidirectionalMergeMode = 'concat';\n\nexport class Bidirectional extends Wrapper {\n  /** @nocollapse */\n  static className = 'Bidirectional';\n  mergeMode: BidirectionalMergeMode;\n  private forwardLayer: RNN;\n  private backwardLayer: RNN;\n  private returnSequences: boolean;\n  private returnState: boolean;\n  private numConstants?: number;\n  private _trainable: boolean;\n\n  constructor(args: BidirectionalLayerArgs) {\n    super(args);\n\n    // Note: When creating `this.forwardLayer`, the original Layer object\n    //   (`config.layer`) ought to be cloned. This is why we call\n    //   `getConfig()` followed by `deserialize()`. Without this cloning,\n    //   the layer names saved during serialization will incorrectly contain\n    //   the 'forward_' prefix. In Python Keras, this is done using\n    //   `copy.copy` (shallow copy), which does not have a simple equivalent\n    //   in JavaScript. JavaScript's `Object.assign()` does not copy\n    //   methods.\n    const layerConfig = args.layer.getConfig();\n    const forwDict: serialization.ConfigDict = {};\n    forwDict['className'] = args.layer.getClassName();\n    forwDict['config'] = layerConfig;\n    this.forwardLayer = deserialize(forwDict) as RNN;\n    layerConfig['goBackwards'] =\n        layerConfig['goBackwards'] === true ? false : true;\n    const backDict: serialization.ConfigDict = {};\n    backDict['className'] = args.layer.getClassName();\n    backDict['config'] = layerConfig;\n    this.backwardLayer = deserialize(backDict) as RNN;\n    this.forwardLayer.name = 'forward_' + this.forwardLayer.name;\n    this.backwardLayer.name = 'backward_' + this.backwardLayer.name;\n\n    this.mergeMode = args.mergeMode === undefined ?\n        DEFAULT_BIDIRECTIONAL_MERGE_MODE :\n        args.mergeMode;\n    checkBidirectionalMergeMode(this.mergeMode);\n    if (args.weights) {\n      throw new NotImplementedError(\n          'weights support is not implemented for Bidirectional layer yet.');\n    }\n    this._stateful = args.layer.stateful;\n    this.returnSequences = args.layer.returnSequences;\n    this.returnState = args.layer.returnState;\n    this.supportsMasking = true;\n    this._trainable = true;\n    this.inputSpec = args.layer.inputSpec;\n    this.numConstants = null;\n  }\n\n  get trainable(): boolean {\n    return this._trainable;\n  }\n\n  set trainable(value: boolean) {\n    // Porting Note: the check of `this.layer` here is necessary due to the\n    //   way the `constructor` of this class is written (see Porting Note\n    //   above).\n    this._trainable = value;\n    if (this.forwardLayer != null) {\n      this.forwardLayer.trainable = value;\n    }\n    if (this.backwardLayer != null) {\n      this.backwardLayer.trainable = value;\n    }\n  }\n\n  getWeights(): Tensor[] {\n    return this.forwardLayer.getWeights().concat(\n        this.backwardLayer.getWeights());\n  }\n\n  setWeights(weights: Tensor[]): void {\n    const numWeights = weights.length;\n    const numeightsOver2 = Math.floor(numWeights / 2);\n    this.forwardLayer.setWeights(weights.slice(0, numeightsOver2));\n    this.backwardLayer.setWeights(weights.slice(numeightsOver2));\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    let layerShapes: Shape|Shape[] =\n        this.forwardLayer.computeOutputShape(inputShape);\n    if (!(Array.isArray(layerShapes) && Array.isArray(layerShapes[0]))) {\n      layerShapes = [layerShapes as Shape];\n    }\n    layerShapes = layerShapes as Shape[];\n\n    let outputShape: Shape;\n    let outputShapes: Shape[];\n    let stateShape: Shape[];\n    if (this.returnState) {\n      stateShape = layerShapes.slice(1);\n      outputShape = layerShapes[0];\n    } else {\n      outputShape = layerShapes[0];\n    }\n    outputShape = outputShape;\n    if (this.mergeMode === 'concat') {\n      outputShape[outputShape.length - 1] *= 2;\n      outputShapes = [outputShape];\n    } else if (this.mergeMode == null) {\n      outputShapes = [outputShape, outputShape.slice()];\n    } else {\n      outputShapes = [outputShape];\n    }\n\n    if (this.returnState) {\n      if (this.mergeMode == null) {\n        return outputShapes.concat(stateShape).concat(stateShape.slice());\n      }\n      return [outputShape].concat(stateShape).concat(stateShape.slice());\n    }\n    return generic_utils.singletonOrArray(outputShapes);\n  }\n\n  apply(\n      inputs: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n      kwargs?: Kwargs): Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[] {\n    let initialState: Tensor[]|SymbolicTensor[] =\n        kwargs == null ? null : kwargs['initialState'];\n    let constants: Tensor[]|SymbolicTensor[] =\n        kwargs == null ? null : kwargs['constants'];\n    if (kwargs == null) {\n      kwargs = {};\n    }\n    const standardized =\n        standardizeArgs(inputs, initialState, constants, this.numConstants);\n    inputs = standardized.inputs;\n    initialState = standardized.initialState;\n    constants = standardized.constants;\n\n    if (Array.isArray(inputs)) {\n      initialState = (inputs as Tensor[] | SymbolicTensor[]).slice(1);\n      inputs = (inputs as Tensor[] | SymbolicTensor[])[0];\n    }\n\n    if ((initialState == null || initialState.length === 0) &&\n        constants == null) {\n      return super.apply(inputs, kwargs);\n    }\n    const additionalInputs: Array<Tensor|SymbolicTensor> = [];\n    const additionalSpecs: InputSpec[] = [];\n    if (initialState != null) {\n      const numStates = initialState.length;\n      if (numStates % 2 > 0) {\n        throw new ValueError(\n            'When passing `initialState` to a Bidrectional RNN, ' +\n            'the state should be an Array containing the states of ' +\n            'the underlying RNNs.');\n      }\n      kwargs['initialState'] = initialState;\n      additionalInputs.push(...initialState);\n      const stateSpecs = (initialState as Array<Tensor|SymbolicTensor>)\n                             .map(state => new InputSpec({shape: state.shape}));\n      this.forwardLayer.stateSpec = stateSpecs.slice(0, numStates / 2);\n      this.backwardLayer.stateSpec = stateSpecs.slice(numStates / 2);\n      additionalSpecs.push(...stateSpecs);\n    }\n    if (constants != null) {\n      throw new NotImplementedError(\n          'Support for constants in Bidirectional layers is not ' +\n          'implemented yet.');\n    }\n\n    const isSymbolicTensor = additionalInputs[0] instanceof SymbolicTensor;\n    for (const tensor of additionalInputs) {\n      if (tensor instanceof SymbolicTensor !== isSymbolicTensor) {\n        throw new ValueError(\n            'The initial state of a Bidirectional layer cannot be ' +\n            'specified as a mix of symbolic and non-symbolic tensors');\n      }\n    }\n\n    if (isSymbolicTensor) {\n      // Compute the full input and specs, including the states.\n      const fullInput = [inputs].concat(additionalInputs);\n      const fullInputSpec = this.inputSpec.concat(additionalSpecs);\n      // Perform the call temporarily and replace inputSpec.\n      // Note: with initial states symbolic calls and non-symbolic calls to\n      // this method differ in how the initial states are passed. For\n      // symbolic calls, the initial states are passed in the first arg, as\n      // an Array of SymbolicTensors; for non-symbolic calls, they are\n      // passed in the second arg as a part of the kwargs. Hence the need to\n      // temporarily modify inputSpec here.\n      // TODO(cais): Make refactoring so that this hacky code below is no\n      // longer needed.\n      const originalInputSpec = this.inputSpec;\n      this.inputSpec = fullInputSpec;\n      const output =\n          super.apply(fullInput as Tensor[] | SymbolicTensor[], kwargs);\n      this.inputSpec = originalInputSpec;\n      return output;\n    } else {\n      return super.apply(inputs, kwargs);\n    }\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const initialState = kwargs['initialState'];\n\n      let y: Tensor|Tensor[];\n      let yRev: Tensor|Tensor[];\n      if (initialState == null) {\n        y = this.forwardLayer.call(inputs, kwargs);\n        yRev = this.backwardLayer.call(inputs, kwargs);\n      } else {\n        const forwardState = initialState.slice(0, initialState.length / 2);\n        const backwardState = initialState.slice(initialState.length / 2);\n        y = this.forwardLayer.call(\n            inputs, Object.assign(kwargs, {initialState: forwardState}));\n        yRev = this.backwardLayer.call(\n            inputs, Object.assign(kwargs, {initialState: backwardState}));\n      }\n\n      let states: Tensor[];\n      if (this.returnState) {\n        if (Array.isArray(y)) {\n          states = y.slice(1).concat((yRev as Tensor[]).slice(1));\n        } else {\n        }\n        y = (y as Tensor[])[0];\n        yRev = (yRev as Tensor[])[0];\n      }\n\n      if (this.returnSequences) {\n        yRev = tfc.reverse(yRev as Tensor, 1);\n      }\n\n      let output: Tensor|Tensor[];\n      if (this.mergeMode === 'concat') {\n        output = K.concatenate([y as Tensor, yRev as Tensor]);\n      } else if (this.mergeMode === 'sum') {\n        output = tfc.add(y as Tensor, yRev as Tensor);\n      } else if (this.mergeMode === 'ave') {\n        output = tfc.mul(.5, tfc.add(y as Tensor, yRev as Tensor));\n      } else if (this.mergeMode === 'mul') {\n        output = tfc.mul(y as Tensor, yRev as Tensor);\n      } else if (this.mergeMode == null) {\n        output = [y as Tensor, yRev as Tensor];\n      }\n\n      // TODO(cais): Properly set learning phase.\n      if (this.returnState) {\n        if (this.mergeMode == null) {\n          return (output as Tensor[]).concat(states);\n        }\n        return [output as Tensor].concat(states);\n      }\n      return output;\n    });\n  }\n\n  resetStates(states?: Tensor|Tensor[]): void {\n    this.forwardLayer.resetStates();\n    this.backwardLayer.resetStates();\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    nameScope(this.forwardLayer.name, () => {\n      this.forwardLayer.build(inputShape);\n    });\n    nameScope(this.backwardLayer.name, () => {\n      this.backwardLayer.build(inputShape);\n    });\n    this.built = true;\n  }\n\n  computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]): Tensor\n      |Tensor[] {\n    if (Array.isArray(mask)) {\n      mask = mask[0];\n    }\n    let outputMask: Tensor|Tensor[];\n    if (this.returnSequences) {\n      if (this.mergeMode == null) {\n        outputMask = [mask, mask];\n      } else {\n        outputMask = mask;\n      }\n    } else {\n      if (this.mergeMode == null) {\n        outputMask = [null, null];\n      } else {\n        outputMask = null;\n      }\n    }\n    if (this.returnState) {\n      const states = this.forwardLayer.states;\n      const stateMask: Tensor[] = states.map(state => null);\n      if (Array.isArray(outputMask)) {\n        return outputMask.concat(stateMask).concat(stateMask);\n      } else {\n        return [outputMask].concat(stateMask).concat(stateMask);\n      }\n    } else {\n      return outputMask;\n    }\n  }\n\n  get trainableWeights(): LayerVariable[] {\n    return this.forwardLayer.trainableWeights.concat(\n        this.backwardLayer.trainableWeights);\n  }\n\n  get nonTrainableWeights(): LayerVariable[] {\n    return this.forwardLayer.nonTrainableWeights.concat(\n        this.backwardLayer.nonTrainableWeights);\n  }\n\n  // TODO(cais): Implement constraints().\n\n  setFastWeightInitDuringBuild(value: boolean) {\n    super.setFastWeightInitDuringBuild(value);\n    if (this.forwardLayer != null) {\n      this.forwardLayer.setFastWeightInitDuringBuild(value);\n    }\n    if (this.backwardLayer != null) {\n      this.backwardLayer.setFastWeightInitDuringBuild(value);\n    }\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      'mergeMode': this.mergeMode,\n    };\n    // TODO(cais): Add logic for `numConstants` once the property is added.\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict): T {\n    const rnnLayer =\n        deserialize(config['layer'] as serialization.ConfigDict) as RNN;\n    delete config['layer'];\n    // TODO(cais): Add logic for `numConstants` once the property is added.\n    if (config['numConstants'] != null) {\n      throw new NotImplementedError(\n          `Deserialization of a Bidirectional layer with numConstants ` +\n          `present is not supported yet.`);\n    }\n    // tslint:disable-next-line:no-any\n    const newConfig: {[key: string]: any} = config;\n    newConfig['layer'] = rnnLayer;\n    return new cls(newConfig);\n  }\n}\nserialization.registerClass(Bidirectional);\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {InputLayer, InputLayerArgs} from './engine/input_layer';\nimport {Layer, LayerArgs} from './engine/topology';\nimport {input} from './exports';\nimport {ELU, ELULayerArgs, LeakyReLU, LeakyReLULayerArgs, PReLU, PReLULayerArgs, ReLU, ReLULayerArgs, Softmax, SoftmaxLayerArgs, ThresholdedReLU, ThresholdedReLULayerArgs} from './layers/advanced_activations';\nimport {Conv1D, Conv2D, Conv2DTranspose, Conv3D, ConvLayerArgs, Cropping2D, Cropping2DLayerArgs, SeparableConv2D, SeparableConvLayerArgs, UpSampling2D, UpSampling2DLayerArgs} from './layers/convolutional';\nimport {DepthwiseConv2D, DepthwiseConv2DLayerArgs} from './layers/convolutional_depthwise';\nimport {Activation, ActivationLayerArgs, Dense, DenseLayerArgs, Dropout, DropoutLayerArgs, Flatten, FlattenLayerArgs, Masking, MaskingArgs, Permute, PermuteLayerArgs, RepeatVector, RepeatVectorLayerArgs, Reshape, ReshapeLayerArgs, SpatialDropout1D, SpatialDropout1DLayerConfig} from './layers/core';\nimport {Embedding, EmbeddingLayerArgs} from './layers/embeddings';\nimport {Add, Average, Concatenate, ConcatenateLayerArgs, Dot, DotLayerArgs, Maximum, Minimum, Multiply} from './layers/merge';\nimport {AlphaDropout, AlphaDropoutArgs, GaussianDropout, GaussianDropoutArgs, GaussianNoise, GaussianNoiseArgs} from './layers/noise';\nimport {BatchNormalization, BatchNormalizationLayerArgs, LayerNormalization, LayerNormalizationLayerArgs} from './layers/normalization';\nimport {ZeroPadding2D, ZeroPadding2DLayerArgs} from './layers/padding';\nimport {AveragePooling1D, AveragePooling2D, AveragePooling3D, GlobalAveragePooling1D, GlobalAveragePooling2D, GlobalMaxPooling1D, GlobalMaxPooling2D, GlobalPooling2DLayerArgs, MaxPooling1D, MaxPooling2D, MaxPooling3D, Pooling1DLayerArgs, Pooling2DLayerArgs, Pooling3DLayerArgs} from './layers/pooling';\nimport {GRU, GRUCell, GRUCellLayerArgs, GRULayerArgs, LSTM, LSTMCell, LSTMCellLayerArgs, LSTMLayerArgs, RNN, RNNCell, RNNLayerArgs, SimpleRNN, SimpleRNNCell, SimpleRNNCellLayerArgs, SimpleRNNLayerArgs, StackedRNNCells, StackedRNNCellsArgs} from './layers/recurrent';\nimport {Bidirectional, BidirectionalLayerArgs, TimeDistributed, WrapperLayerArgs} from './layers/wrappers';\n\n// TODO(cais): Add doc string to all the public static functions in this\n//   class; include exectuable JavaScript code snippets where applicable\n//   (b/74074458).\n\n// Input Layer.\n/**\n * An input layer is an entry point into a `tf.LayersModel`.\n *\n * `InputLayer` is generated automatically for `tf.Sequential`` models by\n * specifying the `inputshape` or `batchInputShape` for the first layer.  It\n * should not be specified explicitly. However, it can be useful sometimes,\n * e.g., when constructing a sequential model from a subset of another\n * sequential model's layers. Like the code snippet below shows.\n *\n * ```js\n * // Define a model which simply adds two inputs.\n * const model1 = tf.sequential();\n * model1.add(tf.layers.dense({inputShape: [4], units: 3, activation: 'relu'}));\n * model1.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));\n * model1.summary();\n * model1.predict(tf.zeros([1, 4])).print();\n *\n * // Construct another model, reusing the second layer of `model1` while\n * // not using the first layer of `model1`. Note that you cannot add the second\n * // layer of `model` directly as the first layer of the new sequential model,\n * // because doing so will lead to an error related to the fact that the layer\n * // is not an input layer. Instead, you need to create an `inputLayer` and add\n * // it to the new sequential model before adding the reused layer.\n * const model2 = tf.sequential();\n * // Use an inputShape that matches the input shape of `model1`'s second\n * // layer.\n * model2.add(tf.layers.inputLayer({inputShape: [3]}));\n * model2.add(model1.layers[1]);\n * model2.summary();\n * model2.predict(tf.zeros([1, 3])).print();\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Inputs', namespace: 'layers'} */\nexport function inputLayer(args: InputLayerArgs): Layer {\n  return new InputLayer(args);\n}\n\n// Advanced Activation Layers.\n\n/**\n * Exponetial Linear Unit (ELU).\n *\n * It follows:\n * `f(x) =  alpha * (exp(x) - 1.) for x < 0`,\n * `f(x) = x for x >= 0`.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * References:\n *   - [Fast and Accurate Deep Network Learning by Exponential Linear Units\n * (ELUs)](https://arxiv.org/abs/1511.07289v1)\n */\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function elu(args?: ELULayerArgs): Layer {\n  return new ELU(args);\n}\n\n/**\n * Rectified Linear Unit activation function.\n *\n * Input shape:\n *   Arbitrary. Use the config field `inputShape` (Array of integers, does\n *   not include the sample axis) when using this layer as the first layer\n *   in a model.\n *\n * Output shape:\n *   Same shape as the input.\n */\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function reLU(args?: ReLULayerArgs): Layer {\n  return new ReLU(args);\n}\n\n/**\n * Leaky version of a rectified linear unit.\n *\n * It allows a small gradient when the unit is not active:\n * `f(x) = alpha * x for x < 0.`\n * `f(x) = x for x >= 0.`\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n */\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function leakyReLU(args?: LeakyReLULayerArgs): Layer {\n  return new LeakyReLU(args);\n}\n\n/**\n * Parameterized version of a leaky rectified linear unit.\n *\n * It follows\n * `f(x) = alpha * x for x < 0.`\n * `f(x) = x for x >= 0.`\n * wherein `alpha` is a trainable weight.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n */\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function prelu(args?: PReLULayerArgs): Layer {\n  return new PReLU(args);\n}\n\n/**\n * Softmax activation layer.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n */\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function softmax(args?: SoftmaxLayerArgs): Layer {\n  return new Softmax(args);\n}\n\n/**\n * Thresholded Rectified Linear Unit.\n *\n * It follows:\n * `f(x) = x for x > theta`,\n * `f(x) = 0 otherwise`.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * References:\n *   - [Zero-Bias Autoencoders and the Benefits of Co-Adapting\n * Features](http://arxiv.org/abs/1402.3337)\n */\n/**\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function thresholdedReLU(args?: ThresholdedReLULayerArgs): Layer {\n  return new ThresholdedReLU(args);\n}\n\n// Convolutional Layers.\n\n/**\n * 1D convolution layer (e.g., temporal convolution).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input over a single spatial (or temporal) dimension\n * to produce a tensor of outputs.\n *\n * If `use_bias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model, provide an\n * `inputShape` argument `Array` or `null`.\n *\n * For example, `inputShape` would be:\n * - `[10, 128]` for sequences of 10 vectors of 128-dimensional vectors\n * - `[null, 128]` for variable-length sequences of 128-dimensional vectors.\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional',  namespace: 'layers'}\n */\nexport function conv1d(args: ConvLayerArgs): Layer {\n  return new Conv1D(args);\n}\n\n/**\n * 2D convolution layer (e.g. spatial convolution over images).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input to produce a tensor of outputs.\n *\n * If `useBias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model,\n * provide the keyword argument `inputShape`\n * (Array of integers, does not include the sample axis),\n * e.g. `inputShape=[128, 128, 3]` for 128x128 RGB pictures\n * in `dataFormat='channelsLast'`.\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function conv2d(args: ConvLayerArgs): Layer {\n  return new Conv2D(args);\n}\n\n/**\n * Transposed convolutional layer (sometimes called Deconvolution).\n *\n * The need for transposed convolutions generally arises\n * from the desire to use a transformation going in the opposite direction of\n * a normal convolution, i.e., from something that has the shape of the output\n * of some convolution to something that has the shape of its input while\n * maintaining a connectivity pattern that is compatible with said\n * convolution.\n *\n * When using this layer as the first layer in a model, provide the\n * configuration `inputShape` (`Array` of integers, does not include the\n * sample axis), e.g., `inputShape: [128, 128, 3]` for 128x128 RGB pictures in\n * `dataFormat: 'channelsLast'`.\n *\n * Input shape:\n *   4D tensor with shape:\n *   `[batch, channels, rows, cols]` if `dataFormat` is `'channelsFirst'`.\n *   or 4D tensor with shape\n *   `[batch, rows, cols, channels]` if `dataFormat` is `'channelsLast`.\n *\n * Output shape:\n *   4D tensor with shape:\n *   `[batch, filters, newRows, newCols]` if `dataFormat` is\n * `'channelsFirst'`. or 4D tensor with shape:\n *   `[batch, newRows, newCols, filters]` if `dataFormat` is `'channelsLast'`.\n *\n * References:\n *   - [A guide to convolution arithmetic for deep\n * learning](https://arxiv.org/abs/1603.07285v1)\n *   - [Deconvolutional\n * Networks](http://www.matthewzeiler.com/pubs/cvpr2010/cvpr2010.pdf)\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function conv2dTranspose(args: ConvLayerArgs): Layer {\n  return new Conv2DTranspose(args);\n}\n\n/**\n * 3D convolution layer (e.g. spatial convolution over volumes).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input to produce a tensor of outputs.\n *\n * If `useBias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model,\n * provide the keyword argument `inputShape`\n * (Array of integers, does not include the sample axis),\n * e.g. `inputShape=[128, 128, 128, 1]` for 128x128x128 grayscale volumes\n * in `dataFormat='channelsLast'`.\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function conv3d(args: ConvLayerArgs): Layer {\n  return new Conv3D(args);\n}\n\n/**\n * Depthwise separable 2D convolution.\n *\n * Separable convolution consists of first performing\n * a depthwise spatial convolution\n * (which acts on each input channel separately)\n * followed by a pointwise convolution which mixes together the resulting\n * output channels. The `depthMultiplier` argument controls how many\n * output channels are generated per input channel in the depthwise step.\n *\n * Intuitively, separable convolutions can be understood as\n * a way to factorize a convolution kernel into two smaller kernels,\n * or as an extreme version of an Inception block.\n *\n * Input shape:\n *   4D tensor with shape:\n *     `[batch, channels, rows, cols]` if data_format='channelsFirst'\n *   or 4D tensor with shape:\n *     `[batch, rows, cols, channels]` if data_format='channelsLast'.\n *\n * Output shape:\n *   4D tensor with shape:\n *     `[batch, filters, newRows, newCols]` if data_format='channelsFirst'\n *   or 4D tensor with shape:\n *     `[batch, newRows, newCols, filters]` if data_format='channelsLast'.\n *     `rows` and `cols` values might have changed due to padding.\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function separableConv2d(args: SeparableConvLayerArgs): Layer {\n  return new SeparableConv2D(args);\n}\n\n/**\n * Cropping layer for 2D input (e.g., image).\n *\n * This layer can crop an input\n * at the top, bottom, left and right side of an image tensor.\n *\n * Input shape:\n *   4D tensor with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, rows, cols, channels]`\n *   - If `data_format` is `\"channels_first\"`:\n *     `[batch, channels, rows, cols]`.\n *\n * Output shape:\n *   4D with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, croppedRows, croppedCols, channels]`\n *    - If `dataFormat` is `\"channelsFirst\"`:\n *     `[batch, channels, croppedRows, croppedCols]`.\n *\n * Examples\n * ```js\n *\n * const model = tf.sequential();\n * model.add(tf.layers.cropping2D({cropping:[[2, 2], [2, 2]],\n *                                inputShape: [128, 128, 3]}));\n * //now output shape is [batch, 124, 124, 3]\n * ```\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function cropping2D(args: Cropping2DLayerArgs): Layer {\n  return new Cropping2D(args);\n}\n\n/**\n * Upsampling layer for 2D inputs.\n *\n * Repeats the rows and columns of the data\n * by size[0] and size[1] respectively.\n *\n *\n * Input shape:\n *    4D tensor with shape:\n *     - If `dataFormat` is `\"channelsLast\"`:\n *         `[batch, rows, cols, channels]`\n *     - If `dataFormat` is `\"channelsFirst\"`:\n *        `[batch, channels, rows, cols]`\n *\n * Output shape:\n *     4D tensor with shape:\n *     - If `dataFormat` is `\"channelsLast\"`:\n *        `[batch, upsampledRows, upsampledCols, channels]`\n *     - If `dataFormat` is `\"channelsFirst\"`:\n *         `[batch, channels, upsampledRows, upsampledCols]`\n *\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function upSampling2d(args: UpSampling2DLayerArgs): Layer {\n  return new UpSampling2D(args);\n}\n\n// Convolutional(depthwise) Layers.\n\n/**\n * Depthwise separable 2D convolution.\n *\n * Depthwise Separable convolutions consists in performing just the first step\n * in a depthwise spatial convolution (which acts on each input channel\n * separately). The `depthMultplier` argument controls how many output channels\n * are generated per input channel in the depthwise step.\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function depthwiseConv2d(args: DepthwiseConv2DLayerArgs): Layer {\n  return new DepthwiseConv2D(args);\n}\n\n// Basic Layers.\n\n/**\n * Applies an activation function to an output.\n *\n * This layer applies element-wise activation function.  Other layers, notably\n * `dense` can also apply activation functions.  Use this isolated activation\n * function to extract the values before and after the\n * activation. For instance:\n *\n * ```js\n * const input = tf.input({shape: [5]});\n * const denseLayer = tf.layers.dense({units: 1});\n * const activationLayer = tf.layers.activation({activation: 'relu6'});\n *\n * // Obtain the output symbolic tensors by applying the layers in order.\n * const denseOutput = denseLayer.apply(input);\n * const activationOutput = activationLayer.apply(denseOutput);\n *\n * // Create the model based on the inputs.\n * const model = tf.model({\n *     inputs: input,\n *     outputs: [denseOutput, activationOutput]\n * });\n *\n * // Collect both outputs and print separately.\n * const [denseOut, activationOut] = model.predict(tf.randomNormal([6, 5]));\n * denseOut.print();\n * activationOut.print();\n * ```\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function activation(args: ActivationLayerArgs): Layer {\n  return new Activation(args);\n}\n\n/**\n * Creates a dense (fully connected) layer.\n *\n * This layer implements the operation:\n *   `output = activation(dot(input, kernel) + bias)`\n *\n * `activation` is the element-wise activation function\n *   passed as the `activation` argument.\n *\n * `kernel` is a weights matrix created by the layer.\n *\n * `bias` is a bias vector created by the layer (only applicable if `useBias`\n * is `true`).\n *\n * **Input shape:**\n *\n *   nD `tf.Tensor` with shape: `(batchSize, ..., inputDim)`.\n *\n *   The most common situation would be\n *   a 2D input with shape `(batchSize, inputDim)`.\n *\n * **Output shape:**\n *\n *   nD tensor with shape: `(batchSize, ..., units)`.\n *\n *   For instance, for a 2D input with shape `(batchSize, inputDim)`,\n *   the output would have shape `(batchSize, units)`.\n *\n * Note: if the input to the layer has a rank greater than 2, then it is\n * flattened prior to the initial dot product with the kernel.\n */\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\nexport function dense(args: DenseLayerArgs): Layer {\n  return new Dense(args);\n}\n\n/**\n * Applies\n * [dropout](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf) to\n * the input.\n *\n * Dropout consists in randomly setting a fraction `rate` of input units to 0 at\n * each update during training time, which helps prevent overfitting.\n */\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\nexport function dropout(args: DropoutLayerArgs): Layer {\n  return new Dropout(args);\n}\n\n/**\n * Spatial 1D version of Dropout.\n *\n * This Layer type performs the same function as the Dropout layer, but it drops\n * entire 1D feature maps instead of individual elements. For example, if an\n * input example consists of 3 timesteps and the feature map for each timestep\n * has a size of 4, a `spatialDropout1d` layer may zero out the feature maps\n * of the 1st timesteps and 2nd timesteps completely while sparing all feature\n * elements of the 3rd timestep.\n *\n * If adjacent frames (timesteps) are strongly correlated (as is normally the\n * case in early convolution layers), regular dropout will not regularize the\n * activation and will otherwise just result in merely an effective learning\n * rate decrease. In this case, `spatialDropout1d` will help promote\n * independence among feature maps and should be used instead.\n *\n * **Arguments:**\n *   rate: A floating-point number >=0 and <=1. Fraction of the input elements\n *     to drop.\n *\n * **Input shape:**\n *   3D tensor with shape `(samples, timesteps, channels)`.\n *\n * **Output shape:**\n *   Same as the input shape.\n *\n * References:\n *   - [Efficient Object Localization Using Convolutional\n *      Networks](https://arxiv.org/abs/1411.4280)\n */\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\nexport function spatialDropout1d(args: SpatialDropout1DLayerConfig): Layer {\n  return new SpatialDropout1D(args);\n}\n\n/**\n * Flattens the input. Does not affect the batch size.\n *\n * A `Flatten` layer flattens each batch in its inputs to 1D (making the output\n * 2D).\n *\n * For example:\n *\n * ```js\n * const input = tf.input({shape: [4, 3]});\n * const flattenLayer = tf.layers.flatten();\n * // Inspect the inferred output shape of the flatten layer, which\n * // equals `[null, 12]`. The 2nd dimension is 4 * 3, i.e., the result of the\n * // flattening. (The 1st dimension is the undermined batch size.)\n * console.log(JSON.stringify(flattenLayer.apply(input).shape));\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\nexport function flatten(args?: FlattenLayerArgs): Layer {\n  return new Flatten(args);\n}\n\n/**\n * Repeats the input n times in a new dimension.\n *\n * ```js\n *  const model = tf.sequential();\n *  model.add(tf.layers.repeatVector({n: 4, inputShape: [2]}));\n *  const x = tf.tensor2d([[10, 20]]);\n *  // Use the model to do inference on a data point the model hasn't see\n *  model.predict(x).print();\n *  // output shape is now [batch, 2, 4]\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\nexport function repeatVector(args: RepeatVectorLayerArgs): Layer {\n  return new RepeatVector(args);\n}\n\n/**\n * Reshapes an input to a certain shape.\n *\n * ```js\n * const input = tf.input({shape: [4, 3]});\n * const reshapeLayer = tf.layers.reshape({targetShape: [2, 6]});\n * // Inspect the inferred output shape of the Reshape layer, which\n * // equals `[null, 2, 6]`. (The 1st dimension is the undermined batch size.)\n * console.log(JSON.stringify(reshapeLayer.apply(input).shape));\n * ```\n *\n * Input shape:\n *   Arbitrary, although all dimensions in the input shape must be fixed.\n *   Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n *\n * Output shape:\n *   [batchSize, targetShape[0], targetShape[1], ...,\n *    targetShape[targetShape.length - 1]].\n */\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\nexport function reshape(args: ReshapeLayerArgs): Layer {\n  return new Reshape(args);\n}\n\n/**\n * Permutes the dimensions of the input according to a given pattern.\n *\n * Useful for, e.g., connecting RNNs and convnets together.\n *\n * Example:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.permute({\n *   dims: [2, 1],\n *   inputShape: [10, 64]\n * }));\n * console.log(model.outputShape);\n * // Now model's output shape is [null, 64, 10], where null is the\n * // unpermuted sample (batch) dimension.\n * ```\n *\n * Input shape:\n *   Arbitrary. Use the configuration field `inputShape` when using this\n *   layer as the first layer in a model.\n *\n * Output shape:\n *   Same rank as the input shape, but with the dimensions re-ordered (i.e.,\n *   permuted) according to the `dims` configuration of this layer.\n */\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\nexport function permute(args: PermuteLayerArgs): Layer {\n  return new Permute(args);\n}\n\n/**\n * Maps positive integers (indices) into dense vectors of fixed size.\n * eg. [[4], [20]] -> [[0.25, 0.1], [0.6, -0.2]]\n *\n * **Input shape:** 2D tensor with shape: `[batchSize, sequenceLength]`.\n *\n * **Output shape:** 3D tensor with shape: `[batchSize, sequenceLength,\n * outputDim]`.\n */\n/** @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'} */\nexport function embedding(args: EmbeddingLayerArgs): Layer {\n  return new Embedding(args);\n}\n\n// Merge Layers.\n\n/**\n * Layer that performs element-wise addition on an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). The inputs are specified as an\n * `Array` when the `apply` method of the `Add` layer instance is called. For\n * example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const addLayer = tf.layers.add();\n * const sum = addLayer.apply([input1, input2]);\n * console.log(JSON.stringify(sum.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\nexport function add(args?: LayerArgs): Layer {\n  return new Add(args);\n}\n\n/**\n * Layer that performs element-wise averaging on an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const averageLayer = tf.layers.average();\n * const average = averageLayer.apply([input1, input2]);\n * console.log(JSON.stringify(average.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\nexport function average(args?: LayerArgs): Layer {\n  return new Average(args);\n}\n\n/**\n * Layer that concatenates an `Array` of inputs.\n *\n * It takes a list of tensors, all of the same shape except for the\n * concatenation axis, and returns a single tensor, the concatenation\n * of all inputs. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 3]});\n * const concatLayer = tf.layers.concatenate();\n * const output = concatLayer.apply([input1, input2]);\n * console.log(JSON.stringify(output.shape));\n * // You get [null, 2, 5], with the first dimension as the undetermined batch\n * // dimension. The last dimension (5) is the result of concatenating the\n * // last dimensions of the inputs (2 and 3).\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\nexport function concatenate(args?: ConcatenateLayerArgs): Layer {\n  return new Concatenate(args);\n}\n\n/**\n * Layer that computes the element-wise maximum an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const maxLayer = tf.layers.maximum();\n * const max = maxLayer.apply([input1, input2]);\n * console.log(JSON.stringify(max.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\nexport function maximum(args?: LayerArgs): Layer {\n  return new Maximum(args);\n}\n\n/**\n * Layer that computes the element-wise minimum of an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const minLayer = tf.layers.minimum();\n * const min = minLayer.apply([input1, input2]);\n * console.log(JSON.stringify(min.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\nexport function minimum(args?: LayerArgs): Layer {\n  return new Minimum(args);\n}\n\n/**\n * Layer that multiplies (element-wise) an `Array` of inputs.\n *\n * It takes as input an Array of tensors, all of the same\n * shape, and returns a single tensor (also of the same shape).\n * For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const input3 = tf.input({shape: [2, 2]});\n * const multiplyLayer = tf.layers.multiply();\n * const product = multiplyLayer.apply([input1, input2, input3]);\n * console.log(product.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n */\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\nexport function multiply(args?: LayerArgs): Layer {\n  return new Multiply(args);\n}\n\n/**\n * Layer that computes a dot product between samples in two tensors.\n *\n * E.g., if applied to a list of two tensors `a` and `b` both of shape\n * `[batchSize, n]`, the output will be a tensor of shape `[batchSize, 1]`,\n * where each entry at index `[i, 0]` will be the dot product between\n * `a[i, :]` and `b[i, :]`.\n *\n * Example:\n *\n * ```js\n * const dotLayer = tf.layers.dot({axes: -1});\n * const x1 = tf.tensor2d([[10, 20], [30, 40]]);\n * const x2 = tf.tensor2d([[-1, -2], [-3, -4]]);\n *\n * // Invoke the layer's apply() method in eager (imperative) mode.\n * const y = dotLayer.apply([x1, x2]);\n * y.print();\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'} */\nexport function dot(args: DotLayerArgs): Layer {\n  return new Dot(args);\n}\n\n// Normalization Layers.\n\n/**\n * Batch normalization layer (Ioffe and Szegedy, 2014).\n *\n * Normalize the activations of the previous layer at each batch,\n * i.e. applies a transformation that maintains the mean activation\n * close to 0 and the activation standard deviation close to 1.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape` (Array of integers, does\n *   not include the sample axis) when calling the constructor of this class,\n *   if this layer is used as a first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Batch Normalization: Accelerating Deep Network Training by Reducing\n * Internal Covariate Shift](https://arxiv.org/abs/1502.03167)\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Normalization', namespace: 'layers'}\n */\nexport function batchNormalization(args?: BatchNormalizationLayerArgs): Layer {\n  return new BatchNormalization(args);\n}\n\n/**\n * Layer-normalization layer (Ba et al., 2016).\n *\n * Normalizes the activations of the previous layer for each given example in a\n * batch independently, instead of across a batch like in `batchNormalization`.\n * In other words, this layer applies a transformation that maintanis the mean\n * activation within each example close to0 and activation variance close to 1.\n *\n * Input shape:\n *   Arbitrary. Use the argument `inputShape` when using this layer as the first\n *   layer in a model.\n *\n * Output shape:\n *   Same as input.\n *\n * References:\n *   - [Layer Normalization](https://arxiv.org/abs/1607.06450)\n */\n/**\n * @doc {heading: 'Layers', subheading: 'Normalization', namespace: 'layers'}\n */\nexport function layerNormalization(args?: LayerNormalizationLayerArgs): Layer {\n  return new LayerNormalization(args);\n}\n\n// Padding Layers.\n\n/**\n * Zero-padding layer for 2D input (e.g., image).\n *\n * This layer can add rows and columns of zeros\n * at the top, bottom, left and right side of an image tensor.\n *\n * Input shape:\n *   4D tensor with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, rows, cols, channels]`\n *   - If `data_format` is `\"channels_first\"`:\n *     `[batch, channels, rows, cols]`.\n *\n * Output shape:\n *   4D with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, paddedRows, paddedCols, channels]`\n *    - If `dataFormat` is `\"channelsFirst\"`:\n *     `[batch, channels, paddedRows, paddedCols]`.\n */\n/** @doc {heading: 'Layers', subheading: 'Padding', namespace: 'layers'} */\nexport function zeroPadding2d(args?: ZeroPadding2DLayerArgs): Layer {\n  return new ZeroPadding2D(args);\n}\n\n// Pooling Layers.\n\n/**\n * Average pooling operation for spatial data.\n *\n * Input shape: `[batchSize, inLength, channels]`\n *\n * Output shape: `[batchSize, pooledLength, channels]`\n *\n * `tf.avgPool1d` is an alias.\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function averagePooling1d(args: Pooling1DLayerArgs): Layer {\n  return new AveragePooling1D(args);\n}\nexport function avgPool1d(args: Pooling1DLayerArgs): Layer {\n  return averagePooling1d(args);\n}\n// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nexport function avgPooling1d(args: Pooling1DLayerArgs): Layer {\n  return averagePooling1d(args);\n}\n\n/**\n * Average pooling operation for spatial data.\n *\n * Input shape:\n *  - If `dataFormat === CHANNEL_LAST`:\n *      4D tensor with shape:\n *      `[batchSize, rows, cols, channels]`\n *  - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *      `[batchSize, channels, rows, cols]`\n *\n * Output shape\n *  - If `dataFormat === CHANNEL_LAST`:\n *      4D tensor with shape:\n *      `[batchSize, pooleRows, pooledCols, channels]`\n *  - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *      `[batchSize, channels, pooleRows, pooledCols]`\n *\n * `tf.avgPool2d` is an alias.\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function averagePooling2d(args: Pooling2DLayerArgs): Layer {\n  return new AveragePooling2D(args);\n}\nexport function avgPool2d(args: Pooling2DLayerArgs): Layer {\n  return averagePooling2d(args);\n}\n// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nexport function avgPooling2d(args: Pooling2DLayerArgs): Layer {\n  return averagePooling2d(args);\n}\n\n/**\n * Average pooling operation for 3D data.\n *\n * Input shape\n *   - If `dataFormat === channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, depths, rows, cols, channels]`\n *   - If `dataFormat === channelsFirst`:\n *      4D tensor with shape:\n *       `[batchSize, channels, depths, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, pooledDepths, pooledRows, pooledCols, channels]`\n *   - If `dataFormat=channelsFirst`:\n *       5D tensor with shape:\n *       `[batchSize, channels, pooledDepths, pooledRows, pooledCols]`\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function averagePooling3d(args: Pooling3DLayerArgs): Layer {\n  return new AveragePooling3D(args);\n}\nexport function avgPool3d(args: Pooling3DLayerArgs): Layer {\n  return averagePooling3d(args);\n}\n// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nexport function avgPooling3d(args: Pooling3DLayerArgs): Layer {\n  return averagePooling3d(args);\n}\n\n/**\n * Global average pooling operation for temporal data.\n *\n * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.\n *\n * Output Shape:2D tensor with shape: `[batchSize, features]`.\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function globalAveragePooling1d(args?: LayerArgs): Layer {\n  return new GlobalAveragePooling1D(args);\n}\n\n/**\n * Global average pooling operation for spatial data.\n *\n * Input shape:\n *   - If `dataFormat` is `CHANNEL_LAST`:\n *       4D tensor with shape: `[batchSize, rows, cols, channels]`.\n *   - If `dataFormat` is `CHANNEL_FIRST`:\n *       4D tensor with shape: `[batchSize, channels, rows, cols]`.\n *\n * Output shape:\n *   2D tensor with shape: `[batchSize, channels]`.\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function globalAveragePooling2d(args: GlobalPooling2DLayerArgs): Layer {\n  return new GlobalAveragePooling2D(args);\n}\n\n/**\n * Global max pooling operation for temporal data.\n *\n * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.\n *\n * Output Shape:2D tensor with shape: `[batchSize, features]`.\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function globalMaxPooling1d(args?: LayerArgs): Layer {\n  return new GlobalMaxPooling1D(args);\n}\n\n/**\n * Global max pooling operation for spatial data.\n *\n * Input shape:\n *   - If `dataFormat` is `CHANNEL_LAST`:\n *       4D tensor with shape: `[batchSize, rows, cols, channels]`.\n *   - If `dataFormat` is `CHANNEL_FIRST`:\n *       4D tensor with shape: `[batchSize, channels, rows, cols]`.\n *\n * Output shape:\n *   2D tensor with shape: `[batchSize, channels]`.\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function globalMaxPooling2d(args: GlobalPooling2DLayerArgs): Layer {\n  return new GlobalMaxPooling2D(args);\n}\n\n/**\n * Max pooling operation for temporal data.\n *\n * Input shape:  `[batchSize, inLength, channels]`\n *\n * Output shape: `[batchSize, pooledLength, channels]`\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function maxPooling1d(args: Pooling1DLayerArgs): Layer {\n  return new MaxPooling1D(args);\n}\n\n/**\n * Max pooling operation for spatial data.\n *\n * Input shape\n *   - If `dataFormat === CHANNEL_LAST`:\n *       4D tensor with shape:\n *       `[batchSize, rows, cols, channels]`\n *   - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *       `[batchSize, channels, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=CHANNEL_LAST`:\n *       4D tensor with shape:\n *       `[batchSize, pooleRows, pooledCols, channels]`\n *   - If `dataFormat=CHANNEL_FIRST`:\n *       4D tensor with shape:\n *       `[batchSize, channels, pooleRows, pooledCols]`\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function maxPooling2d(args: Pooling2DLayerArgs): Layer {\n  return new MaxPooling2D(args);\n}\n\n/**\n * Max pooling operation for 3D data.\n *\n * Input shape\n *   - If `dataFormat === channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, depths, rows, cols, channels]`\n *   - If `dataFormat === channelsFirst`:\n *      5D tensor with shape:\n *       `[batchSize, channels, depths, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, pooledDepths, pooledRows, pooledCols, channels]`\n *   - If `dataFormat=channelsFirst`:\n *       5D tensor with shape:\n *       `[batchSize, channels, pooledDepths, pooledRows, pooledCols]`\n */\n/** @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'} */\nexport function maxPooling3d(args: Pooling3DLayerArgs): Layer {\n  return new MaxPooling3D(args);\n}\n\n// Recurrent Layers.\n\n/**\n * Gated Recurrent Unit - Cho et al. 2014.\n *\n * This is an `RNN` layer consisting of one `GRUCell`. However, unlike\n * the underlying `GRUCell`, the `apply` method of `SimpleRNN` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const rnn = tf.layers.gru({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `GRUCell`'s number of units.\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function gru(args: GRULayerArgs): Layer {\n  return new GRU(args);\n}\n\n/**\n * Cell class for `GRU`.\n *\n * `GRUCell` is distinct from the `RNN` subclass `GRU` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `GRU` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.gruCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `GRUCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.gruCell({units: 4}),\n *   tf.layers.gruCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `gruCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `GRUCell`, use the\n * `tf.layers.gru`.\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function gruCell(args: GRUCellLayerArgs): RNNCell {\n  return new GRUCell(args);\n}\n\n/**\n * Long-Short Term Memory layer - Hochreiter 1997.\n *\n * This is an `RNN` layer consisting of one `LSTMCell`. However, unlike\n * the underlying `LSTMCell`, the `apply` method of `LSTM` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const lstm = tf.layers.lstm({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = lstm.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `LSTMCell`'s number of units.\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function lstm(args: LSTMLayerArgs): Layer {\n  return new LSTM(args);\n}\n\n/**\n * Cell class for `LSTM`.\n *\n * `LSTMCell` is distinct from the `RNN` subclass `LSTM` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `LSTM` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.lstmCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `LSTMCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.lstmCell({units: 4}),\n *   tf.layers.lstmCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `lstmCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `LSTMCell`, use the\n * `tf.layers.lstm`.\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function lstmCell(args: LSTMCellLayerArgs): RNNCell {\n  return new LSTMCell(args);\n}\n\n/**\n * Fully-connected RNN where the output is to be fed back to input.\n *\n * This is an `RNN` layer consisting of one `SimpleRNNCell`. However, unlike\n * the underlying `SimpleRNNCell`, the `apply` method of `SimpleRNN` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const rnn = tf.layers.simpleRNN({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `SimpleRNNCell`'s number of units.\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function simpleRNN(args: SimpleRNNLayerArgs): Layer {\n  return new SimpleRNN(args);\n}\n\n/**\n * Cell class for `SimpleRNN`.\n *\n * `SimpleRNNCell` is distinct from the `RNN` subclass `SimpleRNN` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `SimpleRNN` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.simpleRNNCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `SimpleRNNCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.simpleRNNCell({units: 4}),\n *   tf.layers.simpleRNNCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `SimpleRNNCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `SimpleRNNCell`, use the\n * `tf.layers.simpleRNN`.\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function simpleRNNCell(args: SimpleRNNCellLayerArgs): RNNCell {\n  return new SimpleRNNCell(args);\n}\n\n/**\n * Base class for recurrent layers.\n *\n * Input shape:\n *   3D tensor with shape `[batchSize, timeSteps, inputDim]`.\n *\n * Output shape:\n *   - if `returnState`, an Array of tensors (i.e., `tf.Tensor`s). The first\n *     tensor is the output. The remaining tensors are the states at the\n *     last time step, each with shape `[batchSize, units]`.\n *   - if `returnSequences`, the output will have shape\n *     `[batchSize, timeSteps, units]`.\n *   - else, the output will have shape `[batchSize, units]`.\n *\n * Masking:\n *   This layer supports masking for input data with a variable number\n *   of timesteps. To introduce masks to your data,\n *   use an embedding layer with the `mask_zero` parameter\n *   set to `True`.\n *\n * Notes on using statefulness in RNNs:\n *   You can set RNN layers to be 'stateful', which means that the states\n *   computed for the samples in one batch will be reused as initial states\n *   for the samples in the next batch. This assumes a one-to-one mapping\n *   between samples in different successive batches.\n *\n *   To enable statefulness:\n *     - specify `stateful: true` in the layer constructor.\n *     - specify a fixed batch size for your model, by passing\n *       if sequential model:\n *         `batchInputShape=[...]` to the first layer in your model.\n *       else for functional model with 1 or more Input layers:\n *         `batchShape=[...]` to all the first layers in your model.\n *       This is the expected shape of your inputs *including the batch size*.\n *       It should be a tuple of integers, e.g. `(32, 10, 100)`.\n *     - specify `shuffle=False` when calling fit().\n *\n *   To reset the states of your model, call `.resetStates()` on either\n *   a specific layer, or on your entire model.\n *\n * Note on specifying the initial state of RNNs\n *   You can specify the initial state of RNN layers symbolically by\n *   calling them with the option `initialState`. The value of\n *   `initialState` should be a tensor or list of tensors representing\n *   the initial state of the RNN layer.\n *\n *   You can specify the initial state of RNN layers numerically by\n *   calling `resetStates` with the keyword argument `states`. The value of\n *   `states` should be a numpy array or list of numpy arrays representing\n *   the initial state of the RNN layer.\n *\n * Note on passing external constants to RNNs\n *   You can pass \"external\" constants to the cell using the `constants`\n *   keyword argument of `RNN.call` method. This requires that the `cell.call`\n *   method accepts the same keyword argument `constants`. Such constants\n *   can be used to conditon the cell transformation on additional static inputs\n *   (not changing over time), a.k.a an attention mechanism.\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function rnn(args: RNNLayerArgs): Layer {\n  return new RNN(args);\n}\n\n/**\n * Wrapper allowing a stack of RNN cells to behave as a single cell.\n *\n * Used to implement efficient stacked RNNs.\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function stackedRNNCells(args: StackedRNNCellsArgs): RNNCell {\n  return new StackedRNNCells(args);\n}\n\n// Wrapper Layers.\n\n/** @doc {heading: 'Layers', subheading: 'Wrapper', namespace: 'layers'} */\nexport function bidirectional(args: BidirectionalLayerArgs): Bidirectional {\n  return new Bidirectional(args);\n}\n\n/**\n * This wrapper applies a layer to every temporal slice of an input.\n *\n * The input should be at least 3D,  and the dimension of the index `1` will be\n * considered to be the temporal dimension.\n *\n * Consider a batch of 32 samples, where each sample is a sequence of 10 vectors\n * of 16 dimensions. The batch input shape of the layer is then `[32,  10,\n * 16]`, and the `inputShape`, not including the sample dimension, is\n * `[10, 16]`.\n *\n * You can then use `TimeDistributed` to apply a `Dense` layer to each of the 10\n * timesteps, independently:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.timeDistributed({\n *   layer: tf.layers.dense({units: 8}),\n *   inputShape: [10, 16],\n * }));\n *\n * // Now model.outputShape = [null, 10, 8].\n * // The output will then have shape `[32, 10, 8]`.\n *\n * // In subsequent layers, there is no need for `inputShape`:\n * model.add(tf.layers.timeDistributed({layer: tf.layers.dense({units: 32})}));\n * console.log(JSON.stringify(model.outputs[0].shape));\n * // Now model.outputShape = [null, 10, 32].\n * ```\n *\n * The output will then have shape `[32, 10, 32]`.\n *\n * `TimeDistributed` can be used with arbitrary layers, not just `Dense`, for\n * instance a `Conv2D` layer.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.timeDistributed({\n *   layer: tf.layers.conv2d({filters: 64, kernelSize: [3, 3]}),\n *   inputShape: [10, 299, 299, 3],\n * }));\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Wrapper', namespace: 'layers'} */\nexport function timeDistributed(args: WrapperLayerArgs): Layer {\n  return new TimeDistributed(args);\n}\n\n// Aliases for pooling.\nexport const globalMaxPool1d = globalMaxPooling1d;\nexport const globalMaxPool2d = globalMaxPooling2d;\nexport const maxPool1d = maxPooling1d;\nexport const maxPool2d = maxPooling2d;\n\nexport {Layer, RNN, RNNCell, input /* alias for tf.input */};\n\n/**\n * Apply additive zero-centered Gaussian noise.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * This is useful to mitigate overfitting\n * (you could see it as a form of random data augmentation).\n * Gaussian Noise (GS) is a natural choice as corruption process\n * for real valued inputs.\n *\n * # Arguments\n *     stddev: float, standard deviation of the noise distribution.\n *\n * # Input shape\n *         Arbitrary. Use the keyword argument `input_shape`\n *         (tuple of integers, does not include the samples axis)\n *         when using this layer as the first layer in a model.\n *\n * # Output shape\n *         Same shape as input.\n */\n/** @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'} */\nexport function gaussianNoise(args: GaussianNoiseArgs): GaussianNoise {\n  return new GaussianNoise(args);\n}\n\n/**\n * Apply multiplicative 1-centered Gaussian noise.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting](\n *      http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)\n *\n */\n/** @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'} */\nexport function gaussianDropout(args: GaussianDropoutArgs): GaussianDropout {\n  return new GaussianDropout(args);\n}\n\n/**\n * Applies Alpha Dropout to the input.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs\n * to their original values, in order to ensure the self-normalizing property\n * even after this dropout.\n * Alpha Dropout fits well to Scaled Exponential Linear Units\n * by randomly setting activations to the negative saturation value.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the\n *     shape for randomly generated keep/drop flags.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\n */\n/** @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'} */\nexport function alphaDropout(args: AlphaDropoutArgs): AlphaDropout {\n  return new AlphaDropout(args);\n}\n\n/**\n * Masks a sequence by using a mask value to skip timesteps.\n *\n * If all features for a given sample timestep are equal to `mask_value`,\n * then the sample timestep will be masked (skipped) in all downstream layers\n * (as long as they support masking).\n *\n * If any downstream layer does not support masking yet receives such\n * an input mask, an exception will be raised.\n *\n * Arguments:\n *   - `maskValue`: Either None or mask value to skip.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n */\n/** @doc {heading: 'Layers', subheading: 'Mask', namespace: 'layers'} */\nexport function masking(args?: MaskingArgs): Layer {\n  return new Masking(args);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport {Tensor} from '@tensorflow/tfjs-core';\n\nimport * as losses from './losses';\nimport * as metrics from './metrics';\n\n/**\n * Binary accuracy metric function.\n *\n * `yTrue` and `yPred` can have 0-1 values. Example:\n * ```js\n * const x = tf.tensor2d([[1, 1, 1, 1], [0, 0, 0, 0]], [2, 4]);\n * const y = tf.tensor2d([[1, 0, 1, 0], [0, 0, 0, 1]], [2, 4]);\n * const accuracy = tf.metrics.binaryAccuracy(x, y);\n * accuracy.print();\n * ```\n *\n * `yTrue` and `yPred` can also have floating-number values between 0 and 1, in\n * which case the values will be thresholded at 0.5 to yield 0-1 values (i.e.,\n * a value >= 0.5 and <= 1.0 is interpreted as 1.\n * )\n * Example:\n * ```js\n * const x = tf.tensor1d([1, 1, 1, 1, 0, 0, 0, 0]);\n * const y = tf.tensor1d([0.2, 0.4, 0.6, 0.8, 0.2, 0.3, 0.4, 0.7]);\n * const accuracy = tf.metrics.binaryAccuracy(x, y);\n * accuracy.print();\n * ```\n *\n * @param yTrue Binary Tensor of truth.\n * @param yPred Binary Tensor of prediction.\n * @return Accuracy Tensor.\n */\n/** @doc {heading: 'Metrics', namespace: 'metrics'} */\nexport function binaryAccuracy(yTrue: Tensor, yPred: Tensor): Tensor {\n  return metrics.binaryAccuracy(yTrue, yPred);\n}\n\n/**\n * Binary crossentropy metric function.\n *\n * Example:\n * ```js\n * const x = tf.tensor2d([[0], [1], [1], [1]]);\n * const y = tf.tensor2d([[0], [0], [0.5], [1]]);\n * const crossentropy = tf.metrics.binaryCrossentropy(x, y);\n * crossentropy.print();\n * ```\n *\n * @param yTrue Binary Tensor of truth.\n * @param yPred Binary Tensor of prediction, probabilities for the `1` case.\n * @return Accuracy Tensor.\n */\n/** @doc {heading: 'Metrics', namespace: 'metrics'} */\nexport function binaryCrossentropy(yTrue: Tensor, yPred: Tensor): Tensor {\n  return metrics.binaryCrossentropy(yTrue, yPred);\n}\n\n/**\n * Sparse categorical accuracy metric function.\n *\n * Example:\n * ```js\n *\n * const yTrue = tf.tensor1d([1, 1, 2, 2, 0]);\n * const yPred = tf.tensor2d(\n *      [[0, 1, 0], [1, 0, 0], [0, 0.4, 0.6], [0, 0.6, 0.4], [0.7, 0.3, 0]]);\n * const crossentropy = tf.metrics.sparseCategoricalAccuracy(yTrue, yPred);\n * crossentropy.print();\n * ```\n *\n * @param yTrue True labels: indices.\n * @param yPred Predicted probabilities or logits.\n * @returns Accuracy tensor.\n */\n/** @doc {heading: 'Metrics', namespace: 'metrics'} */\nexport function sparseCategoricalAccuracy(\n    yTrue: Tensor, yPred: Tensor): Tensor {\n  return metrics.sparseCategoricalAccuracy(yTrue, yPred);\n}\n\n/**\n * Categorical accuracy metric function.\n *\n * Example:\n * ```js\n * const x = tf.tensor2d([[0, 0, 0, 1], [0, 0, 0, 1]]);\n * const y = tf.tensor2d([[0.1, 0.8, 0.05, 0.05], [0.1, 0.05, 0.05, 0.8]]);\n * const accuracy = tf.metrics.categoricalAccuracy(x, y);\n * accuracy.print();\n * ```\n *\n * @param yTrue Binary Tensor of truth: one-hot encoding of categories.\n * @param yPred Binary Tensor of prediction: probabilities or logits for the\n *   same categories as in `yTrue`.\n * @return Accuracy Tensor.\n */\n/** @doc {heading: 'Metrics', namespace: 'metrics'} */\nexport function categoricalAccuracy(yTrue: Tensor, yPred: Tensor): Tensor {\n  return metrics.categoricalAccuracy(yTrue, yPred);\n}\n\n/**\n * Categorical crossentropy between an output tensor and a target tensor.\n *\n * @param target A tensor of the same shape as `output`.\n * @param output A tensor resulting from a softmax (unless `fromLogits` is\n *  `true`, in which case `output` is expected to be the logits).\n * @param fromLogits Boolean, whether `output` is the result of a softmax, or is\n *   a tensor of logits.\n */\n/** @doc {heading: 'Metrics', namespace: 'metrics'} */\nexport function categoricalCrossentropy(yTrue: Tensor, yPred: Tensor): Tensor {\n  return metrics.categoricalCrossentropy(yTrue, yPred);\n}\n\n/**\n * Computes the precision of the predictions with respect to the labels.\n *\n * Example:\n * ```js\n * const x = tf.tensor2d(\n *    [\n *      [0, 0, 0, 1],\n *      [0, 1, 0, 0],\n *      [0, 0, 0, 1],\n *      [1, 0, 0, 0],\n *      [0, 0, 1, 0]\n *    ]\n * );\n *\n * const y = tf.tensor2d(\n *    [\n *      [0, 0, 1, 0],\n *      [0, 1, 0, 0],\n *      [0, 0, 0, 1],\n *      [0, 1, 0, 0],\n *      [0, 1, 0, 0]\n *    ]\n * );\n *\n * const precision = tf.metrics.precision(x, y);\n * precision.print();\n * ```\n *\n * @param yTrue The ground truth values. Expected to be contain only 0-1 values.\n * @param yPred The predicted values. Expected to be contain only 0-1 values.\n * @return Precision Tensor.\n */\n/** @doc {heading: 'Metrics', namespace: 'metrics'} */\nexport function precision(yTrue: Tensor, yPred: Tensor): Tensor {\n  return metrics.precision(yTrue, yPred);\n}\n\n/**\n * Computes the recall of the predictions with respect to the labels.\n *\n * Example:\n * ```js\n * const x = tf.tensor2d(\n *    [\n *      [0, 0, 0, 1],\n *      [0, 1, 0, 0],\n *      [0, 0, 0, 1],\n *      [1, 0, 0, 0],\n *      [0, 0, 1, 0]\n *    ]\n * );\n *\n * const y = tf.tensor2d(\n *    [\n *      [0, 0, 1, 0],\n *      [0, 1, 0, 0],\n *      [0, 0, 0, 1],\n *      [0, 1, 0, 0],\n *      [0, 1, 0, 0]\n *    ]\n * );\n *\n * const recall = tf.metrics.recall(x, y);\n * recall.print();\n * ```\n *\n * @param yTrue The ground truth values. Expected to be contain only 0-1 values.\n * @param yPred The predicted values. Expected to be contain only 0-1 values.\n * @return Recall Tensor.\n */\n/** @doc {heading: 'Metrics', namespace: 'metrics'} */\nexport function recall(yTrue: Tensor, yPred: Tensor): Tensor {\n  return metrics.recall(yTrue, yPred);\n}\n\n/**\n * Loss or metric function: Cosine proximity.\n *\n * Mathematically, cosine proximity is defined as:\n *   `-sum(l2Normalize(yTrue) * l2Normalize(yPred))`,\n * wherein `l2Normalize()` normalizes the L2 norm of the input to 1 and `*`\n * represents element-wise multiplication.\n *\n * ```js\n * const yTrue = tf.tensor2d([[1, 0], [1, 0]]);\n * const yPred = tf.tensor2d([[1 / Math.sqrt(2), 1 / Math.sqrt(2)], [0, 1]]);\n * const proximity = tf.metrics.cosineProximity(yTrue, yPred);\n * proximity.print();\n * ```\n *\n * @param yTrue Truth Tensor.\n * @param yPred Prediction Tensor.\n * @return Cosine proximity Tensor.\n */\n/** @doc {heading: 'Metrics', namespace: 'metrics'} */\nexport function cosineProximity(yTrue: Tensor, yPred: Tensor): Tensor {\n  return losses.cosineProximity(yTrue, yPred);\n}\n\n/**\n * Loss or metric function: Mean absolute error.\n *\n * Mathematically, mean absolute error is defined as:\n *   `mean(abs(yPred - yTrue))`,\n * wherein the `mean` is applied over feature dimensions.\n *\n * ```js\n * const yTrue = tf.tensor2d([[0, 1], [0, 0], [2, 3]]);\n * const yPred = tf.tensor2d([[0, 1], [0, 1], [-2, -3]]);\n * const mse = tf.metrics.meanAbsoluteError(yTrue, yPred);\n * mse.print();\n * ```\n *\n * @param yTrue Truth Tensor.\n * @param yPred Prediction Tensor.\n * @return Mean absolute error Tensor.\n */\n/** @doc {heading: 'Metrics', namespace: 'metrics'} */\nexport function meanAbsoluteError(yTrue: Tensor, yPred: Tensor): Tensor {\n  return losses.meanAbsoluteError(yTrue, yPred);\n}\n\n/**\n * Loss or metric function: Mean absolute percentage error.\n *\n * ```js\n * const yTrue = tf.tensor2d([[0, 1], [10, 20]]);\n * const yPred = tf.tensor2d([[0, 1], [11, 24]]);\n * const mse = tf.metrics.meanAbsolutePercentageError(yTrue, yPred);\n * mse.print();\n * ```\n *\n * Aliases: `tf.metrics.MAPE`, `tf.metrics.mape`.\n *\n * @param yTrue Truth Tensor.\n * @param yPred Prediction Tensor.\n * @return Mean absolute percentage error Tensor.\n */\n/** @doc {heading: 'Metrics', namespace: 'metrics'} */\nexport function meanAbsolutePercentageError(\n    yTrue: Tensor, yPred: Tensor): Tensor {\n  return losses.meanAbsolutePercentageError(yTrue, yPred);\n}\n\nexport function MAPE(yTrue: Tensor, yPred: Tensor): Tensor {\n  return losses.meanAbsolutePercentageError(yTrue, yPred);\n}\n\nexport function mape(yTrue: Tensor, yPred: Tensor): Tensor {\n  return losses.meanAbsolutePercentageError(yTrue, yPred);\n}\n\n/**\n * Loss or metric function: Mean squared error.\n *\n * ```js\n * const yTrue = tf.tensor2d([[0, 1], [3, 4]]);\n * const yPred = tf.tensor2d([[0, 1], [-3, -4]]);\n * const mse = tf.metrics.meanSquaredError(yTrue, yPred);\n * mse.print();\n * ```\n *\n * Aliases: `tf.metrics.MSE`, `tf.metrics.mse`.\n *\n * @param yTrue Truth Tensor.\n * @param yPred Prediction Tensor.\n * @return Mean squared error Tensor.\n */\n/** @doc {heading: 'Metrics', namespace: 'metrics'} */\nexport function meanSquaredError(yTrue: Tensor, yPred: Tensor): Tensor {\n  return losses.meanSquaredError(yTrue, yPred);\n}\n\nexport function MSE(yTrue: Tensor, yPred: Tensor): Tensor {\n  return losses.meanSquaredError(yTrue, yPred);\n}\n\nexport function mse(yTrue: Tensor, yPred: Tensor): Tensor {\n  return losses.meanSquaredError(yTrue, yPred);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport * as regularizers from './regularizers';\n// tslint:disable-next-line:max-line-length\nimport {L1Args, L1L2, L1L2Args, L2Args, Regularizer} from './regularizers';\n\n/**\n * Regularizer for L1 and L2 regularization.\n *\n * Adds a term to the loss to penalize large weights:\n * loss += sum(l1 * abs(x)) + sum(l2 * x^2)\n */\n/** @doc {heading: 'Regularizers', namespace: 'regularizers'} */\nexport function l1l2(config?: L1L2Args): Regularizer {\n  return new L1L2(config);\n}\n\n/**\n * Regularizer for L1 regularization.\n *\n * Adds a term to the loss to penalize large weights:\n * loss += sum(l1 * abs(x))\n * @param args l1 config.\n */\n/** @doc {heading: 'Regularizers', namespace: 'regularizers'} */\nexport function l1(config?: L1Args): Regularizer {\n  return regularizers.l1(config);\n}\n\n/**\n * Regularizer for L2 regularization.\n *\n * Adds a term to the loss to penalize large weights:\n * loss += sum(l2 * x^2)\n * @param args l2 config.\n */\n/** @doc {heading: 'Regularizers', namespace: 'regularizers'} */\nexport function l2(config?: L2Args): Regularizer {\n  return regularizers.l2(config);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/callbacks.py */\n\nimport {BaseCallback} from './base_callbacks';\nimport {Container} from './engine/container';\nimport {LayersModel} from './engine/training';\nimport {NotImplementedError} from './errors';\nimport {Logs, resolveScalarsInLogs} from './logs';\n\nexport abstract class Callback extends BaseCallback {\n  /** Instance of `keras.models.Model`. Reference of the model being trained. */\n  model: LayersModel = null;\n\n  setModel(model: Container): void {\n    if (!(model instanceof LayersModel)) {\n      throw new Error('model must be a LayersModel, not some other Container');\n    }\n    this.model = model;\n  }\n}\n\nexport interface EarlyStoppingCallbackArgs {\n  /**\n   * Quantity to be monitored.\n   *\n   * Defaults to 'val_loss'.\n   */\n  monitor?: string;\n\n  /**\n   * Minimum change in the monitored quantity to qualify as improvement,\n   * i.e., an absolute change of less than `minDelta` will count as no\n   * improvement.\n   *\n   * Defaults to 0.\n   */\n  minDelta?: number;\n\n  /**\n   * Number of epochs with no improvement after which training will be stopped.\n   *\n   * Defaults to 0.\n   */\n  patience?: number;\n\n  /** Verbosity mode. */\n  verbose?: number;\n\n  /**\n   * Mode: one of 'min', 'max', and 'auto'.\n   * - In 'min' mode, training will be stopped when the quantity monitored has\n   *   stopped decreasing.\n   * - In 'max' mode, training will be stopped when the quantity monitored has\n   *   stopped increasing.\n   * - In 'auto' mode, the direction is inferred automatically from the name of\n   *   the monitored quantity.\n   *\n   * Defaults to 'auto'.\n   */\n  mode?: 'auto'|'min'|'max';\n\n  /**\n   * Baseline value of the monitored quantity.\n   *\n   * If specified, training will be stopped if the model doesn't show\n   * improvement over the baseline.\n   */\n  baseline?: number;\n\n  /**\n   * Whether to restore model weights from the epoch with the best value\n   * of the monitored quantity. If `False`, the model weights obtained at the\n   * at the last step of training are used.\n   *\n   * **`True` is not supported yet.**\n   */\n  restoreBestWeights?: boolean;\n}\n\nfunction less(currVal: number, prevVal: number) {\n  return currVal < prevVal;\n}\n\nfunction greater(currVal: number, prevVal: number) {\n  return currVal > prevVal;\n}\n\n/**\n * A Callback that stops training when a monitored quantity has stopped\n * improving.\n */\nexport class EarlyStopping extends Callback {\n  protected readonly monitor: string;\n  protected readonly minDelta: number;\n  protected readonly patience: number;\n  protected readonly baseline: number;\n  protected readonly verbose: number;\n  protected readonly mode: 'auto'|'min'|'max';\n\n  protected monitorFunc: (currVal: number, prevVal: number) => boolean;\n\n  private wait: number;\n  private stoppedEpoch: number;\n  private best: number;\n\n  constructor(args?: EarlyStoppingCallbackArgs) {\n    super();\n    if (args == null) {\n      args = {};\n    }\n    if (args.restoreBestWeights) {\n      throw new NotImplementedError(\n          'restoreBestWeights = True is not implemented in EarlyStopping yet.');\n    }\n\n    this.monitor = args.monitor || 'val_loss';\n    this.minDelta = Math.abs(args.minDelta || 0);\n    this.patience = args.patience || 0;\n    this.verbose = args.verbose || 0;\n    this.mode = args.mode || 'auto';\n    this.baseline = args.baseline;\n\n    if (['auto', 'min', 'max'].indexOf(this.mode) === -1) {\n      console.warn(\n          `EarlyStopping mode '${this.mode}' is invalid. ` +\n          `Falling back to mode 'auto'.`);\n      this.mode = 'auto';\n    }\n\n    if (this.mode === 'min') {\n      this.monitorFunc = less;\n    } else if (this.mode === 'max') {\n      this.monitorFunc = greater;\n    } else {\n      // For mode === 'auto'.\n      if (this.monitor.indexOf('acc') !== -1) {\n        this.monitorFunc = greater;\n      } else {\n        this.monitorFunc = less;\n      }\n    }\n\n    if (this.monitorFunc === less) {\n      this.minDelta *= -1;\n    }\n  }\n\n  async onTrainBegin(logs?: Logs) {\n    this.wait = 0;\n    this.stoppedEpoch = 0;\n    if (this.baseline != null) {\n      this.best = this.baseline;\n    } else {\n      this.best = this.monitorFunc === less ? Infinity : -Infinity;\n    }\n  }\n\n  async onEpochEnd(epoch: number, logs?: Logs) {\n    await resolveScalarsInLogs(logs);\n    const current = this.getMonitorValue(logs);\n    if (current == null) {\n      return;\n    }\n\n    if (this.monitorFunc(current - this.minDelta, this.best)) {\n      this.best = current;\n      this.wait = 0;\n      // TODO(cais): Logic for restoreBestWeights.\n    } else {\n      this.wait++;\n      if (this.wait >= this.patience) {\n        this.stoppedEpoch = epoch;\n        this.model.stopTraining = true;\n      }\n      // TODO(cais): Logic for restoreBestWeights.\n    }\n  }\n\n  async onTrainEnd(logs?: Logs) {\n    if (this.stoppedEpoch > 0 && this.verbose) {\n      console.log(`Epoch ${this.stoppedEpoch}: early stopping.`);\n    }\n  }\n\n  private getMonitorValue(logs: Logs) {\n    if (logs == null) {\n      logs = {};\n    }\n    const monitorValue = logs[this.monitor];\n    if (monitorValue == null) {\n      console.warn(\n          `Metric for EarlyStopping ${this.monitor} is not available. ` +\n          `Available metrics are: ${Object.keys(logs)}`);\n    }\n    return monitorValue;\n  }\n}\n\n/**\n * Factory function for a Callback that stops training when a monitored\n * quantity has stopped improving.\n *\n * Early stopping is a type of regularization, and protects model against\n * overfitting.\n *\n * The following example based on fake data illustrates how this callback\n * can be used during `tf.LayersModel.fit()`:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense({\n *   units: 3,\n *   activation: 'softmax',\n *   kernelInitializer: 'ones',\n *   inputShape: [2]\n * }));\n * const xs = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const ys = tf.tensor2d([[1, 0, 0], [0, 1, 0]], [2, 3]);\n * const xsVal = tf.tensor2d([4, 3, 2, 1], [2, 2]);\n * const ysVal = tf.tensor2d([[0, 0, 1], [0, 1, 0]], [2, 3]);\n * model.compile(\n *     {loss: 'categoricalCrossentropy', optimizer: 'sgd', metrics: ['acc']});\n *\n * // Without the EarlyStopping callback, the val_acc value would be:\n * //   0.5, 0.5, 0.5, 0.5, ...\n * // With val_acc being monitored, training should stop after the 2nd epoch.\n * const history = await model.fit(xs, ys, {\n *   epochs: 10,\n *   validationData: [xsVal, ysVal],\n *   callbacks: tf.callbacks.earlyStopping({monitor: 'val_acc'})\n * });\n *\n * // Expect to see a length-2 array.\n * console.log(history.history.val_acc);\n * ```\n */\n/**\n * @doc {\n *   heading: 'Callbacks',\n *   namespace: 'callbacks'\n * }\n */\nexport function earlyStopping(args?: EarlyStoppingCallbackArgs) {\n  return new EarlyStopping(args);\n}\n\nexport const callbacks = {earlyStopping};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\n/* tslint:disable */\n\n/** Properties of an Any. */\nexport declare interface IAny {\n  /** Any typeUrl */\n  typeUrl?: (string|null);\n\n  /** Any value */\n  value?: (Uint8Array|null);\n}\n\n/** DataType enum. */\nexport enum DataType {\n  'DT_INVALID' = 0,\n  'DT_FLOAT' = 1,\n  'DT_DOUBLE' = 2,\n  'DT_INT32' = 3,\n  'DT_UINT8' = 4,\n  'DT_INT16' = 5,\n  'DT_INT8' = 6,\n  'DT_STRING' = 7,\n  'DT_COMPLEX64' = 8,\n  'DT_INT64' = 9,\n  'DT_BOOL' = 10,\n  'DT_QINT8' = 11,\n  'DT_QUINT8' = 12,\n  'DT_QINT32' = 13,\n  'DT_BFLOAT16' = 14,\n  'DT_FLOAT_REF' = 101,\n  'DT_DOUBLE_REF' = 102,\n  'DT_INT32_REF' = 103,\n  'DT_UINT8_REF' = 104,\n  'DT_INT16_REF' = 105,\n  'DT_INT8_REF' = 106,\n  'DT_STRING_REF' = 107,\n  'DT_COMPLEX64_REF' = 108,\n  'DT_INT64_REF' = 109,\n  'DT_BOOL_REF' = 110,\n  'DT_QINT8_REF' = 111,\n  'DT_QUINT8_REF' = 112,\n  'DT_QINT32_REF' = 113,\n  'DT_BFLOAT16_REF' = 114\n}\n\n/** Properties of a TensorShape. */\nexport declare interface ITensorShape {\n  /** TensorShape dim */\n  dim?: (TensorShape.IDim[]|null);\n\n  /** TensorShape unknownRank */\n  unknownRank?: (boolean|null);\n}\n\nexport namespace TensorShape {\n  /** Properties of a Dim. */\n  export declare interface IDim {\n    /** Dim size */\n    size?: (number|string|null);\n\n    /** Dim name */\n    name?: (string|null);\n  }\n}\n\n/** Properties of a Tensor. */\nexport declare interface ITensor {\n  /** Tensor dtype */\n  dtype?: (DataType|null);\n\n  /** Tensor tensorShape */\n  tensorShape?: (ITensorShape|null);\n\n  /** Tensor versionNumber */\n  versionNumber?: (number|null);\n\n  /** Tensor tensorContent */\n  tensorContent?: (Uint8Array|null);\n\n  /** Tensor floatVal */\n  floatVal?: (number[]|null);\n\n  /** Tensor doubleVal */\n  doubleVal?: (number[]|null);\n\n  /** Tensor intVal */\n  intVal?: (number[]|null);\n\n  /** Tensor stringVal */\n  stringVal?: (Uint8Array[]|null);\n\n  /** Tensor scomplexVal */\n  scomplexVal?: (number[]|null);\n\n  /** Tensor int64Val */\n  int64Val?: ((number | string)[]|null);\n\n  /** Tensor boolVal */\n  boolVal?: (boolean[]|null);\n\n  /** Tensor uint32Val */\n  uint32Val?: (number[]|null);\n\n  /** Tensor uint64Val */\n  uint64Val?: ((number | string)[]|null);\n}\n\n/** Properties of an AttrValue. */\nexport declare interface IAttrValue {\n  /** AttrValue list */\n  list?: (AttrValue.IListValue|null);\n\n  /** AttrValue s */\n  s?: (string|null);\n\n  /** AttrValue i */\n  i?: (number|string|null);\n\n  /** AttrValue f */\n  f?: (number|null);\n\n  /** AttrValue b */\n  b?: (boolean|null);\n\n  /** AttrValue type */\n  type?: (DataType|null);\n\n  /** AttrValue shape */\n  shape?: (ITensorShape|null);\n\n  /** AttrValue tensor */\n  tensor?: (ITensor|null);\n\n  /** AttrValue placeholder */\n  placeholder?: (string|null);\n\n  /** AttrValue func */\n  func?: (INameAttrList|null);\n}\n\nexport namespace AttrValue {\n  /** Properties of a ListValue. */\n  export declare interface IListValue {\n    /** ListValue s */\n    s?: (string[]|null);\n\n    /** ListValue i */\n    i?: ((number | string)[]|null);\n\n    /** ListValue f */\n    f?: (number[]|null);\n\n    /** ListValue b */\n    b?: (boolean[]|null);\n\n    /** ListValue type */\n    type?: (DataType[]|null);\n\n    /** ListValue shape */\n    shape?: (ITensorShape[]|null);\n\n    /** ListValue tensor */\n    tensor?: (ITensor[]|null);\n\n    /** ListValue func */\n    func?: (INameAttrList[]|null);\n  }\n}\n\n/** Properties of a NameAttrList. */\nexport declare interface INameAttrList {\n  /** NameAttrList name */\n  name?: (string|null);\n\n  /** NameAttrList attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a NodeDef. */\nexport declare interface INodeDef {\n  /** NodeDef name */\n  name?: (string|null);\n\n  /** NodeDef op */\n  op?: (string|null);\n\n  /** NodeDef input */\n  input?: (string[]|null);\n\n  /** NodeDef device */\n  device?: (string|null);\n\n  /** NodeDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a VersionDef. */\nexport declare interface IVersionDef {\n  /** VersionDef producer */\n  producer?: (number|null);\n\n  /** VersionDef minConsumer */\n  minConsumer?: (number|null);\n\n  /** VersionDef badConsumers */\n  badConsumers?: (number[]|null);\n}\n\n/** Properties of a GraphDef. */\nexport declare interface IGraphDef {\n  /** GraphDef node */\n  node?: (INodeDef[]|null);\n\n  /** GraphDef versions */\n  versions?: (IVersionDef|null);\n\n  /** GraphDef library */\n  library?: (IFunctionDefLibrary|null);\n}\n\n/** Properties of a CollectionDef. */\nexport declare interface ICollectionDef {\n  /** CollectionDef nodeList */\n  nodeList?: (CollectionDef.INodeList|null);\n\n  /** CollectionDef bytesList */\n  bytesList?: (CollectionDef.IBytesList|null);\n\n  /** CollectionDef int64List */\n  int64List?: (CollectionDef.IInt64List|null);\n\n  /** CollectionDef floatList */\n  floatList?: (CollectionDef.IFloatList|null);\n\n  /** CollectionDef anyList */\n  anyList?: (CollectionDef.IAnyList|null);\n}\n\nexport namespace CollectionDef {\n  /** Properties of a NodeList. */\n  export declare interface INodeList {\n    /** NodeList value */\n    value?: (string[]|null);\n  }\n\n  /** Properties of a BytesList. */\n  export declare interface IBytesList {\n    /** BytesList value */\n    value?: (Uint8Array[]|null);\n  }\n\n  /** Properties of an Int64List. */\n  export declare interface IInt64List {\n    /** Int64List value */\n    value?: ((number | string)[]|null);\n  }\n\n  /** Properties of a FloatList. */\n  export declare interface IFloatList {\n    /** FloatList value */\n    value?: (number[]|null);\n  }\n\n  /** Properties of an AnyList. */\n  export declare interface IAnyList {\n    /** AnyList value */\n    value?: (IAny[]|null);\n  }\n}\n\n/** Properties of a SaverDef. */\nexport declare interface ISaverDef {\n  /** SaverDef filenameTensorName */\n  filenameTensorName?: (string|null);\n\n  /** SaverDef saveTensorName */\n  saveTensorName?: (string|null);\n\n  /** SaverDef restoreOpName */\n  restoreOpName?: (string|null);\n\n  /** SaverDef maxToKeep */\n  maxToKeep?: (number|null);\n\n  /** SaverDef sharded */\n  sharded?: (boolean|null);\n\n  /** SaverDef keepCheckpointEveryNHours */\n  keepCheckpointEveryNHours?: (number|null);\n\n  /** SaverDef version */\n  version?: (SaverDef.CheckpointFormatVersion|null);\n}\n\nexport namespace SaverDef {\n  /** CheckpointFormatVersion enum. */\n  export enum CheckpointFormatVersion {'LEGACY' = 0, 'V1' = 1, 'V2' = 2}\n}\n\n/** Properties of a TensorInfo. */\nexport declare interface ITensorInfo {\n  /** TensorInfo name */\n  name?: (string|null);\n\n  /** TensorInfo cooSparse */\n  cooSparse?: (TensorInfo.ICooSparse|null);\n\n  /** TensorInfo dtype */\n  dtype?: (DataType|null);\n\n  /** TensorInfo tensorShape */\n  tensorShape?: (ITensorShape|null);\n}\n\nexport namespace TensorInfo {\n  /** Properties of a CooSparse. */\n  export declare interface ICooSparse {\n    /** CooSparse valuesTensorName */\n    valuesTensorName?: (string|null);\n\n    /** CooSparse indicesTensorName */\n    indicesTensorName?: (string|null);\n\n    /** CooSparse denseShapeTensorName */\n    denseShapeTensorName?: (string|null);\n  }\n}\n\n/** Properties of a SignatureDef. */\nexport declare interface ISignatureDef {\n  /** SignatureDef inputs */\n  inputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef outputs */\n  outputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef methodName */\n  methodName?: (string|null);\n}\n\n/** Properties of an AssetFileDef. */\nexport declare interface IAssetFileDef {\n  /** AssetFileDef tensorInfo */\n  tensorInfo?: (ITensorInfo|null);\n\n  /** AssetFileDef filename */\n  filename?: (string|null);\n}\n\n/** Properties of an OpDef. */\nexport declare interface IOpDef {\n  /** OpDef name */\n  name?: (string|null);\n\n  /** OpDef inputArg */\n  inputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef outputArg */\n  outputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef attr */\n  attr?: (OpDef.IAttrDef[]|null);\n\n  /** OpDef deprecation */\n  deprecation?: (OpDef.IOpDeprecation|null);\n\n  /** OpDef summary */\n  summary?: (string|null);\n\n  /** OpDef description */\n  description?: (string|null);\n\n  /** OpDef isCommutative */\n  isCommutative?: (boolean|null);\n\n  /** OpDef isAggregate */\n  isAggregate?: (boolean|null);\n\n  /** OpDef isStateful */\n  isStateful?: (boolean|null);\n\n  /** OpDef allowsUninitializedInput */\n  allowsUninitializedInput?: (boolean|null);\n}\n\nexport namespace OpDef {\n  /** Properties of an ArgDef. */\n  export declare interface IArgDef {\n    /** ArgDef name */\n    name?: (string|null);\n\n    /** ArgDef description */\n    description?: (string|null);\n\n    /** ArgDef type */\n    type?: (DataType|null);\n\n    /** ArgDef typeAttr */\n    typeAttr?: (string|null);\n\n    /** ArgDef numberAttr */\n    numberAttr?: (string|null);\n\n    /** ArgDef typeListAttr */\n    typeListAttr?: (string|null);\n\n    /** ArgDef isRef */\n    isRef?: (boolean|null);\n  }\n\n  /** Properties of an AttrDef. */\n  export declare interface IAttrDef {\n    /** AttrDef name */\n    name?: (string|null);\n\n    /** AttrDef type */\n    type?: (string|null);\n\n    /** AttrDef defaultValue */\n    defaultValue?: (IAttrValue|null);\n\n    /** AttrDef description */\n    description?: (string|null);\n\n    /** AttrDef hasMinimum */\n    hasMinimum?: (boolean|null);\n\n    /** AttrDef minimum */\n    minimum?: (number|string|null);\n\n    /** AttrDef allowedValues */\n    allowedValues?: (IAttrValue|null);\n  }\n\n  /** Properties of an OpDeprecation. */\n  export declare interface IOpDeprecation {\n    /** OpDeprecation version */\n    version?: (number|null);\n\n    /** OpDeprecation explanation */\n    explanation?: (string|null);\n  }\n}\n\n/** Properties of an OpList. */\nexport declare interface IOpList {\n  /** OpList op */\n  op?: (IOpDef[]|null);\n}\n\n/** Properties of a MetaGraphDef. */\nexport declare interface IMetaGraphDef {\n  /** MetaGraphDef metaInfoDef */\n  metaInfoDef?: (MetaGraphDef.IMetaInfoDef|null);\n\n  /** MetaGraphDef graphDef */\n  graphDef?: (IGraphDef|null);\n\n  /** MetaGraphDef saverDef */\n  saverDef?: (ISaverDef|null);\n\n  /** MetaGraphDef collectionDef */\n  collectionDef?: ({[k: string]: ICollectionDef}|null);\n\n  /** MetaGraphDef signatureDef */\n  signatureDef?: ({[k: string]: ISignatureDef}|null);\n\n  /** MetaGraphDef assetFileDef */\n  assetFileDef?: (IAssetFileDef[]|null);\n}\n\nexport namespace MetaGraphDef {\n  /** Properties of a MetaInfoDef. */\n  export declare interface IMetaInfoDef {\n    /** MetaInfoDef metaGraphVersion */\n    metaGraphVersion?: (string|null);\n\n    /** MetaInfoDef strippedOpList */\n    strippedOpList?: (IOpList|null);\n\n    /** MetaInfoDef anyInfo */\n    anyInfo?: (IAny|null);\n\n    /** MetaInfoDef tags */\n    tags?: (string[]|null);\n\n    /** MetaInfoDef tensorflowVersion */\n    tensorflowVersion?: (string|null);\n\n    /** MetaInfoDef tensorflowGitVersion */\n    tensorflowGitVersion?: (string|null);\n  }\n}\n\n/** Properties of a SavedModel. */\nexport declare interface ISavedModel {\n  /** SavedModel savedModelSchemaVersion */\n  savedModelSchemaVersion?: (number|string|null);\n\n  /** SavedModel metaGraphs */\n  metaGraphs?: (IMetaGraphDef[]|null);\n}\n\n/** Properties of a FunctionDefLibrary. */\nexport declare interface IFunctionDefLibrary {\n  /** FunctionDefLibrary function */\n  'function'?: (IFunctionDef[]|null);\n\n  /** FunctionDefLibrary gradient */\n  gradient?: (IGradientDef[]|null);\n}\n\n/** Properties of a FunctionDef. */\nexport declare interface IFunctionDef {\n  /** FunctionDef signature */\n  signature?: (IOpDef|null);\n\n  /** FunctionDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n\n  /** FunctionDef nodeDef */\n  nodeDef?: (INodeDef[]|null);\n\n  /** FunctionDef ret */\n  ret?: ({[k: string]: string}|null);\n}\n\n/** Properties of a GradientDef. */\nexport declare interface IGradientDef {\n  /** GradientDef functionName */\n  functionName?: (string|null);\n\n  /** GradientDef gradientFunc */\n  gradientFunc?: (string|null);\n}\n","\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpExecutor, OpMapper} from '../types';\n\nconst CUSTOM_OPS: {[key: string]: OpMapper} = {};\n\n/**\n * Register an Op for graph model executor. This allow you to register\n * TensorFlow custom op or override existing op.\n *\n * Here is an example of registering a new MatMul Op.\n * ```js\n * const customMatmul = (node) =>\n *    tf.matMul(\n *        node.inputs[0], node.inputs[1],\n *        node.attrs['transpose_a'], node.attrs['transpose_b']);\n *\n * tf.registerOp('MatMul', customMatmul);\n * ```\n * The inputs and attrs of the node object is based on the TensorFlow op\n * registry.\n *\n * @param name The Tensorflow Op name.\n * @param opFunc An op function which is called with the current graph node\n * during execution and needs to return a tensor or a list of tensors. The node\n * has the following attributes:\n *    - attr: A map from attribute name to its value\n *    - inputs: A list of input tensors\n */\n/** @doc {heading: 'Models', subheading: 'Op Registry'} */\nexport function registerOp(name: string, opFunc: OpExecutor) {\n  const opMapper: OpMapper = {\n    tfOpName: name,\n    category: 'custom',\n    inputs: [],\n    attrs: [],\n    customExecutor: opFunc\n  };\n\n  CUSTOM_OPS[name] = opMapper;\n}\n\n/**\n * Retrieve the OpMapper object for the registered op.\n *\n * @param name The Tensorflow Op name.\n */\n/** @doc {heading: 'Models', subheading: 'Op Registry'} */\n\nexport function getRegisteredOp(name: string): OpMapper {\n  return CUSTOM_OPS[name];\n}\n\n/**\n * Deregister the Op for graph model executor.\n *\n * @param name The Tensorflow Op name.\n */\n/** @doc {heading: 'Models', subheading: 'Op Registry'} */\nexport function deregisterOp(name: string) {\n  delete CUSTOM_OPS[name];\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node, ValueType} from '../types';\n\nexport function getParamValue(\n    paramName: string, node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): ValueType {\n  const inputParam = node.inputParams[paramName];\n  if (inputParam && inputParam.inputIndexStart !== undefined) {\n    const start = inputParam.inputIndexStart;\n    const end = inputParam.inputIndexEnd === 0 ?\n        undefined :\n        (inputParam.inputIndexEnd === undefined ? start + 1 :\n                                                  inputParam.inputIndexEnd);\n    if (inputParam.type === 'tensor') {\n      return getTensor(\n          node.inputNames[inputParam.inputIndexStart], tensorMap, context);\n    }\n    if (inputParam.type === 'tensors') {\n      const inputs = node.inputNames.slice(start, end);\n\n      return inputs.map(name => getTensor(name, tensorMap, context));\n    }\n    const data = Array.prototype.slice.call(\n        getTensor(node.inputNames.slice(start)[0], tensorMap, context)\n            .dataSync());\n    return inputParam.type === 'number' ? data[0] : data;\n  }\n  const attrParam = node.attrParams[paramName];\n  return attrParam && attrParam.value;\n}\n\n/**\n * Retrieve the tensor based on input name by extracting the node name and\n * output index information.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensor(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor {\n  const [nodeName, index] = parseNodeName(name);\n  const contextId = context.currentContextIds.find(contextId => {\n    return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];\n  });\n\n  return contextId !== undefined ?\n      tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] :\n      undefined;\n}\n\n/**\n * Retrieve the tensors based on input name for current context.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensorsForCurrentContenxt(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor[] {\n  return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];\n}\n\n/**\n * Returns the node name and index from the Node input name.\n * @param inputName The input name of the node, in format of\n * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is\n * default to 0.\n */\nexport function getNodeNameAndIndex(\n    inputName: string, context?: ExecutionContext): [string, number] {\n  const [nodeName, index] = parseNodeName(inputName);\n\n  return [\n    getNodeNameWithContextId(nodeName, context && context.currentContextId),\n    index\n  ];\n}\n\nfunction getNodeNameWithContextId(name: string, contextId?: string): string {\n  return !!contextId ? `${name}-${contextId}` : name;\n}\n\nexport function parseNodeName(name: string): [string, number] {\n  const index = name.lastIndexOf(':');\n  if (index === -1) {\n    return [name, 0];\n  }\n\n  const nodeName = name.substring(0, index);\n  return [nodeName, Number(name.substring(index + 1))];\n}\n\nexport function split(arr: number[], size: number) {\n  const res = [];\n  for (let i = 0; i < arr.length; i += size) {\n    res.push(arr.slice(i, i + size));\n  }\n  return res;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Add',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AddV2',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AddN',\n    'category': 'arithmetic',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'BiasAdd',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sub',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'RealDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Div',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'DivNoNan',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mul',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Maximum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Minimum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Pow',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'SquaredDifference',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorMod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Abs',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan2',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ceil',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ClipByValue',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'clip_value_min', 'name': 'clipValueMin', 'type': 'number'},\n      {'tfName': 'clip_value_max', 'name': 'clipValueMax', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Complex',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'real', 'type': 'tensor'},\n      {'start': 1, 'name': 'imag', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ComplexAbs',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Cos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Cosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Elu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Exp',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Floor',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Imag',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Neg',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Real',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Prelu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'alpha', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu6',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'clipValueMin',\n        'name': 'clipValueMin',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'clipValueMax',\n        'name': 'clipValueMax',\n        'type': 'number',\n        'defaultValue': 6\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Selu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sigmoid',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Rsqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Square',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sign',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Round',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Expm1',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log1p',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Reciprocal',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Softplus',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Erf',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axes', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LeakyRelu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 0.2\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'LoopCond',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'pred', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Switch',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'data', 'type': 'tensor'},\n      {'start': 1, 'name': 'pred', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Merge',\n    'category': 'control',\n    'inputs':\n        [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Enter',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'frame_name', 'name': 'frameName', 'type': 'string'},\n      {'tfName': 'is_constant', 'name': 'isConstant', 'type': 'bool'}\n    ]\n  },\n  {\n    'tfOpName': 'Exit',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NextIteration',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'size', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'},\n      {'tfName': 'dynamic_size', 'name': 'dynamicSize', 'type': 'bool'},\n      {'tfName': 'clear_after_read', 'name': 'clearAfterRead', 'type': 'bool'},\n      {\n        'tfName': 'identical_element_shapes',\n        'name': 'identicalElementShapes',\n        'type': 'bool'\n      },\n      {'tfName': 'tensor_array_name', 'name': 'name', 'type': 'string'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayWriteV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayReadV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{\n      'tfName': 'dtype',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  },\n  {\n    'tfOpName': 'TensorArrayGatherV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayScatterV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArrayConcatV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}, {\n        'tfName': 'element_shape_except0',\n        'name': 'elementShapeExcept0',\n        'type': 'shape',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArraySplitV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 2, 'name': 'lengths', 'type': 'number[]'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArraySizeV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayCloseV3',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'tensorArrayId', 'type': 'number'}]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'AvgPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AvgPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Conv1D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'stride', 'name': 'stride', 'type': 'number'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NWC'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'dilation',\n        'name': 'dilation',\n        'type': 'number',\n        'defaultValue': 1\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {'tfName': 'useCudnnOnGpu', 'name': 'useCudnnOnGpu', 'type': 'bool'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': '_FusedConv2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'use_cudnn_on_gpu',\n        'name': 'useCudnnOnGpu',\n        'type': 'bool',\n        'defaultValue': true\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [1, 1, 1, 1]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n    ]\n  },\n  {\n    'tfOpName': 'Conv2DBackpropInput',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 2, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 0, 'name': 'outputShape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2d',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'FusedDepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [1, 1, 1, 1]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ],\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Fill',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n      {'start': 1, 'name': 'value', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'LinSpace',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'num', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'OneHot',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'depth', 'type': 'number'},\n      {'start': 2, 'name': 'onValue', 'type': 'number', 'defaultValue': 1},\n      {'start': 3, 'name': 'offValue', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [\n      {\n        'tfName': 'axis',\n        'name': 'axis',\n        'type': 'number',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ones',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'OnesLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'RandomUniform',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'minval',\n        'name': 'minval',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'maxval',\n        'name': 'maxval',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Range',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'step', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [{'tfName': 'Tidx', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TruncatedNormal',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'means',\n        'name': 'mean',\n        'type': 'number',\n        'defaultValue': 0.0\n      },\n      {\n        'tfName': 'stddev',\n        'name': 'stdDev',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number'}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Zeros',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'ZerosLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'Multinomial',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'logits', 'type': 'tensor'},\n      {'start': 1, 'name': 'numSamples', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number'},\n      {'tfName': 'seed2', 'name': 'seed2', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'output_dtype', 'name': 'output_dtype', 'type': 'dtype'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'NonMaxSuppressionV2',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV3',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV5',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'},\n      {'start': 5, 'name': 'softNmsSigma', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Where',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ListDiff',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [{\n  'tfOpName': 'TopKV2',\n  'category': 'evaluation',\n  'inputs': [\n    {'start': 0, 'name': 'x', 'type': 'tensor'},\n    {'start': 1, 'name': 'k', 'type': 'number'},\n  ],\n  'attrs': [{'tfName': 'sorted', 'name': 'sorted', 'type': 'bool'}]\n}];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'PlaceholderWithDefault',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'default', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'Placeholder',\n    'category': 'graph',\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {'tfOpName': 'Const', 'category': 'graph'}, {\n    'tfOpName': 'Identity',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IdentityN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Snapshot',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Rank',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Size',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Shape',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'ShapeN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Print',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'data', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'message', 'name': 'message', 'type': 'string'}, {\n        'tfName': 'first_n',\n        'name': 'firstN',\n        'type': 'number',\n        'notSupported': true\n      },\n      {\n        'tfName': 'summarize',\n        'name': 'summarize',\n        'type': 'number',\n        'defaultValue': 3\n      }\n    ]\n  },\n  {'tfOpName': 'NoOp', 'category': 'graph', 'inputs': []}, {\n    'tfOpName': 'StopGradient',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'FakeQuantWithMinMaxVars',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'min', 'name': 'min', 'type': 'number'},\n      {'tfName': 'max', 'name': 'max', 'type': 'number'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ResizeBilinear',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ResizeNearestNeighbor',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'CropAndResize',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'image', 'type': 'tensor'},\n      {'start': 1, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 2, 'name': 'boxInd', 'type': 'tensor'},\n      {'start': 3, 'name': 'cropSize', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'method', 'name': 'method', 'type': 'string'}, {\n        'tfName': 'extrapolation_value',\n        'name': 'extrapolationValue',\n        'type': 'number'\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Equal',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NotEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Greater',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'GreaterEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Less',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LessEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalAnd',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalNot',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalOr',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Select',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n      {'start': 1, 'name': 'a', 'type': 'tensor'},\n      {'start': 2, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': '_FusedMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'}, {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMulV2',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Transpose',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'perm', 'type': 'number[]'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FusedBatchNorm',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV2',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV3',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LRN',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'depth_radius',\n        'name': 'radius',\n        'type': 'number',\n        'defaultValue': 5\n      },\n      {'tfName': 'bias', 'name': 'bias', 'type': 'number', 'defaultValue': 1.0},\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {\n        'tfName': 'beta',\n        'name': 'beta',\n        'type': 'number',\n        'defaultValue': 0.5\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Softmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'LogSoftmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': true,\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Max',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Mean',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Min',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Sum',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'All',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Any',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'ArgMax',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'ArgMin',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ConcatV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': -1, 'name': 'tensors', 'type': 'tensors'},\n      {'start': -1, 'name': 'axis', 'type': 'number'}\n    ],\n    'attrs':\n        [{'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2}]\n  },\n  {\n    'tfOpName': 'Concat',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 1, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n      {'start': 0, 'name': 'axis', 'type': 'number'}\n    ],\n    'attrs': [{'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2}]\n\n  },\n  {\n    'tfOpName': 'GatherV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'Gather',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'validate_indices',\n        'name': 'validateIndices',\n        'type': 'bool',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reverse',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'dims', 'type': 'bool', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ReverseV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Slice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'size', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'StridedSlice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'end', 'type': 'number[]'},\n      {'start': 3, 'name': 'strides', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'begin_mask',\n        'name': 'beginMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'end_mask',\n        'name': 'endMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'new_axis_mask',\n        'name': 'newAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'ellipsis_mask',\n        'name': 'ellipsisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'shrink_axis_mask',\n        'name': 'shrinkAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Pack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'Unpack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'num',\n        'name': 'num',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Tile',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'reps', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Split',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'axis', 'type': 'number', 'defaultValue': 0},\n      {'start': 1, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'num_split',\n      'name': 'numOrSizeSplits',\n      'type': 'number',\n      'defaultValue': 1\n    }]\n  },\n  {\n    'tfOpName': 'SplitV',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'numOrSizeSplits', 'type': 'number[]'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'ScatterNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'values', 'type': 'tensor'},\n      {'start': 2, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'GatherNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': false,\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IFFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'RFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'IRFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Cast',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'SrcT',\n        'name': 'sdtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {'tfName': 'DstT', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'ExpandDims',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Pad',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'},\n    ],\n    'attrs': [{\n      'tfName': 'constant_value',\n      'name': 'constantValue',\n      'type': 'number',\n      'defaultValue': 0\n    }]\n  },\n  {\n    'tfOpName': 'PadV2',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'}, {\n        'start': 2,\n        'name': 'constantValue',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reshape',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Squeeze',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'axis',\n      'tfDeprecatedName': 'squeeze_dims',\n      'name': 'axis',\n      'type': 'number[]'\n    }]\n  },\n  {\n    'tfOpName': 'SpaceToBatchND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'paddings', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'BatchToSpaceND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'crops', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthToSpace',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'block_size', 'name': 'blockSize', 'type': 'number'},\n      {'tfName': 'data_format', 'name': 'dataFormat', 'type': 'string'}\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, env} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\nimport {getRegisteredOp} from './custom_op/register';\n\nimport {getNodeNameAndIndex} from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as spectral from './op_list/spectral';\nimport * as transformation from './op_list/transformation';\nimport {Graph, InputParamValue, Node, OpMapper, ParamValue} from './types';\n\nexport class OperationMapper {\n  private static _instance: OperationMapper;\n\n  private opMappers: {[key: string]: OpMapper};\n\n  // Singleton instance for the mapper\n  public static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n\n  // Loads the op mapping from the JSON file.\n  private constructor() {\n    const ops = [\n      arithmetic, basicMath, control, convolution, creation, dynamic,\n      evaluation, logical, image, graph, matrices, normalization, reduction,\n      sliceJoin, spectral, transformation\n    ];\n    const mappersJson: OpMapper[] = [].concat(...ops.map(op => op.json));\n\n    this.opMappers = mappersJson.reduce<{[key: string]: OpMapper}>(\n        (map, mapper: OpMapper) => {\n          map[mapper.tfOpName] = mapper;\n          return map;\n        },\n        {});\n  }\n\n  // Converts the model from Tensorflow GraphDef to local representation for\n  // TensorFlow.js API\n  transformGraph(\n      graph: tensorflow.IGraphDef,\n      signature: tensorflow.ISignatureDef = {}): Graph {\n    const tfNodes = graph.node;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    const nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n      map[node.name] = this.mapNode(node);\n      if (node.op.startsWith('Placeholder')) {\n        placeholders.push(map[node.name]);\n      }\n      if (node.op === 'Const') {\n        weights.push(map[node.name]);\n      }\n      return map;\n    }, {});\n\n    let inputs: Node[] = [];\n    const outputs: Node[] = [];\n    let inputNodeNameToKey: {[key: string]: string} = {};\n    let outputNodeNameToKey: {[key: string]: string} = {};\n    if (signature != null) {\n      inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);\n      outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);\n    }\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        node.inputs.push(nodes[nodeName]);\n        nodes[nodeName].children.push(node);\n      });\n    });\n\n    // if signature has not outputs set, add any node that does not have\n    // outputs.\n    if (Object.keys(outputNodeNameToKey).length === 0) {\n      allNodes.forEach(key => {\n        const node = nodes[key];\n        if (node.children.length === 0) {\n          outputs.push(node);\n        }\n      });\n    } else {\n      Object.keys(outputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node != null) {\n          node.signatureKey = outputNodeNameToKey[name];\n          outputs.push(node);\n        }\n      });\n    }\n\n    if (Object.keys(inputNodeNameToKey).length > 0) {\n      Object.keys(inputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node) {\n          node.signatureKey = inputNodeNameToKey[name];\n          inputs.push(node);\n        }\n      });\n    } else {\n      inputs = placeholders;\n    }\n\n    return {nodes, inputs, outputs, weights, placeholders, signature};\n  }\n\n  private mapSignatureEntries(entries: {[k: string]: tensorflow.ITensorInfo}) {\n    return Object.keys(entries || {})\n        .reduce<{[key: string]: string}>((prev, curr) => {\n          prev[entries[curr].name] = curr;\n          return prev;\n        }, {});\n  }\n\n  private mapNode(node: tensorflow.INodeDef): Node {\n    // Unsupported ops will cause an error at run-time (not parse time), since\n    // they may not be used by the actual execution subgraph.\n    const mapper =\n        getRegisteredOp(node.op) || this.opMappers[node.op] || {} as OpMapper;\n    if (node.attr == null) {\n      node.attr = {};\n    }\n\n    const newNode: Node = {\n      name: node.name,\n      op: node.op,\n      category: mapper.category,\n      inputNames:\n          (node.input ||\n           []).map(input => input.startsWith('^') ? input.substr(1) : input),\n      inputs: [],\n      children: [],\n      inputParams: {},\n      attrParams: {},\n      rawAttrs: node.attr\n    };\n\n    if (mapper.inputs != null) {\n      newNode.inputParams =\n          mapper.inputs.reduce<{[key: string]: InputParamValue}>(\n              (map, param) => {\n                map[param.name] = {\n                  type: param.type,\n                  inputIndexStart: param.start,\n                  inputIndexEnd: param.end\n                };\n                return map;\n              },\n              {});\n    }\n    if (mapper.attrs != null) {\n      newNode.attrParams =\n          mapper.attrs.reduce<{[key: string]: ParamValue}>((map, param) => {\n            const type = param.type;\n            let value = undefined;\n            switch (param.type) {\n              case 'string':\n                value = getStringParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'string[]':\n                value = getStringArrayParam(\n                    node.attr, param.tfName, param.defaultValue as string[]);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string[]);\n                }\n                break;\n              case 'number':\n                value = getNumberParam(\n                    node.attr, param.tfName,\n                    (param.defaultValue || 0) as number);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumberParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number);\n                }\n                break;\n              case 'number[]':\n                value = getNumericArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumericArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'bool':\n                value = getBoolParam(\n                    node.attr, param.tfName, param.defaultValue as boolean);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean);\n                }\n                break;\n              case 'bool[]':\n                value = getBoolArrayParam(\n                    node.attr, param.tfName, param.defaultValue as boolean[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean[]);\n                }\n                break;\n              case 'shape':\n                value = getTensorShapeParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'shape[]':\n                value = getTensorShapeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[][]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[][]);\n                }\n                break;\n              case 'dtype':\n                value = getDtypeParam(\n                    node.attr, param.tfName, param.defaultValue as DataType);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType);\n                }\n                break;\n              case 'dtype[]':\n                value = getDtypeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as DataType[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType[]);\n                }\n                break;\n              case 'tensor':\n              case 'tensors':\n                break;\n              default:\n                throw new Error(\n                    `Unsupported param type: ${param.type} for op: ${node.op}`);\n            }\n            map[param.name] = {value, type};\n            return map;\n          }, {});\n    }\n    return newNode;\n  }\n}\n\nexport function decodeBase64(text: string): string {\n  const global = env().global;\n  if (typeof global.atob !== 'undefined') {\n    return global.atob(text);\n  } else if (typeof Buffer !== 'undefined') {\n    return new Buffer(text, 'base64').toString();\n  } else {\n    throw new Error(\n        'Unable to decode base64 in this environment. ' +\n        'Missing built-in atob() or Buffer()');\n  }\n}\n\nexport function parseStringParam(s: []|string, keepCase: boolean): string {\n  const value =\n      Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);\n  return keepCase ? value : value.toLowerCase();\n}\n\nexport function getStringParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string,\n    keepCase = false): string {\n  const param = attrs[name];\n  if (param != null) {\n    return parseStringParam(param.s, keepCase);\n  }\n  return def;\n}\n\nexport function getBoolParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean): boolean {\n  const param = attrs[name];\n  return param ? param.b : def;\n}\n\nexport function getNumberParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number): number {\n  const param = attrs[name] || {};\n  const value =\n      param['i'] != null ? param['i'] : (param['f'] != null ? param['f'] : def);\n  return (typeof value === 'number') ? value : parseInt(value, 10);\n}\n\nexport function parseDtypeParam(value: string|tensorflow.DataType): DataType {\n  if (typeof (value) === 'string') {\n    // tslint:disable-next-line:no-any\n    value = tensorflow.DataType[value as any];\n  }\n  switch (value) {\n    case tensorflow.DataType.DT_FLOAT:\n      return 'float32';\n    case tensorflow.DataType.DT_INT32:\n    case tensorflow.DataType.DT_INT64:\n      return 'int32';\n    case tensorflow.DataType.DT_BOOL:\n      return 'bool';\n    case tensorflow.DataType.DT_DOUBLE:\n      return 'float32';\n    case tensorflow.DataType.DT_STRING:\n      return 'string';\n    default:\n      // Unknown dtype error will happen at runtime (instead of parse time),\n      // since these nodes might not be used by the actual subgraph execution.\n      return null;\n  }\n}\n\nexport function getDtypeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType): DataType {\n  const param = attrs[name];\n  if (param && param.type) {\n    return parseDtypeParam(param.type);\n  }\n  return def;\n}\n\nexport function getDtypeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType[]): DataType[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.type) {\n    return param.list.type.map(v => parseDtypeParam(v));\n  }\n  return def;\n}\n\nexport function parseTensorShapeParam(shape: tensorflow.ITensorShape): number[]|\n    undefined {\n  if (shape.unknownRank) {\n    return undefined;\n  }\n  if (shape.dim != null) {\n    return shape.dim.map(\n        dim =>\n            (typeof dim.size === 'number') ? dim.size : parseInt(dim.size, 10));\n  }\n  return [];\n}\n\nexport function getTensorShapeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def?: number[]): number[]|undefined {\n  const param = attrs[name];\n  if (param && param.shape) {\n    return parseTensorShapeParam(param.shape);\n  }\n  return def;\n}\n\nexport function getNumericArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[]): number[] {\n  const param = attrs[name];\n  if (param) {\n    return ((param.list.f && param.list.f.length ? param.list.f :\n                                                   param.list.i) ||\n            [])\n        .map(v => (typeof v === 'number') ? v : parseInt(v, 10));\n  }\n  return def;\n}\n\nexport function getStringArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string[],\n    keepCase = false): string[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.s) {\n    return param.list.s.map((v) => {\n      return parseStringParam(v, keepCase);\n    });\n  }\n  return def;\n}\n\nexport function getTensorShapeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[][]): number[][] {\n  const param = attrs[name];\n  if (param && param.list && param.list.shape) {\n    return param.list.shape.map((v) => {\n      return parseTensorShapeParam(v);\n    });\n  }\n  return def;\n}\n\nexport function getBoolArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean[]): boolean[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.b) {\n    return param.list.b;\n  }\n  return def;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {getTensor} from '../executors/utils';\nimport {getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam} from '../operation_mapper';\nimport {GraphNode, Node, ValueType} from '../types';\n\n/**\n * Helper class for lookup inputs and params for nodes in the model graph.\n */\nexport class NodeValueImpl implements GraphNode {\n  public readonly inputs: Tensor[] = [];\n  public readonly attrs: {[key: string]: ValueType} = {};\n  constructor(\n      private node: Node, private tensorMap: NamedTensorsMap,\n      private context: ExecutionContext) {\n    this.inputs = node.inputNames.map(name => this.getInput(name));\n    if (node.rawAttrs != null) {\n      this.attrs = Object.keys(node.rawAttrs)\n                       .reduce((attrs: {[key: string]: ValueType}, key) => {\n                         attrs[key] = this.getAttr(key);\n                         return attrs;\n                       }, {});\n    }\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getInput(name: string): Tensor {\n    return getTensor(name, this.tensorMap, this.context);\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getAttr(name: string, defaultValue?: ValueType): ValueType {\n    const value = this.node.rawAttrs[name];\n    if (value.tensor != null) {\n      return getTensor(name, this.tensorMap, this.context);\n    }\n    if (value.i != null || value.f != null) {\n      return getNumberParam(this.node.rawAttrs, name, defaultValue as number);\n    }\n    if (value.s != null) {\n      return getStringParam(this.node.rawAttrs, name, defaultValue as string);\n    }\n    if (value.b != null) {\n      return getBoolParam(this.node.rawAttrs, name, defaultValue as boolean);\n    }\n    if (value.shape != null) {\n      return getTensorShapeParam(\n          this.node.rawAttrs, name, defaultValue as number[]);\n    }\n    if (value.type != null) {\n      return getDtypeParam(this.node.rawAttrs, name, defaultValue as DataType);\n    }\n    if (value.list != null) {\n      if (value.list.i != null || value.list.f != null) {\n        return getNumericArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[]);\n      }\n      if (value.list.s != null) {\n        return getStringArrayParam(\n            this.node.rawAttrs, name, defaultValue as string[]);\n      }\n      if (value.list.shape != null) {\n        return getTensorShapeArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[][]);\n      }\n      if (value.list.b != null) {\n        return getBoolArrayParam(\n            this.node.rawAttrs, name, defaultValue as boolean[]);\n      }\n      if (value.list.type != null) {\n        return getDtypeArrayParam(\n            this.node.rawAttrs, name, defaultValue as DataType[]);\n      }\n    }\n\n    return defaultValue;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'BiasAdd':\n    case 'AddV2':\n    case 'Add': {\n      return [tfc.add(\n          (getParamValue('a', node, tensorMap, context) as tfc.Tensor),\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'AddN': {\n      return [tfc.addN((\n          getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[]))];\n    }\n    case 'FloorMod':\n    case 'Mod':\n      return [tfc.mod(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    case 'Mul':\n      return [tfc.mul(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    case 'RealDiv':\n    case 'Div': {\n      return [tfc.div(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'DivNoNan': {\n      return [tfc.divNoNan(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'FloorDiv': {\n      return [tfc.floorDiv(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Sub': {\n      return [tfc.sub(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Minimum': {\n      return [tfc.minimum(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Maximum': {\n      return [tfc.maximum(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Pow': {\n      return [tfc.pow(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'SquaredDifference': {\n      return [tfc.squaredDifference(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'arithmetic';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Abs':\n    case 'ComplexAbs':\n      return [tfc.abs(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Acos':\n      return [tfc.acos(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Acosh':\n      return [tfc.acosh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Asin':\n      return [tfc.asin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Asinh':\n      return [tfc.asinh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Atan':\n      return [tfc.atan(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Atan2':\n      return [tfc.atan2(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('y', node, tensorMap, context) as tfc.Tensor)];\n    case 'Atanh':\n      return [tfc.atanh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Ceil':\n      return [tfc.ceil(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Complex':\n      return [tfc.complex(\n          getParamValue('real', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('imag', node, tensorMap, context) as tfc.Tensor)];\n    case 'Cos':\n      return [tfc.cos(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Cosh':\n      return [tfc.cosh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Elu':\n      return [tfc.elu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Erf':\n      return [tfc.erf(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Exp':\n      return [tfc.exp(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Expm1': {\n      return [tfc.expm1(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Floor':\n      return [tfc.floor(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Log':\n      return [tfc.log(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Log1p': {\n      return [tfc.log1p(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Imag':\n      return [tfc.imag(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n\n    case 'Neg':\n      return [tfc.neg(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Reciprocal': {\n      return [tfc.reciprocal(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Real':\n      return [tfc.real(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Relu':\n      return [tfc.relu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Round': {\n      return [tfc.round(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Selu':\n      return [tfc.selu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Sigmoid':\n      return [tfc.sigmoid(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Sin':\n      return [tfc.sin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Sign': {\n      return [tfc.sign(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Sinh': {\n      return [tfc.sinh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Softplus': {\n      return [tfc.softplus(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Sqrt': {\n      return [tfc.sqrt(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Square': {\n      return [tfc.square(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Tanh': {\n      return [tfc.tanh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Tan':\n      return [tfc.tan(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Relu6':\n    case 'ClipByValue':\n      return [tfc.clipByValue(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('clipValueMin', node, tensorMap, context) as number,\n          getParamValue('clipValueMax', node, tensorMap, context) as number)];\n    case 'Rsqrt':\n      return [tfc.rsqrt(getTensor(node.inputNames[0], tensorMap, context))];\n    case 'Prod':\n      return [tfc.prod(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('axes', node, tensorMap, context) as number[])];\n    case 'LeakyRelu':\n      return [tfc.leakyRelu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('alpha', node, tensorMap, context) as number)];\n    case 'Prelu':\n      return [tfc.prelu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('alpha', node, tensorMap, context) as tfc.Tensor)];\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'basic_math';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, slice, stack, Tensor, tensor, tidy, unstack, util} from '@tensorflow/tfjs-core';\n\nexport interface TensorWithState {\n  tensor?: Tensor;\n  written?: boolean;\n  read?: boolean;\n  cleared?: boolean;\n}\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n  private static nextId = 0;\n  private tensors: TensorWithState[] = [];\n  private closed_ = false;\n  readonly id: number;\n  constructor(\n      public readonly name: string, public readonly dtype: DataType,\n      private maxSize: number, private elementShape: number[],\n      public readonly identicalElementShapes: boolean,\n      public readonly dynamicSize: boolean,\n      public readonly clearAfterRead: boolean) {\n    this.id = TensorArray.nextId++;\n  }\n\n  get closed() {\n    return this.closed_;\n  }\n\n  /**\n   * Close the current TensorArray.\n   */\n  clearAndClose() {\n    this.tensors.forEach(tensor => tensor.tensor.dispose());\n    this.tensors = [];\n    this.closed_ = true;\n  }\n\n  size(): number {\n    return this.tensors.length;\n  }\n\n  /**\n   * Read the value at location index in the TensorArray.\n   * @param index Number the index to read from.\n   */\n  read(index: number): Tensor {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || index >= this.tensors.length) {\n      throw new Error(`Tried to read from index ${index}, but array size is: ${\n          this.tensors.length}`);\n    }\n\n    const tensorWithState = this.tensors[index];\n    if (tensorWithState.cleared) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not read index ${\n              index} twice because it was cleared after a previous read ` +\n          `(perhaps try setting clear_after_read = false?).`);\n    }\n\n    if (this.clearAfterRead) {\n      tensorWithState.cleared = true;\n    }\n\n    tensorWithState.read = true;\n    return tensorWithState.tensor;\n  }\n\n  /**\n   * Helper method to read multiple tensors from the specified indices.\n   */\n  readMany(indices: number[]): Tensor[] {\n    return indices.map(index => this.read(index));\n  }\n\n  /**\n   * Write value into the index of the TensorArray.\n   * @param index number the index to write to.\n   * @param tensor\n   */\n  write(index: number, tensor: Tensor) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n      throw new Error(`Tried to write to index ${\n          index}, but array is not resizeable and size is: ${this.maxSize}`);\n    }\n\n    const t = this.tensors[index] || {};\n\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray ${\n          this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${\n          tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n    }\n\n    // Set the shape for the first time write to unknow shape tensor array\n    if (this.size() === 0 &&\n        (this.elementShape == null || this.elementShape.length === 0)) {\n      this.elementShape = tensor.shape;\n    }\n\n    this.assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape,\n        `TensorArray ${this.name}: Could not write to TensorArray index ${\n            index}.`);\n\n    if (t && t.read) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been read.`);\n    }\n\n    if (t && t.written) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been written.`);\n    }\n\n    t.tensor = tensor;\n    t.written = true;\n\n    this.tensors[index] = t;\n  }\n\n  /**\n   * Helper method to write multiple tensors to the specified indices.\n   */\n  writeMany(indices: number[], tensors: Tensor[]) {\n    if (indices.length !== tensors.length) {\n      throw new Error(\n          `TensorArray ${this.name}: could not write multiple tensors,` +\n          `because the index size: ${\n              indices.length} is not the same as tensors size: ${\n              tensors.length}.`);\n    }\n\n    indices.forEach((i, index) => this.write(i, tensors[index]));\n  }\n\n  /**\n   * Return selected values in the TensorArray as a packed Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size(). If not specified returns\n   *    all tensors in the original order.\n   * @param [dtype]\n   */\n  gather(indices?: number[], dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but gather requested dtype ${dtype}`);\n    }\n\n    if (!indices) {\n      indices = [];\n      for (let i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n    }\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    // Read all the PersistentTensors into a vector to keep track of\n    // their memory.\n    const tensors = this.readMany(indices);\n\n    this.assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n\n    return stack(tensors, 0);\n  }\n\n  /**\n   * Return the values in the TensorArray as a concatenated Tensor.\n   */\n  concat(dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but concat requested dtype ${dtype}`);\n    }\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    const indices = [];\n    for (let i = 0; i < this.size(); i++) {\n      indices.push(i);\n    }\n    // Collect all the tensors from the tensors array.\n    const tensors = this.readMany(indices);\n\n    this.assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape,\n        `TensorArray shape mismatch: tensor array shape (${\n            this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n\n    return concat(tensors, 0);\n  }\n\n  /**\n   * Scatter the values of a Tensor in specific indices of a TensorArray.\n   * @param indices nummber[] values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size().\n   * @param tensor Tensor input tensor.\n   */\n  scatter(indices: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n\n    if (indices.length !== tensor.shape[0]) {\n      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n          indices.length} vs. ${tensor.shape[0]}`);\n    }\n\n    const maxIndex = Math.max(...indices);\n\n    if (!this.dynamicSize && maxIndex >= this.maxSize) {\n      throw new Error(\n          `Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n    }\n\n    this.writeMany(indices, unstack(tensor, 0));\n  }\n\n  /**\n   * Split the values of a Tensor into the TensorArray.\n   * @param length number[] with the lengths to use when splitting value along\n   *    its first dimension.\n   * @param tensor Tensor, the tensor to split.\n   */\n  split(length: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n      totalLength += len;\n      return totalLength;\n    });\n\n    if (totalLength !== tensor.shape[0]) {\n      throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n\n    if (!this.dynamicSize && length.length !== this.maxSize) {\n      throw new Error(\n          `TensorArray's size is not equal to the size of lengths (${\n              this.maxSize} vs. ${length.length}), ` +\n          'and the TensorArray is not marked as dynamically resizeable');\n    }\n\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors: Tensor[] = [];\n    tidy(() => {\n      tensor = tensor.reshape([1, totalLength, elementPerRow]);\n      for (let i = 0; i < length.length; ++i) {\n        const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n        const indices = [0, previousLength, 0];\n        const sizes = [1, length[i], elementPerRow];\n        tensors[i] = slice(tensor, indices, sizes).reshape(this.elementShape);\n      }\n      return tensors;\n    });\n    const indices = [];\n    for (let i = 0; i < length.length; i++) {\n      indices[i] = i;\n    }\n    this.writeMany(indices, tensors);\n  }\n\n  /**\n   * This differs from util.assertShapesMatch in that it allows values of\n   * negative one, an undefined size of a dimensinon, in a shape to match\n   * anything.\n   */\n  private assertShapesMatchAllowUndefinedSize(\n      shapeA: number[], shapeB: number[], errorMessagePrefix = ''): void {\n    util.assert(\n        this.shapesEqualAllowUndefinedSize(shapeA, shapeB),\n        () =>\n            errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  }\n\n  private shapesEqualAllowUndefinedSize(n1: number[], n2: number[]) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== -1 && n2[i] !== -1 && n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): tfc.Tensor[] => {\n      switch (node.op) {\n        case 'Conv1D': {\n          const stride =\n              getParamValue('stride', node, tensorMap, context) as number;\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilation =\n              getParamValue('dilation', node, tensorMap, context) as number;\n          return [tfc.conv1d(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor3D,\n              getParamValue('filter', node, tensorMap, context) as tfc.Tensor3D,\n              stride, pad as 'valid' | 'same', dataFormat as 'NWC' | 'NCW',\n              dilation)];\n        }\n        case 'Conv2D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          return [tfc.conv2d(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n                  tfc.Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n        }\n        case '_FusedConv2D':\n        case 'FusedDepthwiseConv2dNative': {\n          const [extraOp, activationFunc] =\n              (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n          const isBiasAdd = extraOp === 'biasadd';\n          const isPrelu = activationFunc === 'prelu';\n          const isBatchNorm = extraOp === 'fusedbatchnorm';\n\n          const numArgs =\n              (getParamValue('numArgs', node, tensorMap, context) as number);\n          if (isBiasAdd) {\n            if (isPrelu && numArgs !== 2) {\n              throw new Error(\n                  'FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' +\n                  'must have two extra arguments: bias and alpha.');\n            }\n            if (!isPrelu && numArgs !== 1) {\n              throw new Error(\n                  'FusedConv2d and DepthwiseConv2d with BiasAdd must have ' +\n                  'one extra argument: bias.');\n            }\n          }\n          if (isBatchNorm) {\n            throw new Error(\n                'FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.');\n          }\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          const [biasArg, preluArg] =\n              getParamValue('args', node, tensorMap, context) as tfc.Tensor[];\n          const kernelMethod = node.op === '_FusedConv2D' ?\n              tfc.fused.conv2d :\n              tfc.fused.depthwiseConv2d;\n          return [kernelMethod({\n            x: getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n                tfc.Tensor4D,\n            filter: getParamValue('filter', node, tensorMap, context) as\n                tfc.Tensor4D,\n            strides: [stride[1], stride[2]],\n            pad: pad as 'valid' | 'same',\n            dataFormat: dataFormat as 'NHWC' | 'NCHW',\n            dilations: [dilations[1], dilations[2]],\n            bias: biasArg,\n            activation: activationFunc as tfc.fused.Activation,\n            preluActivationWeights: preluArg\n          })];\n        }\n        case 'Conv2DBackpropInput':\n        case 'Conv2dTranspose': {\n          const shape = getParamValue(\n                            'outputShape', node, tensorMap,\n                            context) as [number, number, number] |\n              [number, number, number, number];\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          return [tfc.conv2dTranspose(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n                  tfc.Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n              shape, [stride[1], stride[2]], pad as 'valid' | 'same')];\n        }\n        case 'DepthwiseConv2dNative':\n        case 'DepthwiseConv2d': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n\n          return [tfc.depthwiseConv2d(\n              getParamValue('input', node, tensorMap, context) as tfc.Tensor3D |\n                  tfc.Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n        }\n        case 'Conv3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          return [tfc.conv3d(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor4D |\n                  tfc.Tensor<tfc.Rank.R5>,\n              getParamValue('filter', node, tensorMap, context) as\n                  tfc.Tensor<tfc.Rank.R5>,\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same',\n              dataFormat as 'NDHWC' | 'NCDHW',\n              [dilations[1], dilations[2], dilations[3]])];\n        }\n\n        case 'AvgPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfc.avgPool(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n                  tfc.Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n\n        case 'MaxPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfc.maxPool(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n                  tfc.Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n\n        case 'AvgPool3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfc.avgPool3d(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor5D,\n              [kernelSize[1], kernelSize[2], kernelSize[3]],\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n        }\n\n        case 'MaxPool3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfc.maxPool3d(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor5D,\n              [kernelSize[1], kernelSize[2], kernelSize[3]],\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n        }\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'convolution';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Fill': {\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const value = getParamValue('value', node, tensorMap, context) as number;\n      return [tfc.fill(shape, value, dtype)];\n    }\n    case 'LinSpace': {\n      const start = getParamValue('start', node, tensorMap, context) as number;\n      const stop = getParamValue('stop', node, tensorMap, context) as number;\n      const num = getParamValue('num', node, tensorMap, context) as number;\n      return [tfc.linspace(start, stop, num)];\n    }\n    case 'Multinomial': {\n      const logits =\n          getParamValue('logits', node, tensorMap, context) as tfc.Tensor1D;\n      const numSamples =\n          getParamValue('numSamples', node, tensorMap, context) as number;\n      const seed = getParamValue('seed', node, tensorMap, context) as number;\n      return [tfc.multinomial(logits, numSamples, seed)];\n    }\n    case 'OneHot': {\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor1D;\n      const depth = getParamValue('depth', node, tensorMap, context) as number;\n      const onValue =\n          getParamValue('onValue', node, tensorMap, context) as number;\n      const offValue =\n          getParamValue('offValue', node, tensorMap, context) as number;\n      return [tfc.oneHot(indices, depth, onValue, offValue)];\n    }\n    case 'Ones': {\n      return [tfc.ones(\n          getParamValue('shape', node, tensorMap, context) as number[],\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'OnesLike': {\n      return [tfc.onesLike(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'RandomUniform': {\n      return [tfc.randomUniform(\n          // tslint:disable-next-line:no-any\n          getParamValue('shape', node, tensorMap, context) as any,\n          getParamValue('minval', node, tensorMap, context) as number,\n          getParamValue('maxval', node, tensorMap, context) as number,\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'Range': {\n      const start = getParamValue('start', node, tensorMap, context) as number;\n      const stop = getParamValue('stop', node, tensorMap, context) as number;\n      const step = getParamValue('step', node, tensorMap, context) as number;\n      return [tfc.range(\n          start, stop, step,\n          getParamValue('dtype', node, tensorMap, context) as 'float32' |\n              'int32')];\n    }\n    case 'TruncatedNormal': {\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      const mean = getParamValue('mean', node, tensorMap, context) as number;\n      const stdDev =\n          getParamValue('stdDev', node, tensorMap, context) as number;\n      const seed = getParamValue('seed', node, tensorMap, context) as number;\n      return [tfc.truncatedNormal(\n          shape, mean, stdDev,\n          getParamValue('dtype', node, tensorMap, context) as 'float32' |\n              'int32',\n          seed)];\n    }\n    case 'Zeros': {\n      return [tfc.zeros(\n          getParamValue('shape', node, tensorMap, context) as number[],\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'ZerosLike': {\n      return [tfc.zerosLike(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'creation';\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): tfc.Tensor[] => {\n      switch (node.op) {\n        case 'TopKV2': {\n          const x = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n          const k = getParamValue('k', node, tensorMap, context) as number;\n          const sorted =\n              getParamValue('sorted', node, tensorMap, context) as boolean;\n          const result = tfc.topk(x, k, sorted);\n          return [result.values, result.indices];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'evaluation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Const': {\n      return tensorMap[node.name];\n    }\n    case 'PlaceholderWithDefault':\n      const def =\n          getParamValue('default', node, tensorMap, context) as tfc.Tensor;\n      return [getTensor(node.name, tensorMap, context) || def];\n    case 'Placeholder':\n      return [getTensor(node.name, tensorMap, context)];\n    case 'Identity':\n    case 'StopGradient':\n    case 'FakeQuantWithMinMaxVars':  // This op is currently ignored.\n      return [\n        (getParamValue('x', node, tensorMap, context) as tfc.Tensor).clone()\n      ];\n    case 'IdentityN':\n      return (getParamValue('x', node, tensorMap, context) as tfc.Tensor[])\n          .map((t: tfc.Tensor) => t.clone());\n    case 'Snapshot':\n      const snapshot =\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor);\n      return [snapshot.clone()];\n    case 'Shape':\n      return [tfc.tensor1d(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).shape,\n          'int32')];\n    case 'ShapeN':\n      return (getParamValue('x', node, tensorMap, context) as tfc.Tensor[])\n          .map((t: tfc.Tensor) => tfc.tensor1d(t.shape));\n    case 'Size':\n      return [tfc.scalar(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).size,\n          'int32')];\n    case 'Rank':\n      return [tfc.scalar(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).rank,\n          'int32')];\n    case 'NoOp':\n      return [tfc.scalar(1)];\n    case 'Print':\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const data =\n          getParamValue('data', node, tensorMap, context) as tfc.Tensor[];\n      const message =\n          getParamValue('message', node, tensorMap, context) as string;\n      const summarize =\n          getParamValue('summarize', node, tensorMap, context) as number;\n      console.warn(\n          'The graph has a tf.print() operation,' +\n          'usually used for debugging, which slows down performance.');\n      console.log(message);\n      for (let i = 0; i < data.length; i++) {\n        console.log(\n            Array.prototype.slice.call(data[i].dataSync()).slice(0, summarize));\n      }\n      return [input];\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'graph';\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'ResizeBilinear': {\n      const images =\n          getParamValue('images', node, tensorMap, context) as tfc.Tensor;\n      const size = getParamValue('size', node, tensorMap, context) as number[];\n      const alignCorners =\n          getParamValue('alignCorners', node, tensorMap, context) as boolean;\n      return [tfc.image.resizeBilinear(\n          images as tfc.Tensor3D | tfc.Tensor4D, [size[0], size[1]],\n          alignCorners)];\n    }\n    case 'ResizeNearestNeighbor': {\n      const images =\n          getParamValue('images', node, tensorMap, context) as tfc.Tensor;\n      const size = getParamValue('size', node, tensorMap, context) as number[];\n      const alignCorners =\n          getParamValue('alignCorners', node, tensorMap, context) as boolean;\n      return [tfc.image.resizeNearestNeighbor(\n          images as tfc.Tensor3D | tfc.Tensor4D, [size[0], size[1]],\n          alignCorners)];\n    }\n    case 'CropAndResize': {\n      const image =\n          getParamValue('image', node, tensorMap, context) as tfc.Tensor;\n      const boxes =\n          getParamValue('boxes', node, tensorMap, context) as tfc.Tensor;\n      const boxInd =\n          getParamValue('boxInd', node, tensorMap, context) as tfc.Tensor;\n      const cropSize =\n          getParamValue('cropSize', node, tensorMap, context) as number[];\n      const method =\n          getParamValue('method', node, tensorMap, context) as string;\n      const extrapolationValue =\n          getParamValue('extrapolationValue', node, tensorMap, context) as\n          number;\n      return [tfc.image.cropAndResize(\n          image as tfc.Tensor4D, boxes as tfc.Tensor2D, boxInd as tfc.Tensor1D,\n          cropSize as [number, number], method as 'bilinear' | 'nearest',\n          extrapolationValue)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'image';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Equal': {\n      return [tfc.equal(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'NotEqual': {\n      return [tfc.notEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Greater': {\n      return [tfc.greater(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'GreaterEqual': {\n      return [tfc.greaterEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Less': {\n      return [tfc.less(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LessEqual': {\n      return [tfc.lessEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogicalAnd': {\n      return [tfc.logicalAnd(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogicalNot': {\n      return [tfc.logicalNot(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogicalOr': {\n      return [tfc.logicalOr(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Select': {\n      return [tfc.where(\n          getParamValue('condition', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'logical';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'BatchMatMul':\n    case 'BatchMatMulV2':\n    case 'MatMul':\n      return [tfc.matMul(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor2D,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor2D,\n          getParamValue('transposeA', node, tensorMap, context) as boolean,\n          getParamValue('transposeB', node, tensorMap, context) as boolean)];\n\n    case 'Transpose':\n      return [tfc.transpose(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('perm', node, tensorMap, context) as number[])];\n\n    case '_FusedMatMul':\n      const [extraOp, activationFunc] =\n          (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n      const isBiasAdd = extraOp === 'biasadd';\n      const isPrelu = activationFunc === 'prelu';\n\n      const numArgs =\n          (getParamValue('numArgs', node, tensorMap, context) as number);\n      if (isBiasAdd) {\n        if (isPrelu && numArgs !== 2) {\n          throw new Error(\n              'Fused MatMul with BiasAdd and Prelu must have two ' +\n              'extra arguments: bias and alpha.');\n        }\n        if (!isPrelu && numArgs !== 1) {\n          throw new Error(\n              'Fused MatMul with BiasAdd must have one extra argument: bias.');\n        }\n      }\n      const [biasArg, preluArg] =\n          getParamValue('args', node, tensorMap, context) as tfc.Tensor[];\n      return [tfc.fused.matMul({\n        a: getParamValue('a', node, tensorMap, context) as tfc.Tensor2D,\n        b: getParamValue('b', node, tensorMap, context) as tfc.Tensor2D,\n        transposeA: getParamValue('transposeA', node, tensorMap, context) as\n            boolean,\n        transposeB: getParamValue('transposeB', node, tensorMap, context) as\n            boolean,\n        bias: biasArg,\n        activation: activationFunc as tfc.fused.Activation,\n        preluActivationWeights: preluArg\n      })];\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'matrices';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'FusedBatchNorm':\n    case 'FusedBatchNormV2': {\n      return [tfc.batchNorm(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('mean', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('variance', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('offset', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('scale', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('epsilon', node, tensorMap, context) as number)];\n    }\n    case 'FusedBatchNormV3': {\n      return [tfc.batchNorm(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('mean', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('variance', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('offset', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('scale', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('epsilon', node, tensorMap, context) as number)];\n    }\n    case 'LRN': {\n      return [tfc.localResponseNormalization(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          getParamValue('radius', node, tensorMap, context) as number,\n          getParamValue('bias', node, tensorMap, context) as number,\n          getParamValue('alpha', node, tensorMap, context) as number,\n          getParamValue('beta', node, tensorMap, context) as number)];\n    }\n    case 'Softmax': {\n      return [tfc.softmax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogSoftmax': {\n      return [tfc.logSoftmax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'SparseToDense': {\n      return [tfc.sparseToDense(\n          getParamValue('sparseIndices', node, tensorMap, context) as\n              tfc.Tensor,\n          getParamValue('outputShape', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('sparseValues', node, tensorMap, context) as number[],\n          getParamValue('defaultValue', node, tensorMap, context) as\n              tfc.Scalar)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'normalization';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Max': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.max(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Mean': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.mean(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Min': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.min(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Sum': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.sum(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'All': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.all(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Any': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.any(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'ArgMax': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.argMax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'ArgMin': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.argMin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'Prod': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.prod(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'reduction';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'ConcatV2':\n    case 'Concat': {\n      const n = getParamValue('n', node, tensorMap, context) as number;\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      let inputs =\n          getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[];\n      inputs = inputs.slice(0, n);\n      return [tfc.concat(inputs, axis)];\n    }\n    case 'GatherV2':\n    case 'Gather': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor1D;\n      return [tfc.gather(input, indices.asType('int32'), axis)];\n    }\n    case 'ReverseV2':\n    case 'Reverse': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      return [tfc.reverse(input, axis)];\n    }\n    case 'Slice': {\n      // tslint:disable-next-line:no-any\n      const begin = getParamValue('begin', node, tensorMap, context) as any;\n      // tslint:disable-next-line:no-any\n      const size = getParamValue('size', node, tensorMap, context) as any;\n      return [tfc.slice(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, begin,\n          size)];\n    }\n    case 'StridedSlice': {\n      const begin =\n          getParamValue('begin', node, tensorMap, context) as number[];\n      const end = getParamValue('end', node, tensorMap, context) as number[];\n      const strides =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const beginMask =\n          getParamValue('beginMask', node, tensorMap, context) as number;\n      const endMask =\n          getParamValue('endMask', node, tensorMap, context) as number;\n      const ellipsisMask =\n          getParamValue('ellipsisMask', node, tensorMap, context) as number;\n      const newAxisMask =\n          getParamValue('newAxisMask', node, tensorMap, context) as number;\n      const shrinkAxisMask =\n          getParamValue('shrinkAxisMask', node, tensorMap, context) as number;\n      const tensor = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      if (begin.length === 1 && tensor.shape.length > 1) {\n        for (let i = 1; i < tensor.shape.length; i++) {\n          begin.push(0);\n          end.push(tensor.shape[i]);\n          strides.push(strides[0]);\n        }\n      }\n      return [tfc.stridedSlice(\n          tensor, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask)];\n    }\n    case 'Pack': {\n      return tfc.tidy(() => {\n        const axis = getParamValue('axis', node, tensorMap, context) as number;\n        const tensors =\n            getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[];\n        // Reshape the tensors to the first tensor's shape if they don't match.\n        const shape = tensors[0].shape;\n        const squeezedShape = tensors[0].squeeze().shape;\n        const mapped = tensors.map(tensor => {\n          const sameShape = tfc.util.arraysEqual(tensor.shape, shape);\n          if (!sameShape &&\n              !tfc.util.arraysEqual(tensor.squeeze().shape, squeezedShape)) {\n            throw new Error('the input tensors shape does not match');\n          }\n          return sameShape ? tensor : tensor.reshape(shape);\n        });\n        return [tfc.stack(mapped, axis)];\n      });\n    }\n    case 'Unpack': {\n      return tfc.tidy(() => {\n        const axis = getParamValue('axis', node, tensorMap, context) as number;\n        const tensor =\n            getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n        return tfc.unstack(tensor, axis);\n      });\n    }\n    case 'Tile': {\n      const reps = getParamValue('reps', node, tensorMap, context) as number[];\n      return [tfc.tile(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, reps)];\n    }\n    case 'Split':\n    case 'SplitV': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      const numOrSizeSplits =\n          getParamValue('numOrSizeSplits', node, tensorMap, context) as number |\n          number[];\n      return tfc.split(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          numOrSizeSplits, axis);\n    }\n    case 'ScatterNd': {\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor;\n      const values =\n          getParamValue('values', node, tensorMap, context) as tfc.Tensor;\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      return [tfc.scatterND(indices, values, shape)];\n    }\n    case 'GatherNd': {\n      const x = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor;\n      return [tfc.gatherND(x, indices)];\n    }\n    case 'SparseToDense': {\n      const indices =\n          getParamValue('sparseIndices', node, tensorMap, context) as\n          tfc.Tensor;\n      const shape =\n          getParamValue('outputShape', node, tensorMap, context) as number[];\n      const sparseValues =\n          getParamValue('sparseValues', node, tensorMap, context) as tfc.Tensor;\n      const defaultValue =\n          getParamValue('defaultValue', node, tensorMap, context) as tfc.Scalar;\n      return [tfc.sparseToDense(\n          indices, sparseValues, shape,\n          sparseValues.dtype === defaultValue.dtype ?\n              defaultValue :\n              defaultValue.asType(sparseValues.dtype))];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'slice_join';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): tfc.Tensor[] => {\n      switch (node.op) {\n        case 'FFT': {\n          return [tfc.fft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'IFFT': {\n          return [tfc.ifft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'RFFT': {\n          return [tfc.rfft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'IRFFT': {\n          return [tfc.irfft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'spectral';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, split} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Cast': {\n      return [tfc.cast(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('dtype', node, tensorMap, context) as 'int32' |\n              'float32' | 'bool')];\n    }\n    case 'ExpandDims': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.expandDims(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'Squeeze': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      return [tfc.squeeze(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n\n    case 'Reshape': {\n      return [tfc.reshape(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('shape', node, tensorMap, context) as number[])];\n    }\n    case 'PadV2':\n    case 'Pad': {\n      return [tfc.pad(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          split(\n              getParamValue('padding', node, tensorMap, context) as number[],\n              2) as Array<[number, number]>,\n          getParamValue('constantValue', node, tensorMap, context) as number)];\n    }\n    case 'SpaceToBatchND': {\n      const blockShape =\n          getParamValue('blockShape', node, tensorMap, context) as number[];\n      const paddings = split(\n          getParamValue('paddings', node, tensorMap, context) as number[], 2);\n      return [tfc.spaceToBatchND(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          blockShape, paddings)];\n    }\n    case 'BatchToSpaceND': {\n      const blockShape =\n          getParamValue('blockShape', node, tensorMap, context) as number[];\n      const crops = split(\n          getParamValue('crops', node, tensorMap, context) as number[], 2);\n      return [tfc.batchToSpaceND(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          blockShape, crops)];\n    }\n    case 'DepthToSpace': {\n      const blockSize =\n          getParamValue('blockSize', node, tensorMap, context) as number;\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as\n           string).toUpperCase() as 'NHWC' |\n          'NCHW';\n      return [tfc.depthToSpace(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor4D,\n          blockSize, dataFormat)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'transformation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {ExecutionContext} from '../executor/execution_context';\n\nimport {NodeValueImpl} from './custom_op/node_value_impl';\nimport {getRegisteredOp} from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as transformation from './executors/transformation_executor';\nimport {Node} from './types';\n\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n */\nexport function executeOp(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor[]|Promise<tfc.Tensor[]> {\n  const value =\n      ((node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) => {\n        switch (node.category) {\n          case 'arithmetic':\n            return arithmetic.executeOp(node, tensorMap, context);\n          case 'basic_math':\n            return basicMath.executeOp(node, tensorMap, context);\n          case 'control':\n            return control.executeOp(node, tensorMap, context);\n          case 'convolution':\n            return convolution.executeOp(node, tensorMap, context);\n          case 'creation':\n            return creation.executeOp(node, tensorMap, context);\n          case 'dynamic':\n            return dynamic.executeOp(node, tensorMap, context);\n          case 'evaluation':\n            return evaluation.executeOp(node, tensorMap, context);\n          case 'image':\n            return image.executeOp(node, tensorMap, context);\n          case 'graph':\n            return graph.executeOp(node, tensorMap, context);\n          case 'logical':\n            return logical.executeOp(node, tensorMap, context);\n          case 'matrices':\n            return matrices.executeOp(node, tensorMap, context);\n          case 'normalization':\n            return normalization.executeOp(node, tensorMap, context);\n          case 'reduction':\n            return reduction.executeOp(node, tensorMap, context);\n          case 'slice_join':\n            return sliceJoin.executeOp(node, tensorMap, context);\n          case 'spectral':\n            return spectral.executeOp(node, tensorMap, context);\n          case 'transformation':\n            return transformation.executeOp(node, tensorMap, context);\n          case 'custom':\n            const opMapper = getRegisteredOp(node.op);\n            if (opMapper && opMapper.customExecutor) {\n              return opMapper.customExecutor(\n                  new NodeValueImpl(node, tensorMap, context));\n            } else {\n              throw TypeError(`Custom op ${node.op} is not registered.`);\n            }\n          default:\n            throw TypeError(\n                `Unknown op '${node.op}'. File an issue at ` +\n                `https://github.com/tensorflow/tfjs/issues so we can add it` +\n                `, or register a custom execution with tf.registerOp()`);\n        }\n      })(node, tensorMap, context);\n  if (value instanceof Promise) {\n    return value.then((data) => [].concat(data));\n  }\n  return [].concat(value);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {scalar} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {TensorArray} from '../../executor/tensor_array';\nimport {Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport async function executeOp(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<tfc.Tensor[]> {\n  switch (node.op) {\n    case 'LoopCond':\n      return [\n        (getParamValue('pred', node, tensorMap, context) as tfc.Tensor).clone()\n      ];\n    case 'Switch': {\n      const pred =\n          getParamValue('pred', node, tensorMap, context) as tfc.Tensor;\n      const data =\n          getParamValue('data', node, tensorMap, context) as tfc.Tensor;\n      // Outputs nodes :0 => false, :1 => true\n      return (await pred.data())[0] ? [undefined, data.clone()] :\n                                      [data.clone(), undefined];\n    }\n    case 'Merge':\n      const inputName = node.inputNames.find(\n          name => getTensor(name, tensorMap, context) !== undefined);\n      return inputName ? [getTensor(inputName, tensorMap, context).clone()] :\n                         undefined;\n\n    case 'Enter':\n      const frameId =\n          getParamValue('frameName', node, tensorMap, context) as string;\n      const data =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.enterFrame(frameId);\n      return [data.clone()];\n\n    case 'Exit':\n      const tensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.exitFrame();\n      return [tensor.clone()];\n\n    case 'NextIteration':\n      const input =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.nextIteration();\n      return [input.clone()];\n\n    case 'TensorArrayV3':\n      const size = getParamValue('size', node, tensorMap, context) as number;\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const dynamicSize =\n          getParamValue('dynamicSize', node, tensorMap, context) as boolean;\n      const clearAfterRead =\n          getParamValue('clearAfterRead', node, tensorMap, context) as boolean;\n      const identicalElementShapes =\n          getParamValue('identicalElementShapes', node, tensorMap, context) as\n          boolean;\n      const name = getParamValue('name', node, tensorMap, context) as string;\n      const tensorArray = new TensorArray(\n          name, dtype, size, elementShape, identicalElementShapes, dynamicSize,\n          clearAfterRead);\n      context.addTensorArray(tensorArray);\n      return [scalar(tensorArray.id), scalar(1.0)];\n\n    case 'TensorArrayWriteV3':\n      const id =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const writeTensorArray = context.getTensorArray(id);\n      writeTensorArray.write(index, writeTensor);\n      return [scalar(1.0)];\n\n    case 'TensorArrayReadV3':\n      const readId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const readTensorArray = context.getTensorArray(readId);\n      return [readTensorArray.read(readIndex)];\n\n    case 'TensorArrayGatherV3':\n      const gatherId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const gatherDtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const gatherTensorArray = context.getTensorArray(gatherId);\n      return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n\n    case 'TensorArrayScatterV3':\n      const scatterId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const scatterTensorArray = context.getTensorArray(scatterId);\n      scatterTensorArray.scatter(scatterIndices, scatterTensor);\n      return [scalar(1.0)];\n\n    case 'TensorArrayConcatV3':\n      const concatId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const concatTensorArray = context.getTensorArray(concatId);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      return [concatTensorArray.concat(concatDtype)];\n\n    case 'TensorArraySplitV3':\n      const splitId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n      const splitTensorArray = context.getTensorArray(splitId);\n      splitTensorArray.split(lengths, splitTensor);\n      return [scalar(1.0)];\n\n    case 'TensorArraySizeV3':\n      const sizeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const sizeTensorArray = context.getTensorArray(sizeId);\n      return [scalar(sizeTensorArray.size(), 'int32')];\n\n    case 'TensorArrayCloseV3':\n      const closeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const closeTensorArray = context.getTensorArray(closeId);\n      closeTensorArray.clearAndClose();\n      return [scalar(0)];\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n}\n\nexport const CATEGORY = 'control';\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node} from '../types';\nimport {getParamValue} from './utils';\n\nexport async function executeOp(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<tfc.Tensor[]> {\n  switch (node.op) {\n    case 'NonMaxSuppressionV5':\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2': {\n      const boxes =\n          getParamValue('boxes', node, tensorMap, context) as tfc.Tensor;\n      const scores =\n          getParamValue('scores', node, tensorMap, context) as tfc.Tensor;\n      const maxOutputSize =\n          getParamValue('maxOutputSize', node, tensorMap, context) as number;\n      const iouThreshold =\n          getParamValue('iouThreshold', node, tensorMap, context) as number;\n      const scoreThreshold =\n          getParamValue('scoreThreshold', node, tensorMap, context) as number;\n\n      if (node.op === 'NonMaxSuppressionV5') {\n        const softNmsSigma =\n            getParamValue('softNmsSigma', node, tensorMap, context) as number;\n\n        const result = await tfc.image.nonMaxSuppressionWithScoreAsync(\n            boxes as tfc.Tensor2D, scores as tfc.Tensor1D, maxOutputSize,\n            iouThreshold, scoreThreshold, softNmsSigma);\n\n        return [result.selectedIndices, result.selectedScores];\n      }\n\n      return [await tfc.image.nonMaxSuppressionAsync(\n          boxes as tfc.Tensor2D, scores as tfc.Tensor1D, maxOutputSize,\n          iouThreshold, scoreThreshold)];\n    }\n    case 'Where': {\n      return [await tfc.whereAsync(\n          (getParamValue('condition', node, tensorMap, context) as tfc.Tensor)\n              .asType('bool'))];\n    }\n    case 'ListDiff': {\n      return tfc.setdiff1dAsync(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('y', node, tensorMap, context) as tfc.Tensor);\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n}\n\nexport const CATEGORY = 'dynamic';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap, TensorArrayMap} from '../data/types';\n\nimport {TensorArray} from './tensor_array';\n\nexport interface ExecutionContextInfo {\n  id: number;           // the unique id of the context info\n  frameName: string;    // The frame name of the loop, this comes from\n                        // the TensorFlow NodeDef.\n  iterationId: number;  // The iteration id of the loop\n}\n\n/**\n * ExecutionContext captures the runtime environment of the node. It keeps\n * track of the current frame and iteration for the control flow ops.\n *\n * For example, typical Dynamic RNN model may contain loops, for which\n * TensorFlow will generate graphs with Enter/Exit nodes to control the\n * current execution frame, and NextIteration Nodes for iteration id increment.\n * For model with branch logic, TensorFLow will generate Switch/Merge ops.\n */\nexport class ExecutionContext {\n  private rootContext = {id: 0, frameName: '', iterationId: 0};\n  private contexts: ExecutionContextInfo[] = [this.rootContext];\n  private lastId = 0;\n  private _currentContextIds: string[];\n\n  constructor(\n      public readonly weightMap: NamedTensorsMap,\n      public readonly tensorArrayMap: TensorArrayMap) {\n    this.generateCurrentContextIds();\n  }\n\n  private newFrame(id: number, frameName: string) {\n    return {id, frameName, iterationId: 0};\n  }\n\n  /**\n   * Set the current context\n   * @param contexts: ExecutionContextInfo[] the current path of execution\n   * frames\n   */\n  set currentContext(contexts: ExecutionContextInfo[]) {\n    if (this.contexts !== contexts) {\n      this.contexts = contexts;\n      this.generateCurrentContextIds();\n    }\n  }\n\n  get currentContext(): ExecutionContextInfo[] {\n    return this.contexts;\n  }\n\n  /**\n   * Returns the current context in string format.\n   */\n  get currentContextId(): string {\n    return this._currentContextIds[0];\n  }\n\n  /**\n   * Returns the current context and all parent contexts in string format.\n   * This allow access to the nodes in the current and parent frames.\n   */\n  get currentContextIds(): string[] {\n    return this._currentContextIds;\n  }\n\n  private generateCurrentContextIds() {\n    const names = [];\n    for (let i = 0; i < this.contexts.length - 1; i++) {\n      const contexts = this.contexts.slice(0, this.contexts.length - i);\n      names.push(this.contextIdforContexts(contexts));\n    }\n    names.push('');\n    this._currentContextIds = names;\n  }\n\n  private contextIdforContexts(contexts: ExecutionContextInfo[]) {\n    return contexts ?\n        contexts\n            .map(\n                context => (context.id === 0 && context.iterationId === 0) ?\n                    '' :\n                    `${context.frameName}-${context.iterationId}`)\n            .join('/') :\n        '';\n  }\n\n  /**\n   * Enter a new frame, a new context is pushed on the current context list.\n   * @param frameId new frame id\n   */\n  enterFrame(frameId: string) {\n    if (this.contexts) {\n      this.lastId++;\n      this.contexts = this.contexts.slice();\n      this.contexts.push(this.newFrame(this.lastId, frameId));\n      this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));\n    }\n  }\n\n  /**\n   * Exit the current frame, the last context is removed from the current\n   * context list.\n   */\n  exitFrame() {\n    if (this.contexts && this.contexts.length > 1) {\n      this.contexts = this.contexts.slice();\n      this.contexts.splice(-1);\n      this.currentContextIds.shift();\n    } else {\n      throw new Error('Cannot exit frame, the context is empty');\n    }\n  }\n\n  /**\n   * Enter the next iteration of a loop, the iteration id of last context is\n   * increased.\n   */\n  nextIteration() {\n    if (this.contexts && this.contexts.length > 0) {\n      this.contexts = this.contexts.slice();\n      this.lastId++;\n      const context =\n          Object.assign({}, this.contexts[this.contexts.length - 1]);\n      context.iterationId += 1;\n      context.id = this.lastId;\n      this.contexts.splice(-1, 1, context);\n      this._currentContextIds.splice(\n          0, 1, this.contextIdforContexts(this.contexts));\n    } else {\n      throw new Error('Cannot increase frame iteration, the context is empty');\n    }\n  }\n\n  getWeight(name: string): Tensor[] {\n    return this.weightMap[name];\n  }\n\n  addTensorArray(tensorArray: TensorArray) {\n    this.tensorArrayMap[tensorArray.id] = tensorArray;\n  }\n\n  getTensorArray(id: number): TensorArray {\n    return this.tensorArrayMap[id];\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NamedTensorMap} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {parseNodeName} from '../operations/executors/utils';\nimport {Graph, Node} from '../operations/types';\n\nexport interface ExecutionInfo {\n  inputs: NamedTensorMap;\n  outputs: Node[];\n  usedNodes: Set<string>;\n  missingInputs: string[];\n  dynamicNode: Node;\n  syncInputs: string[];\n}\n\n/**\n * Given graph inputs and desired outputs, find the minimal set of nodes\n * to execute in order to compute the outputs. In addition return other useful\n * info such:\n * - Missing inputs needed to compute the output.\n * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).\n * - Alternative inputs in order to avoid async (dynamic op) execution.\n */\nexport function getExecutionSubgraph(\n    inputs: NamedTensorMap, outputs: Node[],\n    weightMap: NamedTensorsMap): ExecutionInfo {\n  const usedNodes = new Set<string>();\n  const missingInputs: string[] = [];\n  let dynamicNode: Node = null;\n  let syncInputs: string[] = null;\n\n  // Start with the outputs, going backwards and find all the nodes that are\n  // needed to compute those outputs.\n  const seen = new Set<string>();\n  const inputNodeNames =\n      Object.keys(inputs).map(name => parseNodeName(name)[0]);\n  const frontier = [...outputs];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    if (isControlFlow(node) || isDynamicShape(node)) {\n      if (dynamicNode == null) {\n        dynamicNode = node;\n        syncInputs = dynamicNode.children.map(child => child.name)\n                         .filter(name => usedNodes.has(name));\n      }\n    }\n    usedNodes.add(node.name);\n\n    // Weights are dead end since we already have their values.\n    if (weightMap[node.name] != null) {\n      continue;\n    }\n    // This node is a dead end since it's one of the user-provided inputs.\n\n    if (inputNodeNames.indexOf(node.name) !== -1) {\n      continue;\n    }\n    if (node.inputs.length === 0) {\n      missingInputs.push(node.name);\n      continue;\n    }\n    node.inputs.forEach(input => {\n      // Don't add to the frontier if it is already there.\n      if (seen.has(input.name)) {\n        return;\n      }\n      seen.add(input.name);\n      frontier.push(input);\n    });\n  }\n  return {inputs, outputs, usedNodes, missingInputs, dynamicNode, syncInputs};\n}\n\n/**\n * Given the execution info, return a list of nodes in topological order that\n * need to be executed to compute the output.\n */\nexport function getNodesInTopologicalOrder(\n    graph: Graph, weightMap: NamedTensorsMap,\n    executionInfo: ExecutionInfo): Node[] {\n  const {usedNodes, inputs} = executionInfo;\n  const frontier: Node[] = [];\n  const inputNodes = Object.keys(inputs)\n                         .map(name => parseNodeName(name)[0])\n                         .map(name => graph.nodes[name]);\n  inputNodes.forEach(input => {\n    if (usedNodes.has(input.name)) {\n      frontier.push(input);\n    }\n  });\n  graph.weights.forEach(weight => {\n    if (usedNodes.has(weight.name)) {\n      frontier.push(weight);\n    }\n  });\n  const seen = new Set<string>();\n  const orderedNodes: Node[] = [];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    seen.add(node.name);\n    if (!weightMap[node.name]) {\n      orderedNodes.push(node);\n    }\n    node.children.forEach(child => {\n      if (!seen.has(child.name) && usedNodes.has(child.name) &&\n          child.inputs.every(input => seen.has(input.name))) {\n        frontier.push(child);\n      }\n    });\n  }\n  return orderedNodes;\n}\n\nconst CONTROL_FLOW_OPS = ['Switch', 'Merge', 'Enter', 'Exit', 'NextIteration'];\nconst DYNAMIC_SHAPE_OPS = [\n  'NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'NonMaxSuppressionV5', 'Where'\n];\n\nexport function isControlFlow(node: Node) {\n  return CONTROL_FLOW_OPS.indexOf(node.op) >= 0;\n}\n\nexport function isDynamicShape(node: Node) {\n  return DYNAMIC_SHAPE_OPS.indexOf(node.op) >= 0;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NamedTensorMap, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {ISignatureDef} from '../data/compiled_api';\nimport {NamedTensorsMap, TensorArrayMap, TensorInfo} from '../data/types';\nimport {getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContenxt, parseNodeName} from '../operations/executors/utils';\nimport {executeOp} from '../operations/operation_executor';\nimport {Graph, Node} from '../operations/types';\n\nimport {ExecutionContext, ExecutionContextInfo} from './execution_context';\nimport {getExecutionSubgraph, getNodesInTopologicalOrder, isControlFlow} from './model_analysis';\n\ninterface NodeWithContexts {\n  contexts: ExecutionContextInfo[];\n  node: Node;\n}\n\nexport class GraphExecutor {\n  private compiledMap: Map<string, Node[]> = new Map();\n  private _weightMap: NamedTensorsMap = {};\n  private weightIds: number[];\n  private _signature: ISignatureDef;\n  private _inputs: Node[];\n  private _outputs: Node[];\n  private SEPERATOR = ',';\n  get weightMap(): NamedTensorsMap {\n    return this._weightMap;\n  }\n  set weightMap(weightMap: NamedTensorsMap) {\n    const weightIds = Object.keys(weightMap).map(\n        key => weightMap[key].map(tensor => tensor.id));\n    this.weightIds = [].concat(...weightIds);\n    this._weightMap = weightMap;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this._inputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get outputs(): TensorInfo[] {\n    return this._outputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get inputNodes(): string[] {\n    return this._inputs.map(node => node.signatureKey || node.name);\n  }\n\n  get outputNodes(): string[] {\n    return this._outputs.map(node => node.signatureKey || node.name);\n  }\n\n  constructor(private graph: Graph) {\n    this._outputs = graph.outputs;\n    this._inputs = graph.inputs;\n    this._signature = graph.signature;\n  }\n\n  private getCompilationKey(inputs: Node[], outputs: Node[]): string {\n    const sortedInputs = inputs.map(node => node.name).sort();\n    const sortedOutputs = outputs.map(node => node.name).sort();\n    return sortedInputs.join(this.SEPERATOR) + '--' +\n        sortedOutputs.join(this.SEPERATOR);\n  }\n\n  /**\n   * Compiles the inference graph and returns the minimal set of nodes that are\n   * required for execution, in the correct execution order.\n   */\n  private compile(inputs: NamedTensorMap, outputs: Node[]): Node[] {\n    const executionInfo = getExecutionSubgraph(inputs, outputs, this.weightMap);\n    const {missingInputs, dynamicNode, syncInputs} = executionInfo;\n    if (dynamicNode != null) {\n      throw new Error(\n          `This execution contains the node '${dynamicNode.name}', which has ` +\n          `the dynamic op '${dynamicNode.op}'. Please use ` +\n          `model.executeAsync() instead. Alternatively, to avoid the ` +\n          `dynamic ops, specify the inputs [${syncInputs}]`);\n    }\n\n    if (missingInputs.length > 0) {\n      const outNames = outputs.map(n => n.name);\n      const inNames = Object.keys(inputs);\n      throw new Error(\n          `Cannot compute the outputs [${outNames}] from the provided inputs ` +\n          `[${inNames}]. Missing the following inputs: [${missingInputs}]`);\n    }\n\n    return getNodesInTopologicalOrder(\n        this.graph, this.weightMap, executionInfo);\n  }\n\n  /**\n   * Executes the inference for given input tensors.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  execute(inputs: NamedTensorMap, outputs: string[]): Tensor[] {\n    inputs = this.mapInputs(inputs);\n    const names = Object.keys(inputs).sort();\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    outputs = this.mapOutputs(outputs);\n    this.checkOutputs(outputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodes =\n        outputs.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const compilationKey = this.getCompilationKey(inputNodes, outputNodes);\n    // Do nothing if the compiled graph cache contains the input.\n    let orderedNodes = this.compiledMap.get(compilationKey);\n    if (orderedNodes == null) {\n      orderedNodes = this.compile(inputs, outputNodes);\n      this.compiledMap.set(compilationKey, orderedNodes);\n    }\n    const tensorArrayMap: TensorArrayMap = {};\n    return tidy(() => {\n      const context = new ExecutionContext(this._weightMap, tensorArrayMap);\n      const tensorsMap: NamedTensorsMap = {...this.weightMap};\n      Object.keys(inputs).forEach(name => {\n        const [nodeName, index] = parseNodeName(name);\n        const tensors: Tensor[] = [];\n        tensors[index] = inputs[name];\n        tensorsMap[nodeName] = tensors;\n      });\n      const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n      const intermediateTensorConsumerCount: {[key: number]: number} = {};\n      for (let i = 0; i < orderedNodes.length; i++) {\n        const node = orderedNodes[i];\n        if (!tensorsMap[node.name]) {\n          const tensors = executeOp(node, tensorsMap, context) as Tensor[];\n          if (tensors instanceof Promise) {\n            throw new Error(\n                `The execution of the op '${node.op}' returned a promise. ` +\n                `Please use model.executeAsync() instead.`);\n          }\n          tensorsMap[node.name] = tensors;\n          this.checkTensorForDisposal(\n              node.name, node, tensorsMap, context, tensorsToKeep, outputs,\n              intermediateTensorConsumerCount);\n        }\n      }\n      return outputs.map(name => getTensor(name, tensorsMap, context));\n    });\n  }\n\n  private getFrozenTensorIds(tensorMap: NamedTensorsMap): Set<number> {\n    const ids = [].concat.apply(\n        [],\n        Object.keys(tensorMap)\n            .map(key => tensorMap[key])\n            .map(tensors => tensors.map(tensor => tensor.id)));\n    return new Set(ids);\n  }\n  private checkTensorForDisposal(\n      nodeName: string, node: Node, tensorMap: NamedTensorsMap,\n      context: ExecutionContext, tensorsToKeep: Set<number>,\n      outputNames: string[],\n      intermediateTensorConsumerCount: {[key: string]: number}) {\n    // Skip output nodes and any control flow nodes, since its dependency is\n    // tricky to track correctly.\n    if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {\n      return;\n    }\n\n    tensorMap[nodeName].forEach(tensor => {\n      if (tensor != null) {\n        intermediateTensorConsumerCount[tensor.id] =\n            (intermediateTensorConsumerCount[tensor.id] || 0) +\n            node.children.length;\n      }\n    });\n    node.inputs.forEach(input => {\n      // Skip any control flow nodes, since its dependency is tricky to track\n      // correctly.\n      if (input.category !== 'control') {\n        const tensors =\n            getTensorsForCurrentContenxt(input.name, tensorMap, context);\n        if (tensors != null) {\n          tensors.forEach(tensor => {\n            if (tensor && !tensorsToKeep.has(tensor.id)) {\n              const count = intermediateTensorConsumerCount[tensor.id];\n              if (count === 1) {\n                tensor.dispose();\n                delete intermediateTensorConsumerCount[tensor.id];\n              } else if (count != null) {\n                // only intermediate nodes has count set, inputs and weights are\n                // not.\n                intermediateTensorConsumerCount[tensor.id]--;\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  async executeAsync(inputs: NamedTensorMap, outputs: string[]):\n      Promise<Tensor[]> {\n    inputs = this.mapInputs(inputs);\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    outputs = this.mapOutputs(outputs);\n    this.checkOutputs(outputs);\n    const tensorArrayMap: TensorArrayMap = {};\n    const context = new ExecutionContext(this._weightMap, tensorArrayMap);\n    // Graph with control flow op requires runtime evaluation of the execution\n    // order, while without control flow the execution order is pre-determined\n    // in the compile method.\n    const tensorMap =\n        await this.executeWithControlFlow(inputs, context, outputs);\n    const results = outputs.map(name => getTensor(name, tensorMap, context));\n\n    // dispose all the intermediate tensors\n    const outputIds = new Set<number>(results.map(t => t.id));\n    const inputIds =\n        new Set<number>(Object.keys(inputs).map(name => inputs[name].id));\n    Object.keys(tensorMap).forEach(key => {\n      const tensorArray = tensorMap[key];\n      tensorArray.forEach(tensor => {\n        if (tensor && !tensor.isDisposed && !outputIds.has(tensor.id) &&\n            !inputIds.has(tensor.id) &&\n            this.weightIds.indexOf(tensor.id) === -1) {\n          tensor.dispose();\n        }\n      });\n    });\n    return results;\n  }\n\n  /**\n   * When there are control flow nodes in the graph, the graph execution use\n   * ExecutionContext to keep track of the frames and loop iterators.\n   * @param inputs placeholder tensors for the graph.\n   * @param context the execution context object for current execution.\n   */\n  private async executeWithControlFlow(\n      inputs: NamedTensorMap, context: ExecutionContext,\n      outputNames: string[]): Promise<NamedTensorsMap> {\n    const names = Object.keys(inputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodes =\n        outputNames.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const {usedNodes, missingInputs, dynamicNode, syncInputs} =\n        getExecutionSubgraph(inputs, outputNodes, this.weightMap);\n\n    const stack: NodeWithContexts[] =\n        [...inputNodes, ...this.graph.weights].map(node => {\n          return {node, contexts: context.currentContext};\n        });\n    const tensorsMap: NamedTensorsMap = {...this.weightMap};\n    Object.keys(inputs).forEach(name => {\n      const [nodeName, index] = parseNodeName(name);\n      const tensors: Tensor[] = [];\n      tensors[index] = inputs[name];\n      tensorsMap[nodeName] = tensors;\n    });\n    const intermediateTensorConsumerCount: {[key: number]: number} = {};\n    const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n    const added: {[key: string]: boolean} = {};\n    while (stack.length > 0) {\n      const promises = this.processStack(\n          inputNodes, stack, context, tensorsMap, added, tensorsToKeep,\n          outputNames, intermediateTensorConsumerCount, usedNodes);\n      await Promise.all(promises);\n    }\n    if (dynamicNode == null) {\n      console.warn(\n          `This model execution did not contain any nodes with control flow ` +\n          `or dynamic output shapes. You can use model.execute() instead.`);\n    }\n    const missingOutputs =\n        outputNodes\n            .filter(\n                node => !isControlFlow(node) &&\n                    !getTensor(node.name, tensorsMap, context))\n            .map(node => node.name);\n    if (missingOutputs.length > 0) {\n      let alternativeMsg = '';\n      if (dynamicNode != null) {\n        alternativeMsg =\n            `Alternatively, to avoid the dynamic ops, use model.execute() ` +\n            `and specify the inputs [${syncInputs}]`;\n      }\n      throw new Error(\n          `Cannot compute the outputs [${missingOutputs}] from the provided ` +\n          `inputs [${names}]. Consider providing the following inputs: ` +\n          `[${missingInputs}]. ${alternativeMsg}`);\n    }\n    return tensorsMap;\n  }\n\n  private processStack(\n      inputNodes: Node[], stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      tensorsToKeep: Set<number>, outputNames: string[],\n      intermediateTensorConsumerCount: {[key: number]: number},\n      usedNodes: Set<string>) {\n    const promises: Array<Promise<Tensor[]>> = [];\n    while (stack.length > 0) {\n      const item = stack.pop();\n      context.currentContext = item.contexts;\n      let nodeName = '';\n      // The tensor of the Enter op with isConstant set should be set\n      // in the parent scope, so it will be available as constant for the\n      // whole loop.\n      if (item.node.op === 'Enter' &&\n          getParamValue('isConstant', item.node, tensorMap, context)) {\n        [nodeName] = getNodeNameAndIndex(item.node.name, context);\n      }\n\n      // only process nodes that are not provided as input nodes.\n      if (inputNodes.indexOf(item.node) === -1) {\n        const tensors = executeOp(item.node, tensorMap, context);\n        if (!nodeName) {\n          [nodeName] = getNodeNameAndIndex(item.node.name, context);\n        }\n        const currentContext = context.currentContext;\n        if (tensors instanceof Promise) {\n          promises.push(tensors.then(t => {\n            tensorMap[nodeName] = t;\n            context.currentContext = currentContext;\n            this.checkTensorForDisposal(\n                nodeName, item.node, tensorMap, context, tensorsToKeep,\n                outputNames, intermediateTensorConsumerCount);\n            this.processChildNodes(\n                item.node, stack, context, tensorMap, added, usedNodes);\n            return t;\n          }));\n        } else {\n          tensorMap[nodeName] = tensors;\n          this.checkTensorForDisposal(\n              nodeName, item.node, tensorMap, context, tensorsToKeep,\n              outputNames, intermediateTensorConsumerCount);\n          this.processChildNodes(\n              item.node, stack, context, tensorMap, added, usedNodes);\n        }\n      } else {\n        this.processChildNodes(\n            item.node, stack, context, tensorMap, added, usedNodes);\n      }\n    }\n    return promises;\n  }\n\n  private processChildNodes(\n      node: Node, stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      usedNodes: Set<string>) {\n    node.children.forEach((childNode) => {\n      const [nodeName, ] = getNodeNameAndIndex(childNode.name, context);\n      if (added[nodeName] || !usedNodes.has(childNode.name)) {\n        return;\n      }\n      // Merge op can be pushed if any of its inputs has value.\n      if (childNode.op === 'Merge') {\n        if (childNode.inputNames.some(name => {\n              return !!getTensor(name, tensorMap, context);\n            })) {\n          added[nodeName] = true;\n          stack.push({contexts: context.currentContext, node: childNode});\n        }\n      } else  // Otherwise all inputs must to have value.\n          if (childNode.inputNames.every(name => {\n                return !!getTensor(name, tensorMap, context);\n              })) {\n        added[nodeName] = true;\n        stack.push({contexts: context.currentContext, node: childNode});\n      }\n    });\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  dispose() {\n    Object.keys(this.weightMap)\n        .forEach(\n            key => this.weightMap[key].forEach(tensor => tensor.dispose()));\n  }\n\n  private checkInputShapeAndType(inputs: NamedTensorMap) {\n    Object.keys(inputs).forEach(name => {\n      const input = inputs[name];\n      const [nodeName, ] = parseNodeName(name);\n      const node = this.graph.nodes[nodeName];\n      if (node.attrParams['shape'] && node.attrParams['shape'].value) {\n        const shape = node.attrParams['shape'].value as number[];\n        const match = shape.length === input.shape.length &&\n            input.shape.every(\n                (dim, index) => shape[index] === -1 || shape[index] === dim);\n        util.assert(\n            match,\n            () => `The shape of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be [${shape}], but was ` +\n                `[${input.shape}]`);\n      }\n      if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {\n        util.assert(\n            input.dtype === node.attrParams['dtype'].value as string,\n            () => `The dtype of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be ` +\n                `${node.attrParams['dtype'].value}, but was ${input.dtype}`);\n      }\n    });\n  }\n\n  private mapInputs(inputs: NamedTensorMap) {\n    const result: NamedTensorMap = {};\n    for (const inputName in inputs) {\n      if (this._signature != null && this._signature.inputs != null &&\n          this._signature.inputs[inputName] != null) {\n        const tensor = this._signature.inputs[inputName];\n        result[tensor.name] = inputs[inputName];\n      } else {\n        result[inputName] = inputs[inputName];\n      }\n    }\n    return result;\n  }\n\n  private checkInputs(inputs: NamedTensorMap) {\n    const notInGraph = Object.keys(inputs).filter(name => {\n      const [nodeName] = parseNodeName(name);\n      return this.graph.nodes[nodeName] == null;\n    });\n    if (notInGraph.length > 0) {\n      throw new Error(\n          `The dict provided in model.execute(dict) has ` +\n          `keys: [${notInGraph}] that are not part of graph`);\n    }\n  }\n\n  private mapOutputs(outputs: string[]) {\n    return outputs.map(name => {\n      if (this._signature != null && this._signature.outputs != null &&\n          this._signature.outputs[name] != null) {\n        const tensor = this._signature.outputs[name];\n        return tensor.name;\n      }\n      return name;\n    }, {});\n  }\n  private checkOutputs(outputs: string[]): void {\n    outputs.forEach(name => {\n      const [normalizedName] = parseNodeName(name);\n      if (!this.graph.nodes[normalizedName]) {\n        throw new Error(`The output '${name}' is not found in the graph`);\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {InferenceModel, io, ModelPredictConfig, NamedTensorMap, Tensor} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\nimport {NamedTensorsMap, TensorInfo} from '../data/types';\nimport {OperationMapper} from '../operations/operation_mapper';\n\nimport {GraphExecutor} from './graph_executor';\n\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\n/**\n * A `tf.GraphModel` is a directed, acyclic graph of built from\n * SavedModel GraphDef and allows inference exeuction.\n *\n * A `tf.GraphModel` can only be created by loading from a model converted from\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\n * the command line converter tool and loaded via `tf.loadGraphModel`.\n */\n/** @doc {heading: 'Models', subheading: 'Classes'} */\nexport class GraphModel implements InferenceModel {\n  private executor: GraphExecutor;\n  private version = 'n/a';\n  private handler: io.IOHandler;\n  private artifacts: io.ModelArtifacts;\n  // Returns the version information for the tensorflow model GraphDef.\n  get modelVersion(): string {\n    return this.version;\n  }\n\n  get inputNodes(): string[] {\n    return this.executor.inputNodes;\n  }\n\n  get outputNodes(): string[] {\n    return this.executor.outputNodes;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this.executor.inputs;\n  }\n\n  get outputs(): TensorInfo[] {\n    return this.executor.outputs;\n  }\n\n  get weights(): NamedTensorsMap {\n    return this.executor.weightMap;\n  }\n\n  /**\n   * @param modelUrl url for the model, or an `io.IOHandler`.\n   * @param weightManifestUrl url for the weight file generated by\n   * scripts/convert.py script.\n   * @param requestOption options for Request, which allows to send credentials\n   * and custom headers.\n   * @param onProgress Optional, progress callback function, fired periodically\n   * before the load is completed.\n   */\n  constructor(\n      private modelUrl: string|io.IOHandler,\n      private loadOptions: io.LoadOptions = {}) {\n    if (loadOptions == null) {\n      this.loadOptions = {};\n    }\n  }\n\n  private findIOHandler() {\n    const path = this.modelUrl;\n    if ((path as io.IOHandler).load != null) {\n      // Path is an IO Handler.\n      this.handler = path as io.IOHandler;\n    } else if (this.loadOptions.requestInit != null) {\n      this.handler = io.browserHTTPRequest(path as string, this.loadOptions);\n    } else {\n      const handlers =\n          io.getLoadHandlers(path as string, this.loadOptions.onProgress);\n      if (handlers.length === 0) {\n        // For backward compatibility: if no load handler can be found,\n        // assume it is a relative http path.\n        handlers.push(io.browserHTTPRequest(path as string, this.loadOptions));\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) load handlers for ` +\n            `URL '${[path]}'`);\n      }\n      this.handler = handlers[0];\n    }\n  }\n\n  /**\n   * Loads the model and weight files, construct the in memory weight map and\n   * compile the inference graph.\n   */\n  async load(): Promise<boolean> {\n    this.findIOHandler();\n    if (this.handler.load == null) {\n      throw new Error(\n          'Cannot proceed with model loading because the IOHandler provided ' +\n          'does not have the `load` method implemented.');\n    }\n    this.artifacts = await this.handler.load();\n    const graph = this.artifacts.modelTopology as tensorflow.IGraphDef;\n    let signature = {};\n    if (this.artifacts.userDefinedMetadata != null) {\n      signature =  // tslint:disable-next-line:no-any\n          (this.artifacts.userDefinedMetadata as any).signature as\n          tensorflow.ISignatureDef;\n    }\n\n    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n    const weightMap =\n        io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);\n    this.executor = new GraphExecutor(\n        OperationMapper.Instance.transformGraph(graph, signature));\n    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n    return true;\n  }\n\n  /**\n   * Save the configuration and/or weights of the GraphModel.\n   *\n   * An `IOHandler` is an object that has a `save` method of the proper\n   * signature defined. The `save` method manages the storing or\n   * transmission of serialized data (\"artifacts\") that represent the\n   * model's topology and weights onto or via a specific medium, such as\n   * file downloads, local storage, IndexedDB in the web browser and HTTP\n   * requests to a server. TensorFlow.js provides `IOHandler`\n   * implementations for a number of frequently used saving mediums, such as\n   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n   * for more details.\n   *\n   * This method also allows you to refer to certain types of `IOHandler`s\n   * as URL-like string shortcuts, such as 'localstorage://' and\n   * 'indexeddb://'.\n   *\n   * Example 1: Save `model`'s topology and weights to browser [local\n   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n   * then load it back.\n   *\n   * ```js\n   * const modelUrl =\n   *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n   * const model = await tf.loadGraphModel(modelUrl);\n   * const zeros = tf.zeros([1, 224, 224, 3]);\n   * model.predict(zeros).print();\n   *\n   * const saveResults = await model.save('localstorage://my-model-1');\n   *\n   * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * model.predict(zeros).print();\n   * ```\n   *\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n   * scheme-based string shortcut for `IOHandler`.\n   * @param config Options for saving the model.\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\n   * the saving, such as byte sizes of the saved artifacts for the model's\n   *   topology and weight values.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  async save(handlerOrURL: io.IOHandler|string, config?: io.SaveConfig):\n      Promise<io.SaveResult> {\n    if (typeof handlerOrURL === 'string') {\n      const handlers = io.getSaveHandlers(handlerOrURL);\n      if (handlers.length === 0) {\n        throw new Error(\n            `Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) save handlers for ` +\n            `URL '${handlerOrURL}'`);\n      }\n      handlerOrURL = handlers[0];\n    }\n    if (handlerOrURL.save == null) {\n      throw new Error(\n          'GraphModel.save() cannot proceed because the IOHandler ' +\n          'provided does not have the `save` attribute defined.');\n    }\n\n    return handlerOrURL.save(this.artifacts);\n  }\n\n  /**\n   * Execute the inference for the input tensors.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n   * inputs params should be in either `tf.Tensor`[] if the input order is\n   * fixed, or otherwise NamedTensorMap format.\n   *\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\n   * follow the\n   * order of inputNodes array. @see {@link GraphModel.inputNodes}\n   *\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\n   * input type. For example, given the graph\n   *    InputNode => Intermediate => OutputNode,\n   * you can execute the subgraph Intermediate => OutputNode by calling\n   *    model.execute('IntermediateNode' : tf.tensor(...));\n   *\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n   * state needs to be fed manually.\n   *\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size and\n   * output node names. Currently the batch size option is ignored for graph\n   * model.\n   *\n   * @returns Inference result tensors. The output would be single `tf.Tensor`\n   * if model has single output node, otherwise Tensor[] or NamedTensorMap[]\n   * will be returned for model with multiple outputs.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  predict(inputs: Tensor|Tensor[]|NamedTensorMap, config?: ModelPredictConfig):\n      Tensor|Tensor[]|NamedTensorMap {\n    return this.execute(inputs, this.outputNodes);\n  }\n\n  private normalizeInputs(inputs: Tensor|Tensor[]|\n                          NamedTensorMap): NamedTensorMap {\n    if (!(inputs instanceof Tensor) && !Array.isArray(inputs)) {\n      // The input is already a NamedTensorMap.\n      return inputs;\n    }\n    inputs = Array.isArray(inputs) ? inputs : [inputs];\n    if (inputs.length !== this.inputNodes.length) {\n      throw new Error(\n          'Input tensor count mismatch,' +\n          `the graph model has ${this.inputNodes.length} placeholders, ` +\n          `while there are ${inputs.length} input tensors.`);\n    }\n    return this.inputNodes.reduce((map, inputName, i) => {\n      map[inputName] = (inputs as Tensor[])[i];\n      return map;\n    }, {} as NamedTensorMap);\n  }\n\n  private normalizeOutputs(outputs: string|string[]): string[] {\n    outputs = outputs || this.outputNodes;\n    return !Array.isArray(outputs) ? [outputs] : outputs;\n  }\n\n  /**\n   * Executes inference for the model for given input tensors.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no\n   * outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   *\n   * @returns A single tensor if provided with a single output or no outputs\n   * are provided and there is only one default output, otherwise return a\n   * tensor array. The order of the tensor array is the same as the outputs\n   * if provided, otherwise the order of outputNodes attribute of the model.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  execute(inputs: Tensor|Tensor[]|NamedTensorMap, outputs?: string|string[]):\n      Tensor|Tensor[] {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = this.executor.execute(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n  /**\n   * Executes inference for the model for given input tensors in async\n   * fashion, use this method when your model contains control flow ops.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   *\n   * @returns A Promise of single tensor if provided with a single output or\n   * no outputs are provided and there is only one default output, otherwise\n   * return a tensor map.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  async executeAsync(\n      inputs: Tensor|Tensor[]|NamedTensorMap,\n      outputs?: string|string[]): Promise<Tensor|Tensor[]> {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = await this.executor.executeAsync(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n\n  private convertTensorMapToTensorsMap(map: NamedTensorMap): NamedTensorsMap {\n    return Object.keys(map).reduce((newMap: NamedTensorsMap, key) => {\n      newMap[key] = [map[key]];\n      return newMap;\n    }, {});\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  dispose() {\n    this.executor.dispose();\n  }\n}\n\n/**\n * Load a graph model given a URL to the model definition.\n *\n * Example of loading MobileNetV2 from a URL and making a prediction with a\n * zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n * const model = await tf.loadGraphModel(modelUrl);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with\n * a zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\n * @param options Options for the HTTP request, which allows to send credentials\n *    and custom headers.\n */\n/** @doc {heading: 'Models', subheading: 'Loading'} */\nexport async function loadGraphModel(\n    modelUrl: string|io.IOHandler,\n    options: io.LoadOptions = {}): Promise<GraphModel> {\n  if (modelUrl == null) {\n    throw new Error(\n        'modelUrl in loadGraphModel() cannot be null. Please provide a url ' +\n        'or an IOHandler that loads the model');\n  }\n  if (options == null) {\n    options = {};\n  }\n\n  if (options.fromTFHub) {\n    if ((modelUrl as io.IOHandler).load == null) {\n      if (!(modelUrl as string).endsWith('/')) {\n        modelUrl = (modelUrl as string) + '/';\n      }\n      modelUrl = `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n    }\n  }\n  const model = new GraphModel(modelUrl, options);\n  await model.load();\n  return model;\n}\n","// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n\n// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// \n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\n\n(function(global, module, define) {\n\nfunction Alea(seed) {\n  var me = this, mash = Mash();\n\n  me.next = function() {\n    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n    me.s0 = me.s1;\n    me.s1 = me.s2;\n    return me.s2 = t - (me.c = t | 0);\n  };\n\n  // Apply the seeding algorithm from Baagoe.\n  me.c = 1;\n  me.s0 = mash(' ');\n  me.s1 = mash(' ');\n  me.s2 = mash(' ');\n  me.s0 -= mash(seed);\n  if (me.s0 < 0) { me.s0 += 1; }\n  me.s1 -= mash(seed);\n  if (me.s1 < 0) { me.s1 += 1; }\n  me.s2 -= mash(seed);\n  if (me.s2 < 0) { me.s2 += 1; }\n  mash = null;\n}\n\nfunction copy(f, t) {\n  t.c = f.c;\n  t.s0 = f.s0;\n  t.s1 = f.s1;\n  t.s2 = f.s2;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new Alea(seed),\n      state = opts && opts.state,\n      prng = xg.next;\n  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }\n  prng.double = function() {\n    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n  };\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nfunction Mash() {\n  var n = 0xefc8249d;\n\n  var mash = function(data) {\n    data = data.toString();\n    for (var i = 0; i < data.length; i++) {\n      n += data.charCodeAt(i);\n      var h = 0.02519603282416938 * n;\n      n = h >>> 0;\n      h -= n;\n      h *= n;\n      n = h >>> 0;\n      h -= n;\n      n += h * 0x100000000; // 2^32\n    }\n    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n  };\n\n  return mash;\n}\n\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.alea = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n\n  // Set up generator function.\n  me.next = function() {\n    var t = me.x ^ (me.x << 11);\n    me.x = me.y;\n    me.y = me.z;\n    me.z = me.w;\n    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);\n  };\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor128 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var t = (me.x ^ (me.x >>> 2));\n    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;\n    return (me.d = (me.d + 362437 | 0)) +\n       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;\n  };\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n  me.v = 0;\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    if (k == strseed.length) {\n      me.d = me.x << 10 ^ me.x >>> 4;\n    }\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  t.v = f.v;\n  t.d = f.d;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorwow = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorshift7\" algorithm by\n// François Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    // Update xor generator.\n    var X = me.x, i = me.i, t, v, w;\n    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);\n    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);\n    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);\n    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);\n    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);\n    X[i] = v;\n    me.i = (i + 1) & 7;\n    return v;\n  };\n\n  function init(me, seed) {\n    var j, w, X = [];\n\n    if (seed === (seed | 0)) {\n      // Seed state array using a 32-bit integer.\n      w = X[0] = seed;\n    } else {\n      // Seed state using a string.\n      seed = '' + seed;\n      for (j = 0; j < seed.length; ++j) {\n        X[j & 7] = (X[j & 7] << 15) ^\n            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);\n      }\n    }\n    // Enforce an array length of 8, not all zeroes.\n    while (X.length < 8) X.push(0);\n    for (j = 0; j < 8 && X[j] === 0; ++j);\n    if (j == 8) w = X[7] = -1; else w = X[j];\n\n    me.x = X;\n    me.i = 0;\n\n    // Discard an initial 256 values.\n    for (j = 256; j > 0; --j) {\n      me.next();\n    }\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.x = f.x.slice();\n  t.i = f.i;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.x) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorshift7 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n","// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    var w = me.w,\n        X = me.X, i = me.i, t, v;\n    // Update Weyl generator.\n    me.w = w = (w + 0x61c88647) | 0;\n    // Update xor generator.\n    v = X[(i + 34) & 127];\n    t = X[i = ((i + 1) & 127)];\n    v ^= v << 13;\n    t ^= t << 17;\n    v ^= v >>> 15;\n    t ^= t >>> 12;\n    // Update Xor generator array state.\n    v = X[i] = v ^ t;\n    me.i = i;\n    // Result is the combination.\n    return (v + (w ^ (w >>> 16))) | 0;\n  };\n\n  function init(me, seed) {\n    var t, v, i, j, w, X = [], limit = 128;\n    if (seed === (seed | 0)) {\n      // Numeric seeds initialize v, which is used to generates X.\n      v = seed;\n      seed = null;\n    } else {\n      // String seeds are mixed into v and X one character at a time.\n      seed = seed + '\\0';\n      v = 0;\n      limit = Math.max(limit, seed.length);\n    }\n    // Initialize circular array and weyl value.\n    for (i = 0, j = -32; j < limit; ++j) {\n      // Put the unicode characters into the array, and shuffle them.\n      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n      // After 32 shuffles, take v as the starting w value.\n      if (j === 0) w = v;\n      v ^= v << 10;\n      v ^= v >>> 15;\n      v ^= v << 4;\n      v ^= v >>> 13;\n      if (j >= 0) {\n        w = (w + 0x61c88647) | 0;     // Weyl.\n        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.\n        i = (0 == t) ? i + 1 : 0;     // Count zeroes.\n      }\n    }\n    // We have detected all zeroes; make the key nonzero.\n    if (i >= 128) {\n      X[(seed && seed.length || 0) & 127] = -1;\n    }\n    // Run the generator 512 times to further mix the state before using it.\n    // Factoring this as a function slows the main generator, so it is just\n    // unrolled here.  The weyl generator is not advanced while warming up.\n    i = 127;\n    for (j = 4 * 128; j > 0; --j) {\n      v = X[(i + 34) & 127];\n      t = X[i = ((i + 1) & 127)];\n      v ^= v << 13;\n      t ^= t << 17;\n      v ^= v >>> 15;\n      t ^= t >>> 12;\n      X[i] = v ^ t;\n    }\n    // Storing state as object members is faster than using closure variables.\n    me.w = w;\n    me.X = X;\n    me.i = i;\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.i = f.i;\n  t.w = f.w;\n  t.X = f.X.slice();\n  return t;\n};\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.X) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor4096 = impl;\n}\n\n})(\n  this,                                     // window object or global\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n","// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var b = me.b, c = me.c, d = me.d, a = me.a;\n    b = (b << 25) ^ (b >>> 7) ^ c;\n    c = (c - d) | 0;\n    d = (d << 24) ^ (d >>> 8) ^ a;\n    a = (a - b) | 0;\n    me.b = b = (b << 20) ^ (b >>> 12) ^ c;\n    me.c = c = (c - d) | 0;\n    me.d = (d << 16) ^ (c >>> 16) ^ a;\n    return me.a = (a - b) | 0;\n  };\n\n  /* The following is non-inverted tyche, which has better internal\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\n  me.next = function() {\n    var a = me.a, b = me.b, c = me.c, d = me.d;\n    a = (me.a + me.b | 0) >>> 0;\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\n    c = me.c + d | 0;\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\n    me.a = a = a + b | 0;\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n    me.c = c = c + d | 0;\n    b = b ^ c;\n    return me.b = (b << 7 ^ b >>> 25);\n  }\n  */\n\n  me.a = 0;\n  me.b = 0;\n  me.c = 2654435769 | 0;\n  me.d = 1367130551;\n\n  if (seed === Math.floor(seed)) {\n    // Integer seed.\n    me.a = (seed / 0x100000000) | 0;\n    me.b = seed | 0;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 20; k++) {\n    me.b ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.a = f.a;\n  t.b = f.b;\n  t.c = f.c;\n  t.d = f.d;\n  return t;\n};\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.tychei = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","/*\nCopyright 2014 David Bau.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n(function (pool, math) {\n//\n// The following constants are related to IEEE 754 limits.\n//\nvar global = this,\n    width = 256,        // each RC4 output is 0 <= x < 256\n    chunks = 6,         // at least six RC4 outputs for each double\n    digits = 52,        // there are 52 significant digits in a double\n    rngname = 'random', // rngname: name for Math.random and Math.seedrandom\n    startdenom = math.pow(width, chunks),\n    significance = math.pow(2, digits),\n    overflow = significance * 2,\n    mask = width - 1,\n    nodecrypto;         // node.js crypto module, initialized at the bottom.\n\n//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nfunction seedrandom(seed, options, callback) {\n  var key = [];\n  options = (options == true) ? { entropy: true } : (options || {});\n\n  // Flatten the seed string or build one from local entropy if needed.\n  var shortseed = mixkey(flatten(\n    options.entropy ? [seed, tostring(pool)] :\n    (seed == null) ? autoseed() : seed, 3), key);\n\n  // Use the seed to initialize an ARC4 generator.\n  var arc4 = new ARC4(key);\n\n  // This function returns a random double in [0, 1) that contains\n  // randomness in every bit of the mantissa of the IEEE 754 value.\n  var prng = function() {\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\n        x = 0;                          //   and no 'extra last byte'.\n    while (n < significance) {          // Fill up all significant digits by\n      n = (n + x) * width;              //   shifting numerator and\n      d *= width;                       //   denominator and generating a\n      x = arc4.g(1);                    //   new least-significant-byte.\n    }\n    while (n >= overflow) {             // To avoid rounding up, before adding\n      n /= 2;                           //   last byte, shift everything\n      d /= 2;                           //   right using integer math until\n      x >>>= 1;                         //   we have exactly the desired bits.\n    }\n    return (n + x) / d;                 // Form the number within [0, 1).\n  };\n\n  prng.int32 = function() { return arc4.g(4) | 0; }\n  prng.quick = function() { return arc4.g(4) / 0x100000000; }\n  prng.double = prng;\n\n  // Mix the randomness into accumulated entropy.\n  mixkey(tostring(arc4.S), pool);\n\n  // Calling convention: what to return as a function of prng, seed, is_math.\n  return (options.pass || callback ||\n      function(prng, seed, is_math_call, state) {\n        if (state) {\n          // Load the arc4 state from the given state if it has an S array.\n          if (state.S) { copy(state, arc4); }\n          // Only provide the .state method if requested via options.state.\n          prng.state = function() { return copy(arc4, {}); }\n        }\n\n        // If called as a method of Math (Math.seedrandom()), mutate\n        // Math.random because that is how seedrandom.js has worked since v1.0.\n        if (is_math_call) { math[rngname] = prng; return seed; }\n\n        // Otherwise, it is a newer calling convention, so return the\n        // prng directly.\n        else return prng;\n      })(\n  prng,\n  shortseed,\n  'global' in options ? options.global : (this == math),\n  options.state);\n}\nmath['seed' + rngname] = seedrandom;\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\nfunction ARC4(key) {\n  var t, keylen = key.length,\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n\n  // The empty key [] is treated as [0].\n  if (!keylen) { key = [keylen++]; }\n\n  // Set up S using the standard key scheduling algorithm.\n  while (i < width) {\n    s[i] = i++;\n  }\n  for (i = 0; i < width; i++) {\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\n    s[j] = t;\n  }\n\n  // The \"g\" method returns the next (count) outputs as one number.\n  (me.g = function(count) {\n    // Using instance members instead of closure state nearly doubles speed.\n    var t, r = 0,\n        i = me.i, j = me.j, s = me.S;\n    while (count--) {\n      t = s[i = mask & (i + 1)];\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\n    }\n    me.i = i; me.j = j;\n    return r;\n    // For robust unpredictability, the function call below automatically\n    // discards an initial batch of values.  This is called RC4-drop[256].\n    // See http://google.com/search?q=rsa+fluhrer+response&btnI\n  })(width);\n}\n\n//\n// copy()\n// Copies internal state of ARC4 to or from a plain object.\n//\nfunction copy(f, t) {\n  t.i = f.i;\n  t.j = f.j;\n  t.S = f.S.slice();\n  return t;\n};\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\nfunction flatten(obj, depth) {\n  var result = [], typ = (typeof obj), prop;\n  if (depth && typ == 'object') {\n    for (prop in obj) {\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\n    }\n  }\n  return (result.length ? result : typ == 'string' ? obj : obj + '\\0');\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\nfunction mixkey(seed, key) {\n  var stringseed = seed + '', smear, j = 0;\n  while (j < stringseed.length) {\n    key[mask & j] =\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\n  }\n  return tostring(key);\n}\n\n//\n// autoseed()\n// Returns an object for autoseeding, using window.crypto and Node crypto\n// module if available.\n//\nfunction autoseed() {\n  try {\n    var out;\n    if (nodecrypto && (out = nodecrypto.randomBytes)) {\n      // The use of 'out' to remember randomBytes makes tight minified code.\n      out = out(width);\n    } else {\n      out = new Uint8Array(width);\n      (global.crypto || global.msCrypto).getRandomValues(out);\n    }\n    return tostring(out);\n  } catch (e) {\n    var browser = global.navigator,\n        plugins = browser && browser.plugins;\n    return [+new Date, global, plugins, global.screen, tostring(pool)];\n  }\n}\n\n//\n// tostring()\n// Converts an array of charcodes to a string\n//\nfunction tostring(a) {\n  return String.fromCharCode.apply(0, a);\n}\n\n//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to interfere with deterministic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(math.random(), pool);\n\n//\n// Nodejs and AMD support: export the implementation as a module using\n// either convention.\n//\nif ((typeof module) == 'object' && module.exports) {\n  module.exports = seedrandom;\n  // When in node.js, try using crypto package for autoseeding.\n  try {\n    nodecrypto = require('crypto');\n  } catch (ex) {}\n} else if ((typeof define) == 'function' && define.amd) {\n  define(function() { return seedrandom; });\n}\n\n// End anonymous scope, and pass initial values.\n})(\n  [],     // pool: entropy pool starts empty\n  Math    // math: package containing random, pow, and seedrandom\n);\n","// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\nvar alea = require('./lib/alea');\n\n// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\nvar xor128 = require('./lib/xor128');\n\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\nvar xorwow = require('./lib/xorwow');\n\n// xorshift7, by François Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\nvar xorshift7 = require('./lib/xorshift7');\n\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\nvar xor4096 = require('./lib/xor4096');\n\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\nvar tychei = require('./lib/tychei');\n\n// The original ARC4-based prng included in this library.\n// Period: ~2^1600\nvar sr = require('./seedrandom');\n\nsr.alea = alea;\nsr.xor128 = xor128;\nsr.xorwow = xorwow;\nsr.xorshift7 = xorshift7;\nsr.xor4096 = xor4096;\nsr.tychei = tychei;\n\nmodule.exports = sr;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\n\n// tslint:disable:no-any\n\n/**\n * A return value for a mapping function that can be applied via deepMap.\n *\n * If recurse is true, the value should be empty, and iteration will continue\n * into the object or array.\n */\nexport type DeepMapResult = {\n  value: any,\n  recurse: boolean\n};\n\n/**\n * Apply a mapping function to a nested structure in a recursive manner.\n *\n * The result of the mapping is an object with the same nested structure (i.e.,\n * of arrays and dicts) as the input, except that some subtrees are replaced,\n * according to the results of the mapping function.\n *\n * Mappings are memoized.  Thus, if the nested structure contains the same\n * object in multiple positions, the output will contain the same mapped object\n * in those positions.  Cycles are not supported, however.\n *\n * @param input: The object to which to apply the mapping function.\n * @param mapFn: A function that expects a single node of the object tree, and\n *   returns a `DeepMapResult`.  The `DeepMapResult` either provides a\n *   replacement value for that node (i.e., replacing the subtree), or indicates\n *   that the node should be processed recursively.\n */\nexport function deepMap(input: any, mapFn: (x: any) => DeepMapResult): any|\n    any[] {\n  return deepMapInternal(input, mapFn);\n}\n\n/**\n * @param seen: A Map of known object mappings (i.e., memoized results of\n *   `mapFn()`)\n * @param containedIn: An set containing objects on the reference path currently\n *   being processed (used to detect cycles).\n */\nfunction deepMapInternal(\n    input: any, mapFn: (x: any) => DeepMapResult,\n    seen: Map<any, any> = new Map(), containedIn: Set<{}> = new Set()): any|\n    any[] {\n  if (input == null) {\n    return null;\n  }\n  if (containedIn.has(input)) {\n    throw new Error('Circular references are not supported.');\n  }\n  if (seen.has(input)) {\n    return seen.get(input);\n  }\n  const result = mapFn(input);\n\n  if (result.recurse && result.value !== null) {\n    throw new Error(\n        'A deep map function may not return both a value and recurse=true.');\n  }\n\n  if (!result.recurse) {\n    seen.set(input, result.value);\n    return result.value;\n  } else if (isIterable(input)) {\n    // tslint:disable-next-line:no-any\n    const mappedIterable: any|any[] = Array.isArray(input) ? [] : {};\n    containedIn.add(input);\n    for (const k in input) {\n      const child = input[k];\n      const childResult = deepMapInternal(child, mapFn, seen, containedIn);\n      mappedIterable[k] = childResult;\n    }\n    containedIn.delete(input);\n    return mappedIterable;\n  } else {\n    throw new Error(`Can't recurse into non-iterable type: ${input}`);\n  }\n}\n\n// TODO(soergel, kangyizhang) Reconsider naming of deepZip() to avoid confusion\n// with zip()\n\n/**\n * Zip nested structures together in a recursive manner.\n *\n * This has the effect of transposing or pivoting data, e.g. converting it from\n * a row-major representation to a column-major representation.\n *\n * For example, `deepZip([{a: 1, b: 2}, {a: 3, b: 4}])` returns\n * `{a: [1, 3], b: [2, 4]}`.\n *\n * The inputs should all have the same nested structure (i.e., of arrays and\n * dicts).  The result is a single object with the same nested structure, where\n * the leaves are arrays collecting the values of the inputs at that location\n * (or, optionally, the result of a custom function applied to those arrays).\n *\n * @param inputs: An array of the objects to zip together.\n * @param zipFn: (optional) A function that expects an array of elements at a\n *   single node of the object tree, and returns a `DeepMapResult`.  The\n *   `DeepMapResult` either provides a result value for that node (i.e.,\n *   representing the subtree), or indicates that the node should be processed\n *   recursively.  The default zipFn recurses as far as possible and places\n *   arrays at the leaves.\n */\nexport function deepZip(\n    inputs: any[], zipFn: (xs: any[]) => DeepMapResult = zipToList): any|any[] {\n  return deepZipInternal(inputs, zipFn);\n}\n\n/**\n * @param containedIn: An set containing objects on the reference path currently\n *   being processed (used to detect cycles).\n */\nfunction deepZipInternal(\n    inputs: any[], zipFn: (xs: any[]) => DeepMapResult,\n    containedIn: Set<{}> = new Set()): any|any[] {\n  // The recursion follows the structure of input 0; it's assumed that all the\n  // other inputs have the same structure.\n  const input = inputs[0];\n  if (containedIn.has(input)) {\n    throw new Error('Circular references are not supported.');\n  }\n  const result = zipFn(inputs);\n\n  if (result.recurse && result.value !== null) {\n    throw new Error(\n        'A deep zip function may not return both a value and recurse=true.');\n  }\n\n  if (!result.recurse) {\n    return result.value;\n  } else if (isIterable(input)) {\n    // tslint:disable-next-line:no-any\n    const mappedIterable: any|any[] = Array.isArray(input) ? [] : {};\n    containedIn.add(input);\n    for (const k in input) {\n      const children = inputs.map(x => x[k]);\n      const childResult = deepZipInternal(children, zipFn, containedIn);\n      mappedIterable[k] = childResult;\n    }\n    containedIn.delete(input);\n    return mappedIterable;\n  } else {\n    throw new Error(`Can't recurse into non-iterable type: ${input}`);\n  }\n}\n\n// tslint:disable-next-line:no-any\nexport function zipToList(x: any[]): DeepMapResult {\n  if (x === null) {\n    return null;\n  }\n  // TODO(soergel): validate array type?\n\n  if (isIterable(x[0])) {\n    return {value: null, recurse: true};\n  } else {\n    return {value: x, recurse: false};\n  }\n}\n\n/**\n * A return value for an async map function for use with deepMapAndAwaitAll.\n *\n * If recurse is true, the value should be empty, and iteration will continue\n * into the object or array.\n */\nexport type DeepMapAsyncResult = {\n  value: Promise<any>,\n  recurse: boolean\n};\n\n/**\n * Apply an async mapping function to a nested structure in a recursive manner.\n *\n * This first creates a nested structure of Promises, and then awaits all of\n * those, resulting in a single Promise for a resolved nested structure.\n *\n * The result of the mapping is an object with the same nested structure (i.e.,\n * of arrays and dicts) as the input, except that some subtrees are replaced,\n * according to the results of the mapping function.\n *\n * Mappings are memoized.  Thus, if the nested structure contains the same\n * object in multiple positions, the output will contain the same mapped object\n * in those positions.  Cycles are not supported, however.\n *\n * @param input: The object to which to apply the mapping function.\n * @param mapFn: A function that expects a single node of the object tree, and\n *   returns a `DeepMapAsyncResult`.  The `DeepMapAsyncResult` either provides\n *   a `Promise` for a replacement value for that node (i.e., replacing the\n *   subtree), or indicates that the node should be processed recursively.  Note\n *   that the decision whether or not to recurse must be made immediately; only\n *   the mapped value may be promised.\n */\nexport async function deepMapAndAwaitAll(\n    input: any, mapFn: (x: any) => DeepMapAsyncResult): Promise<any|any[]> {\n  const seen: Map<any, Promise<any>> = new Map();\n\n  // First do a normal deepMap, collecting Promises in 'seen' as a side effect.\n  deepMapInternal(input, mapFn, seen);\n\n  // Replace the Promises in 'seen' in place.\n  // Note TypeScript provides no async map iteration, and regular map iteration\n  // is broken too, so sadly we have to do Array.from() to make it work.\n  // (There's no advantage to Promise.all(), and that would be tricky anyway.)\n  for (const key of Array.from(seen.keys())) {\n    const value = seen.get(key);\n    if (value instanceof Promise) {\n      const mappedValue = await value;\n      seen.set(key, mappedValue);\n    }\n  }\n\n  // Normal deepMap again, this time filling in the resolved values.\n  // It's unfortunate that we have to do two passes.\n  // TODO(soergel): test performance and think harder about a fast solution.\n  const result = deepMapInternal(input, mapFn, seen);\n  return result;\n}\n\n/**\n * Determine whether the argument is iterable.\n *\n * @returns true if the argument is an array or any non-Tensor object.\n */\n// tslint:disable-next-line:no-any\nexport function isIterable(obj: any): boolean {\n  return obj != null && (!ArrayBuffer.isView(obj)) &&\n      (Array.isArray(obj) ||\n       (typeof obj === 'object' && !(obj instanceof tf.Tensor)));\n}\n\n/**\n * Determine whether the argument can be converted to Tensor.\n *\n * Tensors, primitives, arrays, and TypedArrays all qualify; anything else does\n * not.\n *\n * @returns true if the argument can be converted to Tensor.\n */\n// tslint:disable-next-line:no-any\nexport function canTensorify(obj: any): boolean {\n  return obj == null || isPrimitive(obj) || Array.isArray(obj) ||\n      (typeof obj === 'object' && (obj instanceof tf.Tensor)) ||\n      tf.util.isTypedArray(obj);\n}\n\n/**\n * Returns true if the given `value` is a primitive type. Otherwise returns\n * false. This is equivalant to node util.isPrimitive\n */\nfunction isPrimitive(value: any): boolean {\n  return (\n      value === null ||\n      (typeof value !== 'object' && typeof value !== 'function'));\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {deepMap, DeepMapResult, isIterable} from './deep_map';\n\nexport function deepClone<T>(container: T): T {\n  return deepMap(container, cloneIfTensor);\n}\n\n// tslint:disable-next-line: no-any\nfunction cloneIfTensor(item: any): DeepMapResult {\n  if (item instanceof tf.Tensor) {\n    return ({value: item.clone(), recurse: false});\n  } else if (isIterable(item)) {\n    return {value: null, recurse: true};\n  } else {\n    return {value: item, recurse: false};\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\n/**\n * A ring buffer, providing O(1) FIFO, LIFO, and related operations.\n */\nexport class RingBuffer<T> {\n  // Note we store the indices in the range 0 <= index < 2*capacity.\n  // This allows us to distinguish the full from the empty case.\n  // See https://www.snellman.net/blog/archive/2016-12-13-ring-buffers/\n  protected begin = 0;  // inclusive\n  protected end = 0;    // exclusive\n  protected doubledCapacity: number;\n\n  protected data: T[];\n\n  /**\n   * Constructs a `RingBuffer`.\n   * @param capacity The number of items that the buffer can accomodate.\n   */\n  constructor(public capacity: number) {\n    if (capacity == null) {\n      throw new RangeError('Can\\'t create a ring buffer of unknown capacity.');\n    }\n    if (capacity < 1) {\n      throw new RangeError('Can\\'t create ring buffer of capacity < 1.');\n    }\n    this.data = new Array<T>(capacity);\n    this.doubledCapacity = 2 * capacity;\n  }\n\n  /**\n   * Map any index into the range 0 <= index < 2*capacity.\n   */\n  protected wrap(index: number) {\n    // don't trust % on negative numbers\n    while (index < 0) {\n      index += this.doubledCapacity;\n    }\n    return index % this.doubledCapacity;\n  }\n\n  protected get(index: number) {\n    if (index < 0) {\n      throw new RangeError('Can\\'t get item at a negative index.');\n    }\n    return this.data[index % this.capacity];\n  }\n\n  protected set(index: number, value: T) {\n    if (index < 0) {\n      throw new RangeError('Can\\'t set item at a negative index.');\n    }\n    this.data[index % this.capacity] = value;\n  }\n\n  /**\n   * Returns the current number of items in the buffer.\n   */\n  length(): number {\n    let length = this.end - this.begin;\n    if (length < 0) {\n      length = this.doubledCapacity + length;\n    }\n    return length;\n  }\n\n  /**\n   * Reports whether the buffer is full.\n   * @returns true if the number of items in the buffer equals its capacity, and\n   *   false otherwise.\n   */\n  isFull() {\n    return this.length() === this.capacity;\n  }\n\n  /**\n   * Reports whether the buffer is empty.\n   * @returns true if the number of items in the buffer equals zero, and\n   *   false otherwise.\n   */\n  isEmpty() {\n    return this.length() === 0;\n  }\n\n  /**\n   * Adds an item to the end of the buffer.\n   */\n  push(value: T) {\n    if (this.isFull()) {\n      throw new RangeError('Ring buffer is full.');\n    }\n    this.set(this.end, value);\n    this.end = this.wrap(this.end + 1);\n  }\n\n  /**\n   * Adds many items to the end of the buffer, in order.\n   */\n  pushAll(values: T[]) {\n    for (const value of values) {\n      this.push(value);\n    }\n  }\n\n  /**\n   * Removes and returns the last item in the buffer.\n   */\n  pop(): T {\n    if (this.isEmpty()) {\n      throw new RangeError('Ring buffer is empty.');\n    }\n    this.end = this.wrap(this.end - 1);\n    const result = this.get(this.end);\n    this.set(this.end, undefined);\n    return result;\n  }\n\n  /**\n   * Adds an item to the beginning of the buffer.\n   */\n  unshift(value: T) {\n    if (this.isFull()) {\n      throw new RangeError('Ring buffer is full.');\n    }\n    this.begin = this.wrap(this.begin - 1);\n    this.set(this.begin, value);\n  }\n\n  /**\n   * Removes and returns the first item in the buffer.\n   */\n  shift(): T {\n    if (this.isEmpty()) {\n      throw new RangeError('Ring buffer is empty.');\n    }\n    const result = this.get(this.begin);\n    this.set(this.begin, undefined);\n    this.begin = this.wrap(this.begin + 1);\n    return result;\n  }\n\n  /**\n   * Removes and returns a specific item in the buffer, and moves the last item\n   * to the vacated slot.  This is useful for implementing a shuffling stream.\n   * Note that this operation necessarily scrambles the original order.\n   *\n   * @param relativeIndex: the index of the item to remove, relative to the\n   *   first item in the buffer (e.g., hiding the ring nature of the underlying\n   *   storage).\n   */\n  shuffleExcise(relativeIndex: number): T {\n    if (this.isEmpty()) {\n      throw new RangeError('Ring buffer is empty.');\n    }\n    const index = this.wrap(this.begin + relativeIndex);\n    const result = this.get(index);\n    this.set(index, this.pop());\n    return result;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {RingBuffer} from './ring_buffer';\n\nexport class GrowingRingBuffer<T> extends RingBuffer<T> {\n  private static INITIAL_CAPACITY = 32;\n\n  /**\n   * Constructs a `GrowingRingBuffer`.\n   */\n  constructor() {\n    super(GrowingRingBuffer.INITIAL_CAPACITY);\n  }\n\n  isFull() {\n    return false;\n  }\n\n  push(value: T) {\n    if (super.isFull()) {\n      this.expand();\n    }\n    super.push(value);\n  }\n\n  unshift(value: T) {\n    if (super.isFull()) {\n      this.expand();\n    }\n    super.unshift(value);\n  }\n\n  /**\n   * Doubles the capacity of the buffer.\n   */\n  private expand() {\n    const newCapacity = this.capacity * 2;\n    const newData = new Array<T>(newCapacity);\n    const len = this.length();\n\n    // Rotate the buffer to start at index 0 again, since we can't just\n    // allocate more space at the end.\n    for (let i = 0; i < len; i++) {\n      newData[i] = this.get(this.wrap(this.begin + i));\n    }\n\n    this.data = newData;\n    this.capacity = newCapacity;\n    this.doubledCapacity = 2 * this.capacity;\n    this.begin = 0;\n    this.end = len;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\n\nimport {Container, DataElement} from '../types';\nimport {deepClone} from '../util/deep_clone';\nimport {deepMapAndAwaitAll, DeepMapAsyncResult, DeepMapResult, deepZip, zipToList} from '../util/deep_map';\nimport {GrowingRingBuffer} from '../util/growing_ring_buffer';\nimport {RingBuffer} from '../util/ring_buffer';\n\n/**\n * A nested structure of LazyIterators, used as the input to zip().\n */\nexport type IteratorContainer = Container<LazyIterator<DataElement>>;\n\n// Here we implement a simple asynchronous iterator.\n// This lets us avoid using either third-party stream libraries or\n// recent TypeScript language support requiring polyfills.\n\n/**\n * Create a `LazyIterator` from an array of items.\n */\nexport function iteratorFromItems<T>(items: T[]): LazyIterator<T> {\n  return new ArrayIterator(items);\n}\n\n/**\n * Create a `LazyIterator` of incrementing integers.\n */\nexport function iteratorFromIncrementing(start: number): LazyIterator<number> {\n  let i = start;\n  return iteratorFromFunction(() => ({value: i++, done: false}));\n}\n\n/**\n * Create a `LazyIterator` from a function.\n *\n * ```js\n * let i = -1;\n * const func = () =>\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\n * const iter = tf.data.iteratorFromFunction(func);\n * await iter.forEachAsync(e => console.log(e));\n * ```\n *\n * @param func A function that produces data on each call.\n */\nexport function iteratorFromFunction<T>(\n    func: () =>\n        IteratorResult<T>| Promise<IteratorResult<T>>): LazyIterator<T> {\n  return new FunctionCallIterator(func);\n}\n\n/**\n * Create a `LazyIterator` by concatenating underlying streams, which are\n * themselves provided as a stream.\n *\n * This can also be thought of as a \"stream flatten\" operation.\n *\n * @param baseIterators A stream of streams to be concatenated.\n * @param baseErrorHandler An optional function that can intercept `Error`s\n *   raised during a `next()` call on the base stream.  This function can decide\n *   whether the error should be propagated, whether the error should be\n *   ignored, or whether the base stream should be terminated.\n */\nexport function iteratorFromConcatenated<T>(\n    baseIterators: LazyIterator<LazyIterator<T>>,\n    baseErrorHandler?: (e: Error) => boolean): LazyIterator<T> {\n  return new ChainedIterator(baseIterators, baseErrorHandler);\n}\n\n/**\n * Create a `LazyIterator` by concatenating streams produced by calling a\n * stream-generating function a given number of times.\n *\n * Since a `LazyIterator` is read-once, it cannot be repeated, but this\n * function can be used to achieve a similar effect:\n *\n *   LazyIterator.ofConcatenatedFunction(() => new MyIterator(), 6);\n *\n * @param iteratorFunc: A function that produces a new stream on each call.\n * @param count: The number of times to call the function.\n * @param baseErrorHandler An optional function that can intercept `Error`s\n *   raised during a `next()` call on the base stream.  This function can decide\n *   whether the error should be propagated, whether the error should be\n *   ignored, or whether the base stream should be terminated.\n */\nexport function iteratorFromConcatenatedFunction<T>(\n    iteratorFunc: () => IteratorResult<LazyIterator<T>>, count: number,\n    baseErrorHandler?: (e: Error) => boolean): LazyIterator<T> {\n  return iteratorFromConcatenated(\n      iteratorFromFunction(iteratorFunc).take(count), baseErrorHandler);\n}\n\n/**\n * Create a `LazyIterator` by zipping together an array, dict, or nested\n * structure of `LazyIterator`s (and perhaps additional constants).\n *\n * The underlying streams must provide elements in a consistent order such\n * that they correspond.\n *\n * Typically, the underlying streams should have the same number of\n * elements. If they do not, the behavior is determined by the\n * `mismatchMode` argument.\n *\n * The nested structure of the `iterators` argument determines the\n * structure of elements in the resulting iterator.\n *\n * @param iterators: An array or object containing LazyIterators at the\n * leaves.\n * @param mismatchMode: Determines what to do when one underlying iterator\n * is exhausted before the others.  `ZipMismatchMode.FAIL` (the default)\n * causes an error to be thrown in this case.  `ZipMismatchMode.SHORTEST`\n * causes the zipped iterator to terminate with the furst underlying\n * streams, so elements remaining on the longer streams are ignored.\n * `ZipMismatchMode.LONGEST` causes the zipped stream to continue, filling\n * in nulls for the exhausted streams, until all streams are exhausted.\n */\nexport function iteratorFromZipped<O extends tf.TensorContainer>(\n    iterators: IteratorContainer,\n    mismatchMode: ZipMismatchMode = ZipMismatchMode.FAIL): LazyIterator<O> {\n  return new ZipIterator<O>(iterators, mismatchMode);\n}\n\n/**\n * An asynchronous iterator, providing lazy access to a potentially\n * unbounded stream of elements.\n *\n * Iterator can be obtained from a dataset:\n * `const iter = await dataset.iterator();`\n */\nexport abstract class LazyIterator<T> {\n  // This class implements AsyncIterator<T>, but we have not yet set the\n  // TypeScript --downlevelIteration flag to enable that.\n\n  abstract summary(): string;\n\n  /**\n   * Returns a `Promise` for the next element in the stream.\n   *\n   * When an item can be provided successfully, the return value is\n   * `{value:T, done:false}`.\n   *\n   * Calling next() on a closed stream returns `{value:null, done:true}`.\n   */\n  abstract async next(): Promise<IteratorResult<T>>;\n\n  /**\n   * Collect all remaining elements of a bounded stream into an array.\n   * Obviously this will succeed only for small streams that fit in memory.\n   * Useful for testing.\n   *\n   * @returns A Promise for an array of stream elements, which will resolve\n   *   when the stream is exhausted.\n   */\n  async toArray(): Promise<T[]> {\n    const result: T[] = [];\n    let x = await this.next();\n    while (!x.done) {\n      result.push(x.value);\n      x = await this.next();\n    }\n    return result;\n  }\n\n  /**\n   * Collect all elements of this dataset into an array with prefetching 100\n   * elements. This is useful for testing, because the prefetch changes the\n   * order in which the Promises are resolved along the processing pipeline.\n   * This may help expose bugs where results are dependent on the order of\n   * Promise resolution rather than on the logical order of the stream (i.e.,\n   * due to hidden mutable state).\n   *\n   * @returns A Promise for an array of stream elements, which will resolve\n   *   when the stream is exhausted.\n   */\n  async toArrayForTest(): Promise<T[]> {\n    const stream = this.prefetch(100);\n    const result: T[] = [];\n    let x = await stream.next();\n    while (!x.done) {\n      result.push(x.value);\n      x = await stream.next();\n    }\n    return result;\n  }\n\n  /**\n   * Draw items from the stream until it is exhausted.\n   *\n   * This can be useful when the stream has side effects but no output.  In\n   * that case, calling this function guarantees that the stream will be\n   * fully processed.\n   */\n  async resolveFully(): Promise<void> {\n    let x = await this.next();\n    while (!x.done) {\n      x = await this.next();\n    }\n  }\n\n  /**\n   * Draw items from the stream until it is exhausted, or a predicate fails.\n   *\n   * This can be useful when the stream has side effects but no output.  In\n   * that case, calling this function guarantees that the stream will be\n   * fully processed.\n   */\n  async resolveWhile(predicate: (r: T) => boolean): Promise<void> {\n    let x = await this.next();\n    let shouldContinue = predicate(x.value);\n    while ((!x.done) && shouldContinue) {\n      x = await this.next();\n      shouldContinue = predicate(x.value);\n    }\n  }\n\n  /**\n   * Handles errors thrown on this stream using a provided handler function.\n   *\n   * @param handler A function that handles any `Error` thrown during a `next()`\n   *   call and returns true if the stream should continue (dropping the failed\n   *   call) or false if the stream should quietly terminate.  If the handler\n   *   itself throws (or rethrows) an `Error`, that will be propagated.\n   *\n   * @returns A `LazyIterator` of elements passed through from upstream,\n   *   possibly filtering or terminating on upstream `next()` calls that\n   *   throw an `Error`.\n   */\n  handleErrors(handler: (error: Error) => boolean): LazyIterator<T> {\n    return new ErrorHandlingLazyIterator(this, handler);\n  }\n\n  // TODO(soergel): Implement reduce() etc.\n\n  /**\n   * Filters this stream according to `predicate`.\n   *\n   * @param predicate A function mapping a stream element to a boolean or a\n   * `Promise` for one.\n   *\n   * @returns A `LazyIterator` of elements for which the predicate was true.\n   */\n  filter(predicate: (value: T) => boolean): LazyIterator<T> {\n    return new FilterIterator(this, predicate);\n  }\n\n  /**\n   * Maps this stream through a 1-to-1 transform.\n   *\n   * @param transform A function mapping a stream element to a transformed\n   *   element.\n   *\n   * @returns A `LazyIterator` of transformed elements.\n   */\n  map<O>(transform: (value: T) => O): LazyIterator<O> {\n    return new MapIterator(this, transform);\n  }\n\n  /**\n   * Maps this stream through an async 1-to-1 transform.\n   *\n   * @param transform A function mapping a stream element to a `Promise` for a\n   *   transformed stream element.\n   *\n   * @returns A `LazyIterator` of transformed elements.\n   */\n  mapAsync<O>(transform: (value: T) => Promise<O>): LazyIterator<O> {\n    return new AsyncMapIterator(this, transform);\n  }\n\n  /**\n   * Maps this stream through a 1-to-1 transform, forcing serial execution.\n   *\n   * @param transform A function mapping a stream element to a transformed\n   *   element.\n   *\n   * @returns A `LazyIterator` of transformed elements.\n   */\n  serialMapAsync<O>(transform: (value: T) => Promise<O>): LazyIterator<O> {\n    return new AsyncMapIterator(this, transform).serial();\n  }\n\n  /**\n   * Maps this stream through a 1-to-many transform.\n   *\n   * @param transform A function mapping a stream element to an array of\n   *   transformed elements.\n   *\n   * @returns A `DataStream` of transformed elements.\n   */\n  flatmap<O>(transform: (value: T) => O[]): LazyIterator<O> {\n    return new FlatmapIterator(this, transform);\n  }\n\n  /**\n   * Apply a function to every element of the stream.\n   *\n   * @param f A function to apply to each stream element.\n   */\n  async forEachAsync(f: (value: T) => void): Promise<void> {\n    return this.map(f).resolveFully();\n  }\n\n  /**\n   * Apply a function to every element of the stream, forcing serial execution.\n   *\n   * @param f A function to apply to each stream element.  Should return 'true'\n   *   to indicate that the stream should continue, or 'false' to cause it to\n   *   terminate.\n   */\n  async serialForEach(f: (value: T) => Promise<boolean>): Promise<void> {\n    return this.serialMapAsync(f).resolveWhile(x => (x === true));\n  }\n\n  /**\n   * Groups elements into batches, represented as arrays of elements.\n   *\n   * We can think of the elements of this iterator as 'rows' (even if they are\n   * nested structures).  By the same token, consecutive values for a given\n   * key within the elements form a 'column'.  This matches the usual sense of\n   * 'row' and 'column' when processing tabular data (e.g., parsing a CSV).\n   *\n   * Thus, \"Row-major\" means that the resulting batch is simply a collection of\n   * rows: `[row1, row2, row3, ...]`.  This is contrast to the column-major\n   * form, which is needed for vectorized computation.\n   *\n   * @param batchSize The number of elements desired per batch.\n   * @param smallLastBatch Whether to emit the final batch when it has fewer\n   *   than batchSize elements. Default true.\n   * @returns A `LazyIterator` of batches of elements, represented as arrays\n   *   of the original element type.\n   */\n  rowMajorBatch(batchSize: number, smallLastBatch = true): LazyIterator<T[]> {\n    return new RowMajorBatchIterator(this, batchSize, smallLastBatch);\n  }\n\n  /**\n   * Groups elements into batches, represented in column-major form.\n   *\n   * We can think of the elements of this iterator as 'rows' (even if they are\n   * nested structures).  By the same token, consecutive values for a given\n   * key within the elements form a 'column'.  This matches the usual sense of\n   * 'row' and 'column' when processing tabular data (e.g., parsing a CSV).\n   *\n   * Thus, \"column-major\" means that the resulting batch is a (potentially\n   * nested) structure representing the columns.  Each column entry, then,\n   * contains a collection of the values found in that column for a range of\n   * input elements.  This representation allows for vectorized computation, in\n   * contrast to the row-major form.\n   *\n   * The inputs should all have the same nested structure (i.e., of arrays and\n   * dicts).  The result is a single object with the same nested structure,\n   * where the leaves are arrays collecting the values of the inputs at that\n   * location (or, optionally, the result of a custom function applied to those\n   * arrays).\n   *\n   * @param batchSize The number of elements desired per batch.\n   * @param smallLastBatch Whether to emit the final batch when it has fewer\n   *   than batchSize elements. Default true.\n   * @param zipFn: (optional) A function that expects an array of elements at a\n   *   single node of the object tree, and returns a `DeepMapResult`.  The\n   *   `DeepMapResult` either provides a result value for that node (i.e.,\n   *   representing the subtree), or indicates that the node should be processed\n   *   recursively.  The default zipFn recurses as far as possible and places\n   *   arrays at the leaves.\n   * @returns A `LazyIterator` of batches of elements, represented as an object\n   *   with collections at the leaves.\n   */\n  columnMajorBatch(\n      batchSize: number, smallLastBatch = true,\n      // tslint:disable-next-line:no-any\n      zipFn: (xs: any[]) => DeepMapResult = zipToList):\n      LazyIterator<tf.TensorContainer> {\n    // First collect the desired number of input elements as a row-major batch.\n    const rowBatches = this.rowMajorBatch(batchSize, smallLastBatch);\n    // Now 'rotate' or 'pivot' the data, collecting all values from each column\n    // in the batch (i.e., for each key within the elements) into an array.\n    return rowBatches.map(x => deepZip(x, zipFn));\n  }\n\n  /**\n   * Concatenate this `LazyIterator` with another.\n   *\n   * @param iterator A `LazyIterator` to be concatenated onto this one.\n   * @param baseErrorHandler An optional function that can intercept `Error`s\n   *   raised during a `next()` call on the base stream.  This function can\n   *   decide whether the error should be propagated, whether the error should\n   *   be ignored, or whether the base stream should be terminated.\n   * @returns A `LazyIterator`.\n   */\n  concatenate(\n      iterator: LazyIterator<T>,\n      baseErrorHandler?: (e: Error) => boolean): LazyIterator<T> {\n    return new ChainedIterator(\n        iteratorFromItems([this, iterator]), baseErrorHandler);\n  }\n\n  /**\n   * Limits this stream to return at most `count` items.\n   *\n   * @param count The maximum number of items to provide from the stream. If\n   * a negative or undefined value is given, the entire stream is returned\n   *   unaltered.\n   */\n  take(count: number): LazyIterator<T> {\n    if (count < 0 || count == null) {\n      return this;\n    }\n    return new TakeIterator(this, count);\n  }\n\n  /**\n   * Skips the first `count` items in this stream.\n   *\n   * @param count The number of items to skip.  If a negative or undefined\n   * value is given, the entire stream is returned unaltered.\n   */\n  skip(count: number): LazyIterator<T> {\n    if (count < 0 || count == null) {\n      return this;\n    }\n    return new SkipIterator(this, count);\n  }\n\n  /**\n   * Prefetch the first `bufferSize` items in this stream.\n   *\n   * Note this prefetches Promises, but makes no guarantees about when those\n   * Promises resolve.\n   *\n   * @param bufferSize: An integer specifying the number of elements to be\n   *   prefetched.\n   */\n  prefetch(bufferSize: number): LazyIterator<T> {\n    return new PrefetchIterator(this, bufferSize);\n  }\n\n  // TODO(soergel): deep sharded shuffle, where supported\n\n  /**\n   * Randomly shuffles the elements of this stream.\n   *\n   * @param bufferSize: An integer specifying the number of elements from\n   * this stream from which the new stream will sample.\n   * @param seed: (Optional.) An integer specifying the random seed that\n   * will be used to create the distribution.\n   */\n  shuffle(windowSize: number, seed?: string): LazyIterator<T> {\n    return new ShuffleIterator(this, windowSize, seed);\n  }\n\n  /**\n   * Force an iterator to execute serially: each next() call will await the\n   * prior one, so that they cannot execute concurrently.\n   */\n  serial(): LazyIterator<T> {\n    return new SerialIterator(this);\n  }\n}\n\n// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on LazyIterator.  Unfortunately they can't be placed in separate files,\n// due to resulting trouble with circular imports.\n// ============================================================================\n\n// Iterators that just extend LazyIterator directly\n// ============================================================================\n\nclass ArrayIterator<T> extends LazyIterator<T> {\n  private trav = 0;\n  constructor(protected items: T[]) {\n    super();\n  }\n\n  summary() {\n    return `Array of ${this.items.length} items`;\n  }\n\n  async next(): Promise<IteratorResult<T>> {\n    if (this.trav >= this.items.length) {\n      return {value: null, done: true};\n    }\n    const item = this.items[this.trav];\n    this.trav++;\n    return {value: deepClone(item), done: false};\n  }\n}\n\nclass FunctionCallIterator<T> extends LazyIterator<T> {\n  constructor(\n      protected nextFn: () => IteratorResult<T>| Promise<IteratorResult<T>>) {\n    super();\n  }\n\n  summary() {\n    return `Function call`;\n  }\n\n  async next(): Promise<IteratorResult<T>> {\n    try {\n      return this.nextFn();\n    } catch (e) {\n      // Modify the error message but leave the stack trace intact\n      e.message =\n          `Error thrown while iterating through a dataset: ${e.message}`;\n      throw e;\n    }\n  }\n}\n\nclass SerialIterator<T> extends LazyIterator<T> {\n  // Strict Promise execution order:\n  // a next() call may not even begin until the previous one completes.\n  private lastRead: Promise<IteratorResult<T>>;\n\n  constructor(protected upstream: LazyIterator<T>) {\n    super();\n    this.lastRead = Promise.resolve({value: null, done: false});\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Serial`;\n  }\n\n  async next(): Promise<IteratorResult<T>> {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n\n  private async serialNext(): Promise<IteratorResult<T>> {\n    return this.upstream.next();\n  }\n}\n\nclass SkipIterator<T> extends LazyIterator<T> {\n  // Strict Promise execution order:\n  // a next() call may not even begin until the previous one completes.\n  private lastRead: Promise<IteratorResult<T>>;\n\n  // Local state that should not be clobbered by out-of-order execution.\n  count = 0;\n\n  constructor(protected upstream: LazyIterator<T>, protected maxCount: number) {\n    super();\n    this.lastRead = Promise.resolve({value: null, done: false});\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Skip`;\n  }\n\n  async next(): Promise<IteratorResult<T>> {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n\n  private async serialNext(): Promise<IteratorResult<T>> {\n    // TODO(soergel): consider tradeoffs of reading in parallel, eg.\n    // collecting next() promises in an Array and then waiting for\n    // Promise.all() of those. Benefit: pseudo-parallel execution.  Drawback:\n    // maybe delayed GC.\n    while (this.count++ < this.maxCount) {\n      const skipped = await this.upstream.next();\n      // short-circuit if upstream is already empty\n      if (skipped.done) {\n        return skipped;\n      }\n      tf.dispose(skipped.value as {});\n    }\n    return this.upstream.next();\n  }\n}\n\nclass TakeIterator<T> extends LazyIterator<T> {\n  count = 0;\n  constructor(protected upstream: LazyIterator<T>, protected maxCount: number) {\n    super();\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Take`;\n  }\n\n  async next(): Promise<IteratorResult<T>> {\n    if (this.count++ >= this.maxCount) {\n      return {value: null, done: true};\n    }\n    return this.upstream.next();\n  }\n}\n\n// Note this batch just groups items into row-wise element arrays.\n// Rotating these to a column-wise representation happens only at the dataset\n// level.\nclass RowMajorBatchIterator<T> extends LazyIterator<T[]> {\n  // Strict Promise execution order:\n  // a next() call may not even begin until the previous one completes.\n  private lastRead: Promise<IteratorResult<T[]>>;\n\n  constructor(\n      protected upstream: LazyIterator<T>, protected batchSize: number,\n      protected enableSmallLastBatch = true) {\n    super();\n    this.lastRead = Promise.resolve({value: null, done: false});\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> RowMajorBatch`;\n  }\n\n  async next(): Promise<IteratorResult<T[]>> {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n\n  private async serialNext(): Promise<IteratorResult<T[]>> {\n    const batch: T[] = [];\n    while (batch.length < this.batchSize) {\n      const item = await this.upstream.next();\n      if (item.done) {\n        if (this.enableSmallLastBatch && batch.length > 0) {\n          return {value: batch, done: false};\n        }\n        return {value: null, done: true};\n      }\n      batch.push(item.value);\n    }\n    return {value: batch, done: false};\n  }\n}\n\nclass FilterIterator<T> extends LazyIterator<T> {\n  // Strict Promise execution order:\n  // a next() call may not even begin until the previous one completes.\n  private lastRead: Promise<IteratorResult<T>>;\n\n  constructor(\n      protected upstream: LazyIterator<T>,\n      protected predicate: (value: T) => boolean) {\n    super();\n    this.lastRead = Promise.resolve({value: null, done: false});\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Filter`;\n  }\n\n  async next(): Promise<IteratorResult<T>> {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n\n  private async serialNext(): Promise<IteratorResult<T>> {\n    while (true) {\n      const item = await this.upstream.next();\n      if (item.done || this.predicate(item.value)) {\n        return item;\n      }\n      tf.dispose(item.value as {});\n    }\n  }\n}\n\nclass MapIterator<I, O> extends LazyIterator<O> {\n  constructor(\n      protected upstream: LazyIterator<I>,\n      protected transform: (value: I) => O) {\n    super();\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Map`;\n  }\n\n  async next(): Promise<IteratorResult<O>> {\n    const item = await this.upstream.next();\n    if (item.done) {\n      return {value: null, done: true};\n    }\n    const inputTensors = tf.tensor_util.getTensorsInContainer(item.value as {});\n    // Careful: the transform may mutate the item in place.\n    // That's why we have to remember the input Tensors above, and then\n    // below dispose only those that were not passed through to the output.\n    // Note too that the transform function is responsible for tidying\n    // any intermediate Tensors.  Here we are concerned only about the\n    // inputs.\n    const mapped = this.transform(item.value);\n    const outputTensors = tf.tensor_util.getTensorsInContainer(mapped as {});\n\n    // TODO(soergel) faster intersection\n    // TODO(soergel) move to tf.disposeExcept(in, out)?\n    for (const t of inputTensors) {\n      if (!tf.tensor_util.isTensorInList(t, outputTensors)) {\n        t.dispose();\n      }\n    }\n    return {value: mapped, done: false};\n  }\n}\n\nclass ErrorHandlingLazyIterator<T> extends LazyIterator<T> {\n  count = 0;\n  constructor(\n      protected upstream: LazyIterator<T>,\n      protected handler: (error: Error) => boolean) {\n    super();\n    this.lastRead = Promise.resolve({value: null, done: false});\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> handleErrors`;\n  }\n\n  // Strict Promise execution order:\n  // a next() call may not even begin until the previous one completes.\n  private lastRead: Promise<IteratorResult<T>>;\n\n  async next(): Promise<IteratorResult<T>> {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n\n  async serialNext(): Promise<IteratorResult<T>> {\n    while (true) {\n      try {\n        return await this.upstream.next();\n      } catch (e) {\n        if (!this.handler(e)) {\n          return {value: null, done: true};\n        }\n        // If the handler returns true, loop and fetch the next upstream item.\n\n        // If the upstream iterator throws an endless stream of errors, and if\n        // the handler says to ignore them, then we loop forever here.  That is\n        // the correct behavior-- it's up to the handler to decide when to stop.\n      }\n    }\n  }\n}\n\nclass AsyncMapIterator<I, O> extends LazyIterator<O> {\n  constructor(\n      protected upstream: LazyIterator<I>,\n      protected transform: (value: I) => Promise<O>) {\n    super();\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> AsyncMap`;\n  }\n\n  async next(): Promise<IteratorResult<O>> {\n    const item = await this.upstream.next();\n    if (item.done) {\n      return {value: null, done: true};\n    }\n    const inputTensors = tf.tensor_util.getTensorsInContainer(item.value as {});\n    // Careful: the transform may mutate the item in place.\n    // That's why we have to remember the input Tensors above, and then\n    // below dispose only those that were not passed through to the output.\n    // Note too that the transform function is responsible for tidying\n    // any intermediate Tensors.  Here we are concerned only about the\n    // inputs.\n    const mapped = await this.transform(item.value);\n    const outputTensors = tf.tensor_util.getTensorsInContainer(mapped as {});\n\n    // TODO(soergel) faster intersection\n    // TODO(soergel) move to tf.disposeExcept(in, out)?\n    for (const t of inputTensors) {\n      if (!tf.tensor_util.isTensorInList(t, outputTensors)) {\n        t.dispose();\n      }\n    }\n    return {value: mapped, done: false};\n  }\n}\n\n// Iterators that maintain a queue of pending items\n// ============================================================================\n\n/**\n * A base class for transforming streams that operate by maintaining an\n * output queue of elements that are ready to return via next().  This is\n * commonly required when the transformation is 1-to-many:  A call to next()\n * may trigger a call to the underlying stream, which will produce many\n * mapped elements of this stream-- of which we need to return only one, so\n * we have to queue the rest.\n */\nexport abstract class OneToManyIterator<T> extends LazyIterator<T> {\n  // Strict Promise execution order:\n  // a next() call may not even begin until the previous one completes.\n  private lastRead: Promise<IteratorResult<T>>;\n\n  // Local state that should not be clobbered by out-of-order execution.\n  protected outputQueue: RingBuffer<T>;\n\n  constructor() {\n    super();\n    this.outputQueue = new GrowingRingBuffer<T>();\n    this.lastRead = Promise.resolve({value: null, done: false});\n  }\n\n  async next(): Promise<IteratorResult<T>> {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n\n  /**\n   * Read one or more chunks from upstream and process them, possibly\n   * reading or writing a carryover, and adding processed items to the\n   * output queue.  Note it's possible that no items are added to the queue\n   * on a given pump() call, even if the upstream stream is not closed\n   * (e.g., because items are filtered).\n   *\n   * @return `true` if any action was taken, i.e. fetching items from the\n   *   upstream source OR adding items to the output queue.  `false` if the\n   *   upstream source is exhausted AND nothing was added to the queue\n   * (i.e., any remaining carryover).\n   */\n  protected abstract async pump(): Promise<boolean>;\n\n  async serialNext(): Promise<IteratorResult<T>> {\n    // Fetch so that the queue contains at least one item if possible.\n    // If the upstream source is exhausted, AND there are no items left in\n    // the output queue, then this stream is also exhausted.\n    while (this.outputQueue.length() === 0) {\n      // TODO(soergel): consider parallel reads.\n      if (!await this.pump()) {\n        return {value: null, done: true};\n      }\n    }\n    return {value: this.outputQueue.shift(), done: false};\n  }\n}\nclass FlatmapIterator<I, O> extends OneToManyIterator<O> {\n  constructor(\n      protected upstream: LazyIterator<I>,\n      protected transform: (value: I) => O[]) {\n    super();\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Flatmap`;\n  }\n\n  async pump(): Promise<boolean> {\n    const item = await this.upstream.next();\n    if (item.done) {\n      return false;\n    }\n    const inputTensors = tf.tensor_util.getTensorsInContainer(item.value as {});\n    // Careful: the transform may mutate the item in place.\n    // that's why we have to remember the input Tensors above, and then\n    // below dispose only those that were not passed through to the output.\n    // Note too that the transform function is responsible for tidying any\n    // intermediate Tensors.  Here we are concerned only about the inputs.\n    const mappedArray = this.transform(item.value);\n    const outputTensors =\n        tf.tensor_util.getTensorsInContainer(mappedArray as {});\n    this.outputQueue.pushAll(mappedArray);\n\n    // TODO(soergel) faster intersection, and deduplicate outputTensors\n    // TODO(soergel) move to tf.disposeExcept(in, out)?\n    for (const t of inputTensors) {\n      if (!tf.tensor_util.isTensorInList(t, outputTensors)) {\n        t.dispose();\n      }\n    }\n\n    return true;\n  }\n}\n\n/**\n * Provides a `LazyIterator` that concatenates a stream of underlying\n * streams.\n *\n * Doing this in a concurrency-safe way requires some trickery.  In\n * particular, we want this stream to return the elements from the\n * underlying streams in the correct order according to when next() was\n * called, even if the resulting Promises resolve in a different order.\n */\nexport class ChainedIterator<T> extends LazyIterator<T> {\n  // Strict Promise execution order:\n  // a next() call may not even begin until the previous one completes.\n  private lastRead: Promise<IteratorResult<T>> = null;\n\n  // Local state that should not be clobbered by out-of-order execution.\n  private iterator: LazyIterator<T> = null;\n  private moreIterators: LazyIterator<LazyIterator<T>>;\n\n  constructor(\n      iterators: LazyIterator<LazyIterator<T>>,\n      private readonly baseErrorHandler?: (e: Error) => boolean) {\n    super();\n    this.moreIterators = iterators;\n  }\n\n  summary() {\n    const upstreamSummaries = 'TODO: fill in upstream of chained summaries';\n    return `${upstreamSummaries} -> Chained`;\n  }\n\n  async next(): Promise<IteratorResult<T>> {\n    this.lastRead = this.readFromChain(this.lastRead);\n    return this.lastRead;\n  }\n\n  private async readFromChain(lastRead: Promise<IteratorResult<T>>):\n      Promise<IteratorResult<T>> {\n    // Must await on the previous read since the previous read may have advanced\n    // the stream of streams, from which we need to read.\n    // This is unfortunate since we can't parallelize reads. Which means\n    // prefetching of chained streams is a no-op.\n    // One solution is to prefetch immediately upstream of this.\n    await lastRead;\n    if (this.iterator == null) {\n      const iteratorResult = await this.moreIterators.next();\n      if (iteratorResult.done) {\n        // No more streams to stream from.\n        return {value: null, done: true};\n      }\n      this.iterator = iteratorResult.value;\n      if (this.baseErrorHandler != null) {\n        this.iterator = this.iterator.handleErrors(this.baseErrorHandler);\n      }\n    }\n    const itemResult = await this.iterator.next();\n    if (itemResult.done) {\n      this.iterator = null;\n      return this.readFromChain(lastRead);\n    }\n    return itemResult;\n  }\n}\n\nexport enum ZipMismatchMode {\n  FAIL,      // require zipped streams to have the same length\n  SHORTEST,  // terminate zip when the first stream is exhausted\n  LONGEST    // use nulls for exhausted streams; use up the longest stream.\n}\n\n/**\n * Provides a `LazyIterator` that zips together an array, dict, or nested\n * structure of `LazyIterator`s (and perhaps additional constants).\n *\n * The underlying streams must provide elements in a consistent order such\n * that they correspond.\n *\n * Typically, the underlying streams should have the same number of\n * elements. If they do not, the behavior is determined by the\n * `mismatchMode` argument.\n *\n * The nested structure of the `iterators` argument determines the\n * structure of elements in the resulting iterator.\n *\n * Doing this in a concurrency-safe way requires some trickery.  In\n * particular, we want this stream to return the elements from the\n * underlying streams in the correct order according to when next() was\n * called, even if the resulting Promises resolve in a different order.\n *\n * @param iterators: An array or object containing LazyIterators at the\n * leaves.\n * @param mismatchMode: Determines what to do when one underlying iterator\n * is exhausted before the others.  `ZipMismatchMode.FAIL` (the default)\n * causes an error to be thrown in this case.  `ZipMismatchMode.SHORTEST`\n * causes the zipped iterator to terminate with the furst underlying\n * streams, so elements remaining on the longer streams are ignored.\n * `ZipMismatchMode.LONGEST` causes the zipped stream to continue, filling\n * in nulls for the exhausted streams, until all streams are exhausted.\n */\nclass ZipIterator<O extends tf.TensorContainer> extends LazyIterator<O> {\n  private count = 0;\n  private currentPromise: Promise<IteratorResult<O>> = null;\n\n  constructor(\n      protected readonly iterators: IteratorContainer,\n      protected readonly mismatchMode: ZipMismatchMode = ZipMismatchMode.FAIL) {\n    super();\n  }\n\n  summary() {\n    const upstreamSummaries = 'TODO: fill in upstream of zip summaries';\n    return `{${upstreamSummaries}} -> Zip`;\n  }\n\n  private async nextState(afterState: Promise<IteratorResult<O>>):\n      Promise<IteratorResult<O>> {\n    // This chaining ensures that the underlying next() are not even called\n    // before the previous ones have resolved.\n    await afterState;\n\n    // Collect underlying iterator \"done\" signals as a side effect in\n    // getNext()\n    let numIterators = 0;\n    let iteratorsDone = 0;\n\n    function getNext(container: IteratorContainer): DeepMapAsyncResult {\n      if (container instanceof LazyIterator) {\n        const result = container.next();\n        return {\n          value: result.then(x => {\n            numIterators++;\n            if (x.done) {\n              iteratorsDone++;\n            }\n            return x.value;\n          }),\n          recurse: false\n        };\n      } else {\n        return {value: null, recurse: true};\n      }\n    }\n\n    const mapped: O = await deepMapAndAwaitAll(this.iterators, getNext);\n\n    if (numIterators === iteratorsDone) {\n      // The streams have all ended.\n      return {value: null, done: true};\n    }\n    if (iteratorsDone > 0) {\n      switch (this.mismatchMode) {\n        case ZipMismatchMode.FAIL:\n          throw new Error(\n              'Zipped streams should have the same length. ' +\n              `Mismatched at element ${this.count}.`);\n        case ZipMismatchMode.SHORTEST:\n          return {value: null, done: true};\n        case ZipMismatchMode.LONGEST:\n        default:\n          // Continue.  The exhausted streams already produced value: null.\n      }\n    }\n\n    this.count++;\n    return {value: mapped, done: false};\n  }\n\n  async next(): Promise<IteratorResult<O>> {\n    this.currentPromise = this.nextState(this.currentPromise);\n    return this.currentPromise;\n  }\n}\n\n// Iterators that maintain a ring buffer of pending promises\n// ============================================================================\n\n/**\n * A stream that prefetches a given number of items from an upstream source,\n * returning them in FIFO order.\n *\n * Note this prefetches Promises, but makes no guarantees about when those\n * Promises resolve.\n */\nexport class PrefetchIterator<T> extends LazyIterator<T> {\n  protected buffer: RingBuffer<Promise<IteratorResult<T>>>;\n\n  constructor(\n      protected upstream: LazyIterator<T>, protected bufferSize: number) {\n    super();\n    this.buffer = new RingBuffer<Promise<IteratorResult<T>>>(bufferSize);\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Prefetch`;\n  }\n\n  /**\n   * Refill the prefetch buffer.  Returns only after the buffer is full, or\n   * the upstream source is exhausted.\n   */\n  protected refill() {\n    while (!this.buffer.isFull()) {\n      const v = this.upstream.next();\n      this.buffer.push(v);\n    }\n  }\n\n  next(): Promise<IteratorResult<T>> {\n    this.refill();\n    // This shift will never throw an error because the buffer is always\n    // full after a refill. If the stream is exhausted, the buffer will be\n    // full of Promises that will resolve to the end-of-stream signal.\n    return this.buffer.shift();\n  }\n}\n\n/**\n * A stream that performs a sliding-window random shuffle on an upstream\n * source. This is like a `PrefetchIterator` except that the items are\n * returned in randomized order.  Mixing naturally improves as the buffer\n * size increases.\n */\nexport class ShuffleIterator<T> extends PrefetchIterator<T> {\n  private readonly random: seedrandom.prng;\n\n  // Strict Promise execution order:\n  // a next() call may not even begin until the previous one completes.\n  private lastRead: Promise<IteratorResult<T>>;\n\n  // Local state that should not be clobbered by out-of-order execution.\n  private upstreamExhausted = false;\n\n  constructor(\n      protected upstream: LazyIterator<T>, protected windowSize: number,\n      seed?: string) {\n    super(upstream, windowSize);\n    this.random = seedrandom.alea(seed || tf.util.now().toString());\n    this.lastRead = Promise.resolve({value: null, done: false});\n  }\n\n  async next(): Promise<IteratorResult<T>> {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n\n  private randomInt(max: number) {\n    return Math.floor(this.random() * max);\n  }\n\n  protected chooseIndex(): number {\n    return this.randomInt(this.buffer.length());\n  }\n\n  async serialNext(): Promise<IteratorResult<T>> {\n    // TODO(soergel): consider performance\n    if (!this.upstreamExhausted) {\n      this.refill();\n    }\n    while (!this.buffer.isEmpty()) {\n      const chosenIndex = this.chooseIndex();\n      const result = await this.buffer.shuffleExcise(chosenIndex);\n      if (result.done) {\n        this.upstreamExhausted = true;\n      } else {\n        this.refill();\n        return result;\n      }\n    }\n    return {value: null, done: true};\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {TensorLike} from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\nimport {iteratorFromConcatenated, iteratorFromFunction, iteratorFromItems, iteratorFromZipped, LazyIterator, ZipMismatchMode} from './iterators/lazy_iterator';\nimport {Container, DataElement} from './types';\nimport {canTensorify, deepMapAndAwaitAll, DeepMapResult, isIterable} from './util/deep_map';\n\n/**\n * A nested structure of Datasets, used as the input to zip().\n */\nexport type DatasetContainer = Container<Dataset<DataElement>>;\n\n// TODO(soergel): consider vectorized operations within the pipeline.\n\n/**\n * Represents a potentially large list of independent data elements (typically\n * 'samples' or 'examples').\n *\n * A 'data example' may be a primitive, an array, a map from string keys to\n * values, or any nested structure of these.\n *\n * A `Dataset` represents an ordered collection of elements, together with a\n * chain of transformations to be performed on those elements. Each\n * transformation is a method of `Dataset` that returns another `Dataset`, so\n * these may be chained, e.g.\n * `const processedDataset = rawDataset.filter(...).map(...).batch(...)`.\n *\n * Data loading and transformation is done in a lazy, streaming fashion.  The\n * dataset may be iterated over multiple times; each iteration starts the data\n * loading anew and recapitulates the transformations.\n *\n * A `Dataset` is typically processed as a stream of unbatched examples --i.e.,\n * its transformations are applied one example at a time. Batching produces a\n * new `Dataset` where each element is a batch. Batching should usually come\n * last in a pipeline, because data transformations are easier to express on a\n * per-example basis than on a per-batch basis.\n *\n * The following code examples are calling `await dataset.forEachAsync(...)` to\n * iterate once over the entire dataset in order to print out the data.\n */\n/** @doc {heading: 'Data', subheading: 'Classes', namespace: 'data'} */\nexport abstract class Dataset<T extends tf.TensorContainer> {\n  /*\n   * Provide a new stream of elements.  Note this will also start new streams\n   * from any underlying `Dataset`s.\n   *\n   * CAUTION: Any Tensors contained within the elements returned from\n   * this stream *must* be manually disposed to avoid a GPU memory leak.\n   * The tf.tidy() approach cannot be used in an asynchronous context.\n   */\n  abstract async iterator(): Promise<LazyIterator<T>>;\n\n  readonly size: number = null;\n\n  // TODO(soergel): Make Datasets report whether repeated iterator() calls\n  // produce the same result (e.g., reading from a file) or different results\n  // (e.g., from the webcam).  Currently we don't make this distinction but it\n  // could be important for the user to know.\n  // abstract isDeterministic(): boolean;\n\n  /**\n   * Groups elements into batches.\n   *\n   * It is assumed that each of the incoming dataset elements has the same\n   * structure-- i.e. the same set of keys at each location in an object\n   * hierarchy.  For each key, the resulting `Dataset` provides a batched\n   * element collecting all of the incoming values for that key.\n   *\n   *  * Incoming primitives are grouped into a 1-D Tensor.\n   *  * Incoming Tensors are grouped into a new Tensor where the 0'th axis is\n   *    the batch dimension.\n   *  * Incoming arrays are converted to Tensor and then batched.\n   *  * A nested array is interpreted as an n-D Tensor, so the batched result\n   *    has n+1 dimensions.\n   *  * An array that cannot be converted to Tensor produces an error.\n   *\n   * If an array should not be batched as a unit, it should first be converted\n   * to an object with integer keys.\n   *\n   * Here are a few examples:\n   *\n   * Batch a dataset of numbers:\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8]).batch(4);\n   * await a.forEachAsync(e => e.print());\n   * ```\n   *\n   * Batch a dataset of arrays:\n   * ```js\n   * const b = tf.data.array([[1], [2], [3], [4], [5], [6], [7], [8]]).batch(4);\n   * await b.forEachAsync(e => e.print());\n   * ```\n   *\n   * Batch a dataset of objects:\n   * ```js\n   * const c = tf.data.array([{a: 1, b: 11}, {a: 2, b: 12}, {a: 3, b: 13},\n   *   {a: 4, b: 14}, {a: 5, b: 15}, {a: 6, b: 16}, {a: 7, b: 17},\n   *   {a: 8, b: 18}]).batch(4);\n   * await c.forEachAsync(e => {\n   *   console.log('{');\n   *   for(var key in e) {\n   *     console.log(key+':');\n   *     e[key].print();\n   *   }\n   *   console.log('}');\n   * })\n   * ```\n   *\n   * @param batchSize The number of elements desired per batch.\n   * @param smallLastBatch Whether to emit the final batch when it has fewer\n   *   than batchSize elements. Default true.\n   * @returns A `Dataset`, from which a stream of batches can be obtained.\n   */\n  /** @doc {heading: 'Data', subheading: 'Classes'} */\n  batch(batchSize: number, smallLastBatch = true): Dataset<tf.TensorContainer> {\n    const base = this;\n    tf.util.assert(\n        batchSize > 0, () => `batchSize needs to be positive, but it is\n      ${batchSize}`);\n    let size;\n    if (this.size === Infinity || this.size == null) {\n      // If the size of this dataset is infinity or null, the new size keeps the\n      // same.\n      size = this.size;\n    } else if (smallLastBatch) {\n      // If the size of this dataset is known and include small last batch, the\n      // new size is full batch count plus last batch.\n      size = Math.ceil(this.size / batchSize);\n    } else {\n      // If the size of this dataset is known and not include small last batch,\n      // the new size is full batch count.\n      size = Math.floor(this.size / batchSize);\n    }\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator())\n          .columnMajorBatch(batchSize, smallLastBatch, deepBatchConcat);\n    }, size);\n  }\n\n  /**\n   * Concatenates this `Dataset` with another.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3]);\n   * const b = tf.data.array([4, 5, 6]);\n   * const c = a.concatenate(b);\n   * await c.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param dataset A `Dataset` to be concatenated onto this one.\n   * @returns A `Dataset`.\n   */\n  /** @doc {heading: 'Data', subheading: 'Classes'} */\n  concatenate(dataset: Dataset<T>): Dataset<T> {\n    const base = this;\n    let size;\n    if (this.size === Infinity || dataset.size === Infinity) {\n      // If the size of any of these two dataset is infinity, new size is\n      // infinity.\n      size = Infinity;\n    } else if (this.size != null && dataset.size != null) {\n      // If the size of both datasets are known and not infinity, new size is\n      // sum the size of these two datasets.\n      size = this.size + dataset.size;\n    } else {\n      // If neither of these two datasets has infinite size and any of these two\n      // datasets' size is null, the new size is null.\n      size = null;\n    }\n    return datasetFromIteratorFn(\n        async () =>\n            (await base.iterator()).concatenate(await dataset.iterator()),\n        size);\n  }\n\n  /**\n   * Filters this dataset according to `predicate`.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n   *   .filter(x => x%2 === 0);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param predicate A function mapping a dataset element to a boolean or a\n   * `Promise` for one.\n   *\n   * @returns A `Dataset` of elements for which the predicate was true.\n   */\n  /** @doc {heading: 'Data', subheading: 'Classes'} */\n  filter(predicate: (value: T) => boolean): Dataset<T> {\n    const base = this;\n    let size;\n    if (this.size === Infinity) {\n      // If the size of this dataset is infinity, new size is infinity\n      size = Infinity;\n    } else {\n      // If this dataset has limited elements, new size is null because it might\n      // exhausted randomly.\n      size = null;\n    }\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator()).filter(x => tf.tidy(() => predicate(x)));\n    }, size);\n  }\n\n  /**\n   * Apply a function to every element of the dataset.\n   *\n   * After the function is applied to a dataset element, any Tensors contained\n   * within that element are disposed.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3]);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param f A function to apply to each dataset element.\n   * @returns A `Promise` that resolves after all elements have been processed.\n   */\n  /** @doc {heading: 'Data', subheading: 'Classes'} */\n  async forEachAsync(f: (input: T) => void): Promise<void> {\n    return (await this.iterator()).forEachAsync(f);\n  }\n\n  /** @deprecated Please use `dataset.forEachAsync()` instead. */\n  async forEach(f: (input: T) => void): Promise<void> {\n    tf.deprecationWarn(\n        'dataset.forEach() is deprecated and will be removed. ' +\n        'Please use dataset.forEachAsync() instead');\n    return this.forEachAsync(f);\n  }\n\n  /**\n   * Maps this dataset through a 1-to-1 transform.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3]).map(x => x*x);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param transform A function mapping a dataset element to a transformed\n   *   dataset element.\n   *\n   * @returns A `Dataset` of transformed elements.\n   */\n  /** @doc {heading: 'Data', subheading: 'Classes'} */\n  map<O extends tf.TensorContainer>(transform: (value: T) => O): Dataset<O> {\n    const base = this;\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator()).map(x => tf.tidy(() => transform(x)));\n    }, this.size);\n  }\n\n  /**\n   * Maps this dataset through an async 1-to-1 transform.\n   *\n   * ```js\n   * const a =\n   *  tf.data.array([1, 2, 3]).mapAsync(x => new Promise(function(resolve){\n   *    setTimeout(() => {\n   *      resolve(x * x);\n   *    }, Math.random()*1000 + 500);\n   *  }));\n   * console.log(await a.toArray());\n   * ```\n   *\n   * @param transform A function mapping a dataset element to a `Promise` for a\n   *   transformed dataset element.  This transform is responsible for disposing\n   *   any intermediate `Tensor`s, i.e. by wrapping its computation in\n   *   `tf.tidy()`; that cannot be automated here (as it is in the synchronous\n   *   `map()` case).\n   *\n   * @returns A `Dataset` of transformed elements.\n   */\n  /** @doc {heading: 'Data', subheading: 'Classes'} */\n  mapAsync<O extends tf.TensorContainer>(transform: (value: T) => Promise<O>):\n      Dataset<O> {\n    const base = this;\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator()).mapAsync(transform);\n    }, this.size);\n  }\n\n  /**\n   *  Creates a `Dataset` that prefetches elements from this dataset.\n   *\n   * @param bufferSize: An integer specifying the number of elements to be\n   *   prefetched.\n   * @returns A `Dataset`.\n   */\n  /** @doc {heading: 'Data', subheading: 'Classes'} */\n  prefetch(bufferSize: number): Dataset<T> {\n    if (bufferSize == null) {\n      throw new RangeError(\n          '`Dataset.prefetch()` requires bufferSize to be specified.');\n    }\n\n    const base = this;\n    return datasetFromIteratorFn(\n        async () => (await base.iterator()).prefetch(bufferSize), this.size);\n  }\n\n  /**\n   * Repeats this dataset `count` times.\n   *\n   * NOTE: If this dataset is a function of global state (e.g. a random number\n   * generator), then different repetitions may produce different elements.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3]).repeat(3);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param count: (Optional) An integer, representing the number of times\n   *   the dataset should be repeated. The default behavior (if `count` is\n   *   `undefined` or negative) is for the dataset be repeated indefinitely.\n   * @returns A `Dataset`.\n   */\n  /** @doc {heading: 'Data', subheading: 'Classes'} */\n  repeat(count?: number): Dataset<T> {\n    const base = this;\n    let size;\n    if (this.size != null && count > 0) {\n      // If this dataset has size and count is positive, new size is current\n      // size multiply count. This also covers the case that current size is\n      // infinity.\n      size = this.size * count;\n    } else if (count === 0) {\n      // If count is 0, new size is 0.\n      size = 0;\n    } else if (this.size != null && (count === undefined || count < 0)) {\n      // If this dataset has size and count is undefined or negative, the\n      // dataset will be repeated indefinitely and new size is infinity.\n      size = Infinity;\n    } else {\n      // If the size of this dataset is null, the new dataset's size is null.\n      size = null;\n    }\n    return datasetFromIteratorFn(async () => {\n      const iteratorIterator = iteratorFromFunction(\n          async () => ({value: await base.iterator(), done: false}));\n      return iteratorFromConcatenated(iteratorIterator.take(count));\n    }, size);\n  }\n\n  /**\n   * Creates a `Dataset` that skips `count` initial elements from this dataset.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).skip(3);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param count: The number of elements of this dataset that should be skipped\n   *   to form the new dataset.  If `count` is greater than the size of this\n   *   dataset, the new dataset will contain no elements.  If `count`\n   *   is `undefined` or negative, skips the entire dataset.\n   *\n   * @returns A `Dataset`.\n   */\n  /** @doc {heading: 'Data', subheading: 'Classes'} */\n  skip(count: number): Dataset<T> {\n    const base = this;\n    let size;\n    if (this.size != null && count >= 0 && this.size >= count) {\n      // If the size of this dataset is greater than count, the new dataset's\n      // size is current size minus skipped size.This also covers the case that\n      // current size is infinity.\n      size = this.size - count;\n    } else if (\n        this.size != null &&\n        (this.size < count || count === undefined || count < 0)) {\n      // If the size of this dataset is smaller than count, or count is\n      // undefined or negative, skips the entire dataset and the new size is 0.\n      size = 0;\n    } else {\n      // If the size of this dataset is null, the new dataset's size is null.\n      size = null;\n    }\n    return datasetFromIteratorFn(\n        async () => (await base.iterator()).skip(count), size);\n  }\n\n  // TODO(soergel): deep sharded shuffle, where supported\n\n  static readonly MAX_BUFFER_SIZE = 10000;\n\n  /**\n   * Pseudorandomly shuffles the elements of this dataset. This is done in a\n   * streaming manner, by sampling from a given number of prefetched elements.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).shuffle(3);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param bufferSize: An integer specifying the number of elements from this\n   *   dataset from which the new dataset will sample.\n   * @param seed: (Optional) An integer specifying the random seed that will\n   *   be used to create the distribution.\n   * @param reshuffleEachIteration: (Optional) A boolean, which if true\n   *   indicates that the dataset should be pseudorandomly reshuffled each time\n   *   it is iterated over. If false, elements will be returned in the same\n   *   shuffled order on each iteration. (Defaults to `true`.)\n   * @returns A `Dataset`.\n   */\n  /** @doc {heading: 'Data', subheading: 'Classes'} */\n  shuffle(bufferSize: number, seed?: string, reshuffleEachIteration = true):\n      Dataset<T> {\n    if (bufferSize == null || bufferSize < 0) {\n      if (this.size == null) {\n        throw new RangeError(\n            '`Dataset.shuffle()` requires bufferSize to be specified.');\n      } else {\n        throw new RangeError(\n            '`Dataset.shuffle()` requires bufferSize to be specified.  ' +\n            'If your data fits in main memory (for regular JS objects), ' +\n            'and/or GPU memory (for `tf.Tensor`s), consider setting ' +\n            `bufferSize to the dataset size (${this.size} elements)`);\n      }\n    }\n    const base = this;\n    const random = seedrandom.alea(seed || tf.util.now().toString());\n    return datasetFromIteratorFn(async () => {\n      let seed2 = random.int32();\n      if (reshuffleEachIteration) {\n        seed2 += random.int32();\n      }\n      return (await base.iterator()).shuffle(bufferSize, seed2.toString());\n    }, this.size);\n  }\n\n  /**\n   * Creates a `Dataset` with at most `count` initial elements from this\n   * dataset.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).take(3);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param count: The number of elements of this dataset that should be taken\n   *   to form the new dataset.  If `count` is `undefined` or negative, or if\n   *   `count` is greater than the size of this dataset, the new dataset will\n   *   contain all elements of this dataset.\n   * @returns A `Dataset`.\n   */\n  /** @doc {heading: 'Data', subheading: 'Classes'} */\n  take(count: number): Dataset<T> {\n    const base = this;\n    let size;\n    if (this.size != null && this.size > count) {\n      // If the size of this dataset is greater than count, the new dataset's\n      // size is count.\n      size = count;\n    } else if (this.size != null && this.size <= count) {\n      // If the size of this dataset is equal or smaller than count, the new\n      // dataset's size is the size of this dataset.\n      size = this.size;\n    } else {\n      // If the size of this dataset is null, the new dataset's size is null.\n      size = null;\n    }\n    return datasetFromIteratorFn(\n        async () => (await base.iterator()).take(count), size);\n  }\n\n  /**\n   * Collect all elements of this dataset into an array.\n   *\n   * Obviously this will succeed only for small datasets that fit in memory.\n   * Useful for testing and generally should be avoided if possible.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6]);\n   * console.log(await a.toArray());\n   * ```\n   *\n   * @returns A Promise for an array of elements, which will resolve\n   *   when a new stream has been obtained and fully consumed.\n   */\n  /** @doc {heading: 'Data', subheading: 'Classes'} */\n  async toArray() {\n    if (this.size === Infinity) {\n      throw new Error('Can not convert infinite data stream to array.');\n    }\n    return (await this.iterator()).toArray();\n  }\n\n  /**\n   * Collect all elements of this dataset into an array with prefetching 100\n   * elements. This is useful for testing, because the prefetch changes the\n   * order in which the Promises are resolved along the processing pipeline.\n   * This may help expose bugs where results are dependent on the order of\n   * Promise resolution rather than on the logical order of the stream (i.e.,\n   * due to hidden mutable state).\n   *\n   * @returns A Promise for an array of elements, which will resolve\n   *   when a new stream has been obtained and fully consumed.\n   */\n  async toArrayForTest() {\n    if (this.size === Infinity) {\n      throw new Error('Can not convert infinite data stream to array.');\n    }\n    return (await this.iterator()).toArrayForTest();\n  }\n}\n\n/**\n * Create a `Dataset` defined by a provided iterator() function.\n *\n * ```js\n * let i = -1;\n * const func = () =>\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\n * const iter = tf.data.iteratorFromFunction(func);\n * const ds = tf.data.datasetFromIteratorFn(iter);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n */\nexport function datasetFromIteratorFn<T extends tf.TensorContainer>(\n    iteratorFn: () => Promise<LazyIterator<T>>,\n    size: number = null): Dataset<T> {\n  return new class extends Dataset<T> {\n    size = size;\n\n    /*\n     * Provide a new stream of elements.  Note this will also start new streams\n     * from any underlying `Dataset`s.\n     */\n    async iterator(): Promise<LazyIterator<T>> {\n      return iteratorFn();\n    }\n  }\n  ();\n}\n\n/**\n * Create a `Dataset` from an array of elements.\n *\n * Create a Dataset from an array of objects:\n * ```js\n * const a = tf.data.array([{'item': 1}, {'item': 2}, {'item': 3}]);\n * await a.forEachAsync(e => console.log(e));\n * ```\n *\n * Create a Dataset from an array of numbers:\n * ```js\n * const a = tf.data.array([4, 5, 6]);\n * await a.forEachAsync(e => console.log(e));\n * ```\n * @param items An array of elements that will be parsed as items in a dataset.\n */\n/** @doc {heading: 'Data', subheading: 'Creation', namespace: 'data'} */\nexport function array<T extends tf.TensorContainer>(items: T[]): Dataset<T> {\n  return datasetFromIteratorFn(\n      async () => iteratorFromItems(items), items.length);\n}\n\n/**\n * Create a `Dataset` by zipping together an array, dict, or nested\n * structure of `Dataset`s (and perhaps additional constants).\n * The underlying datasets must provide elements in a consistent order such that\n * they correspond.\n *\n * The number of elements in the resulting dataset is the same as the size of\n * the smallest dataset in datasets.\n *\n * The nested structure of the `datasets` argument determines the\n * structure of elements in the resulting iterator.\n *\n * Note this means that, given an array of two datasets that produce dict\n * elements, the result is a dataset that produces elements that are arrays\n * of two dicts:\n *\n * Zip an array of datasets:\n * ```js\n * console.log('Zip two datasets of objects:');\n * const ds1 = tf.data.array([{a: 1}, {a: 2}, {a: 3}]);\n * const ds2 = tf.data.array([{b: 4}, {b: 5}, {b: 6}]);\n * const ds3 = tf.data.zip([ds1, ds2]);\n * await ds3.forEachAsync(e => console.log(JSON.stringify(e)));\n *\n * // If the goal is to merge the dicts in order to produce elements like\n * // {a: ..., b: ...}, this requires a second step such as:\n * console.log('Merge the objects:');\n * const ds4 = ds3.map(x => {return {a: x[0].a, b: x[1].b}});\n * await ds4.forEachAsync(e => console.log(e));\n * ```\n *\n * Zip a dict of datasets:\n * ```js\n * const a = tf.data.array([{a: 1}, {a: 2}, {a: 3}]);\n * const b = tf.data.array([{b: 4}, {b: 5}, {b: 6}]);\n * const c = tf.data.zip({c: a, d: b});\n * await c.forEachAsync(e => console.log(JSON.stringify(e)));\n * ```\n */\n/** @doc {heading: 'Data', subheading: 'Operations', namespace: 'data'} */\nexport function zip<O extends tf.TensorContainer>(datasets: DatasetContainer):\n    Dataset<O> {\n  // manually type-check the argument for JS users\n  if (!isIterable(datasets)) {\n    throw new Error('The argument to zip() must be an object or array.');\n  }\n  let size;\n  if (Array.isArray(datasets)) {\n    for (let i = 0; i < datasets.length; i++) {\n      size = size == null ? (datasets[i] as Dataset<O>).size :\n                            Math.min(size, (datasets[i] as Dataset<O>).size);\n    }\n  } else if (datasets instanceof Object) {\n    for (const ds in datasets) {\n      size = size == null ? (datasets[ds] as Dataset<O>).size :\n                            Math.min(size, (datasets[ds] as Dataset<O>).size);\n    }\n  }\n  return datasetFromIteratorFn<O>(async () => {\n    const streams = await deepMapAndAwaitAll(datasets, d => {\n      if (d instanceof Dataset) {\n        return {value: d.iterator(), recurse: false};\n      } else if (isIterable(d)) {\n        return {value: null, recurse: true};\n      } else {\n        throw new Error(\n            'Leaves of the structure passed to zip() must be Datasets, ' +\n            'not primitives.');\n      }\n    });\n    return iteratorFromZipped<O>(streams, ZipMismatchMode.SHORTEST);\n  }, size);\n}\n\n/**\n * A zip function for use with deepZip, passed via the columnMajorBatch call.\n *\n * Accepts an array of identically-structured nested elements and either batches\n * them (if they are primitives, numeric arrays, or Tensors) or requests\n * recursion (if not).\n */\n// tslint:disable-next-line:no-any\nfunction deepBatchConcat(rows: any[]): DeepMapResult {\n  if (rows === null) {\n    return null;\n  }\n\n  // use the first item to decide whether to recurse or batch here.\n  const exampleRow = rows[0];\n\n  if (canTensorify(exampleRow)) {\n    // rows is an array of primitives, Tensors, or arrays.  Batch them.\n    const value = batchConcat(rows);\n    return {value, recurse: false};\n  }\n\n  // the example row is an object, so recurse into it.\n  return {value: null, recurse: true};\n}\n\n/**\n * Assembles a list of same-shaped numbers, number arrays, or Tensors\n * into a single new Tensor where axis 0 is the batch dimension.\n */\nfunction batchConcat<T extends(TensorLike | tf.Tensor)>(arrays: T[]):\n    tf.Tensor {\n  if (arrays.length === 0) {\n    // We can't return an empty Tensor because we don't know the element shape.\n    throw new Error('Can\\'t make a batch of zero elements.');\n  }\n\n  if (arrays[0] instanceof tf.Tensor) {\n    // Input is an array of Tensors\n    return tf.stack(arrays as tf.Tensor[]);\n  } else {\n    // Input is a possibly-nested array of numbers.\n    return tf.tensor(arrays as TensorLike);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {Dataset} from '../dataset';\nimport {DataSource} from '../datasource';\nimport {LazyIterator} from '../iterators/lazy_iterator';\n\n/**\n * Represents a potentially large collection of text lines.\n *\n * The results are not batched.\n */\nexport class TextLineDataset extends Dataset<string> {\n  /**\n   * Create a `TextLineDataset`.\n   *\n   * @param input A `DataSource` providing a chunked, UTF8-encoded byte stream.\n   */\n  constructor(protected readonly input: DataSource) {\n    super();\n  }\n\n  async iterator(): Promise<LazyIterator<string>> {\n    const inputIterator = await this.input.iterator();\n    const utf8Iterator = inputIterator.decodeUTF8();\n    const lineIterator = utf8Iterator.split('\\n').map(line => {\n      // Windows/DOS format text file has extra line breaker at the end of line.\n      if (line.endsWith('\\r')) {\n        line = line.slice(0, -1);\n      }\n      return line;\n    });\n    return lineIterator;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {TensorContainer, util} from '@tensorflow/tfjs-core';\nimport {Dataset} from '../dataset';\nimport {DataSource} from '../datasource';\nimport {LazyIterator} from '../iterators/lazy_iterator';\nimport {ColumnConfig, CSVConfig} from '../types';\nimport {TextLineDataset} from './text_line_dataset';\n\nconst CODE_QUOTE = '\"';\nconst STATE_OUT = Symbol('out');\nconst STATE_FIELD = Symbol('field');\nconst STATE_QUOTE = Symbol('quote');\nconst STATE_QUOTE_AFTER_QUOTE = Symbol('quoteafterquote');\nconst STATE_WITHIN_QUOTE_IN_QUOTE = Symbol('quoteinquote');\n\n/**\n * Represents a potentially large collection of delimited text records.\n *\n * The produced `TensorContainer`s each contain one key-value pair for\n * every column of the table.  When a field is empty in the incoming data, the\n * resulting value is `undefined`, or throw error if it is required.  Values\n * that can be parsed as numbers are emitted as type `number`, other values\n * are parsed as `string`.\n *\n * The results are not batched.\n */\n/** @doc {heading: 'Data', subheading: 'Classes', namespace: 'data'} */\nexport class CSVDataset extends Dataset<TensorContainer> {\n  base: TextLineDataset;\n  private hasHeader = true;\n  private fullColumnNames: string[] = null;\n  private columnNamesValidated = false;\n  private columnConfigs: {[key: string]: ColumnConfig} = null;\n  private configuredColumnsOnly = false;\n  private delimiter = ',';\n  private delimWhitespace = false;\n\n  /**\n   * Returns column names of the csv dataset. If `configuredColumnsOnly` is\n   * true, return column names in `columnConfigs`. If `configuredColumnsOnly` is\n   * false and `columnNames` is provided, `columnNames`. If\n   * `configuredColumnsOnly` is false and `columnNames` is not provided, return\n   * all column names parsed from the csv file. For example usage please go to\n   * `tf.data.csv`.\n   */\n  /** @doc {heading: 'Data', subheading: 'Classes'} */\n  async columnNames() {\n    if (!this.columnNamesValidated) {\n      await this.setColumnNames();\n    }\n    return this.configuredColumnsOnly ? Object.keys(this.columnConfigs) :\n                                        this.fullColumnNames;\n  }\n\n  /* 1) If `columnNames` is provided as string[], use this string[] as output\n   * keys in corresponding order. The length must match the number of inferred\n   * columns if `hasHeader` is true .\n   * 2) If `columnNames` is not provided, parse header line as `columnNames` if\n   * hasHeader is true. If `hasHeader` is false, throw an error.\n   * 3) If `columnConfigs` is provided, all the keys in `columnConfigs` must\n   * exist in parsed `columnNames`.\n   */\n  private async setColumnNames() {\n    const columnNamesFromFile = await this.maybeReadHeaderLine();\n    if (!this.fullColumnNames && !columnNamesFromFile) {\n      // Throw an error if columnNames is not provided and no header line.\n      throw new Error(\n          'Column names must be provided if there is no header line.');\n    } else if (this.fullColumnNames && columnNamesFromFile) {\n      // Check provided columnNames match header line.\n      util.assert(\n          columnNamesFromFile.length === this.fullColumnNames.length,\n          () => 'The length of provided columnNames (' +\n              this.fullColumnNames.length.toString() +\n              ') does not match the length of the header line read from ' +\n              'file (' + columnNamesFromFile.length.toString() + ').');\n    }\n    if (!this.fullColumnNames) {\n      this.fullColumnNames = columnNamesFromFile;\n    }\n    // Check if there are duplicate column names.\n    const counts: {[key: string]: number} = this.fullColumnNames.reduce(\n        (countAcc: {[key: string]: number}, name) => {\n          countAcc[name] = (countAcc[name] + 1) || 1;\n          return countAcc;\n        },\n        {});\n    const duplicateNames =\n        Object.keys(counts).filter((name) => (counts[name] > 1));\n    util.assert(\n        duplicateNames.length === 0,\n        () => 'Duplicate column names found: ' + duplicateNames.toString());\n    // Check if keys in columnConfigs match columnNames.\n    if (this.columnConfigs) {\n      for (const key of Object.keys(this.columnConfigs)) {\n        const index = this.fullColumnNames.indexOf(key);\n        if (index === -1) {\n          throw new Error(\n              'The key \"' + key +\n              '\" provided in columnConfigs does not match any of the column ' +\n              'names (' + this.fullColumnNames.toString() + ').');\n        }\n      }\n    }\n    this.columnNamesValidated = true;\n  }\n\n  private async maybeReadHeaderLine() {\n    if (this.hasHeader) {\n      const iter = await this.base.iterator();\n      const firstElement = await iter.next();\n      if (firstElement.done) {\n        throw new Error('No data was found for CSV parsing.');\n      }\n      const firstLine: string = firstElement.value;\n      const headers = this.parseRow(firstLine, false);\n      return headers;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Create a `CSVDataset`.\n   *\n   * @param input A `DataSource` providing a chunked, UTF8-encoded byte stream.\n   * @param csvConfig (Optional) A CSVConfig object that contains configurations\n   *     of reading and decoding from CSV file(s).\n   *\n   *     hasHeader: (Optional) A boolean value that indicates whether the first\n   *     row of provided CSV file is a header line with column names, and should\n   *     not be included in the data. Defaults to `true`.\n   *\n   *     columnNames: (Optional) A list of strings that corresponds to\n   *     the CSV column names, in order. If provided, it ignores the column\n   *     names inferred from the header row. If not provided, infers the column\n   *     names from the first row of the records. If hasHeader is false and\n   *     columnNames is not provided, this method throws an error.\n   *\n   *     columnConfigs: (Optional) A dictionary whose key is column names, value\n   *     is an object stating if this column is required, column's data type,\n   *     default value, and if this column is label. If provided, keys must\n   *     correspond to names provided in columnNames or inferred from the file\n   *     header lines. If isLabel is true any column, returns an array of two\n   *     items: the first item is a dict of features key/value pairs, the second\n   *     item is a dict of labels key/value pairs. If no feature is marked as\n   *     label, returns a dict of features only.\n   *\n   *     configuredColumnsOnly (Optional) If true, only columns provided in\n   *     columnConfigs will be parsed and provided during iteration.\n   *\n   *     delimiter (Optional) The string used to parse each line of the input\n   *     file. Defaults to `,`.\n   */\n  constructor(protected readonly input: DataSource, csvConfig?: CSVConfig) {\n    super();\n    this.base = new TextLineDataset(input);\n    if (!csvConfig) {\n      csvConfig = {};\n    }\n    this.hasHeader = csvConfig.hasHeader === false ? false : true;\n    this.fullColumnNames = csvConfig.columnNames;\n    this.columnConfigs = csvConfig.columnConfigs;\n    this.configuredColumnsOnly = csvConfig.configuredColumnsOnly;\n    if (csvConfig.delimWhitespace) {\n      util.assert(\n          csvConfig.delimiter == null,\n          () =>\n              'Delimiter should not be provided when delimWhitespace is true.');\n      this.delimWhitespace = true;\n      this.delimiter = ' ';\n    } else {\n      this.delimiter = csvConfig.delimiter ? csvConfig.delimiter : ',';\n    }\n  }\n\n  async iterator(): Promise<LazyIterator<TensorContainer>> {\n    if (!this.columnNamesValidated) {\n      await this.setColumnNames();\n    }\n    let lines = await this.base.iterator();\n    if (this.hasHeader) {\n      // We previously read the first line to get the columnNames.\n      // Now that we're providing data, skip it.\n      lines = lines.skip(1);\n    }\n    return lines.map(x => this.makeDataElement(x));\n  }\n\n  makeDataElement(line: string): TensorContainer {\n    const values = this.parseRow(line);\n    const features: {[key: string]: TensorContainer} = {};\n    const labels: {[key: string]: TensorContainer} = {};\n\n    for (let i = 0; i < this.fullColumnNames.length; i++) {\n      const key = this.fullColumnNames[i];\n      const config = this.columnConfigs ? this.columnConfigs[key] : null;\n      if (this.configuredColumnsOnly && !config) {\n        // This column is not selected.\n        continue;\n      } else {\n        const value = values[i];\n        let parsedValue = null;\n        if (value === '') {\n          // If default value is provided, use it. If default value is not\n          // provided, set as undefined.\n          if (config && config.default !== undefined) {\n            parsedValue = config.default;\n          } else if (config && (config.required || config.isLabel)) {\n            throw new Error(\n                `Required column ${key} is empty in this line: ${line}`);\n          } else {\n            parsedValue = undefined;\n          }\n        } else {\n          // A value is present, so parse it based on type\n          const valueAsNum = Number(value);\n          if (isNaN(valueAsNum)) {\n            // The value is a string and this column is declared as boolean\n            // in config, parse it as boolean.\n            if (config && config.dtype === 'bool') {\n              parsedValue = this.getBoolean(value);\n            } else {\n              // Set value as string\n              parsedValue = value;\n            }\n          } else if (!config || !config.dtype) {\n            // If this value is a number and no type config is provided, return\n            // it as number.\n            parsedValue = valueAsNum;\n          } else {\n            // If this value is a number and data type is provided, parse it\n            // according to provided data type.\n            switch (config.dtype) {\n              case 'float32':\n                parsedValue = valueAsNum;\n                break;\n              case 'int32':\n                parsedValue = Math.floor(valueAsNum);\n                break;\n              case 'bool':\n                parsedValue = this.getBoolean(value);\n                break;\n              default:\n                parsedValue = valueAsNum;\n            }\n          }\n        }\n        // Check if this column is label.\n        (config && config.isLabel) ? labels[key] = parsedValue :\n                                     features[key] = parsedValue;\n      }\n    }\n    // If label exists, return an object of features and labels as {xs:features,\n    // ys:labels}, otherwise return features only.\n    if (Object.keys(labels).length === 0) {\n      return features;\n\n    } else {\n      return {xs: features, ys: labels};\n    }\n  }\n\n  private getBoolean(value: string): number {\n    if (value === '1' || value.toLowerCase() === 'true') {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n  // adapted from https://beta.observablehq.com/@mbostock/streaming-csv\n  private parseRow(line: string, validateElementCount = true): string[] {\n    const result: string[] = [];\n    let readOffset = 0;\n    const readLength = line.length;\n    let currentState = STATE_OUT;\n    // Goes through the line to parse quote.\n    for (let i = 0; i < readLength; i++) {\n      switch (currentState) {\n        // Before enter a new field\n        case STATE_OUT:\n          switch (line.charAt(i)) {\n            // Enter a quoted field\n            case CODE_QUOTE:\n              readOffset = i + 1;\n              currentState = STATE_QUOTE;\n              break;\n            // Read an empty field\n            case this.delimiter:\n              readOffset = i + 1;\n              // If delimiter is white space and configured to collapse\n              // multiple white spaces, ignore this white space.\n              if (this.delimiter === ' ' && this.delimWhitespace) {\n                break;\n              }\n              result.push('');\n              currentState = STATE_OUT;\n              break;\n            // Enter an unquoted field\n            default:\n              currentState = STATE_FIELD;\n              readOffset = i;\n              break;\n          }\n          break;\n        // In an unquoted field\n        case STATE_FIELD:\n          switch (line.charAt(i)) {\n            // Exit an unquoted field, add it to result\n            case this.delimiter:\n              result.push(line.substring(readOffset, i));\n              currentState = STATE_OUT;\n              readOffset = i + 1;\n              break;\n            default:\n          }\n          break;\n        // In a quoted field\n        case STATE_QUOTE:\n          switch (line.charAt(i)) {\n            // Read a quote after a quote\n            case CODE_QUOTE:\n              currentState = STATE_QUOTE_AFTER_QUOTE;\n              break;\n            default:\n          }\n          break;\n        // This state means it's right after a second quote in a field\n        case STATE_QUOTE_AFTER_QUOTE:\n          switch (line.charAt(i)) {\n            // Finished a quoted field\n            case this.delimiter:\n              result.push(line.substring(readOffset, i - 1));\n              currentState = STATE_OUT;\n              readOffset = i + 1;\n              break;\n            // Finished a quoted part in a quoted field\n            case CODE_QUOTE:\n              currentState = STATE_QUOTE;\n              break;\n            // In a quoted part in a quoted field\n            default:\n              currentState = STATE_WITHIN_QUOTE_IN_QUOTE;\n              break;\n          }\n          break;\n        case STATE_WITHIN_QUOTE_IN_QUOTE:\n          switch (line.charAt(i)) {\n            // Exit a quoted part in a quoted field\n            case CODE_QUOTE:\n              currentState = STATE_QUOTE;\n              break;\n            default:\n          }\n          break;\n        default:\n      }\n    }\n    // Adds last item based on if it is quoted.\n    if (currentState === STATE_QUOTE_AFTER_QUOTE) {\n      result.push(line.substring(readOffset, readLength - 1));\n    } else {\n      result.push(line.substring(readOffset));\n    }\n    // Check if each row has the same number of elements as column names.\n    if (validateElementCount && result.length !== this.fullColumnNames.length) {\n      throw new Error(`Invalid row in csv file. Should have ${\n          this.fullColumnNames.length} elements in a row, but got ${result}`);\n    }\n    return result;\n  }\n}\n\n// TODO(soergel): add more basic datasets for parity with tf.data\n// tf.data.FixedLengthRecordDataset()\n// tf.data.TFRecordDataset()\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {env, Tensor, tensor, Tensor2D, Tensor3D, TensorContainer, util} from '@tensorflow/tfjs-core';\nimport {MicrophoneConfig} from '../types';\nimport {LazyIterator} from './lazy_iterator';\n\n/**\n * Provide a stream of tensors from microphone audio stream. The tensors are\n * representing audio data as frequency-domain spectrogram generated with\n * browser's native FFT. Tensors representing time-domain waveform is available\n * based on configuration. Only works in browser environment.\n */\nexport class MicrophoneIterator extends LazyIterator<TensorContainer> {\n  private isClosed = false;\n  private stream: MediaStream;\n  private readonly fftSize: number;\n  private readonly columnTruncateLength: number;\n  private freqData: Float32Array;\n  private timeData: Float32Array;\n  private readonly numFrames: number;\n  private analyser: AnalyserNode;\n  private audioContext: AudioContext;\n  private sampleRateHz: number;\n  private readonly audioTrackConstraints: MediaTrackConstraints;\n  private readonly smoothingTimeConstant: number;\n  private readonly includeSpectrogram: boolean;\n  private readonly includeWaveform: boolean;\n\n  private constructor(protected readonly microphoneConfig: MicrophoneConfig) {\n    super();\n    this.fftSize = microphoneConfig.fftSize || 1024;\n    const fftSizeLog2 = Math.log2(this.fftSize);\n    if (this.fftSize < 0 || fftSizeLog2 < 4 || fftSizeLog2 > 14 ||\n        !Number.isInteger(fftSizeLog2)) {\n      throw new Error(\n          `Invalid fftSize: it must be a power of 2 between ` +\n          `2 to 4 and 2 to 14, but got ${this.fftSize}`);\n    }\n\n    this.numFrames = microphoneConfig.numFramesPerSpectrogram || 43;\n    this.sampleRateHz = microphoneConfig.sampleRateHz;\n    this.columnTruncateLength =\n        microphoneConfig.columnTruncateLength || this.fftSize;\n    this.audioTrackConstraints = microphoneConfig.audioTrackConstraints;\n    this.smoothingTimeConstant = microphoneConfig.smoothingTimeConstant || 0;\n\n    this.includeSpectrogram =\n        microphoneConfig.includeSpectrogram === false ? false : true;\n    this.includeWaveform =\n        microphoneConfig.includeWaveform === true ? true : false;\n    if (!this.includeSpectrogram && !this.includeWaveform) {\n      throw new Error(\n          'Both includeSpectrogram and includeWaveform are false. ' +\n          'At least one type of data should be returned.');\n    }\n  }\n\n  summary() {\n    return `microphone`;\n  }\n\n  // Construct a MicrophoneIterator and start the audio stream.\n  static async create(microphoneConfig: MicrophoneConfig = {}) {\n    if (env().get('IS_NODE')) {\n      throw new Error(\n          'microphone API is only supported in browser environment.');\n    }\n\n    const microphoneIterator = new MicrophoneIterator(microphoneConfig);\n\n    // Call async function start() to initialize the audio stream.\n    await microphoneIterator.start();\n\n    return microphoneIterator;\n  }\n\n  // Start the audio stream and FFT.\n  async start(): Promise<void> {\n    try {\n      this.stream = await navigator.mediaDevices.getUserMedia({\n        audio: this.audioTrackConstraints == null ? true :\n                                                    this.audioTrackConstraints,\n        video: false\n      });\n    } catch (e) {\n      throw new Error(\n          `Error thrown while initializing video stream: ${e.message}`);\n    }\n\n    if (!this.stream) {\n      throw new Error('Could not obtain audio from microphone.');\n    }\n\n    const ctxConstructor =\n        // tslint:disable-next-line:no-any\n        (window as any).AudioContext || (window as any).webkitAudioContext;\n    this.audioContext = new ctxConstructor();\n\n    if (!this.sampleRateHz) {\n      // If sample rate is not provided, use the available sample rate on\n      // device.\n      this.sampleRateHz = this.audioContext.sampleRate;\n    } else if (this.audioContext.sampleRate !== this.sampleRateHz) {\n      throw new Error(\n          `Mismatch in sampling rate: ` +\n          `Expected: ${this.sampleRateHz}; ` +\n          `Actual: ${this.audioContext.sampleRate}`);\n    }\n\n    const streamSource = this.audioContext.createMediaStreamSource(this.stream);\n    this.analyser = this.audioContext.createAnalyser();\n    this.analyser.fftSize = this.fftSize * 2;\n    this.analyser.smoothingTimeConstant = this.smoothingTimeConstant;\n    streamSource.connect(this.analyser);\n    this.freqData = new Float32Array(this.fftSize);\n    this.timeData = new Float32Array(this.fftSize);\n    return;\n  }\n\n  async next(): Promise<IteratorResult<TensorContainer>> {\n    if (this.isClosed) {\n      return {value: null, done: true};\n    }\n\n    let spectrogramTensor: Tensor;\n    let waveformTensor: Tensor;\n\n    const audioDataQueue = await this.getAudioData();\n    if (this.includeSpectrogram) {\n      const freqData = this.flattenQueue(audioDataQueue.freqDataQueue);\n      spectrogramTensor = this.getTensorFromAudioDataArray(\n          freqData, [this.numFrames, this.columnTruncateLength, 1]);\n    }\n    if (this.includeWaveform) {\n      const timeData = this.flattenQueue(audioDataQueue.timeDataQueue);\n      waveformTensor = this.getTensorFromAudioDataArray(\n          timeData, [this.numFrames * this.fftSize, 1]);\n    }\n\n    return {\n      value: {'spectrogram': spectrogramTensor, 'waveform': waveformTensor},\n      done: false\n    };\n  }\n\n  // Capture one result from the audio stream, and extract the value from\n  // iterator.next() result.\n  async capture(): Promise<{spectrogram: Tensor3D, waveform: Tensor2D}> {\n    return (await this.next()).value as\n        {spectrogram: Tensor3D, waveform: Tensor2D};\n  }\n\n  private async getAudioData():\n      Promise<{freqDataQueue: Float32Array[], timeDataQueue: Float32Array[]}> {\n    const freqDataQueue: Float32Array[] = [];\n    const timeDataQueue: Float32Array[] = [];\n    let currentFrames = 0;\n    return new Promise(resolve => {\n      const intervalID = setInterval(() => {\n        if (this.includeSpectrogram) {\n          this.analyser.getFloatFrequencyData(this.freqData);\n          // If the audio stream is initializing, return empty queue.\n          if (this.freqData[0] === -Infinity) {\n            resolve({freqDataQueue, timeDataQueue});\n          }\n          freqDataQueue.push(this.freqData.slice(0, this.columnTruncateLength));\n        }\n        if (this.includeWaveform) {\n          this.analyser.getFloatTimeDomainData(this.timeData);\n          timeDataQueue.push(this.timeData.slice());\n        }\n\n        // Clean interval and return when all frames have been collected\n        if (++currentFrames === this.numFrames) {\n          clearInterval(intervalID);\n          resolve({freqDataQueue, timeDataQueue});\n        }\n      }, this.fftSize / this.sampleRateHz * 1e3);\n    });\n  }\n\n  // Stop the audio stream and pause the iterator.\n  stop(): void {\n    if (!this.isClosed) {\n      this.isClosed = true;\n      this.analyser.disconnect();\n      this.audioContext.close();\n      if (this.stream != null && this.stream.getTracks().length > 0) {\n        this.stream.getTracks()[0].stop();\n      }\n    }\n  }\n\n  // Override toArray() function to prevent collecting.\n  toArray(): Promise<Tensor[]> {\n    throw new Error('Can not convert infinite audio stream to array.');\n  }\n\n  // Return audio sampling rate in Hz\n  getSampleRate(): number {\n    return this.sampleRateHz;\n  }\n\n  private flattenQueue(queue: Float32Array[]): Float32Array {\n    const frameSize = queue[0].length;\n    const freqData = new Float32Array(queue.length * frameSize);\n    queue.forEach((data, i) => freqData.set(data, i * frameSize));\n    return freqData;\n  }\n\n  private getTensorFromAudioDataArray(freqData: Float32Array, shape: number[]):\n      Tensor {\n    const vals = new Float32Array(util.sizeFromShape(shape));\n    // If the data is less than the output shape, the rest is padded with zeros.\n    vals.set(freqData, vals.length - freqData.length);\n    return tensor(vals, shape);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {browser, env, image, tensor1d, Tensor1D, tensor2d, Tensor2D, Tensor3D, Tensor4D, tidy, util} from '@tensorflow/tfjs-core';\nimport {WebcamConfig} from '../types';\nimport {LazyIterator} from './lazy_iterator';\n\n/**\n * Provide a stream of image tensors from webcam video stream. Only works in\n * browser environment.\n */\nexport class WebcamIterator extends LazyIterator<Tensor3D> {\n  private isClosed = true;\n  private stream: MediaStream;\n  private resize = false;\n  private cropSize: [number, number];\n  private cropBox: Tensor2D;\n  private cropBoxInd: Tensor1D;\n\n  private constructor(\n      protected readonly webcamVideoElement: HTMLVideoElement,\n      protected readonly webcamConfig: WebcamConfig) {\n    super();\n    if (this.needToResize()) {\n      this.resize = true;\n      this.cropSize =\n          [this.webcamConfig.resizeHeight, this.webcamConfig.resizeWidth];\n      this.cropBoxInd = tensor1d([0], 'int32');\n      if (this.webcamConfig.centerCrop) {\n        // Calculate the box based on resizing shape.\n        const widthCroppingRatio =\n            this.webcamConfig.resizeWidth * 1.0 / this.webcamVideoElement.width;\n        const heightCroppingRatio = this.webcamConfig.resizeHeight * 1.0 /\n            this.webcamVideoElement.height;\n        const widthCropStart = (1 - widthCroppingRatio) / 2;\n        const heightCropStart = (1 - heightCroppingRatio) / 2;\n        const widthCropEnd = widthCropStart + widthCroppingRatio;\n        const heightCropEnd = heightCroppingRatio + heightCropStart;\n        this.cropBox = tensor2d(\n            [heightCropStart, widthCropStart, heightCropEnd, widthCropEnd],\n            [1, 4]);\n      } else {\n        this.cropBox = tensor2d([0, 0, 1, 1], [1, 4]);\n      }\n    }\n  }\n\n  summary() {\n    return `webcam`;\n  }\n\n  // Construct a WebcamIterator and start it's video stream.\n  static async create(\n      webcamVideoElement?: HTMLVideoElement, webcamConfig: WebcamConfig = {}) {\n    if (env().get('IS_NODE')) {\n      throw new Error(\n          'tf.data.webcam is only supported in browser environment.');\n    }\n\n    if (!webcamVideoElement) {\n      // If webcam video element is not provided, create a hidden video element\n      // with provided width and height.\n      webcamVideoElement = document.createElement('video');\n      if (!webcamConfig.resizeWidth || !webcamConfig.resizeHeight) {\n        throw new Error(\n            'Please provide webcam video element, or resizeWidth and ' +\n            'resizeHeight to create a hidden video element.');\n      }\n      webcamVideoElement.width = webcamConfig.resizeWidth;\n      webcamVideoElement.height = webcamConfig.resizeHeight;\n    }\n    const webcamIterator = new WebcamIterator(webcamVideoElement, webcamConfig);\n\n    // Call async function to initialize the video stream.\n    await webcamIterator.start();\n\n    return webcamIterator;\n  }\n\n  // Async function to start video stream.\n  async start(): Promise<void> {\n    if (this.webcamConfig.facingMode) {\n      util.assert(\n          (this.webcamConfig.facingMode === 'user') ||\n              (this.webcamConfig.facingMode === 'environment'),\n          () =>\n              `Invalid webcam facing mode: ${this.webcamConfig.facingMode}. ` +\n              `Please provide 'user' or 'environment'`);\n    }\n\n    try {\n      this.stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          deviceId: this.webcamConfig.deviceId,\n          facingMode: this.webcamConfig.facingMode ?\n              this.webcamConfig.facingMode :\n              'user',\n          width: this.webcamVideoElement.width,\n          height: this.webcamVideoElement.height\n        }\n      });\n    } catch (e) {\n      // Modify the error message but leave the stack trace intact\n      e.message = `Error thrown while initializing video stream: ${e.message}`;\n      throw e;\n    }\n\n    if (!this.stream) {\n      throw new Error('Could not obtain video from webcam.');\n    }\n\n    // Older browsers may not have srcObject\n    try {\n      this.webcamVideoElement.srcObject = this.stream;\n    } catch (error) {\n      console.log(error);\n      this.webcamVideoElement.src = window.URL.createObjectURL(this.stream);\n    }\n    // Start the webcam video stream\n    this.webcamVideoElement.play();\n\n    this.isClosed = false;\n\n    return new Promise<void>(resolve => {\n      // Add event listener to make sure the webcam has been fully initialized.\n      this.webcamVideoElement.onloadedmetadata = () => {\n        resolve();\n      };\n    });\n  }\n\n  async next(): Promise<IteratorResult<Tensor3D>> {\n    if (this.isClosed) {\n      return {value: null, done: true};\n    }\n\n    let img;\n    try {\n      img = browser.fromPixels(this.webcamVideoElement);\n    } catch (e) {\n      throw new Error(\n          `Error thrown converting video to pixels: ${JSON.stringify(e)}`);\n    }\n    if (this.resize) {\n      try {\n        return {value: this.cropAndResizeFrame(img), done: false};\n      } catch (e) {\n        throw new Error(`Error thrown cropping the video: ${e.message}`);\n      } finally {\n        img.dispose();\n      }\n    } else {\n      return {value: img, done: false};\n    }\n  }\n\n  private needToResize() {\n    // If resizeWidth and resizeHeight are provided, and different from the\n    // width and height of original HTMLVideoElement, then resizing and cropping\n    // is required.\n    if (this.webcamConfig.resizeWidth && this.webcamConfig.resizeHeight &&\n        (this.webcamVideoElement.width !== this.webcamConfig.resizeWidth ||\n         this.webcamVideoElement.height !== this.webcamConfig.resizeHeight)) {\n      return true;\n    }\n    return false;\n  }\n\n  // Cropping and resizing each frame based on config\n  cropAndResizeFrame(img: Tensor3D): Tensor3D {\n    return tidy(() => {\n      const expandedImage: Tensor4D = img.toFloat().expandDims(0);\n      let resizedImage;\n      resizedImage = image.cropAndResize(\n          expandedImage, this.cropBox, this.cropBoxInd, this.cropSize,\n          'bilinear');\n      // Extract image from batch cropping.\n      const shape = resizedImage.shape;\n      return resizedImage.reshape(shape.slice(1) as [number, number, number]);\n    });\n  }\n\n  // Capture one frame from the video stream, and extract the value from\n  // iterator.next() result.\n  async capture(): Promise<Tensor3D> {\n    return (await this.next()).value;\n  }\n\n  // Stop the video stream and pause webcam iterator.\n  stop(): void {\n    const tracks = this.stream.getTracks();\n\n    tracks.forEach(track => track.stop());\n\n    try {\n      this.webcamVideoElement.srcObject = null;\n    } catch (error) {\n      console.log(error);\n      this.webcamVideoElement.src = null;\n    }\n    this.isClosed = true;\n  }\n\n  // Override toArray() function to prevent collecting.\n  toArray(): Promise<Tensor3D[]> {\n    throw new Error('Can not convert infinite video stream to array.');\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {ByteChunkIterator} from './iterators/byte_chunk_iterator';\n\n/**\n * Represents a data source readable as a stream of binary data chunks.\n *\n * Because `Dataset`s can be read repeatedly (via `Dataset.iterator()`), this\n * provides a means to repeatedly create streams from the underlying data\n * sources.\n */\nexport abstract class DataSource {\n  /**\n   * Obtain a new stream of binary data chunks.\n   *\n   * Starts the new stream from the beginning of the data source, even if other\n   * streams have been obtained previously.\n   */\n  abstract async iterator(): Promise<ByteChunkIterator>;\n\n  // TODO(soergel): consider chainable Dataset construction here\n}\n\n// TODO(soergel): consider convenience factory functions here\n// in combination with chainable source->dataset above, e.g.:\n// tf.data.url(...).asCsvDataset().shuffle().batch()\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {LazyIterator, OneToManyIterator} from './lazy_iterator';\n\nexport abstract class StringIterator extends LazyIterator<string> {\n  /**\n   * Splits a string stream on a given separator.\n   *\n   * It is assumed that the incoming chunk boundaries have no semantic meaning,\n   * so conceptually the incoming stream is treated simply as the concatenation\n   * of its elements.\n   *\n   * The outgoing stream provides chunks corresponding to the results of the\n   * standard string split() operation (even if such a chunk spanned incoming\n   * chunks).  The separators are not included.\n   *\n   * A typical usage is to split a text file (represented as a stream with\n   * arbitrary chunk boundaries) into lines.\n   *\n   * @param upstream A readable stream of strings that can be treated as\n   *   concatenated.\n   * @param separator A character to split on.\n   */\n  split(separator: string): StringIterator {\n    return new SplitIterator(this, separator);\n  }\n}\n\n// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on StringIterator.  Unfortunately they can't be placed in separate files, due\n// to resulting trouble with circular imports.\n// ============================================================================\n\n// We wanted multiple inheritance, e.g.\n//   class SplitIterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\n\nclass SplitIterator extends StringIterator {\n  private impl: SplitIteratorImpl;\n\n  constructor(protected upstream: LazyIterator<string>, separator: string) {\n    super();\n    this.impl = new SplitIteratorImpl(upstream, separator);\n  }\n\n  summary() {\n    return this.impl.summary();\n  }\n\n  async next() {\n    return this.impl.next();\n  }\n}\n\nclass SplitIteratorImpl extends OneToManyIterator<string> {\n  // A partial string at the end of an upstream chunk\n  carryover = '';\n\n  constructor(\n      protected upstream: LazyIterator<string>, protected separator: string) {\n    super();\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Split('${this.separator}')`;\n  }\n\n  async pump(): Promise<boolean> {\n    const chunkResult = await this.upstream.next();\n    if (chunkResult.done) {\n      if (this.carryover === '') {\n        return false;\n      }\n\n      // Pretend that the pump succeeded in order to emit the small last batch.\n      // The next pump() call will actually fail.\n      this.outputQueue.push(this.carryover);\n      this.carryover = '';\n      return true;\n    }\n    const lines = chunkResult.value.split(this.separator);\n    // Note the behavior: \" ab \".split(' ') === ['', 'ab', '']\n    // Thus the carryover may be '' if the separator falls on a chunk\n    // boundary; this produces the correct result.\n\n    lines[0] = this.carryover + lines[0];\n    for (const line of lines.slice(0, -1)) {\n      this.outputQueue.push(line);\n    }\n    this.carryover = lines[lines.length - 1];\n\n    return true;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\nimport {LazyIterator, OneToManyIterator} from './lazy_iterator';\nimport {StringIterator} from './string_iterator';\n\nexport abstract class ByteChunkIterator extends LazyIterator<Uint8Array> {\n  /**\n   * Decode a stream of UTF8-encoded byte arrays to a stream of strings.\n   *\n   * The byte arrays producetd from the ByteChunkIterator on which this is\n   * called will be interpreted as concatenated.  No assumptions are made about\n   * the boundaries of the incoming chunks, so a multi-byte UTF8 encoding of a\n   * character may span the boundary between chunks.  This naturally happens,\n   * for instance, when reading fixed-size byte arrays from a file.\n   */\n  decodeUTF8(): StringIterator {\n    return new Utf8Iterator(this);\n  }\n}\n\n// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on ByteChunkIterator.  Unfortunately they can't be placed in separate files,\n// due to resulting trouble with circular imports.\n// ============================================================================\n\n// We wanted multiple inheritance, e.g.\n//   class Utf8Iterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\n\nclass Utf8Iterator extends StringIterator {\n  private impl: Utf8IteratorImpl;\n\n  constructor(protected upstream: LazyIterator<Uint8Array>) {\n    super();\n    this.impl = new Utf8IteratorImpl(upstream);\n  }\n\n  summary() {\n    return this.impl.summary();\n  }\n\n  async next() {\n    return this.impl.next();\n  }\n}\n\n/**\n * Decode a stream of UTF8-encoded byte arrays to a stream of strings.\n *\n * This is tricky because the incoming byte array boundaries may disrupt a\n * multi-byte UTF8 character. Thus any incomplete character data at the end of\n * a chunk must be carried over and prepended to the next chunk before\n * decoding. Luckily with native decoder, TextDecoder in browser and\n * string_decoder in node, byte array boundaries are handled automatically.\n *\n * In the context of an input pipeline for machine learning, UTF8 decoding is\n * needed to parse text files containing training examples or prediction\n * requests (e.g., formatted as CSV or JSON). We cannot use the built-in\n * decoding provided by FileReader.readAsText() because here we are in a\n * streaming context, which FileReader does not support.\n *\n * @param upstream A `LazyIterator` of `Uint8Arrays` containing UTF8-encoded\n *   text, which should be interpreted as concatenated.  No assumptions are\n *   made about the boundaries of the incoming chunks, so a multi-byte UTF8\n *   encoding of a character may span the boundary between chunks.  This\n *   naturally happens, for instance, when reading fixed-size byte arrays from a\n *   file.\n */\nclass Utf8IteratorImpl extends OneToManyIterator<string> {\n  // `decoder` as `any` here to dynamically assign value based on the\n  // environment.\n  // tslint:disable-next-line:no-any\n  decoder: any;\n\n  constructor(protected readonly upstream: LazyIterator<Uint8Array>) {\n    super();\n    if (env().get('IS_BROWSER')) {\n      this.decoder = new TextDecoder('utf-8');\n    } else {\n      // tslint:disable-next-line:no-require-imports\n      const {StringDecoder} = require('string_decoder');\n      this.decoder = new StringDecoder('utf8');\n    }\n  }\n  summary() {\n    return `${this.upstream.summary()} -> Utf8`;\n  }\n\n  async pump(): Promise<boolean> {\n    const chunkResult = await this.upstream.next();\n    let chunk;\n    if (chunkResult.done) {\n      return false;\n    } else {\n      chunk = chunkResult.value;\n    }\n\n    let text: string;\n    if (env().get('IS_BROWSER')) {\n      text = this.decoder.decode(chunk, {stream: true});\n    } else {\n      text = this.decoder.write(Buffer.from(chunk.buffer));\n    }\n    this.outputQueue.push(text);\n    return true;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\n// inspired by https://github.com/maxogden/filereader-stream\nimport {env, util} from '@tensorflow/tfjs-core';\nimport {FileElement} from '../types';\nimport {ByteChunkIterator} from './byte_chunk_iterator';\n\nexport interface FileChunkIteratorOptions {\n  /** The byte offset at which to begin reading the File or Blob. Default 0. */\n  offset?: number;\n  /** The number of bytes to read at a time. Default 1MB. */\n  chunkSize?: number;\n}\n\n/**\n * Provide a stream of chunks from a File, Blob, or Uint8Array.\n * @param file The source File, Blob or Uint8Array.\n * @param options Optional settings controlling file reading.\n * @returns a lazy Iterator of Uint8Arrays containing sequential chunks of the\n *   input File, Blob or Uint8Array.\n */\nexport class FileChunkIterator extends ByteChunkIterator {\n  offset: number;\n  chunkSize: number;\n\n  constructor(\n      protected file: FileElement,\n      protected options: FileChunkIteratorOptions = {}) {\n    super();\n    util.assert(\n        (file instanceof Uint8Array) ||\n            (env().get('IS_BROWSER') ?\n                 (file instanceof File || file instanceof Blob) :\n                 false),\n        () => 'FileChunkIterator only supports File, Blob and Uint8Array ' +\n            'right now.');\n    this.offset = options.offset || 0;\n    // default 1MB chunk has tolerable perf on large files\n    this.chunkSize = options.chunkSize || 1024 * 1024;\n  }\n\n  summary() {\n    return `FileChunks ${this.file}`;\n  }\n\n  async next(): Promise<IteratorResult<Uint8Array>> {\n    if (this.offset >= ((this.file instanceof Uint8Array) ?\n                            this.file.byteLength :\n                            this.file.size)) {\n      return {value: null, done: true};\n    }\n    const chunk = new Promise<Uint8Array>((resolve, reject) => {\n      const end = this.offset + this.chunkSize;\n      if (this.file instanceof Uint8Array) {\n        // Note if end > this.uint8Array.byteLength, we just get a small last\n        // chunk.\n        resolve(new Uint8Array(this.file.slice(this.offset, end)));\n      } else {\n        // This branch assumes that this.file type is File or Blob, which\n        // means it is in the browser environment.\n\n        // TODO(soergel): is this a performance issue?\n        const fileReader = new FileReader();\n        fileReader.onload = (event) => {\n          let data: string|ArrayBuffer|Uint8Array = fileReader.result;\n          // Not sure we can trust the return type of\n          // FileReader.readAsArrayBuffer See e.g.\n          // https://github.com/node-file-api/FileReader/issues/2\n          if (data instanceof ArrayBuffer) {\n            data = new Uint8Array(data);\n          }\n          if (!(data instanceof Uint8Array)) {\n            return reject(new TypeError('FileReader returned unknown type.'));\n          }\n          resolve(data);\n        };\n        fileReader.onabort = (event) => {\n          return reject(new Error('Aborted'));\n        };\n        fileReader.onerror = (event) => {\n          return reject(new Error(event.type));\n        };\n        // TODO(soergel): better handle onabort, onerror\n        // Note if end > this.file.size, we just get a small last chunk.\n        const slice = this.file.slice(this.offset, end);\n        // We can't use readAsText here (even if we know the file is text)\n        // because the slice boundary may fall within a multi-byte character.\n        fileReader.readAsArrayBuffer(slice);\n      }\n      this.offset = end;\n    });\n    return {value: (await chunk), done: false};\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\nimport {FileChunkIterator, FileChunkIteratorOptions} from './file_chunk_iterator';\n\n/**\n * Provide a stream of chunks from a URL.\n *\n * Note this class first downloads the entire file into memory before providing\n * the first element from the stream.  This is because the Fetch API does not\n * yet reliably provide a reader stream for the response body.\n */\nexport async function urlChunkIterator(\n    url: RequestInfo, options: FileChunkIteratorOptions = {}) {\n  let urlString;\n  let requestInit;\n  if ((typeof url) === 'string') {\n    urlString = url as string;\n  } else {\n    urlString = (url as Request).url;\n    requestInit = getRequestInitFromRequest(url as Request);\n  }\n  const response = await util.fetch(urlString, requestInit);\n  if (response.ok) {\n    const uint8Array = new Uint8Array(await response.arrayBuffer());\n    return new FileChunkIterator(uint8Array, options);\n  } else {\n    throw new Error(response.statusText);\n  }\n}\n\n// Generate RequestInit from Request to match tf.util.fetch signature.\nconst getRequestInitFromRequest = (request: Request) => {\n  const init = {\n    method: request.method,\n    headers: request.headers,\n    body: request.body,\n    mode: request.mode,\n    credentials: request.credentials,\n    cache: request.cache,\n    redirect: request.redirect,\n    referrer: request.referrer,\n    integrity: request.integrity,\n  };\n  return init;\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\n// Skip tslint any type check cause this method is aiming to check type of\n// input.\n// tslint:disable-next-line:no-any\nexport function isLocalPath(source: any): boolean {\n  return (typeof source === 'string') && source.substr(0, 7) === 'file://';\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\nimport {DataSource} from '../datasource';\nimport {ByteChunkIterator} from '../iterators/byte_chunk_iterator';\nimport {FileChunkIterator, FileChunkIteratorOptions} from '../iterators/file_chunk_iterator';\nimport {FileElement} from '../types';\nimport {isLocalPath} from '../util/source_util';\n\n/**\n * Represents a file, blob, or Uint8Array readable as a stream of binary data\n * chunks.\n */\nexport class FileDataSource extends DataSource {\n  /**\n   * Create a `FileDataSource`.\n   *\n   * @param input Local file path, or `File`/`Blob`/`Uint8Array` object to\n   *     read. Local file only works in node environment.\n   * @param options Options passed to the underlying `FileChunkIterator`s,\n   *   such as {chunksize: 1024}.\n   */\n  constructor(\n      protected input: FileElement|string,\n      protected readonly options: FileChunkIteratorOptions = {}) {\n    super();\n  }\n\n  async iterator(): Promise<ByteChunkIterator> {\n    if (isLocalPath(this.input) && env().get('IS_NODE')) {\n      // tslint:disable-next-line:no-require-imports\n      const fs = require('fs');\n      this.input = fs.readFileSync((this.input as string).substr(7));\n    }\n    // TODO(kangyizhang): Add LocalFileChunkIterator to split local streaming\n    // with file in browser.\n    return new FileChunkIterator(this.input as FileElement, this.options);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {DataSource} from '../datasource';\nimport {ByteChunkIterator} from '../iterators/byte_chunk_iterator';\nimport {FileChunkIteratorOptions} from '../iterators/file_chunk_iterator';\nimport {urlChunkIterator} from '../iterators/url_chunk_iterator';\nimport {isLocalPath} from '../util/source_util';\nimport {FileDataSource} from './file_data_source';\n\n/*\n * Represents a URL readable as a stream of binary data chunks.\n */\nexport class URLDataSource extends DataSource {\n  /**\n   * Create a `URLDataSource`.\n   *\n   * @param url A source URL string, or a `Request` object.\n   * @param options Options passed to the underlying `FileChunkIterator`s,\n   *   such as {chunksize: 1024}.\n   */\n  constructor(\n      protected readonly url: RequestInfo,\n      protected readonly fileOptions: FileChunkIteratorOptions = {}) {\n    super();\n  }\n\n  // TODO(soergel): provide appropriate caching options.  Currently this\n  // will download the URL anew for each call to iterator().  Since we have\n  // to treat the downloaded file as a blob/buffer anyway, we may as well retain\n  // it-- but that raises GC issues.  Also we may want a persistent disk cache.\n  async iterator(): Promise<ByteChunkIterator> {\n    if (isLocalPath(this.url)) {\n      return (new FileDataSource(this.url as string, this.fileOptions))\n          .iterator();\n    } else {\n      return urlChunkIterator(this.url, this.fileOptions);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {TensorContainer} from '@tensorflow/tfjs-core';\nimport {Dataset, datasetFromIteratorFn} from './dataset';\nimport {CSVDataset} from './datasets/csv_dataset';\nimport {iteratorFromFunction} from './iterators/lazy_iterator';\nimport {MicrophoneIterator} from './iterators/microphone_iterator';\nimport {WebcamIterator} from './iterators/webcam_iterator';\nimport {URLDataSource} from './sources/url_data_source';\nimport {CSVConfig, MicrophoneConfig, WebcamConfig} from './types';\n\n/**\n * Create a `CSVDataset` by reading and decoding CSV file(s) from provided URL\n * or local path if it's in Node environment.\n *\n * Note: If isLabel in columnConfigs is `true` for at least one column, the\n * element in returned `CSVDataset` will be an object of\n * `{xs:features, ys:labels}`: xs is a dict of features key/value pairs, ys\n * is a dict of labels key/value pairs. If no column is marked as label,\n * returns a dict of features only.\n *\n * ```js\n * const csvUrl =\n * 'https://storage.googleapis.com/tfjs-examples/multivariate-linear-regression/data/boston-housing-train.csv';\n *\n * async function run() {\n *   // We want to predict the column \"medv\", which represents a median value of\n *   // a home (in $1000s), so we mark it as a label.\n *   const csvDataset = tf.data.csv(\n *     csvUrl, {\n *       columnConfigs: {\n *         medv: {\n *           isLabel: true\n *         }\n *       }\n *     });\n *\n *   // Number of features is the number of column names minus one for the label\n *   // column.\n *   const numOfFeatures = (await csvDataset.columnNames()).length - 1;\n *\n *   // Prepare the Dataset for training.\n *   const flattenedDataset =\n *     csvDataset\n *     .map(({xs, ys}) =>\n *       {\n *         // Convert xs(features) and ys(labels) from object form (keyed by\n *         // column name) to array form.\n *         return {xs:Object.values(xs), ys:Object.values(ys)};\n *       })\n *     .batch(10);\n *\n *   // Define the model.\n *   const model = tf.sequential();\n *   model.add(tf.layers.dense({\n *     inputShape: [numOfFeatures],\n *     units: 1\n *   }));\n *   model.compile({\n *     optimizer: tf.train.sgd(0.000001),\n *     loss: 'meanSquaredError'\n *   });\n *\n *   // Fit the model using the prepared Dataset\n *   return model.fitDataset(flattenedDataset, {\n *     epochs: 10,\n *     callbacks: {\n *       onEpochEnd: async (epoch, logs) => {\n *         console.log(epoch + ':' + logs.loss);\n *       }\n *     }\n *   });\n * }\n *\n * await run();\n * ```\n *\n * @param source URL or local path to get CSV file. If it's a local path, it\n * must have prefix `file://` and it only works in node environment.\n * @param csvConfig (Optional) A CSVConfig object that contains configurations\n *     of reading and decoding from CSV file(s).\n */\n/**\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   configParamIndices: [1]\n *  }\n */\nexport function csv(\n    source: RequestInfo, csvConfig: CSVConfig = {}): CSVDataset {\n  return new CSVDataset(new URLDataSource(source), csvConfig);\n}\n\n/**\n * Create a `Dataset` that produces each element by calling a provided function.\n *\n * Note that repeated iterations over this `Dataset` may produce different\n * results, because the function will be called anew for each element of each\n * iteration.\n *\n * Also, beware that the sequence of calls to this function may be out of order\n * in time with respect to the logical order of the Dataset. This is due to the\n * asynchronous lazy nature of stream processing, and depends on downstream\n * transformations (e.g. .shuffle()). If the provided function is pure, this is\n * no problem, but if it is a closure over a mutable state (e.g., a traversal\n * pointer), then the order of the produced elements may be scrambled.\n *\n * ```js\n * let i = -1;\n * const func = () =>\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\n * const ds = tf.data.func(func);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n *\n * @param f A function that produces one data element on each call.\n */\nexport function func<T extends TensorContainer>(\n    f: () => IteratorResult<T>| Promise<IteratorResult<T>>): Dataset<T> {\n  const iter = iteratorFromFunction(f);\n  return datasetFromIteratorFn(async () => iter);\n}\n\n/**\n * Create a `Dataset` that produces each element from provided JavaScript\n * generator, which is a function*\n * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generator_functions),\n * or a function that returns an\n * iterator\n * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generator_functions).\n *\n * The returned iterator should have `.next()` function that returns element in\n * format of `{value: TensorContainer, done:boolean}`.\n *\n * Example of creating a dataset from an iterator factory:\n * ```js\n * function makeIterator() {\n *   const numElements = 10;\n *   let index = 0;\n *\n *   const iterator = {\n *     next: () => {\n *       let result;\n *       if (index < numElements) {\n *         result = {value: index, done: false};\n *         index++;\n *         return result;\n *       }\n *       return {value: index, done: true};\n *     }\n *   };\n *   return iterator;\n * }\n * const ds = tf.data.generator(makeIterator);\n * ds.forEachAsync(e => console.log(e));\n * ```\n *\n * Example of creating a dataset from a generator:\n * ```js\n * function* dataGenerator() {\n *   const numElements = 10;\n *   let index = 0;\n *   while (index < numElements) {\n *     const x = index;\n *     index++;\n *     yield x;\n *   }\n * }\n *\n * const ds = tf.data.generator(dataGenerator);\n * ds.forEachAsync(e => console.log(e));\n * ```\n *\n * @param generator A Javascript generator function that returns a JavaScript\n *     iterator.\n */\n/**\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   configParamIndices: [1]\n *  }\n */\nexport function generator<T extends TensorContainer>(\n    generator: () => Iterator<T>| Promise<Iterator<T>>): Dataset<T> {\n  return datasetFromIteratorFn(async () => {\n    const gen = await generator();\n    return iteratorFromFunction(() => gen.next());\n  });\n}\n\n/**\n * Create an iterator that generate `Tensor`s from webcam video stream. This API\n * only works in Browser environment when the device has webcam.\n *\n * Note: this code snippet only works when the device has a webcam. It will\n * request permission to open the webcam when running.\n * ```js\n * const videoElement = document.createElement('video');\n * videoElement.width = 100;\n * videoElement.height = 100;\n * const cam = await tf.data.webcam(videoElement);\n * const img = await cam.capture();\n * img.print();\n * cam.stop();\n * ```\n *\n * @param webcamVideoElement A `HTMLVideoElement` used to play video from\n *     webcam. If this element is not provided, a hidden `HTMLVideoElement` will\n *     be created. In that case, `resizeWidth` and `resizeHeight` must be\n *     provided to set the generated tensor shape.\n * @param webcamConfig A `WebcamConfig` object that contains configurations of\n *     reading and manipulating data from webcam video stream.\n */\n/**\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   ignoreCI: true\n *  }\n */\nexport async function webcam(\n    webcamVideoElement?: HTMLVideoElement,\n    webcamConfig?: WebcamConfig): Promise<WebcamIterator> {\n  return WebcamIterator.create(webcamVideoElement, webcamConfig);\n}\n\n/**\n * Create an iterator that generate frequency-domain spectrogram `Tensor`s from\n * microphone audio stream with browser's native FFT. This API only works in\n * browser environment when the device has microphone.\n *\n * Note: this code snippet only works when the device has a microphone. It will\n * request permission to open the microphone when running.\n * ```js\n * const mic = await tf.data.microphone({\n *   fftSize: 1024,\n *   columnTruncateLength: 232,\n *   numFramesPerSpectrogram: 43,\n *   sampleRateHz:44100,\n *   includeSpectrogram: true,\n *   includeWaveform: true\n * });\n * const audioData = await mic.capture();\n * const spectrogramTensor = audioData.spectrogram;\n * spectrogramTensor.print();\n * const waveformTensor = audioData.waveform;\n * waveformTensor.print();\n * mic.stop();\n * ```\n *\n * @param microphoneConfig A `MicrophoneConfig` object that contains\n *     configurations of reading audio data from microphone.\n */\n/**\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   ignoreCI: true\n *  }\n */\nexport async function microphone(microphoneConfig?: MicrophoneConfig):\n    Promise<MicrophoneIterator> {\n  return MicrophoneIterator.create(microphoneConfig);\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '1.5.2';\nexport {version};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport * from '@tensorflow/tfjs-core';\nexport * from '@tensorflow/tfjs-layers';\nexport * from '@tensorflow/tfjs-converter';\n\n// Export data api as tf.data\nimport * as data from '@tensorflow/tfjs-data';\nexport {data};\n\n// Import versions of all sub-packages.\nimport {version_core} from '@tensorflow/tfjs-core';\nimport {version_data} from '@tensorflow/tfjs-data';\nimport {version_layers} from '@tensorflow/tfjs-layers';\nimport {version_converter} from '@tensorflow/tfjs-converter';\nimport {version as version_union} from './version';\n\nexport const version = {\n  'tfjs-core': version_core,\n  'tfjs-data': version_data,\n  'tfjs-layers': version_layers,\n  'tfjs-converter': version_converter,\n  'tfjs': version_union\n};\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '1.5.2';\nexport {version};\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '1.5.2';\nexport {version};\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '1.5.2';\nexport {version};\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '1.5.2';\nexport {version};\n"],"names":["global","this","populateURLFlags","platformName","platform","console","warn","Environment","flagName","evaluationFn","setHook","flagRegistry","urlFlags","flagValue","set","flags","evaluateFlag","get","Object","value","assign","location","search","params","urlParams","queryString","replace","s","_i","t","name","decodeURIComponent","join","tfjsflags","split","forEach","keyValue","key","_this","toLowerCase","gradRegistry","kernelName","backendName","makeKey","kernelRegistry","entries","result","done","config","push","has","array","length","temp","index","counter","Math","random","min","x","max","val","arr","i","sum","expr","msg","shapeA","shapeB","errorMessagePrefix","assert","arraysEqual","a","skipTypedArray","Array","isArray","isTypedArray","flatten","shape","size","n1","n2","tanh","Infinity","exp","e2x","ceil","sqrt","width","repeat","checkFn","delayFn","maxCounter","resolve","reject","tryFn","tryCount","setTimeout","nextBackoff","implicitIdx","shapeProd","slice","newShape","axis","map","concat","every","ax","rank","keptDims","isEmptyArray","axes","parseAxisParam","sort","j","dtype","values","vals","isNaN","num","isFinite","oldType","newType","bytes","inferDtype","isNumber","isString","isBoolean","f","constructor","call","apply","start","strides","debugMode","checkConversionForErrors","bool","round","reduce","acc","c","offset","d","ret","len","rest","createNestedArray","makeZerosTypedArray","now","dimSize","Number","isInteger","encoding","env","encode","decode","b","r","diff","n","shuffledIndices","path","requestInits","fetch","backendTimer","logger","inputs","timer","time","outputs","data","then","timing","getExtraProfileInfo","extraInfo","logKernelProfile","kernelMs","timeMs","util.rightPad","paddedName","toString","inputShapesDescription","name_1","inputRank","inputShape","log","FORMAT_NUM_FIRST_LAST_VALS","FORMAT_NUM_SIG_DIGITS","pad","parseFloat","toFixed","boolNumToString","v","complexTuples","util.sizeFromShape","util.assert","n_1","util.getArrayFromDType","computeStrides","locs","locToIndex","TensorBuffer","locs_1","_a","loc","i_1","floor","makeTensor","trackerFn","opHandler","deprecationWarningFn","dataId","id","rankType","throwIfDisposed","as1D","Tensor","reshape","rows","columns","depth","depth2","depth3","cast","buffer","dataSync","toNestedArray","read","readSync","isDisposed","disposeTensor","isDisposedInternal","asType","verbose","print","expandDims","exclusive","reverse","cumsum","squeeze","clone","onValue","offValue","oneHot","padPerCol","sizeFromShape","numCols","fill","valuesOrTuples","createComplexTuples","row","valToString","valsLines","isLast","FORMAT_LIMIT_NUM_VALS","storagePerElement","firstVals","from","firstValsSize","lastVals","substrides","stride","lines","subTensorToString","end","subshape","sep","newLineSep","l","tensorToString","reps","tile","indices","gather","transposeA","transposeB","matMul","dot","ord","keepDims","norm","begin","numOrSizeSplits","stack","unstack","paddings","constantValue","mean","variance","varianceEpsilon","scale","batchNorm","all","any","logSumExp","prod","argMin","argMax","add","addStrict","atan2","sub","subStrict","pow","powStrict","mul","mulStrict","div","divNoNan","floorDiv","divStrict","minimum","minimumStrict","maximum","maximumStrict","mod","modStrict","squaredDifference","squaredDifferenceStrict","perm","transpose","notEqual","notEqualStrict","less","lessStrict","equal","equalStrict","lessEqual","lessEqualStrict","greater","greaterStrict","greaterEqual","greaterEqualStrict","logicalAnd","logicalOr","logicalNot","logicalXor","condition","where","neg","sign","isInf","expm1","log1p","rsqrt","square","reciprocal","abs","clipByValue","relu","relu6","elu","selu","alpha","leakyRelu","prelu","sigmoid","logSigmoid","softplus","zerosLike","onesLike","sin","cos","tan","asin","acos","atan","sinh","cosh","asinh","acosh","atanh","erf","step","dim","softmax","logSoftmax","newShape2D","alignCorners","image","resizeBilinear","resizeNearestNeighbor","filter","dataFormat","dilation","dimRoundingMode","conv1d","dilations","conv2d","outputShape","conv2dTranspose","depthwiseConv2d","depthwiseFilter","pointwiseFilter","separableConv2d","filterSize","avgPool","maxPool","radius","bias","beta","localResponseNormalization","windowShape","poolingType","padding","dilationRate","pool","trainable","makeVariable","segmentIds","numSegments","unsortedSegmentSum","blockShape","crops","batchToSpaceND","spaceToBatchND","k","sorted","topk","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","stridedSlice","blockSize","depthToSpace","spectral","fft","ifft","rfft","irfft","defineProperty","Symbol","hasInstance","instance","UpcastInt32AndMap","UpcastBoolAndMap","UpcastFloat32AndMap","UpcastComplex64AndMap","initialValue","tensorId","_super","Variable","newValue","util.arraysEqual","incRef","disposeVariable","Rank","float32","int32","complex64","typeA","typeB","type","upcastType","container","list","seen","obj","iterable","walkTensorContainer","tensor","tensorList","newBytes","newTensors","peakBytes","kernels","registeredVariables","variableName","dispose","ENV","state","pendingBackendInit","backendInstance","sortedBackends","getSortedBackends","initializeBackend","success","setBackend","Engine","keys","registryFactory","registry","factory","priority","_c","_b","setupRegisteredKernels","profiler","getKernelsForBackend","kernel","setupFunc","disposeFunc","registryFactoryEntry","Promise","backend","pendingBackendInitId","promiseId_1","catch","err","message","asyncInit","disposeRegisteredKernels","destBackend","tensorInfo","srcBackend","info","disposeData","move","shouldCheckForMemLeaks","numDataMovesStack","nameOrFn","fn","scopedRun","startScope","endScope","error","res","ex","nextTensorId","nextVariableId","makeTensorFromDataId","addTapeNode","activeScope","y","dy","toFloat","attrs","inputsToSave","outputsToSave","runKernelFunc","getBool","numDataIdsBefore","outInfos","numDataIds","numOutputDataIds","dataIdsLeaked","numDataIdsAfter","numMoves","forwardFunc","backwardsFunc","isTapeOn","saveFunc","tensors","saved","keep","startingBytecount","numBytes","startingNumTensors","numTensors","getKernel","out","kernelFunc","checkKernelForMemLeak","outsToSave","outTensors","_","tidy","outs","kernelDepth","profileKernel","profiling","activeProfile","bytesAdded","totalBytesSnapshot","tensorsAdded","totalTensorsSnapshot","inputShapes","outputShapes","item","util.isString","backendVals","write","bytesFromStringArray","refCount","numStringTensors","numDataBuffers","util.bytesPerElement","track","delete","varName","memory","unreliable","reasons","query","startBytes","startNumTensors","gradientDepth","gradientsFunc","tapeNode","nextTapeNodeId","gradConfig","getGradient","gradFunc","gradient","dys","util.makeZerosTypedArray","output","activeTape","kept","nextScopeId","scopeInfo","scopeStack","tensorsToTrackInParent","getTensorsInContainer","tensorsToTrackInParentSet","pop","scopeId","oldScope","xs","allowNoGradients","startTape","endTape","tape","nodesFromX","tensorsFromX","node","nodeInputs","inputName","anyInputFromX","input","tensorsLeadToY","nodesToY","nodeInput","prunedInputs","prunedNode","filteredTape","accumulatedGradientMap","makeOnesTypedArray","ENGINE","tensorAccumulatedGradientMap","o","gradTensor","inputGradients","dx","curGradient","grads","util.isFunction","inputMap","save","gradRes","grad","gradMap","timingInfo","wallMs","reset","GLOBAL","ns","window","process","self","_tfengine","environment","document","registerFlag","debugValue","versions","navigator","userAgent","test","vendor","TextureUsage","PhysicalTextureType","contexts","WEBGL_ATTRIBUTES","antialias","premultipliedAlpha","preserveDrawingBuffer","stencil","failIfMajorPerformanceCaveat","webGLVersion","gl","createElement","canvas","addEventListener","ev","preventDefault","getContext","isContextLost","getWebGLContext","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","textureHalfFloatExtension","internalFormatHalfFloat","internalFormatPackedHalfFloat","internalFormatPackedFloat","textureFormatFloat","downloadUnpackNumChannels","defaultNumChannels","textureTypeHalfFloat","textureTypeFloat","glany","getNumber","internalFormatFloat","R32F","R16F","RGBA16F","RGBA32F","RED","HALF_FLOAT","FLOAT","RGBA","HALF_FLOAT_OES","downloadTextureFormat","func","getError","NO_ERROR","getWebGLErrorMessage","returnValue","PackingScheme","MAX_FLOAT16","MIN_FLOAT16","status","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","INVALID_FRAMEBUFFER_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","debug","extensionName","getExtension","vertexShaderSource","throwIfNull","createShader","VERTEX_SHADER","callAndCheck","shaderSource","vertexShader","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","fragmentShaderSource","FRAGMENT_SHADER","fragmentShader","shaderInfoLog","lineNumberRegex","exec","lineNumberRegexResult","shaderLines","linesWithLineNumbers","line","lineNumber","maxLineLength","errorLine","afterErrorLines","beforeErrorLines","MAX_TEXTURES_IN_SHADER","createProgram","program","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","validateProgram","VALIDATE_STATUS","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","createTexture","height","requested","maxTextureSize","createFramebuffer","attribute","arrayEntriesPerItem","itemStrideInBytes","itemOffsetInBytes","getAttribLocation","vertexAttribPointer","enableVertexAttribArray","texture","textureUnit","validateTextureUnit","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","uniformName","getUniformLocation","uniformSamplerLocation","uniform1i","framebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","getFramebufferErrorMessage","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","returnTOrNull","failureMessage","tOrNull","MAX_COMBINED_TEXTURE_IMAGE_UNITS","glTextureUnit","maxTextureUnit","dimsToSkip","shapeAs3D","getBatchDim","getRowsCols","logShape","isPacked","maxTexSize","util.nearestLargerEven","util.squeezeShape","squeezeResult","cols","util.sizeToSquarishShape","batchDim","shape1","shape2","shape2Cols","shape1Cols","isEven","MAX_TEXTURE_SIZE","getParameter","MAX_TEXTURE_IMAGE_UNITS","hasExtension","e","getTextureConfig","texImage2D","texConfig","frameBuffer","deleteTexture","deleteFramebuffer","isFrameBufferComplete","createFloatTextureAndBindToFramebuffer","fenceSync","viewport","scissor","firstElem","deepAssertShapeConsistency","subShape","expectedDtype","actualDType","argName","functionName","parseAsDtype","inferredDtype","indexOf","assertDtype","inferShape","toTypedArray","inferredShape","arg","outputLoc","reduceLoc","outIdx","reduceIdx","aShape","outShape","axesAreInnerMostDims","numAxes","shapes","firstShape","opName","endsWith","substring","args","f2","configurable","webgl_util.isWebGLVersionEnabled","webgl_util.getWebGLDisjointQueryTimerVersion","opera","substr","deprecationWarn","op","complex_","real","imag","convertToTensor","$imag","$real","complex","real_","$input","imag_","assertNonNegativeIntegerDimensions","inferredSize_1","providedSize_1","flatDimsDontMatch","inferred","assertNonNull","ones","imag_1","zeros","real_1","imag_2","real_2","stop","linspace","onesLike_","$x","zerosLike_","concat_","convertToTensorArray","$tensors","computeOutShape","assertParamsConsistent","attr","sizeSplits","concat1d","concat1d_","concat2d","concat2d_","concat3d","concat3d_","concat4d","concat4d_","split_","splitSizes","module","define","s0","s1","s2","seed","opts","me","mash","charCodeAt","h","next","prng","xg","double","quick","copy","exports","impl","alea","z","w","strseed","xor128","xorwow","X","xorshift7","limit","xor4096","tychei","math","chunks","rngname","startdenom","significance","overflow","mask","options","callback","shortseed","mixkey","typ","prop","entropy","tostring","nodecrypto","randomBytes","crypto","msCrypto","getRandomValues","plugins","browser","screen","arc4","g","S","pass","is_math_call","keylen","count","stringseed","smear","fromCharCode","seedrandom","require","sr","stdDeviation","truncated","stdDev","nextVal","NaN","upper","lower","seedrandom.alea","seedValue","resultY","isValid","v2","v1","resultX","isValidTruncated","convertValue","MPRandGauss","randu","randn","v0","u","nextValue","x2","RandGamma","range","canReturnFloat","UniformRandom","util.assertNonNegativeIntegerDimensions","batchToSpaceND_","broadcastTo","broadcastTo_","xShape","some","unshift","cast_","util.isValidDtype","clone_","cumsum_","permutation","getAxesPermutation","permutedX","getInnerMostAxes","permutedAxis","depthToSpace_","inputHeight","inputWidth","inputDepth","expandDims_","splice","eye","eye_","numRows","numColumns","batchShape","buff","toTensor","as2D","multinomial","multinomial_","logits","numSamples","normalized","numOutcomes","$logits","origRank","logits2D","oneHot_","$indices","pad_","p","pad1d","pad1d_","pad2d","pad2d_","pad3d","pad3d_","pad4d","pad4d_","rand","rand_","randFunction","randomNormal","randomNormal_","randGauss","randomGamma","randomGamma_","rgamma","randomUniform","randomUniform_","minval","maxval","reshape_","util.inferFromImplicitShape","spaceToBatchND_","squeeze_","stack_","util.assertShapesMatch","expandedTensors","tile_","xGrad","truncatedNormal","truncatedNormal_","unstack_","setdiff1dAsync","$y","yVals","ySet","outputSize","xVals","batchToSpace","reshaped","spatialLength","reshapedRank","blockShapeRank","permuted","permutedAfterBatch","permutedBeforeBatch","reshapedPermuted","sliceBeginCoords","uncroppedShape","sliceSize","sliceRank","indicesShape","nResult","resultShape","PARALLELIZE_THRESHOLD","inSize","nearestDivisor","updates","shapeError","sliceDim","indicesRank","totalNd","numUpdates","safeSliceDim","startIndices","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","axisSize","util.clamp","stopIndices","firstNonOneAxis","flatOffset","varList","specifiedVarList","variable","originalVarCount","namedGrads","specifiedNonTrainable","customGrad","softmax_","lse","dyTimesY","logSoftmax_","shifted","xMax","dataMover","moveData","DataStorage","dataIdsCount","KernelBackend","floatPrecision","convInfo","dY","newHeight","newWidth","newHEight","inputImage","outputImage","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","boxIndex","cropSize","method","extrapolationValue","sparseIndices","sparseValues","defaultValue","inShape","dims","inRank","outAxis","outDim","inDim","roundingMode","filterHeight","filterWidth","filterShape","$dataFormat","filterDepth","depthwise","batchSize","inHeight","inWidth","inChannels","filterChannels","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","getEffectiveFilterSize","effectiveFilterWidth","_d","outHeight","outWidth","padInfo","top","bottom","left","right","fieldSize","zeroPad","computeDefaultPad","inputCols","outputRows","conditionalRound","util.isInt","outputCols","padAlongWidth","top_1","padAlongHeight","outChannels","inDepth","strideDepth","dilationDepth","effectiveFilterDepth","outDepth","front","back","inputRows","outputDepths","padAlongDepth","top_2","effectiveFieldSize","param","dimA","dimB","dimC","tupleValuesAreOne","floatX","zerosTensor","hasEncodingLoss","int","scalar","zero","inverse","PI","element","comparator","target","middle","found","compareResult","defaultComparator","insertionPoint","selectedIndices","softNmsSigma","nonMaxSuppressionImpl_","numValidOutputs","selectedScores","returnScoresTensor","padToMaxOutputSize","score","suppressBeginIndex","ascendingComparator","candidates","originalScore","intersectionOverUnion","iou","ignoreCandidate","candidate","suppressWeight","binaryInsert","tensor1d","subarray","jCoord","yminI","iCoord","xminI","ymaxI","xmaxI","yminJ","xminJ","ymaxJ","xmaxJ","areaI","areaJ","intersectionXmin","intersectionYmax","intersectionXmax","intersectionArea","intersectionYmin","weight","c1","c2","xBuf","indexToLoc","originalLoc","newLoc","originalIndex","xDtype","batch","allTopKVals","getTypedArrayFromDType","allTopKIndices","valAndInd","topKVals","outOffset","topKIndices","condShape","condVals","inBuffer","getVecChannels","varyingVs","varyingFs","texture2D","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","version","coords","util.computeStrides","inputsInfo","userCode","usesPackedTextures","shapeInfo","logicalShape","isUniform","prefixSnippets","floatTextureSetOutputSnippet","inputPrefixSnippet","inputSamplingSnippet","inInfo","outShapeInfo","funcName","glsl","texName","charAt","toUpperCase","getGlslDifferences","inputInfo","texShape","packedTexShape","texNumR","texNumC","valuesPerRow","newInputInfo","squeezeInputInfo","squeezedShape","getPackedSamplerFromInInfo","getSqueezedParams","texelsInBatch","tNumR","tNumC","getFlatOffsetUniformName","getUniformSampler","texNumC_1","texNumR_1","getSamplerFromInInfo","stride0","stride1","stride2","stride3","stride4","texFuncSnippet","outRank","broadcastDims","getBroadcastDims","getCoordsDataType","rankDiff","fields","coordsSnippet","unpackedCoordsSnippet","isInputScalar","isOutputScalar","outTexShape","inTexShape","floatTextureSampleSnippet","shaderPrefix","SAMPLE_1D_SNIPPET","SAMPLE_2D_SNIPPET","SAMPLE_3D_SNIPPET","outputSamplingSnippet","texelsInLogicalRow","texelsInBatchN","batches","coordsFromIndexSnippet","shader_util.getLogicalCoordinatesFromFlatIndex","SHADER_PACKED_PREFIX","JSON","parse","stringify","bShape","broadcast_util.assertAndGetBroadcastShape","ADD","SUB","MUL","PRELU","checkOutOfBounds","checkOutOfBoundsString","getChannels","channels","gpgpu","webGLProgram","minLoc","getUniformLocationNoThrow","maxLoc","uniform1f","channel","shift","idx","channelIdx","addBias","activation","hasPreluActivationWeights","padLeft","inputDepthNearestVec4","inputDepthVec4Remainder","isChannelsLast","rowDim","colDim","channelDim","activationSnippet","applyActivationSnippet","variableNames","padTop","addBiasSnippet","hasPreluActivation","xNumCols","channelMul","xNumRows","texelsAcross","mainLoop","texelC","nextTexelOffset","getHeightCoordString","getWidthCoordString","getDepthCoordString","getOutputDepthSize","getInputSamplingString","DepthToSpaceProgram","resultDenominator","innerDim","exponentMultiplierSnippet","valueLoc","internalFormat","textureFormat","textureType","webgl_util.validateTextureSize","webgl_util.createTexture","tex2d","webgl_util.callAndCheck","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","textureConfig","UNSIGNED_BYTE","vertexBuffer","webgl_util.bindVertexBufferToProgramAttribute","texelDataType","dataForUpload","pixels","gl2","PIXEL_PACK_BUFFER","bytesPerFloat","bufferSizeBytes","STREAM_READ","readPixels","downloadTarget","getBufferSubData","physicalRows","physicalCols","packedRGBA","setWebGLContext","glVersion","textureFloatExtension","webgl_util.getExtensionOrThrow","webgl_util.hasExtension","colorBufferFloatExtension","COLOR_BUFFER_FLOAT","colorBufferHalfFloatExtension","gpgpu_util.createVertexBuffer","indexBuffer","gpgpu_util.createIndexBuffer","webgl_util.createFramebuffer","tex_util.getTextureConfig","GPGPUContext","disposed","outputTexture","finish","deleteBuffer","gpgpu_util.createFloat32MatrixTexture","gpgpu_util.createFloat16MatrixTexture","gpgpu_util.createUnsignedBytesMatrixTexture","gpgpu_util.uploadPixelDataToTexture","gpgpu_util.uploadDenseMatrixToTexture","gpgpu_util.createFloat16PackedMatrixTexture","gpgpu_util.createPackedMatrixTexture","webgl_util.unbindColorTextureFromFramebuffer","downloadMatrixDriver","bindTextureToFrameBuffer","gpgpu_util.createBufferFromOutputTexture","unbindTextureToFrameBuffer","createFence","pollFence","fenceContext","isFencePassed","sync_1","gl2_1","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","beginQuery","endQuery","isQueryAvailable","webgl_util.createFragmentShader","gpgpu_util.createVertexShader","webgl_util.createProgram","attachShader","webgl_util.linkProgram","webgl_util.validateProgram","vertexAttrsAreBound","setProgram","gpgpu_util.bindVertexProgramAttributeStreams","deleteProgram","useProgram","shouldThrow","webgl_util.getProgramUniformLocationOrThrow","webgl_util.getProgramUniformLocation","inputMatrixTexture","uniformLocation","throwIfNoProgram","webgl_util.bindTextureToProgramUniformSampler","outputMatrixTexture","setOutputMatrixTextureDriver","outputPackedMatrixTexture","startRow","startColumn","setOutputMatrixWriteRegionDriver","webgl_util.validateFramebuffer","debugValidate","drawElements","TRIANGLES","UNSIGNED_SHORT","disjointQueryTimerExtension","getQueryTimerExtension","ext_1","getQueryTimerExtensionWebGL2","query_1","createQuery","TIME_ELAPSED_EXT","getQueryTimerExtensionWebGL1","ext","createQueryEXT","beginQueryEXT","endQueryEXT","ext_2","util.repeatedTry","getQueryTime","queryTimerVersion","getQueryParameter","QUERY_RESULT","getQueryObjectEXT","QUERY_RESULT_EXT","available","QUERY_RESULT_AVAILABLE","disjoint","GPU_DISJOINT_EXT","QUERY_RESULT_AVAILABLE_EXT","addItemToPoll","itemsToPoll","isDoneFn","resolveFn","pollItems","webgl_util.bindColorTextureToFramebuffer","downloadAndDecode","outputMatrixTextureMaybePacked","shapeInfos","texShapeB","texData","texShapeA","sharedDimensionPacked","sharedDim","aSample","bSample","aSwizzle","bSwizzle","seedLoc","poolType","computePositions","initializationValue","isAvgPool","filterWidthVec4Remainder","updateSnippet","filterWidthNearestVec4","padFront","updateSize","updatesRank","summingDupeIndex","indicesString","updatesString","strideString","stridesType","indicesSnippet","updatesSnippet","destSize","uniformPart","sourceCoords","body","startLoc","uniform1iv","sourceLoc","innerDims","getChannel","upperRow","lowerRow","sourceLocSetup","shapeRC","usage","physicalTexType","getPhysicalFromLogicalTextureType","shapeKey","getKeyFromTextureShape","freeTextures","usedTextures","numFreeTextures","numUsedTextures","newTexture_1","PACKED_2X2_FLOAT32","newTexture","createPackedMatrixTexture","PACKED_2X2_FLOAT16","createFloat16PackedMatrixTexture","UNPACKED_FLOAT32","createFloat32MatrixTexture","UNPACKED_FLOAT16","createFloat16MatrixTexture","PACKED_4X1_UNSIGNED_BYTE","createUnsignedBytesMatrixTexture","TextureManager","logicalTexType","texIndex","texList","logEnabled","total","tex","deleteMatrixTexture","UPLOAD","RENDER","DOWNLOAD","PIXELS","shapeRowsCol","SELU_SCALEALPHA","SELU_SCALE","opSnippet","CHECK_NAN_SNIPPET","LINEAR","ABS","RELU","RELU6","ELU","CEIL","FLOOR","EXP","EXPM1","CLONE","binaryCaches","packed","unary_packed_op.LINEAR","unary_op.LINEAR","unary_packed_op.RELU","unary_op.RELU","unary_packed_op.ELU","unary_op.ELU","unary_packed_op.RELU6","unary_op.RELU6","binaryop_packed_gpu.PRELU","binaryop_gpu.PRELU","binaryCache","gpgpuCreatedLocally","textureManager","numMBBeforeWarning","devicePixelRatio","BEFORE_PAGING_CONSTANT","MathBackendWebGL","cpuBackend","pendingDeletes","checkNumericalProblems","complexTensors","unary_op.CLONE","runWebGLProgram","convertAndCacheOnCPU","shouldTimeProgram","activeTimers","util.now","mergeRealAndImagArrays","getValuesFromTexture","downloadWaitMs","pendingRead","tmpDownloadTarget","tmpData","createBufferFromTexture","tex_util.getDenseTexShape","createAndWaitForFence","realValues","ps","imagValues","downloadFloat32MatrixFromBuffer","dTypeVals","subscribers","pendingDisposal","webgl_util.canBeRepresented","tmpData_1","tmpTarget","vals_1","downloadMatrixFromPackedTexture","shouldUsePackedProgram","webgl_util.getShapeAs3D","ENCODE_FLOAT_SNIPPET","downloadByteEncodedFloatMatrixFromOutputTexture","newActiveTimers","outerMostTime","programTimersStack","flattenedActiveTimerQueries","util.flatten","flattenedActiveTimerNames","oldActiveTimers","uploadWaitMs","util.sum","ms","numBytesInGPU","startMs","endMs","waitForQueryAndGetTime","timerQuery","releaseGPUData","origDataId","dataRefCount","computeBytes","releaseTexture","uploadToGPU","findBackend","sizeThreshold","getCPUBackend","makeOutput","shouldExecuteOnCPU","isContinous","slice_util.isSliceContinous","customSetup","getCustomSetupFunc","compileAndRun","shallowSlice","newTexData","xTexData","slice_util.computeFlatOffset","slice_util.computeOutShape","inputDtype","newCoords","outputAxis_1","nextColumn","nextRow","channels1","inCoordsArray","inCoords","imags","reals","leftSide","midIndex","rightSide","concat_util.computeOutShape","offsets","lastChannels","allChannels","getValueSnippet","shiftedChannels","shift_1","lastIndex","program_1","tensors2D","snippets","lastShift","packedUnaryOp","unary_op.NEG","outerShapeB","outerShapeA","as3D","b3D","multiply","a3D","preluActivationWeights","hasBias","fusedActivation","mapActivationToShaderProgram","bData","realProgram","imagProgram","makeComplexComponentTensorInfo","aData","complex_1","packedBinaryOp","binaryop_gpu.MUL","offsetShape","scaleShape","meanShape","varianceShape","offsetSnippet","scaleSnippet","batchNormPackedProgram","batchNormProgram","rad","maxD","powOperator","basis","depthRadius","decodedData","currentCoords","source","cLimit","componentSetup","paddingArea","unpackedCoords","newDim","outputOrder","switchedOrder","getc","switched","switchedCoords","originalOrder","indicesLength","array_ops_util.getReshaped","array_ops_util.getPermuted","array_ops_util.getReshapedPermuted","array_ops_util.getSliceBeginCoords","array_ops_util.getSliceSize","completePaddings","reshapedPaddedShape","paddedX","permutedReshapedPaddedPermutation","flattenShape","reduceType","reduceInfo","windowSize","outSize","compareOp","windowSizeVec4Remainder","vecType","windowSizeNearestVec4","reduce_util.computeOptimalWindowSize","bestIndicesA","firstPass","indexSnippet","compOp","argReduce","sourceRank","sourceLocDType","inChannel","intChannels","srcRCoords","srcGCoords","srcBCoords","srcACoords","fetchCandidateIdx","fetchValue","getBestIndicesAChannelSnippet","argReducePacked","axis_util.assertAxesAreInnerMostDims","a2D","outputDType","sumOutType","axis_util.getAxesPermutation","axis_util.getInnerMostAxes","segOpCompute","axis_util.getUndoAxesPermutation","segOpType","segOpInfo","checkValueOutOfBounds","checkSegmentIdOutOfBounds","argMinMaxReduce","finalDim","getFinalCoord","cRank","abCoords","cCoords","cCoordVars","abCoordVars","complexSeparableBinaryOp","binaryop_gpu.ADD","complexTensor","complexPart","addN","d1","d2","operation","binaryop_gpu.SUB","subtract","unary_op.CEIL","unary_op.FLOOR","unary_op.EXP","unary_op.EXPM1","unary_op.ABS","xData","sharedMatMulDim","outerShapeX","outerShapeFilter","batchMatMulWillBeUnpacked","reshapeWillBeExpensive","xReshaped_1","targetShape_1","filterReshaped_1","fusedBatchMatMul","xReshaped","targetShape","originalXTexDataShape","webgl_util.isReshapeFree","pointwiseConv","filterReshaped","pointwiseConvTexData","x2ColShape","xSqueezed","w2Row","im2ColProgram","itemsPerBlockRow","unrolled","col","im2Col","matmulProgram","product","conv2dByMatMul","conv2dWithIm2Row","shouldPackDepthwiseConv","maxPoolPositions","maxPoolPositionsProgram","maxPoolBackPropProgram","avgMultiplier","avgPoolBackpropProgram","outIndex","avgPool3dBackpropProgram","maxPool3dPositions","maxPool3dPositionsProgram","maxPool3dBackPropProgram","packedReshape","oldHeight","oldWidth","effectiveOutSize","effectiveInSize","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","heightScale","widthScale","invHeightScale","invWidthScale","winHeight","winWidth","roundBase","probs","numIndices","nonMaxSuppressionV3","imageShape","boxShape","imageHeight","imageWidth","numBoxes","cropHeight","cropWidth","inputHeightFloat","inputWidthFloat","heightRatio","inY","widthRatio","inX","methodId","outputHeight","outputWidth","outputDepth","flattenIndices","flattenX","fftImpl","numSlices","getArrayFromDType","outOfBoundsCondition","cond","setup","coord","afterShape","webgl_util.getBatchDim","webgl_util.getRowsCols","input3D","input3DShape","thisRC","shader_util.getFlatIndexFrom3D","DENSE","getDenseTexShape","outputDtype","preventEagerUnpackingOfOutput","makeTensorInfo","outData","packedOutput","outPackingScheme","tex_util.PackingScheme","texelShape","outTexUsage","inputsData","packedInputs","uniformValues","unpackTensor","packTensor","dataToDispose","savedInput","outputData","keyInputs","hasOffset","keyUserCode","binary","getAndSaveBinary","inputInfos","inShapeInfos","shader_compiler.makeShader","infLoc","nanLoc","uniformLocations","startTimer","validateBinaryAndProgram","setOutputPackedMatrixTexture","outTex","setOutputMatrixTexture","varLoc","varOffsetLoc","uniform1fv","setInputMatrixTexture","executeProgram","endTimer","unpacked","outInfo","getBinary","remove","floatPrecisionValue","debugFlag","underflowCheckValue","webgl_util.getTextureShapeFromLogicalShape","isByteArray","inputIsUnsignedByte","tempDenseInputHandle","uploadDenseMatrixToTexture","getTexture","outputTexData","encodedOutputTarget","acquireTexture","float32Values","texType","warnedAboutMemory","mb","device_util.isBrowser","registerBackend","registerGradient","square_","abs_","complexAbs","acos_","acosh_","asin_","asinh_","atan_","atanh_","ceil_","clipByValue_","clipValueMin","clipValueMax","clip","cos_","cosh_","erf_","exp_","expm1_","floor_","log_","log1p_","logSigmoid_","neg_","reciprocal_","round_","rsqrt_","sigmoid_","sign_","isNaN_","isInf_","isFinite_","sin_","sinh_","softplus_","sqrt_","step_","tan_","tanh_","$offset","$mean","$variance","$scale","batchNorm_","x4D","as4D","batchNormalization","batchnormReshape4D","scaleValue","reductionAxes","getReductionAxes","tileShape","dyTimesScaleValue","oneOverSqrtVariance","minusHalfRCube","meanDer","xMinusMean","varianceDer","scaleDer","xMinusMean2TimesRsqrt","offsetDer","batchNormalization2d_","warnDeprecation","batchNorm2d_","batchNormalization3d","batchNormalization3d_","batchNorm3d_","batchNormalization4d","batchNormalization4d_","batchNorm4d_","batchNormalization_","batchNorm2d","batchNorm3d","batchNorm4d","logicalAnd_","$b","$a","logicalNot_","logicalOr_","logicalXor_","where_","$condition","assertShapesMatch","select","whereAsync","whereImpl","add_","reduceAxes","broadcast_util.getReductionAxes","addN_","firstTensor","ders","addStrict_","atan2_","div_","realDivide","tmp","divNoNan_","divResult","bEqualsZero","divStrict_","floorDiv_","maximum_","toInt","maximumStrict_","minimum_","minimumStrict_","mod_","modStrict_","mul_","mulStrict_","pow_","base","$exp","$base","expFloat","logBase","powStrict_","squaredDifference_","two","squaredDifferenceStrict_","sub_","subStrict_","equal_","assertAndGetBroadcastShape","equalStrict_","greater_","greaterEqual_","greaterEqualStrict_","greaterStrict_","less_","lessEqual_","lessEqualStrict_","lessStrict_","notEqual_","notEqualStrict_","arrays","gather_","indicesSize","outerShape","paramsShape","outerDims","innerShape","outerAxesIndices","arrayRange","innerAxesIndices","valuesShape","arrayConcat","reshapedIndices","transposeDims","valuesTranspose","paramsGrad","invertTransposeDims","getUndoAxesPermutation","unsortedSegmentSum_","$segmentIds","isInt","gathered","zeroClippedIndices","isPositive","numIters","zeroSlice","$tensor","$mask","axisFrom","maskDim","tensorShape","leadingSize","reshapedTensor","targetTensorShape","reshapedMask","positivePositions","dy4D","reshapedTo4D","xShape4D","conv_util.convertConv2DDataFormat","conv_util.computeConv2DInfo","conv2dDerInput","ddx","dy5D","reshapedTo5D","as5D","xShape5D","conv_util.computeConv3DInfo","conv3dDerInput","conv1d_","$filter","x3D","reshapedTo3D","conv_util.eitherStridesOrDilationsAreOne","input4D","filter4D","conv2d_","conv_util.tupleValuesAreOne","conv3d","conv3d_","x5D","conv3dDerFilter","conv2dDerFilter","conv2dDerFilter_","conv2dDerInput_","depthwiseConv2d_","depthwiseConv2D","depthwiseConv2dDerInput","depthwiseConv2dDerInput_","depthwiseConv2DDerInput","depthwiseConv2dDerFilter","depthwiseConv2dDerFilter_","depthwiseConv2DDerFilter","separableConv2d_","$depthwiseFilter","$pointwiseFilter","channelMultiplier","conv2dTranspose_","conv3dTranspose","conv3dTranspose_","matMul_","innerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","innerShapeA","batchMatMul","dot_","t1","t2","$t2","$t1","t2Inner","t1Inner","asScalar","outerProduct","outerProduct_","$v2","$v1","reverse_","util.parseAxisParam","reshapeAs","reverse1d","reverse1d_","reverse2d","reverse2d_","reverse3d","reverse3d_","reverse4d","reverse4d_","conv_util.computePool2DInfo","$output","$dy","maxPoolBackprop","avgPoolBackprop","maxPool_","avgPool_","pool_","basePadding","padExtraStart","padExtraShape","padExtraEnd","origPadEnd","fullInputShape","padStart","padEndExtra","padEnd","adjustedPadding","adjustedCrops","convertedPad","isDilationOne","convertedX","maxPool3d","maxPool3d_","conv_util.computePool3DInfo","input5D","output5D","maxPool3dBackprop","avgPool3d","avgPool3d_","avgPool3dBackprop","slice_","size_","begin_","slice_util.assertParamsValid","slice1d","slice1d_","slice2d","slice2d_","slice3d","slice3d_","slice4d","slice4d_","xOrig","origAxes","permutedAxes","axis_util.expandShapeToKeepDim","all_","any_","argMax_","argMin_","logSumExp_","max_","mean_","reduceSize","axis_util.computeOutAndReduceShapes","reduceSizeScalar","expandedDyShape","min_","moments","moments_","keepDimsShape","sum_","prod_","elu_","eluDer","leakyRelu_","prelu_","$alpha","relu_","relu6_","selu_","scaleAlpha","greaterThanZeroDer","lessEqualZeroDer","transpose_","undoPerm","localResponseNormalization_","localResponseNormalization4D","LRNGrad","norm_","basicLSTMCell_","forgetBias","lstmKernel","lstmBias","$lstmKernel","$lstmBias","$data","$c","$h","sliceCols","newC","$forgetBias","multiRNNCell","multiRNNCell_","lstmCells","newStates","newH","movingAverage_","decay","zeroDebias","$decay","assertTypesMatch","$v","oneMinusDecay","one","update","$step","stridedSlice_","expandAxes","maskToAxes","startForAxis","stopForAxis","shrinkAxes","topk_","lastDim","scatterND_","$updates","scatterND","fft_","innerDimensionSize","input2D","ifft_","rfft_","fftLength","adjustedInput","zerosShape","complexInput","zerosInput","half","realComplexConjugate","imagComplexConjugate","irfft_","realInput","imagInput","realConjugate","imagConjugate","sparseToDense_","$sparseValues","$defaultValue","defaultValues","numDims","numValues","numElems","$sparseIndices","sparseToDense","gatherND_","gatherND","diag_","diag","dropout_","rate","noiseShape","newDimension","keepProb","multiplier","$noiseShape","windowLength","newValues","even","cosArg","hannWindow_","hammingWindow","hammingWindow_","frame","frame_","signal","frameLength","frameStep","padValue","padLen","tensor2d","stft","stft_","windowFn","windowedSignal","framedSignal","inTopKAsync","predictions","targets","$targets","$predictions","targetsVals","predictionsVals","precision","Reduction","absoluteDifference_","labels","weights","reduction","SUM_BY_NONZERO_WEIGHTS","$weights","$labels","losses","computeWeightedLoss","computeWeightedLoss_","$losses","NONE","SUM","MEAN","weightedLoss","broadcastFactor","numNonZeros","cosineDistance","cosineDistance_","hingeLoss","hingeLoss_","huberLoss","huberLoss_","delta","quadratic","deltaScalar","linear","logLoss","logLoss_","epsilon","epsilonScalar","meanSquaredError","meanSquaredError_","sigmoidCrossEntropy","sigmoidCrossEntropy_","multiClassLabels","labelSmoothing","$multiClassLabels","labelSmoothingScalar","outputXTarget","sigmoidOutput","softmaxCrossEntropy","softmaxCrossEntropy_","onehotLabels","$onehotLabels","numClasses","logResult","dyShape","expandShapeToKeepDim","fullMatrices","q","m","one2D","iters","rTemp","wTemp","qTemp","bandPart_","numLower","numUpper","M","N","ij","inBand","mat","gramSchmidt","gramSchmidt_","inputIsTensor2D","dim_1","xs1d","ys","proj","qr","qr_","prev","q2ds_1","r2ds_1","outerDimsProd","x2d","q2d","r2d","NEGATIVE_INFINITY","resizeBilinear_","images","$images","batchImages","resizeBilinearBackprop","resizeNearestNeighbor_","resizeNearestNeighborBackprop","nonMaxSuppression","nonMaxSuppression_","$scores","nonMaxSuppSanityCheck","$boxes","nonMaxSuppressionWithScore","nonMaxSuppressionWithScore_","runKernel","cropAndResize","cropAndResize_","boxInd","$boxInd","$image","boxesVals","boxesAndScores","scoresVals","nonMaxSuppressionV5","shouldFuse","getFusedDyActivation","getFusedBiasGradient","dyActivation","applyActivation","fusedMatMul_","_e","unfusedMatMul","$preluActivationWeights","$bias","biasGradient","fusedConv2d_","unfusedConv2d","fusedConv2d","fusedDepthwiseConv2d_","unfusedDepthwiseConv2d","fusedDepthwiseConv2D","MathBackendCPU","firstUse","complex_util.mergeRealAndImagArrays","assertNotComplex","isSliceContinous","computeFlatOffset","length_1","ops.buffer","bufferSync","xLoc","inLoc","outLoc","innerSize","offset_1","tIdx","colOffset_1","resIdx","tVals","finalOutShape","ops.scalar","broadcastedBinaryComplexOp","aReal","aImag","bReal","bImag","broadcastedBinaryOp","aValue","bValue","resultVals","currVals","leftDim","rightDim","aValues","bValues","aBatch","aOuterStep","aInnerStep","bInnerStep","bOuterStep","bBatch","resVals","b_1","i0","j0","k0","jBlock","kBlock","iBlock","mapActivation","reduceShape","ops.zeros","aVals","ops.equal","segmentId","minIndex","maxIndex","resultDtype","indexAdjuster","prevIdx","aVal","bVal","topkImpl","rem","anyVal","inVals","xValue","resultValues","dyValues","selu_util.SELU_SCALE","selu_util.SELU_SCALEALPHA","hypot","threshold","tooSmall","expX","tooLarge","util.tanh","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","wVals","yOffset1","yR","xRCorner","wR","xR","xOffset2","xOffset1","yC","yOffset2","xCCorner","wC","xC","wOffset3","wOffset1","xOffset3","yOffset3","xVal","yF","xFCorner","wF","xF","wOffset2","xOffset4","wOffset4","yOffset4","dxValues","fltValues","fltS0","fltS1","fltS2","topPad","leftPad","xRMin","yRMax","xCMin","yCMax","dotProd","fltOffset","dyOffset","dxS0","dxS1","dxS2","dxS3","dyS0","dyS1","dyS2","dyS3","fltS3","frontPad","xFMin","yFMax","dW","dyBuf","yRMin","yCMin","dw","dwValues","dwS0","dwS1","dwS2","dwS3","xValues","xS0","xS1","xS2","xS3","yFMin","chMul","dm","trunc","xBuffer","outCoords","newIndex","indicesValues","POSITIVE_INFINITY","outputVals","outputBatchStrides","outputRowStrides","outputColStrides","inputBatchOffset","xRMax","outputRowOffset","outputBatchOffset","xCMax","minMaxValue","avgValue","xROffset","pixel","maxValue","maxPosition","maxPosBuf","maxPositions","dxR","dxC","dyCCorner","dyRCorner","dyR","dyC","outputDepthStrides","yDepth","xDepthMin","xDepthCorner","outputDepthOffset","yRow","xRowMin","xRowCorner","yCol","xColMin","xColCorner","outputColOffset","xDepth","xDepthMax","xRow","xRowMax","xDepthOffset","xCol","xColMax","xRowOffset","pool3d","dxDepth","dxRow","dxCol","dyRowCorner","dyColCorner","wDepth","dyDepthCorner","dyDepth","wRow","dyRow","wCol","dyCol","numChannels","effectiveInputSize","effectiveOutputSize","outputIdx","effectiveRowSizeRatio","effectiveColSizeRatio","sourceRowFloor","sourceFracRow","rowFrac","sourceRowCeil","topRowOffset","botRowOffset","sourceColFloor","sourceFracCol","colFrac","sourceColCeil","topLeftOffest","botLeftOffset","topRightOffset","botRightOffest","bottomLeft","topLeft","topDxRIndex","bottomDxRIndex","topDxROffset","bOffset","bottomDxROffset","dxRLerp","inverseDxRLerp","leftDxCIndex","rightDxCIndex","dxCLerp","inverseDxCLerp","topLeftRCOffset","topRightRCOffset","bottomLeftRCOffset","bottomRightRCOffset","inverseDxRLerpTimesInverseDxCLerp","inverseDxRLerpTimesDxCLerp","dxRLerpTimesInverseDxCLerp","dxRLerpTimesDxCLerp","dyVal","outputOffset","rowOffset","batchOffset","colOffset","newVal","startRLerp","startDyR","startCLerp","startDyC","dyRIndex","dyCIndex","dyROffset","accum","dyCOffset","mVals","varVals","sVals","offVals","outVals","offValsLength","sValsLength","varValsLength","mValsLength","offi","mi","si","vi","beginSumOffset","currentChannel","endSumOffset","sumAcrossChannels","inputImageValues","outputImageValues","depthBegin","depthEnd","dyi","ops.softmax","probabilities","numEvents","probVals","cdf","event_1","sampleId","event_2","event_3","indicesVal","fftBatch","realResult","imagResult","ops.real","ops.imag","ops.complex","complex_util.getComplexWithIndex","x1D","isExponentOf2","fftRadix2","fourierTransformByMatmul","evenComplex","evenTensor","oddComplex","oddTensor","exponent","addPart","subPart","realTensor","imagTensor","complex_util.exponent","term","complex_util.assignToTypedArray","offsetH","offsetD","inW","inH","inputIdx","bVals","aBroadcastDims","broadcast_util.getBroadcastDims","bBroadcastDims","bBuf","aLoc","aBuf","bLoc","aIndex","bIndex","realVals","imagVals","bIdx","aIdx","bRealBuf","aRealBuf","opResult","boxVals","boxIndVals","imageVals","inStride","outStride","y1","startInd","x1","y2","bInd","yInd","ind","bottomInd","yLerp","topInd","xInd","rightInd","xLerp","leftInd","topRight","closestY","closestX","outInd","inInd","scatter","indicesData","flattenIndex","sumDupeIndices","updatesData","registerKernel","webglBackend","isVideo","isImage","fromPixels2DContext","drawImage","tempPixelHandle","uploadPixelDataToTexture","gpuBackend","init","PlatformBrowser","text","textEncoder","setPlatform","util","TextEncoder","systemFetch","PlatformNode","hrtime","TextDecoder","uint16","uint8","NUM_BYTES_STRING_LENGTH","specs","spec","quantization","quantization_1","DTYPE_VALUE_SIZE_MAP","byteBuffer","quantizationSizeFactor","quantizedArray","Float32Array","name_2","Int32Array","size_1","byteLength","dtypeFactor","specs_1","str","Buffer","buffers","totalByteLength","trim","items","modelArtifacts","modelTopology","dateSaved","modelTopologyType","modelTopologyBytes","stringByteLength","weightSpecsBytes","weightSpecs","weightDataBytes","weightData","saveRouters","loadRouters","IORouterRegistry","saveRouter","getInstance","loadRouter","url","getHandlers","onProgress","handlerType","router","handler","validHandlers","URL_SCHEME_SUFFIX","managers","ModelStoreManagerRegistry","scheme","manager","getSchemes","sourceURL","destURL","deleteSource","loadHandlers","getLoadHandlers","loadHandler","saveHandlers","getSaveHandlers","saveHandler","sourceScheme","parseURL","sourcePath","sameMedium","load","getManager","removeModel","saveResult","modelArtifactsInfo","INFO_STORE_NAME","theWindow","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","shimIndexedDB","openRequest","db","createObjectStore","MODEL_STORE_NAME","keyPath","modelPath","getIndexedDBFactory","databaseAction","BrowserIndexedDB","open","onupgradeneeded","onsuccess","transaction","getRequest_1","modelTx","objectStore","close","onerror","oncomplete","modelArtifactsInfo_1","getModelArtifactsInfoForJSON","infoTx_1","infoStore_1","putInfoRequest_1","put","modelTx_1","putModelRequest","deleteInfoRequest","indexedDBRouter","startsWith","URL_SCHEME","registerSaveRouter","registerLoadRouter","tx","getAllInfoRequest","getAll","BrowserIndexedDBManager","infoTx","infoStore","getInfoRequest","deleteModelData_1","deleteModelRequest","registerManager","PATH_PREFIX","INFO_SUFFIX","MODEL_TOPOLOGY_SUFFIX","WEIGHT_SPECS_SUFFIX","WEIGHT_DATA_SUFFIX","MODEL_METADATA_SUFFIX","PATH_SEPARATOR","topology","modelMetadata","localStorage","LS","getModelKeys","setItem","useNodeBuffer","buf","String","format","generatedBy","convertedBy","userDefinedMetadata","removeItem","BrowserLocalStorage","getItem","metadataString","metadata","weightDataBase64","byteOffset","atob","localStorageRouter","prefix","suffix","getModelPathFromKey","BrowserLocalStorageManager","DEFAULT_JSON_EXTENSION_NAME","DEFAULT_WEIGHT_DATA_EXTENSION_NAME","fileNamePrefix","BrowserDownloads","DEFAULT_FILE_NAME_PREFIX","modelTopologyFileName","weightDataFileName","weightsURL","URL","createObjectURL","paths","modelTopologyAndWeightManifest","weightsManifest","modelTopologyAndWeightManifestURL","jsonAnchor_1","jsonAnchor","download","href","defer","dispatchEvent","weightDataAnchor_1","weightDataAnchor","files","weightFiles","jsonReader","onload","event","modelJSON","pathToFile","checkManifestAndWeightFiles","perFileBuffers","weightsGroup","weightFileReader","concatenateArrayBuffers","readAsArrayBuffer","jsonFile","readAsText","BrowserFiles","manifest","fileNames","file","manifest_1","basename","basenames","pathBasename","promises","startFraction","endFraction","promise","resolvedPromise","fraction","fetchURLs","loadOptions","fetchFunc","requests","fetchURL","requestInit","isBinary","fetchStartFraction","fetchEndFraction","monitorPromisesProgress","response","arrayBuffer","bufferStartFraction","bufferEndFraction","bufferPromises","fetchWeightsFunction","filePathPrefix","weightNames","groupIndicesToFetchMap","groupWeightsToFetch","weightsFound","allManifestWeightNames","manifestGroupConfig","groupIndex","weightsEntry","weightsBytes","rawDtype","enqueueWeightsForFetchingFn","manifestEntry","groupOffset","sizeBytes","weightName","weightIndex","weightsNotFound","accumulator","shouldFetch","fetchUrls","groupIndicesToFetch","filepath","fetchUrl","weightsTensorMap","bufferIndexOffset","groupBytes","numBuffers","groupByteBuffer","groupBuffer","groupBufferOffset","i_2","decodeWeights","nameToTensorMap","weightPathPrefix","DEFAULT_METHOD","append","ok","responses","HTTPRequest","modelConfigRequest","json","modelConfig","loadWeights","results","weightPath","lastIndexOf","lastSearchParam","lastSlash","pathPrefix","weightsManifest_1","entry","loadWeightsAsArrayBuffer","match","URL_SCHEME_REGEX","urlItem","isHTTPScheme","http","httpRouter","group","dataPromises","names","totalNumBytes","bytesOfLength","utf8bytes","normalizedXs","concatenateTypedArrays","trainingConfig","arguments","weightsLoaderFactory","loudRouter","cloneModelInternal","schemes","schemes_1","listModels","schemeOut","schemeAndPath","confusionMatrix","confusionMatrix_","oneHotPredictions","fromPixels_","isImageData","isCanvasLike","isPixelData","readyState","getImageData","numPixels","img","$img","minTensor","maxTensor","minVals","maxVals","ctx","imageData","putImageData","className","Serializable","cls","classNameMap","SerializationMap","getMap","fromConfig","register","TEST_EPSILON_FLOAT32","TEST_EPSILON_FLOAT16","actual","expected","predicate","checkClassType","bType","aType","expectedShape","actualShape","expectedFlat","actualFlat","testEpsilon","expectArraysPredicate","fail","areClose","low","high","expect","toEqual","Optimizer","returnCost","applyGradients","gradArray","iterations_","iterations","weightValues","getClassName","minimize","computeGradients","learningRate","rho","AdadeltaOptimizer","variableGradients","accumulatedGrads","originalName","accumulatedUpdates","accumulatedUpdate","accumulatedGrad","newAccumulatedUpdate","newAccumulatedGrad","incrementIterations","saveIterations","variables","extractIterations","variableCount","registerClass","initialAccumulatorValue","AdagradOptimizer","beta1","beta2","accBeta1","accBeta2","AdamOptimizer","varNames","oneMinusAccBeta2","accumulatedFirstMoment","accumulatedSecondMoment","secondMoment","newFirstMoment","firstMoment","newSecondMoment","biasCorrectedFirstMoment","oneMinusAccBeta1","biasCorrectedSecondMoment","iteration","AdamaxOptimizer","lr","accumulatedWeightedInfNorm","weightedInfNorm","ut0","ut1","newWeightedInfNorm","setLearningRate","SGDOptimizer","momentum","useNesterov","MomentumOptimizer","accumulations","newAccumulation","accumulation","centered","RMSPropOptimizer","accumulatedMeanSquares","accumulatedMoments","accumulatedMeanGrads","accumulatedMeanSquare","newAccumulatedMeanGrad","accumulatedMeanGrad","newAccumulatedMoments","newAccumulatedMeanSquare","newAccumulatedMeanSquare_1","OptimizerConstructors","train","sgd","adadelta","adagrad","rmsprop","adamax","adam","delayCallback","requestAnimationFrame","setImmediate","ops","_epsilon","setPrototypeOf","AttributeError","prototype","tslib_1.__extends","Error","RuntimeError","ValueError","NotImplementedError","AssertionError","IndexError","pyListRepeat","newArray","refernce","array_1","singletonOrArray","toList","toSnakeCase","insecure","toCamelCase","identifier","p1","_GLOBAL_CUSTOM_OBJECTS","serializeKerasObject","dict","getConfig","deserializeKerasObject","moduleObjects","customObjects","printableModuleName","fastWeightInit","customObjectsCombined","_f","backupCustomObjects","_h","_g","convertNDArrayScalarsInConfig","configItem","fields_1","field","returnObj","_k","_j","reverseNumberCompare","numberCompare","unique","xs_1","isObjectEmpty","hasOwnProperty","checkStringTypeUnionValue","label","checkArrayTypeAndLength","expectedType","minLength","maxLength","assertPositiveInteger","formatAsFriendlyString","mapActivationToFusedKernel","activationName","calcL2Norms","tfc.sqrt","tfc.sum","tfc.mulStrict","Constraint","serialization","defaultMaxValue","defaultAxis","MaxNorm","norms","desired","tfc.clipByValue","tfc.mul","tfc.div","tfc.add","UnitNorm","NonNeg","tfc.relu","minValue","defaultMinValue","defaultRate","MinMaxNorm","CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP","maxNorm","minMaxNorm","nonNeg","unitNorm","serializeConstraint","constraint","deserializeConstraint","getConstraint","VALID_DATA_FORMAT_VALUES","VALID_PADDING_MODE_VALUES","VALID_POOL_MODE_VALUES","VALID_BIDIRECTIONAL_MERGE_MODES","nameMap","Map","checkDataFormat","checkPaddingMode","checkPoolMode","_nameScopeStack","_nameScopeDivider","nameScope","getScopedTensorName","tensorName","isValidTensorName","getUniqueTensorName","scopedName","tensorNameRegex","RegExp","parseInt","arrayProd","toArray1D","tfc.min","tfc.max","sliceAlongFirstAxis","tfc.slice1d","tfc.slice2d","tfc.slice3d","tfc.slice4d","tfc.slice","sliceAlongLastAxis","sliceAlongAxis","concatenate","tfc.concat","concatAlongFirstAxis","tfc.concat1d","tfc.concat2d","tfc.concat3d","tfc.concat4d","tfc.tile","stddev","tfc.randomNormal","ySecondLastDim","tfc.fused","reshapeBias","aFirstDims","aLastDim","bLastDim","yOtherDims","reference","tfc.gather","xRank","biasShape","biasAdd","dropout","level","tfc.dropout","inTrainPhase","alt","training","VALID_FAN_MODE_VALUES","VALID_DISTRIBUTION_VALUES","Initializer","Zeros","Ones","Constant","DEFAULT_MINVAL","DEFAULT_MAXVAL","RandomUniform","DEFAULT_MEAN","DEFAULT_STDDEV","RandomNormal","K.randomNormal","TruncatedNormal","gain","Identity","mode","checkFanMode","distribution","checkDistribution","VarianceScaling","fans","fanIn","fanOut","receptiveFieldSize","computeFans","GlorotUniform","GlorotNormal","HeNormal","HeUniform","LeCunNormal","LeCunUniform","DEFAULT_GAIN","Orthogonal","linalg","INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP","constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","orthogonal","varianceScaling","deserializeInitializer","serializeInitializer","initializer","getInitializer","_nextUniqueTensorId","getNextUniqueTensorId","_uidPrefixes","getUid","isArrayOfShapes","normalizeShapeList","getExactlyOneTensor","getExactlyOneShape","countParamsInWeights","weights_1","DEFAULT_VARIABLE_NAME_PREFIX","trainable_","tfc.variable","LayerVariable","assertNotDisposed","checkShapesMatch","batchGetValue","batchSetValue","variablesAndValues","variableAndValue","ndim","maxNDim","minNDim","sourceLayer","callArgs","outputTensorIndex","_nextNodeID","outboundLayer","inboundLayers","nodeIndices","tensorIndices","inputTensors","outputTensors","inputMasks","outputMasks","layer","outboundNodes","inboundNodes","Node","inboundNames","_nextLayerID","activityRegularizer","inputSpec","supportsMasking","_trainableWeights","_nonTrainableWeights","_losses","_updates","_built","generic_utils.toSnakeCase","batchInputShape","inputDType","initialWeights","_refCount","fastWeightInitDuringBuild","Layer","nodeIndex","attrName","generic_utils.singletonOrArray","getNodeAtIndex","lossFn","built","trainableWeights","nonTrainableWeights","_stateful","stateful","generic_utils.toList","inputIndex","xShapeAtAxis","specDim","kwargs","_callHook","callHook","inputsList","allAreSymbolic","inputsList_1","SymbolicTensor","noneAreSymbolic","inputsList_2","assertInputCompatibility","xElem","build","setWeights","outputListCopy","outputList_1","inputTensors_1","collectInputShape","computeOutputShape","warnOnIncompatibleInputShape","addInboundNode","dimMismatch_1","dimension","allOutputShapes","shapeString","variable_utils.countParamsInWeights","trainableOnly","weightValueTuples","paramValues","pv","regularizer","_addedWeightNames","initValue","addLoss","TypeError","maskElement","inputTensorList","types_utils.normalizeShapeList","inputTensorList_1","tensorIndex","numDisposedVariables","disposeWeights","refCountAfterDispose","ModelLoggingVerbosity","sparse","inputTensor","InputLayer","Input","resolveScalarsInLogs","logs","scalarsToDispose","valueScalar","disposeTensorsInLogs","DEFAULT_YIELD_EVERY_MS","BaseCallback","epoch","model","callbacks","queueLength","CallbackList","setParams","setModel","onEpochBegin","onEpochEnd","onBatchBegin","onBatchEnd","onTrainBegin","onTrainEnd","BaseLogger","totals","this_1","oldTotalsToDispose","this_2","metrics","History","history","valueArray","yieldEvery","onYield","maybeWait","waitMs","lastResult","lastTime","generic_utils.debounce","bind","trainBegin","trainEnd","epochBegin","epochEnd","batchBegin","batchEnd","yield","CustomCallback","nextFrame","currentEpoch","standardizeCallbacks","callbackConfig","CallbackConstructorRegistry","verbosityLevel","callbackConstructor","checkForDuplicate","constructors","levelName","ctor","configureCallbacks","epochs","initialEpoch","numTrainSamples","stepsPerEpoch","doValidation","callbackMetrics","actualCallbacks","createCallbacks","callbackList","samples","steps","deserialize","l2Normalize","squareSum","K.square","epsilonTensor","tfc.fill","tfc.maximum","yTrue","yPred","tfc.mean","tfc.sub","meanAbsoluteError","tfc.abs","meanAbsolutePercentageError","clippedTrue","MAX_VALUE","absResult","categoricalCrossentropy","fromLogits","tfc.softmax","outputSum","tfc.neg","tfc.log","sparseCategoricalCrossentropy","flatTarget","tfc.floor","math_utils.arrayProd","K.flatten","tfc.oneHot","binaryCrossentropy","reluLogits","negAbsLogits","sigmoidCrossEntropyWithLogits","cosineProximity","trueNormalized","predNormalized","trueXPred","lossesMap","meanSquaredLogarithmicError","clippedPred","firstLog","secondLog","squaredHinge","maxResult","hinge","categoricalHinge","pos","logcosh","log2","predictionDiff","logcoshResult","tfc.softplus","kullbackLeiblerDivergence","poisson","logPred","identifierOrFn","errMsg","includes","binaryAccuracy","tfc.onesLike","yPredThresholded","K.cast","tfc.greater","tfc.equal","categoricalAccuracy","tfc.argMax","truePositives","tfc.logicalAnd","tp","fp","falsePositives","denominator","tfc.where","recall","falseNegatives","lossBinaryCrossentropy","sparseCategoricalAccuracy","categoricalCrossentropyLoss","sparseCategoricalCrossentropyLoss","metricsMap","mse","MSE","mae","MAE","mape","MAPE","cosine","getLossOrMetricName","fnName","MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH","checkUserDefinedMetadata","modelName","checkSize","getPrototypeOf","plainObjectCheck","keys_1","x_1","xType","printSummary","lineLength","positions","printFn","relevantNodes","sequentialLike","nodesByDepth","nodes","nodesByDepth_1","depthNodes","layers","flag","isModelSequentialLike","toDisplay","printRow","printLayerSummary","printLayerSummaryWithConnections","checkTrainableWeightsConsistency","trainableCount","collectedTrainableWeights","countTrainableParams","nonTrainableCount","countParams","connections","inboundLayer","inboundLayerIndex","inboundTensorIndex","firstConnection","isArrayItemInputOrOutputName","convertPythonicToTs","pythonicConfig","generic_utils.toCamelCase","tsArray","arrayLength","tsDict","pythonicKey","pythonicValue","tsKey","feeds","FeedDict","id2Value","id2Mask","feeds_1","feed","assertFeedCompatibility","name2Id","cachedSorted","cachedRecipientCounts","execute","fetches","feedDict","probe","arrayFetches","fetchArray","outputNames","finalOutputs","feedNames","outputNames_1","outputName","getValue","maxNumTensors","minNumTensors","recipientCounts","fetchAndFeedKey","finalSorted","finalRecipientMap","getTopologicalSortAndRecipientCountsForOneFetch","recipientMap","visited","Set","fetches_1","sorted_1","symbolicTensor","recipient","recipientMap2Counts","getTopologicalSortAndRecipientCounts","internalFeedDict","symbolic","srcLayer","inputValues","tensorsToDispose","maskExists","getMask","hasKey","outputMask","computeMask","layerOutputs","getNodeOutputs","outputSymbolicTensors","disposeMasks","marks","topIsMarked","getOutputAt","standardizeClassWeights","classWeight","xWeight","weightType","numOutputs","output_1","standardizeSampleOrClassWeights","standardizeWeights","sampleWeight","sampleWeightMode","yClasses","yClassIndices","classSampleWeight_1","classIndex","sampleWeights","DEFAULT_VALIDATION_BATCH_SIZE","standardizeDataIteratorOutput","iteratorOut","iteratorOutObj","tfc.util","flattenedXs","flattenTensorOrArrayOrMap","inputNames","flattenedYs","xIndex","yIndex","inputOrOutput","tfc.Tensor","names_1","fitDataset","dataset","hasBatchesPerEpoch","batchesPerEpoch","optimizer","validationSplit","isTraining","validationData","valXs","valYs","isDatasetObject","validationBatches","standardizeTensorValidationData","trainFunction","makeTrainFunction","outLabels","getDedupedMetricsNames","getStepsPerEpoch","history_1","stopTraining_","iterator","epochLogs","stepsDone","batchIndex","dataIterator","batchLogs","standardClassWeights","ins","tfc.dispose","tfc.keep","valOuts","evaluateDataset","evaluate","validationBatchSize","metricsNames","syncData","checkBatchSize","sliceArrays","sliceArraysByIndices","tfc.tidy","makeBatches","batchStart","fitTensors","checkBatchAxis","standardizeUserData","standardizedOuts","valIns","inputValX","inputValY","checkBatchAxis_1","valStandardized","valX","valY","splitAt","originalBatchSize","validationSteps","valFunction","makeTestFunction","testFunction","valF","shuffle","checkNumSamples","indexArray","epochIndexArray1D_1","batches_1","batchIds","insBatch","testLoop","fitLoop","disposeNewTensors","ensureTensorsRank2OrHigher","refTensors","oldTensorIds","oldTensor","isDataArray","isDataDict","isDataTensor","standardizeInputData","exceptionPrefix","gotUnexpectedData","refDim","checkInputData","LayersModel","loss","optimizer_","optimizerMap","Adagrad","Adadelta","Adam","Adamax","RMSProp","SGD","optimizers.getOptimizer","isOptimizerOwned","lossFunctions","theLosses","losses.get","lossFunction_1","name_3","name_4","feedOutputNames","feedOutputShapes","feedLossFns","internalOutputShapes","name_5","skipTargetIndices","metricsTensors","nestedMetrics","wrappedMetrics","outputMetrics","collectMetrics","metricName","accFn","weightedMetricFn","metric","losses.binaryCrossentropy","Metrics.binaryAccuracy","Metrics.binaryCrossentropy","losses.sparseCategoricalCrossentropy","Metrics.sparseCategoricalAccuracy","Metrics.sparseCategoricalCrossentropy","Metrics.categoricalAccuracy","Metrics.categoricalCrossentropy","metricFn","Metrics.get","Metrics.getLossOrMetricName","metricResult","outputIndex","metricTensor","metrics_1","standardizeUserDataXY","hasBatches","isLazyIteratorObject","numExamples","xsAndYs_1","batchOuts","batchSize_1","batchOut","oldScalar","stepsName","outputsIsArray","retrieveSymbolicTensors","tensorValue","executeOutputs","symbolicTensorNames","outputsRemaining","layerOutputNames","remainingNames_1","outsBatches","xsRank2OrHigher","feedInputShapes","predictLoop","setX","setY","checkArrayLengths","feedInputNames","lossFns","keyLosses","losses.meanSquaredError","losses.categoricalCrossentropy","slicedYShape","slicedShape","targetDim","checkLossAndTargetCompatibility","standardXs","standardYs","standardSampleWeights","classWeights","K.sliceAlongFirstAxis","dedupedOutLabels","newLabel","lossValues","metricsValues","totalLoss","meanLoss","weightedMetric","calculateLosses","regularizerLoss","valOutputs","lossFunction","meanMetric","standardizeOut","losses_1","namedWeights","getWeights","numTensorsBeforeOptmizerDisposal","tfc.memory","lossNames","losses_2","outputNames_2","metricsIdentifiers","getLossIdentifiers","getMetricIdentifiers","optimizer_config","class_name","weighted_metrics","loss_weights","sample_weight_mode","lossEntry","compile","handlerOrURL","handlers","io","encodeWeights","getNamedWeights","weightDataAndSpecs","returnString","unusedArg","toJSON","includeOptimizer","getTrainingConfig","optimizerWeightData","optimizerWeightSpecs","generic_utils.unique","inputLayers","inputLayersNodeIndices","inputLayersTensorIndices","outputLayers","outputLayersNodeIndices","outputLayersTensorIndices","internalContainerRefs","generic_utils.assert","internalInputShapes","nodesDepths","nodeIDToNode","layersDepths","layerIDToLayer","layerIndices","nodesInDecreasingDepth","buildMapOfGraph","finishedNodes","nodesInProgress","containerNodes","Container","nodeKey","numInboundLayers","layer_1","nodeIndex_1","tensorIndex_1","reversedNodesInDecreasingDepth_1","previousDepth","inboundNode","previousDepth_1","nodeID","layersByDepth","layerID","depthKeys","generic_utils.reverseNumberCompare","depthKeys_1","layersForDepth","layersForDepth_1","computableTensors","layersWithCompleteInput","depthKeys_2","_l","_o","_m","_q","_p","_s","_r","allNames","numOccurrences","allNames_1","_t","strict","nameToWeight","totalWeightsCount","unsetNames","theConfig","kerasVersion","unused","convertTsToPythonic","tsConfig","pyArray","pyDict","tsValue","updatedConfig","masks","generic_utils.pyListRepeat","runInternalGraph","layersToOutputShapes","inputShape_1","depthKeys_3","nodes_1","inputShapes_1","nodeIndex_2","inputShape_2","outputShapes_1","outputShapeKeys","tensorMap","depthKeys_4","nodes_2","referenceInputTensors","referenceOutputTensors","computedData","referenceInputTensors_1","computedTensors","computedMasks","outputTensors_1","outputMasks_1","computedTensor","computedMask","keptNodes","nodeConversionMap","originalNodeIndex","buildNodeConversionMap","layerConfigs","layerClassName","layerConfig","filteredInboundNodes","nodeData","newNodeIndex","modelInputs","modelOutputs","createdLayers","unprocessedNodes","addUnprocessedNode","processNode","nodeData_1","inputData","inboundLayerName","inboundNodeIndex","processLayer","layerData","layerName","deserializeLayer","setFastWeightInitDuringBuild","layersFromConfig","layersFromConfig_1","generic_utils.isObjectEmpty","layersFromConfig_2","currentUnprocessedNodesForLayer","currentUnprocessedNodesForLayer_1","inputLayersFromConfig_1","layerOutputTensors","outputLayersFromConfig_1","resetStates","loadLayersModelInternal","pathOrIOHandler","browserHTTPRequest","artifacts","model_config","loadTrainingConfig","setUserDefinedMetadata","name2Tensor","modelWeights","optimizerWeights","decodeModelAndOptimizerWeights","loadLayersModelFromIOHandler","Sequential","modelLayer","isLayerModelInstance","checkShape","getSourceInputs","sourceTensors","previousSources_1","outputTensor","lastLayerIndex","summary","predict","predictOnBatch","fit","trainOnBatch","configArray","extraModelConfig","configArray_1","stopTraining","Activation","Elu","tfc.elu","K.elu","Selu","tfc.selu","Relu","Relu6","tfc.minimum","Linear","Sigmoid","tfc.sigmoid","HardSigmoid","K.hardSigmoid","Softplus","Softsign","K.softsign","Tanh","tfc.tanh","Softmax","LogSoftmax","tfc.logSoftmax","serializeActivation","deserializeActivation","getActivation","assertObjectArgs","l1","l2","hasL1","hasL2","L1L2","regularization","Regularizer","REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP","l1l2","serializeRegularizer","deserializeRegularizer","getRegularizer","ReLU","baseConfig","DEFAULT_ALPHA","LeakyReLU","alphaInitializer","DEFAULT_ALPHA_INITIALIZER","alphaRegularizer","alphaConstraint","sharedAxes","PReLU","paramShape","addWeight","InputSpec","theta","DEFAULT_THETA","ThresholdedReLU","softmaxActivation","DEFAULT_AXIS","normalizeArray","singleValue","convOutputLength","inputLength","outputLength","deconvLength","strideSize","kernelSize","preprocessConv2DInput","tfc.transpose","preprocessConv3DInput","conv2dWithBiasActivation","BaseConv","verifyArgs","generic_utils.assertPositiveInteger","useBias","biasInitializer","DEFAULT_BIAS_INITIALIZER","biasConstraint","biasRegularizer","generic_utils.checkArrayTypeAndLength","Conv","filters","kernelInitializer","DEFAULT_KERNEL_INITIALIZER","kernelConstraint","kernelRegularizer","channelAxis","inputDim","kernelShape","biasValue","fusedActivationName","generic_utils.mapActivationToFusedKernel","tfc.conv1d","K.biasAdd","conv1dWithBias","tfc.conv3d","conv3dWithBias","newSpace","space","Conv2D","Conv3D","Conv2DTranspose","hAxis","wAxis","kernelH","kernelW","strideH","strideW","tfc.conv2dTranspose","heightAxis","widthAxis","SeparableConv2D","depthMultiplier","depthwiseInitializer","DEFAULT_DEPTHWISE_INITIALIZER","depthwiseRegularizer","depthwiseConstraint","pointwiseInitializer","DEFAULT_POINTWISE_INITIALIZER","pointwiseRegularizer","pointwiseConstraint","SeparableConv","depthwiseKernelShape","pointwiseKernelShape","depthwiseKernel","pointwiseKernel","tfc.separableConv2d","Conv1D","cropping","Cropping2D","K.sliceAlongAxis","DEFAULT_SIZE","UpSampling2D","resized","DepthwiseConv2D","tfc.depthwiseConv2d","outFilters","outRows","outCols","Dropout","invokeCallHook","noiseShape_1","getNoiseShape","K.inTrainPhase","K.dropout","SpatialDropout1D","units","Dense","inputLastDim","K.dot","Flatten","K.batchFlatten","RepeatVector","K.repeat","isUnknown","Reshape","errorMsg","finalShape","known","unknown","originalSize","anyUnknownDims","fixUnknownDimension","expectedSortedIndices","dimsIncludingBatch","Permute","maskValue","Masking","booleanMask","outputDim","embeddingsInitializer","DEFAULT_EMBEDDINGS_INITIALIZER","embeddingsRegularizer","embeddingsConstraint","maskZero","Embedding","embeddings","inLens","K.gather","Merge","computeElementwiseOpOutputShape","batchSizes","allRanks","reshapeRequired","reshapedInputs","inputDims","mathUtils.max","inputs_1","xNDim","K.expandDims","mergeFunction","transposed","inputs_2","xTransposed","mathUtils.arrayProd","mathUtils.range","yNDim","yShape","tfc.expandDims","Add","Multiply","Average","Maximum","Minimum","Concatenate","allNoneShape","inputShape_3","shapeSet","shapeWithoutConcatAxis","exists","shapeSet_1","K.concatenate","allNullMasks","concatenatedMasks","tfc.all","interpretAxis","normalize","Dot","interpretAxes","axesArray","diffShape","adjX","adjY","squeezeAxes","batchDot","GaussianNoise","GaussianDropout","AlphaDropout","_getNoiseShape","alphaP","keptIdx","gamma","tfc.batchNorm2d","tfc.batchNorm3d","tfc.batchNorm4d","normalizeBatchInTraining","math_utils.range","meanAndVariance","tfc.moments","regularNormalizeBatchInTraining","broadcastMean","broadcastVariance","broadcastGamma","broadcastBeta","broadcastNormalizeBatchInTraining","center","betaInitializer","gammaInitializer","movingMeanInitializer","movingVarianceInitializer","betaConstraint","gammaConstraint","betaRegularizer","gammaRegularizer","BatchNormalization","movingMean","movingVariance","broadcastShape","sortedReductionAxes","needsBroadcasting","broadcastMovingMean","broadcastMovingVariance","normedTraining","doMovingAverage","origValue","updateDelta","LayerNormalization","nDims","broadcast","momentsTiling","scaleOffsetTiling","heightPadding","widthPadding","ZeroPadding2D","pattern","tfc.pad","spatial2dPadding","pool2d","poolSize","poolMode","paddingString","tfc.maxPool","tfc.avgPool","tfc.maxPool3d","tfc.avgPool3d","Pooling1D","poolingFunction","tfc.squeeze","MaxPooling1D","AveragePooling1D","Pooling2D","MaxPooling2D","AveragePooling2D","Pooling3D","depths","MaxPooling3D","AveragePooling3D","GlobalPooling1D","GlobalAveragePooling1D","GlobalMaxPooling1D","GlobalPooling2D","GlobalAveragePooling2D","GlobalMaxPooling2D","standardizeArgs","initialState","constants","numConstants","toListOrNull","rnn","stepFunction","initialStates","goBackwards","unroll","needPerStepOutputs","tfc.reverse","lastOutput","perStepMasks","perStepOutputs","states","timeSteps","perStepInputs","tfc.unstack","currentInput","stepOutputs","maskedOutputs","stepMask","negStepMask","tfc.stack","cell","StackedRNNCells","cells","stateSize","returnSequences","returnState","stateSpec","states_","keptStates","RNN","stateShape","stateSize_1","stateMask","numStates","stepInputShape","tfc.zeros","standardized","additionalInputs","additionalSpecs","initialState_1","fullInput","fullInputSpec","originalInputSpec","getInitialState","cellCallKwargs","rnnOutputs","K.tile","cellConfig","DEFAULT_ACTIVATION","recurrentInitializer","DEFAULT_RECURRENT_INITIALIZER","recurrentRegularizer","recurrentConstraint","math_utils.min","math_utils.max","recurrentDropout","dropoutMask","recurrentDropoutMask","SimpleRNNCell","recurrentKernel","prevOutput","generateDropoutMask","dpMask","recDpMask","RNNCell","SimpleRNN","recurrentActivation","DEFAULT_RECURRENT_ACTIVATION","implementation","GRUCell","hTMinus1","hh","matrixX","recurrentKernelValue","rk1","rk2","matrixInner","xZ","xH","recurrentZ","recurrentR","recurrentH","GRU","implmentation","unitForgetBias","LSTMCell","capturedBiasInit_1","capturedUnits_1","CustomInit","bI","bF","bCAndH","K.concatAlongFirstAxis","cTMinus1","z0","z1","z2","z3","LSTM","nestedStates","callInputs","newNestedStates","cellStates","cellConfigs","tuples","numParams","inputWeights","droppedInputs","Wrapper","newConfig","TimeDistributed","childInputShape","childOutputShape","timesteps","DEFAULT_BIDIRECTIONAL_MERGE_MODE","forwDict","forwardLayer","backDict","backwardLayer","mergeMode","checkBidirectionalMergeMode","_trainable","Bidirectional","numWeights","numeightsOver2","layerShapes","stateSpecs","isSymbolicTensor","additionalInputs_1","yRev","forwardState","backwardState","rnnLayer","averagePooling1d","averagePooling2d","averagePooling3d","globalMaxPooling1d","globalMaxPooling2d","maxPooling1d","maxPooling2d","globalMaxPool1d","globalMaxPool2d","maxPool1d","maxPool2d","metrics.binaryAccuracy","metrics.binaryCrossentropy","metrics.sparseCategoricalAccuracy","metrics.categoricalAccuracy","metrics.categoricalCrossentropy","metrics.precision","metrics.recall","losses.cosineProximity","losses.meanAbsoluteError","losses.meanAbsolutePercentageError","modelAndWeightsConfig","uniqueWeightValues","regularizers.l1","regularizers.l2","Callback","currVal","prevVal","restoreBestWeights","monitor","minDelta","patience","baseline","monitorFunc","EarlyStopping","wait","stoppedEpoch","best","current","getMonitorValue","monitorValue","DataType","SaverDef","earlyStopping","CheckpointFormatVersion","CUSTOM_OPS","getRegisteredOp","getParamValue","paramName","context","inputParam","inputParams","inputIndexStart","inputIndexEnd","getTensor","attrParam","attrParams","tensorsMap","nodeName","contextId","currentContextIds","find","getNodeNameWithContextId","getNodeNameAndIndex","currentContextId","parseNodeName","tfOpName","category","tfName","notSupported","tfDeprecatedName","arithmetic","basicMath","control","convolution","creation","dynamic","evaluation","logical","graph","matrices","normalization","sliceJoin","transformation","mappersJson","opMappers","mapper","OperationMapper","_instance","signature","placeholders","mapNode","inputNodeNameToKey","outputNodeNameToKey","mapSignatureEntries","allNodes","children","signatureKey","curr","newNode","rawAttrs","getStringParam","getStringArrayParam","getNumberParam","getNumericArrayParam","getBoolParam","getBoolArrayParam","getTensorShapeParam","getTensorShapeArrayParam","getDtypeParam","getDtypeArrayParam","parseStringParam","keepCase","decodeBase64","def","parseDtypeParam","tensorflow.DataType","DT_FLOAT","DT_INT32","DT_INT64","DT_BOOL","DT_DOUBLE","DT_STRING","parseTensorShapeParam","unknownRank","getInput","getAttr","NodeValueImpl","executeOp","tfc.addN","tfc.mod","tfc.divNoNan","tfc.floorDiv","tfc.pow","tfc.squaredDifference","tfc.acos","tfc.acosh","tfc.asin","tfc.asinh","tfc.atan","tfc.atan2","tfc.atanh","tfc.ceil","tfc.complex","tfc.cos","tfc.cosh","tfc.erf","tfc.exp","tfc.expm1","tfc.log1p","tfc.imag","tfc.reciprocal","tfc.real","tfc.round","tfc.sin","tfc.sign","tfc.sinh","tfc.square","tfc.tan","tfc.rsqrt","tfc.prod","tfc.leakyRelu","tfc.prelu","maxSize","elementShape","identicalElementShapes","dynamicSize","clearAfterRead","TensorArray","nextId","closed_","tensorWithState","cleared","assertShapesMatchAllowUndefinedSize","written","readMany","writeMany","totalLength","cumulativeLengths","elementPerRow","indices_1","sizes","shapesEqualAllowUndefinedSize","tfc.conv2d","extraOp","activationFunc","isBiasAdd","isPrelu","isBatchNorm","numArgs","biasArg","preluArg","tfc.linspace","tfc.multinomial","tfc.ones","tfc.randomUniform","tfc.range","tfc.truncatedNormal","tfc.zerosLike","tfc.topk","tfc.tensor1d","tfc.scalar","summarize","tfc.image","tfc.notEqual","tfc.greaterEqual","tfc.less","tfc.lessEqual","tfc.logicalNot","tfc.logicalOr","tfc.matMul","tfc.batchNorm","tfc.localResponseNormalization","tfc.sparseToDense","tfc.any","tfc.argMin","tfc.stridedSlice","mapped","sameShape","tfc.split","tfc.scatterND","tfc.gatherND","tfc.fft","tfc.ifft","tfc.rfft","tfc.irfft","tfc.cast","tfc.reshape","tfc.spaceToBatchND","tfc.batchToSpaceND","tfc.depthToSpace","arithmetic.executeOp","basicMath.executeOp","pred","data_1","frameId","enterFrame","exitFrame","nextIteration","tensorArray","addTensorArray","writeTensor","getTensorArray","readId","readIndex","gatherId","gatherIndices","gatherDtype","scatterId","scatterIndices","scatterTensor","concatId","concatTensorArray","concatDtype","splitId","splitTensor","lengths","sizeId","closeId","clearAndClose","control.executeOp","convolution.executeOp","creation.executeOp","nonMaxSuppressionWithScoreAsync","nonMaxSuppressionAsync","tfc.whereAsync","tfc.setdiff1dAsync","dynamic.executeOp","evaluation.executeOp","image.executeOp","graph.executeOp","logical.executeOp","matrices.executeOp","normalization.executeOp","reduction.executeOp","sliceJoin.executeOp","spectral.executeOp","transformation.executeOp","opMapper","customExecutor","weightMap","tensorArrayMap","frameName","iterationId","rootContext","generateCurrentContextIds","ExecutionContext","_currentContextIds","contextIdforContexts","lastId","newFrame","getExecutionSubgraph","usedNodes","missingInputs","dynamicNode","syncInputs","inputNodeNames","frontier","isControlFlow","isDynamicShape","child","CONTROL_FLOW_OPS","DYNAMIC_SHAPE_OPS","_outputs","_inputs","_signature","GraphExecutor","_weightMap","weightIds","sortedInputs","sortedOutputs","SEPERATOR","executionInfo","outNames","inNames","orderedNodes","getNodesInTopologicalOrder","mapInputs","checkInputs","checkInputShapeAndType","mapOutputs","checkOutputs","inputNodes","outputNodes","compilationKey","getCompilationKey","compiledMap","tensorsToKeep","getFrozenTensorIds","intermediateTensorConsumerCount","checkTensorForDisposal","ids","getTensorsForCurrentContenxt","executeWithControlFlow","outputIds","inputIds","currentContext","added","processStack","missingOutputs","alternativeMsg","currentContext_1","processChildNodes","childNode","shape_1","notInGraph","normalizedName","TFHUB_SEARCH_PARAM","DEFAULT_MODEL_NAME","modelUrl","GraphModel","executor","findIOHandler","producer","minConsumer","Instance","transformGraph","convertTensorMapToTensorsMap","normalizeInputs","normalizeOutputs","executeAsync","newMap","Date","Uint8Array","deepMapInternal","mapFn","containedIn","recurse","isIterable","mappedIterable","childResult","deepZip","zipFn","deepZipInternal","zipToList","deepMapAndAwaitAll","mappedValue","ArrayBuffer","isView","tf.Tensor","deepClone","deepMap","cloneIfTensor","capacity","RangeError","doubledCapacity","RingBuffer","isFull","wrap","values_1","isEmpty","relativeIndex","GrowingRingBuffer","INITIAL_CAPACITY","expand","newCapacity","newData","iteratorFromItems","ArrayIterator","iteratorFromFunction","FunctionCallIterator","ZipMismatchMode","LazyIterator","stream","prefetch","shouldContinue","ErrorHandlingLazyIterator","FilterIterator","transform","MapIterator","AsyncMapIterator","serial","FlatmapIterator","resolveFully","serialMapAsync","resolveWhile","smallLastBatch","RowMajorBatchIterator","rowMajorBatch","baseErrorHandler","ChainedIterator","TakeIterator","SkipIterator","bufferSize","PrefetchIterator","ShuffleIterator","SerialIterator","trav","nextFn","upstream","lastRead","serialNext","maxCount","skipped","tf.dispose","enableSmallLastBatch","tf.tensor_util","isTensorInList","e_1","inputTensors_2","outputQueue","OneToManyIterator","pump","mappedArray","pushAll","inputTensors_3","iterators","moreIterators","upstreamSummaries","readFromChain","iteratorResult","handleErrors","itemResult","mismatchMode","FAIL","ZipIterator","afterState","getNext","numIterators","iteratorsDone","SHORTEST","LONGEST","currentPromise","nextState","refill","tf.util","randomInt","upstreamExhausted","chosenIndex","chooseIndex","shuffleExcise","Dataset","datasetFromIteratorFn","columnMajorBatch","deepBatchConcat","tf.tidy","forEachAsync","tf.deprecationWarn","mapAsync","baseIterators","iteratorFromConcatenated","take","skip","reshuffleEachIteration","seed2","toArray","toArrayForTest","iteratorFn","class_1","isPrimitive","canTensorify","tf.stack","tf.tensor","batchConcat","TextLineDataset","inputIterator","decodeUTF8","STATE_OUT","STATE_FIELD","STATE_QUOTE","STATE_QUOTE_AFTER_QUOTE","STATE_WITHIN_QUOTE_IN_QUOTE","csvConfig","hasHeader","fullColumnNames","columnNames","columnConfigs","configuredColumnsOnly","delimWhitespace","delimiter","CSVDataset","columnNamesValidated","setColumnNames","maybeReadHeaderLine","columnNamesFromFile","counts","countAcc","duplicateNames","firstElement","firstLine","parseRow","makeDataElement","features","parsedValue","default","required","isLabel","valueAsNum","getBoolean","validateElementCount","readOffset","readLength","currentState","microphoneConfig","fftSize","fftSizeLog2","numFrames","numFramesPerSpectrogram","sampleRateHz","columnTruncateLength","audioTrackConstraints","smoothingTimeConstant","includeSpectrogram","includeWaveform","MicrophoneIterator","microphoneIterator","mediaDevices","getUserMedia","audio","video","ctxConstructor","AudioContext","webkitAudioContext","audioContext","sampleRate","streamSource","createMediaStreamSource","analyser","createAnalyser","connect","freqData","timeData","isClosed","getAudioData","audioDataQueue","flattenQueue","freqDataQueue","spectrogramTensor","getTensorFromAudioDataArray","timeDataQueue","waveformTensor","spectrogram","waveform","currentFrames","intervalID","setInterval","getFloatFrequencyData","getFloatTimeDomainData","clearInterval","disconnect","getTracks","queue","frameSize","webcamVideoElement","webcamConfig","needToResize","resize","resizeHeight","resizeWidth","cropBoxInd","centerCrop","widthCroppingRatio","heightCroppingRatio","widthCropStart","heightCropStart","widthCropEnd","heightCropEnd","cropBox","WebcamIterator","webcamIterator","facingMode","deviceId","srcObject","src","play","onloadedmetadata","fromPixels","cropAndResizeFrame","resizedImage","expandedImage","StringIterator","separator","SplitIterator","SplitIteratorImpl","chunkResult","carryover","ByteChunkIterator","Utf8Iterator","Utf8IteratorImpl","decoder","StringDecoder","chunk","File","Blob","chunkSize","FileChunkIterator","fileReader_1","FileReader","onabort","getRequestInitFromRequest","request","headers","credentials","cache","redirect","referrer","integrity","isLocalPath","FileDataSource","fs","readFileSync","DataSource","fileOptions","URLDataSource","urlString","uint8Array","statusText","urlChunkIterator","datasets","ds","iteratorFromZipped","iter","generator","gen","create","disposeVariables","findBackendFactory","checkGrads","profile","ready","removeBackend","gradients","registerCallbackConstructor","fromTFHub","opFunc"],"mappings":"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"}